
Arduino_sd_card2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c8  00800100  00003ff0  00004084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ff0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ca  008001c8  008001c8  0000414c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000414c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000417c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  000041bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000070bf  00000000  00000000  0000458c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001479  00000000  00000000  0000b64b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a7a  00000000  00000000  0000cac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001168  00000000  00000000  00010540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fa3  00000000  00000000  000116a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000087c7  00000000  00000000  0001264b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000530  00000000  00000000  0001ae12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
       8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
       c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      10:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      14:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      18:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      1c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      20:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      24:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      28:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      2c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      30:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      34:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      38:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__vector_14>
      3c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      40:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      44:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      48:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      4c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      50:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      54:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__vector_21>
      58:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      5c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      60:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      64:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	43 6c       	ori	r20, 0xC3	; 195
      6a:	6f 73       	andi	r22, 0x3F	; 63
      6c:	65 20       	and	r6, r5
      6e:	66 69       	ori	r22, 0x96	; 150
      70:	6c 65       	ori	r22, 0x5C	; 92
      72:	20 57       	subi	r18, 0x70	; 112
      74:	52 49       	sbci	r21, 0x92	; 146
      76:	54 45       	sbci	r21, 0x54	; 84
      78:	32 2e       	mov	r3, r18
      7a:	54 58       	subi	r21, 0x84	; 132
      7c:	54 00       	.word	0x0054	; ????

0000007e <__c.2596>:
      7e:	46 69 6c 65 20 77 72 69 74 65 20 57 52 49 54 45     File write WRITE
      8e:	32 2e 54 58 54 00                                   2.TXT.

00000094 <__c.2593>:
      94:	46 69 6c 65 20 6f 70 65 6e 20 57 52 49 54 45 32     File open WRITE2
      a4:	2e 54 58 54 00                                      .TXT.

000000a9 <__c.2578>:
      a9:	43 6c 6f 73 65 20 66 69 6c 65 00                    Close file.

000000b4 <__c.2574>:
      b4:	45 6e 64 20 6f 66 20 66 69 6c 65 00                 End of file.

000000c0 <__c.2571>:
      c0:	52 65 61 64 20 66 69 6c 65 00                       Read file.

000000ca <__c.2566>:
      ca:	52 65 77 69 6e 64 20 66 69 6c 65 00                 Rewind file.

000000d6 <__c.2564>:
      d6:	46 69 6c 65 20 6f 70 65 6e 20 57 52 49 54 45 32     File open WRITE2
      e6:	2e 54 58 54 00                                      .TXT.

000000eb <__c.2561>:
      eb:	0d 0a 20 41 72 64 75 69 6e 6f 20 42 6f 6f 74 65     .. Arduino Boote
      fb:	64 00                                               d.

000000fd <__c.2507>:
      fd:	20 2d 20 46 41 49 4c 20 45 72 72 6f 72 20 63 6f      - FAIL Error co
     10d:	64 65 3a 20 20 00                                   de:  .

00000113 <__c.2504>:
     113:	20 2d 20 73 75 63 63 65 73 20 45 72 72 6f 72 20      - succes Error 
     123:	63 6f 64 65 20 30 00                                code 0.

0000012a <__c.2484>:
     12a:	0d 0a 00 00                                         ....

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d8 e0       	ldi	r29, 0x08	; 8
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e0 ef       	ldi	r30, 0xF0	; 240
     142:	ff e3       	ldi	r31, 0x3F	; 63
     144:	02 c0       	rjmp	.+4      	; 0x14a <__do_copy_data+0x10>
     146:	05 90       	lpm	r0, Z+
     148:	0d 92       	st	X+, r0
     14a:	a8 3c       	cpi	r26, 0xC8	; 200
     14c:	b1 07       	cpc	r27, r17
     14e:	d9 f7       	brne	.-10     	; 0x146 <__do_copy_data+0xc>

00000150 <__do_clear_bss>:
     150:	25 e0       	ldi	r18, 0x05	; 5
     152:	a8 ec       	ldi	r26, 0xC8	; 200
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
     158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
     15a:	a2 39       	cpi	r26, 0x92	; 146
     15c:	b2 07       	cpc	r27, r18
     15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>
     160:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <main>
     164:	0c 94 f6 1f 	jmp	0x3fec	; 0x3fec <_exit>

00000168 <__bad_interrupt>:
     168:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016c <start_conversion_asynchro_adc>:
uint8_t state_adc;
void state_function_ADC (uint8_t state);

void start_conversion_asynchro_adc (void){
	
	ADCSRA |= (1<<ADIE);
     16c:	ea e7       	ldi	r30, 0x7A	; 122
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	80 81       	ld	r24, Z
     172:	88 60       	ori	r24, 0x08	; 8
     174:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     176:	80 81       	ld	r24, Z
     178:	80 64       	ori	r24, 0x40	; 64
     17a:	80 83       	st	Z, r24
     17c:	08 95       	ret

0000017e <set_ADC_channel>:
	
}

void set_ADC_channel (uint8_t ADC_CH){
	uint8_t admux_buffer = 0;
	admux_buffer = ADMUX & ~( (1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3) );
     17e:	ec e7       	ldi	r30, 0x7C	; 124
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	90 81       	ld	r25, Z
     184:	90 7f       	andi	r25, 0xF0	; 240
	admux_buffer |= ADC_CH;
     186:	89 2b       	or	r24, r25
	ADMUX  = admux_buffer;
     188:	80 83       	st	Z, r24
     18a:	08 95       	ret

0000018c <start_measure_current_ADC>:
}



void start_measure_current_ADC(void){
	set_ADC_channel(ADC_CURRENT);
     18c:	83 e0       	ldi	r24, 0x03	; 3
     18e:	0e 94 bf 00 	call	0x17e	; 0x17e <set_ADC_channel>
	start_conversion_asynchro_adc();
     192:	0e 94 b6 00 	call	0x16c	; 0x16c <start_conversion_asynchro_adc>
	state_adc = RECEIVE_MEASURE_CURRENT_AND_START_BATT_VCC_MEASURE;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <state_adc>
     19c:	08 95       	ret

0000019e <state_function_ADC>:
void run_next_step_state_func_ADC (void){
	state_function_ADC (state_adc);
}

void state_function_ADC (uint8_t state){
	switch (state)
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	19 f0       	breq	.+6      	; 0x1a8 <state_function_ADC+0xa>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	d9 f0       	breq	.+54     	; 0x1dc <state_function_ADC+0x3e>
     1a6:	08 95       	ret
	{
	case RECEIVE_MEASURE_CURRENT_AND_START_BATT_VCC_MEASURE:
		adc_result = conversion_result();
     1a8:	0e 94 80 16 	call	0x2d00	; 0x2d00 <conversion_result>
     1ac:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <adc_result+0x1>
     1b0:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <adc_result>
		flag_adc_conversion_done = 1;
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <flag_adc_conversion_done>
		put_on_Cycle_buffer(adc_result, licznik_32bit, &Cycle_Buffer_1);
     1ba:	40 91 d0 01 	lds	r20, 0x01D0	; 0x8001d0 <licznik_32bit>
     1be:	50 91 d1 01 	lds	r21, 0x01D1	; 0x8001d1 <licznik_32bit+0x1>
     1c2:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <licznik_32bit+0x2>
     1c6:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <licznik_32bit+0x3>
     1ca:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <adc_result>
     1ce:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <adc_result+0x1>
     1d2:	27 ed       	ldi	r18, 0xD7	; 215
     1d4:	31 e0       	ldi	r19, 0x01	; 1
     1d6:	0e 94 21 16 	call	0x2c42	; 0x2c42 <put_on_Cycle_buffer>
		
		//set_ADC_channel(ADC_CURRENT);
		//start_conversion_asynchro_adc();
		//state = RECEIVE_BATT_VCC_MEASURE;
		break;
     1da:	08 95       	ret
		
	case RECEIVE_BATT_VCC_MEASURE:
	
		adc_result = conversion_result();
     1dc:	0e 94 80 16 	call	0x2d00	; 0x2d00 <conversion_result>
     1e0:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <adc_result+0x1>
     1e4:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <adc_result>
		put_on_Cycle_buffer(adc_result, licznik_32bit, &Cycle_Buffer_1);
     1e8:	40 91 d0 01 	lds	r20, 0x01D0	; 0x8001d0 <licznik_32bit>
     1ec:	50 91 d1 01 	lds	r21, 0x01D1	; 0x8001d1 <licznik_32bit+0x1>
     1f0:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <licznik_32bit+0x2>
     1f4:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <licznik_32bit+0x3>
     1f8:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <adc_result>
     1fc:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <adc_result+0x1>
     200:	27 ed       	ldi	r18, 0xD7	; 215
     202:	31 e0       	ldi	r19, 0x01	; 1
     204:	0e 94 21 16 	call	0x2c42	; 0x2c42 <put_on_Cycle_buffer>
		flag_adc_conversion_done = 1;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <flag_adc_conversion_done>
     20e:	08 95       	ret

00000210 <run_next_step_state_func_ADC>:
	start_conversion_asynchro_adc();
	state_adc = RECEIVE_MEASURE_CURRENT_AND_START_BATT_VCC_MEASURE;
}

void run_next_step_state_func_ADC (void){
	state_function_ADC (state_adc);
     210:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <state_adc>
     214:	0e 94 cf 00 	call	0x19e	; 0x19e <state_function_ADC>
     218:	08 95       	ret

0000021a <ld_dword>:

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
}
     21a:	fc 01       	movw	r30, r24
     21c:	63 81       	ldd	r22, Z+3	; 0x03
     21e:	86 2f       	mov	r24, r22
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	a0 e0       	ldi	r26, 0x00	; 0
     224:	b0 e0       	ldi	r27, 0x00	; 0
     226:	ba 2f       	mov	r27, r26
     228:	a9 2f       	mov	r26, r25
     22a:	98 2f       	mov	r25, r24
     22c:	88 27       	eor	r24, r24
     22e:	22 81       	ldd	r18, Z+2	; 0x02
     230:	82 2b       	or	r24, r18
     232:	ba 2f       	mov	r27, r26
     234:	a9 2f       	mov	r26, r25
     236:	98 2f       	mov	r25, r24
     238:	88 27       	eor	r24, r24
     23a:	21 81       	ldd	r18, Z+1	; 0x01
     23c:	82 2b       	or	r24, r18
     23e:	ba 2f       	mov	r27, r26
     240:	a9 2f       	mov	r26, r25
     242:	98 2f       	mov	r25, r24
     244:	88 27       	eor	r24, r24
     246:	20 81       	ld	r18, Z
     248:	bc 01       	movw	r22, r24
     24a:	cd 01       	movw	r24, r26
     24c:	62 2b       	or	r22, r18
     24e:	08 95       	ret

00000250 <mem_cpy>:
     250:	41 15       	cp	r20, r1
     252:	51 05       	cpc	r21, r1
     254:	51 f0       	breq	.+20     	; 0x26a <mem_cpy+0x1a>
     256:	a6 2f       	mov	r26, r22
     258:	b7 2f       	mov	r27, r23
     25a:	fc 01       	movw	r30, r24
     25c:	48 0f       	add	r20, r24
     25e:	59 1f       	adc	r21, r25
     260:	9d 91       	ld	r25, X+
     262:	91 93       	st	Z+, r25
     264:	e4 17       	cp	r30, r20
     266:	f5 07       	cpc	r31, r21
     268:	d9 f7       	brne	.-10     	; 0x260 <mem_cpy+0x10>
     26a:	08 95       	ret

0000026c <mem_cmp>:
     26c:	dc 01       	movw	r26, r24
     26e:	e6 2f       	mov	r30, r22
     270:	f7 2f       	mov	r31, r23
     272:	8d 91       	ld	r24, X+
     274:	21 91       	ld	r18, Z+
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	82 1b       	sub	r24, r18
     27a:	91 09       	sbc	r25, r1
     27c:	41 50       	subi	r20, 0x01	; 1
     27e:	51 09       	sbc	r21, r1
     280:	11 f0       	breq	.+4      	; 0x286 <mem_cmp+0x1a>
     282:	00 97       	sbiw	r24, 0x00	; 0
     284:	b1 f3       	breq	.-20     	; 0x272 <mem_cmp+0x6>
     286:	08 95       	ret

00000288 <clst2sect>:
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	fc 01       	movw	r30, r24
     28e:	9a 01       	movw	r18, r20
     290:	ab 01       	movw	r20, r22
     292:	22 50       	subi	r18, 0x02	; 2
     294:	31 09       	sbc	r19, r1
     296:	41 09       	sbc	r20, r1
     298:	51 09       	sbc	r21, r1
     29a:	83 89       	ldd	r24, Z+19	; 0x13
     29c:	94 89       	ldd	r25, Z+20	; 0x14
     29e:	a5 89       	ldd	r26, Z+21	; 0x15
     2a0:	b6 89       	ldd	r27, Z+22	; 0x16
     2a2:	02 97       	sbiw	r24, 0x02	; 2
     2a4:	a1 09       	sbc	r26, r1
     2a6:	b1 09       	sbc	r27, r1
     2a8:	28 17       	cp	r18, r24
     2aa:	39 07       	cpc	r19, r25
     2ac:	4a 07       	cpc	r20, r26
     2ae:	5b 07       	cpc	r21, r27
     2b0:	68 f4       	brcc	.+26     	; 0x2cc <clst2sect+0x44>
     2b2:	a1 85       	ldd	r26, Z+9	; 0x09
     2b4:	b2 85       	ldd	r27, Z+10	; 0x0a
     2b6:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__muluhisi3>
     2ba:	07 a1       	ldd	r16, Z+39	; 0x27
     2bc:	10 a5       	ldd	r17, Z+40	; 0x28
     2be:	21 a5       	ldd	r18, Z+41	; 0x29
     2c0:	32 a5       	ldd	r19, Z+42	; 0x2a
     2c2:	60 0f       	add	r22, r16
     2c4:	71 1f       	adc	r23, r17
     2c6:	82 1f       	adc	r24, r18
     2c8:	93 1f       	adc	r25, r19
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <clst2sect+0x4a>
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	cb 01       	movw	r24, r22
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	08 95       	ret

000002d8 <get_ldnumber>:
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	ec 01       	movw	r28, r24
     2de:	a8 81       	ld	r26, Y
     2e0:	b9 81       	ldd	r27, Y+1	; 0x01
     2e2:	10 97       	sbiw	r26, 0x00	; 0
     2e4:	f1 f0       	breq	.+60     	; 0x322 <get_ldnumber+0x4a>
     2e6:	9d 01       	movw	r18, r26
     2e8:	2f 5f       	subi	r18, 0xFF	; 255
     2ea:	3f 4f       	sbci	r19, 0xFF	; 255
     2ec:	f9 01       	movw	r30, r18
     2ee:	31 97       	sbiw	r30, 0x01	; 1
     2f0:	90 81       	ld	r25, Z
     2f2:	91 32       	cpi	r25, 0x21	; 33
     2f4:	18 f0       	brcs	.+6      	; 0x2fc <get_ldnumber+0x24>
     2f6:	9a 33       	cpi	r25, 0x3A	; 58
     2f8:	b9 f7       	brne	.-18     	; 0x2e8 <get_ldnumber+0x10>
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <get_ldnumber+0x28>
     2fc:	9a 33       	cpi	r25, 0x3A	; 58
     2fe:	a1 f4       	brne	.+40     	; 0x328 <get_ldnumber+0x50>
     300:	8c 91       	ld	r24, X
     302:	90 ed       	ldi	r25, 0xD0	; 208
     304:	98 0f       	add	r25, r24
     306:	9a 30       	cpi	r25, 0x0A	; 10
     308:	90 f4       	brcc	.+36     	; 0x32e <get_ldnumber+0x56>
     30a:	12 96       	adiw	r26, 0x02	; 2
     30c:	2a 17       	cp	r18, r26
     30e:	3b 07       	cpc	r19, r27
     310:	89 f4       	brne	.+34     	; 0x334 <get_ldnumber+0x5c>
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	c0 97       	sbiw	r24, 0x30	; 48
     316:	18 16       	cp	r1, r24
     318:	19 06       	cpc	r1, r25
     31a:	7c f0       	brlt	.+30     	; 0x33a <get_ldnumber+0x62>
     31c:	39 83       	std	Y+1, r19	; 0x01
     31e:	28 83       	st	Y, r18
     320:	0e c0       	rjmp	.+28     	; 0x33e <get_ldnumber+0x66>
     322:	8f ef       	ldi	r24, 0xFF	; 255
     324:	9f ef       	ldi	r25, 0xFF	; 255
     326:	0b c0       	rjmp	.+22     	; 0x33e <get_ldnumber+0x66>
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	08 c0       	rjmp	.+16     	; 0x33e <get_ldnumber+0x66>
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	9f ef       	ldi	r25, 0xFF	; 255
     332:	05 c0       	rjmp	.+10     	; 0x33e <get_ldnumber+0x66>
     334:	8f ef       	ldi	r24, 0xFF	; 255
     336:	9f ef       	ldi	r25, 0xFF	; 255
     338:	02 c0       	rjmp	.+4      	; 0x33e <get_ldnumber+0x66>
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	9f ef       	ldi	r25, 0xFF	; 255
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <validate>:
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	ec 01       	movw	r28, r24
     34e:	8b 01       	movw	r16, r22
     350:	89 2b       	or	r24, r25
     352:	e1 f0       	breq	.+56     	; 0x38c <validate+0x48>
     354:	e8 81       	ld	r30, Y
     356:	f9 81       	ldd	r31, Y+1	; 0x01
     358:	30 97       	sbiw	r30, 0x00	; 0
     35a:	c1 f0       	breq	.+48     	; 0x38c <validate+0x48>
     35c:	80 81       	ld	r24, Z
     35e:	88 23       	and	r24, r24
     360:	a9 f0       	breq	.+42     	; 0x38c <validate+0x48>
     362:	2a 81       	ldd	r18, Y+2	; 0x02
     364:	3b 81       	ldd	r19, Y+3	; 0x03
     366:	85 81       	ldd	r24, Z+5	; 0x05
     368:	96 81       	ldd	r25, Z+6	; 0x06
     36a:	28 17       	cp	r18, r24
     36c:	39 07       	cpc	r19, r25
     36e:	71 f4       	brne	.+28     	; 0x38c <validate+0x48>
     370:	81 81       	ldd	r24, Z+1	; 0x01
     372:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <disk_status>
     376:	80 fd       	sbrc	r24, 0
     378:	09 c0       	rjmp	.+18     	; 0x38c <validate+0x48>
     37a:	04 c0       	rjmp	.+8      	; 0x384 <validate+0x40>
     37c:	f8 01       	movw	r30, r16
     37e:	31 83       	std	Z+1, r19	; 0x01
     380:	20 83       	st	Z, r18
     382:	08 c0       	rjmp	.+16     	; 0x394 <validate+0x50>
     384:	28 81       	ld	r18, Y
     386:	39 81       	ldd	r19, Y+1	; 0x01
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	f8 cf       	rjmp	.-16     	; 0x37c <validate+0x38>
     38c:	89 e0       	ldi	r24, 0x09	; 9
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	f4 cf       	rjmp	.-24     	; 0x37c <validate+0x38>
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	08 95       	ret

0000039e <sync_window>:
     39e:	8f 92       	push	r8
     3a0:	9f 92       	push	r9
     3a2:	af 92       	push	r10
     3a4:	bf 92       	push	r11
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	fc 01       	movw	r30, r24
     3b4:	23 81       	ldd	r18, Z+3	; 0x03
     3b6:	22 23       	and	r18, r18
     3b8:	d1 f1       	breq	.+116    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     3ba:	ec 01       	movw	r28, r24
     3bc:	7c 01       	movw	r14, r24
     3be:	ff e2       	ldi	r31, 0x2F	; 47
     3c0:	ef 0e       	add	r14, r31
     3c2:	f1 1c       	adc	r15, r1
     3c4:	2b a5       	ldd	r18, Y+43	; 0x2b
     3c6:	3c a5       	ldd	r19, Y+44	; 0x2c
     3c8:	4d a5       	ldd	r20, Y+45	; 0x2d
     3ca:	5e a5       	ldd	r21, Y+46	; 0x2e
     3cc:	01 e0       	ldi	r16, 0x01	; 1
     3ce:	10 e0       	ldi	r17, 0x00	; 0
     3d0:	b7 01       	movw	r22, r14
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <disk_write>
     3d8:	81 11       	cpse	r24, r1
     3da:	2b c0       	rjmp	.+86     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     3dc:	1b 82       	std	Y+3, r1	; 0x03
     3de:	0b a5       	ldd	r16, Y+43	; 0x2b
     3e0:	1c a5       	ldd	r17, Y+44	; 0x2c
     3e2:	2d a5       	ldd	r18, Y+45	; 0x2d
     3e4:	3e a5       	ldd	r19, Y+46	; 0x2e
     3e6:	8f 89       	ldd	r24, Y+23	; 0x17
     3e8:	98 8d       	ldd	r25, Y+24	; 0x18
     3ea:	a9 8d       	ldd	r26, Y+25	; 0x19
     3ec:	ba 8d       	ldd	r27, Y+26	; 0x1a
     3ee:	8f 8c       	ldd	r8, Y+31	; 0x1f
     3f0:	98 a0       	ldd	r9, Y+32	; 0x20
     3f2:	a9 a0       	ldd	r10, Y+33	; 0x21
     3f4:	ba a0       	ldd	r11, Y+34	; 0x22
     3f6:	b9 01       	movw	r22, r18
     3f8:	a8 01       	movw	r20, r16
     3fa:	48 19       	sub	r20, r8
     3fc:	59 09       	sbc	r21, r9
     3fe:	6a 09       	sbc	r22, r10
     400:	7b 09       	sbc	r23, r11
     402:	48 17       	cp	r20, r24
     404:	59 07       	cpc	r21, r25
     406:	6a 07       	cpc	r22, r26
     408:	7b 07       	cpc	r23, r27
     40a:	a8 f4       	brcc	.+42     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     40c:	6a 81       	ldd	r22, Y+2	; 0x02
     40e:	62 30       	cpi	r22, 0x02	; 2
     410:	a1 f4       	brne	.+40     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     412:	a9 01       	movw	r20, r18
     414:	98 01       	movw	r18, r16
     416:	28 0f       	add	r18, r24
     418:	39 1f       	adc	r19, r25
     41a:	4a 1f       	adc	r20, r26
     41c:	5b 1f       	adc	r21, r27
     41e:	01 e0       	ldi	r16, 0x01	; 1
     420:	10 e0       	ldi	r17, 0x00	; 0
     422:	b7 01       	movw	r22, r14
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <disk_write>
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	07 c0       	rjmp	.+14     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	05 c0       	rjmp	.+10     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	03 c0       	rjmp	.+6      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	01 c0       	rjmp	.+2      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	bf 90       	pop	r11
     44a:	af 90       	pop	r10
     44c:	9f 90       	pop	r9
     44e:	8f 90       	pop	r8
     450:	08 95       	ret

00000452 <move_window>:
     452:	8f 92       	push	r8
     454:	9f 92       	push	r9
     456:	af 92       	push	r10
     458:	bf 92       	push	r11
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	ec 01       	movw	r28, r24
     466:	4a 01       	movw	r8, r20
     468:	5b 01       	movw	r10, r22
     46a:	8b a5       	ldd	r24, Y+43	; 0x2b
     46c:	9c a5       	ldd	r25, Y+44	; 0x2c
     46e:	ad a5       	ldd	r26, Y+45	; 0x2d
     470:	be a5       	ldd	r27, Y+46	; 0x2e
     472:	84 17       	cp	r24, r20
     474:	95 07       	cpc	r25, r21
     476:	a6 07       	cpc	r26, r22
     478:	b7 07       	cpc	r27, r23
     47a:	e9 f0       	breq	.+58     	; 0x4b6 <move_window+0x64>
     47c:	ce 01       	movw	r24, r28
     47e:	0e 94 cf 01 	call	0x39e	; 0x39e <sync_window>
     482:	f8 2e       	mov	r15, r24
     484:	81 11       	cpse	r24, r1
     486:	18 c0       	rjmp	.+48     	; 0x4b8 <move_window+0x66>
     488:	01 e0       	ldi	r16, 0x01	; 1
     48a:	10 e0       	ldi	r17, 0x00	; 0
     48c:	a5 01       	movw	r20, r10
     48e:	94 01       	movw	r18, r8
     490:	be 01       	movw	r22, r28
     492:	61 5d       	subi	r22, 0xD1	; 209
     494:	7f 4f       	sbci	r23, 0xFF	; 255
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <disk_read>
     49c:	88 23       	and	r24, r24
     49e:	31 f0       	breq	.+12     	; 0x4ac <move_window+0x5a>
     4a0:	ff 24       	eor	r15, r15
     4a2:	f3 94       	inc	r15
     4a4:	88 24       	eor	r8, r8
     4a6:	8a 94       	dec	r8
     4a8:	98 2c       	mov	r9, r8
     4aa:	54 01       	movw	r10, r8
     4ac:	8b a6       	std	Y+43, r8	; 0x2b
     4ae:	9c a6       	std	Y+44, r9	; 0x2c
     4b0:	ad a6       	std	Y+45, r10	; 0x2d
     4b2:	be a6       	std	Y+46, r11	; 0x2e
     4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <move_window+0x66>
     4b6:	f1 2c       	mov	r15, r1
     4b8:	8f 2d       	mov	r24, r15
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	bf 90       	pop	r11
     4c6:	af 90       	pop	r10
     4c8:	9f 90       	pop	r9
     4ca:	8f 90       	pop	r8
     4cc:	08 95       	ret

000004ce <dir_clear>:
     4ce:	8f 92       	push	r8
     4d0:	9f 92       	push	r9
     4d2:	af 92       	push	r10
     4d4:	bf 92       	push	r11
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	7c 01       	movw	r14, r24
     4e8:	4a 01       	movw	r8, r20
     4ea:	5b 01       	movw	r10, r22
     4ec:	0e 94 cf 01 	call	0x39e	; 0x39e <sync_window>
     4f0:	81 11       	cpse	r24, r1
     4f2:	42 c0       	rjmp	.+132    	; 0x578 <dir_clear+0xaa>
     4f4:	b5 01       	movw	r22, r10
     4f6:	a4 01       	movw	r20, r8
     4f8:	c7 01       	movw	r24, r14
     4fa:	0e 94 44 01 	call	0x288	; 0x288 <clst2sect>
     4fe:	4b 01       	movw	r8, r22
     500:	5c 01       	movw	r10, r24
     502:	f7 01       	movw	r30, r14
     504:	63 a7       	std	Z+43, r22	; 0x2b
     506:	74 a7       	std	Z+44, r23	; 0x2c
     508:	85 a7       	std	Z+45, r24	; 0x2d
     50a:	96 a7       	std	Z+46, r25	; 0x2e
     50c:	67 01       	movw	r12, r14
     50e:	ff e2       	ldi	r31, 0x2F	; 47
     510:	cf 0e       	add	r12, r31
     512:	d1 1c       	adc	r13, r1
     514:	f6 01       	movw	r30, r12
     516:	c7 01       	movw	r24, r14
     518:	81 5d       	subi	r24, 0xD1	; 209
     51a:	9d 4f       	sbci	r25, 0xFD	; 253
     51c:	11 92       	st	Z+, r1
     51e:	e8 17       	cp	r30, r24
     520:	f9 07       	cpc	r31, r25
     522:	e1 f7       	brne	.-8      	; 0x51c <dir_clear+0x4e>
     524:	f7 01       	movw	r30, r14
     526:	81 85       	ldd	r24, Z+9	; 0x09
     528:	92 85       	ldd	r25, Z+10	; 0x0a
     52a:	89 2b       	or	r24, r25
     52c:	59 f4       	brne	.+22     	; 0x544 <dir_clear+0x76>
     52e:	c0 e0       	ldi	r28, 0x00	; 0
     530:	d0 e0       	ldi	r29, 0x00	; 0
     532:	19 c0       	rjmp	.+50     	; 0x566 <dir_clear+0x98>
     534:	21 96       	adiw	r28, 0x01	; 1
     536:	f7 01       	movw	r30, r14
     538:	81 85       	ldd	r24, Z+9	; 0x09
     53a:	92 85       	ldd	r25, Z+10	; 0x0a
     53c:	c8 17       	cp	r28, r24
     53e:	d9 07       	cpc	r29, r25
     540:	18 f0       	brcs	.+6      	; 0x548 <dir_clear+0x7a>
     542:	11 c0       	rjmp	.+34     	; 0x566 <dir_clear+0x98>
     544:	c0 e0       	ldi	r28, 0x00	; 0
     546:	d0 e0       	ldi	r29, 0x00	; 0
     548:	01 e0       	ldi	r16, 0x01	; 1
     54a:	10 e0       	ldi	r17, 0x00	; 0
     54c:	a5 01       	movw	r20, r10
     54e:	94 01       	movw	r18, r8
     550:	2c 0f       	add	r18, r28
     552:	3d 1f       	adc	r19, r29
     554:	41 1d       	adc	r20, r1
     556:	51 1d       	adc	r21, r1
     558:	b6 01       	movw	r22, r12
     55a:	f7 01       	movw	r30, r14
     55c:	81 81       	ldd	r24, Z+1	; 0x01
     55e:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <disk_write>
     562:	88 23       	and	r24, r24
     564:	39 f3       	breq	.-50     	; 0x534 <dir_clear+0x66>
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	f7 01       	movw	r30, r14
     56a:	21 85       	ldd	r18, Z+9	; 0x09
     56c:	32 85       	ldd	r19, Z+10	; 0x0a
     56e:	2c 17       	cp	r18, r28
     570:	3d 07       	cpc	r19, r29
     572:	19 f4       	brne	.+6      	; 0x57a <dir_clear+0xac>
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	01 c0       	rjmp	.+2      	; 0x57a <dir_clear+0xac>
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	df 90       	pop	r13
     588:	cf 90       	pop	r12
     58a:	bf 90       	pop	r11
     58c:	af 90       	pop	r10
     58e:	9f 90       	pop	r9
     590:	8f 90       	pop	r8
     592:	08 95       	ret

00000594 <sync_fs>:
     594:	0f 93       	push	r16
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	ec 01       	movw	r28, r24
     59e:	0e 94 cf 01 	call	0x39e	; 0x39e <sync_window>
     5a2:	98 2f       	mov	r25, r24
     5a4:	81 11       	cpse	r24, r1
     5a6:	61 c0       	rjmp	.+194    	; 0x66a <sync_fs+0xd6>
     5a8:	88 81       	ld	r24, Y
     5aa:	83 30       	cpi	r24, 0x03	; 3
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <sync_fs+0x1c>
     5ae:	53 c0       	rjmp	.+166    	; 0x656 <sync_fs+0xc2>
     5b0:	8c 81       	ldd	r24, Y+4	; 0x04
     5b2:	81 30       	cpi	r24, 0x01	; 1
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <sync_fs+0x24>
     5b6:	4f c0       	rjmp	.+158    	; 0x656 <sync_fs+0xc2>
     5b8:	be 01       	movw	r22, r28
     5ba:	61 5d       	subi	r22, 0xD1	; 209
     5bc:	7f 4f       	sbci	r23, 0xFF	; 255
     5be:	fb 01       	movw	r30, r22
     5c0:	ce 01       	movw	r24, r28
     5c2:	81 5d       	subi	r24, 0xD1	; 209
     5c4:	9d 4f       	sbci	r25, 0xFD	; 253
     5c6:	11 92       	st	Z+, r1
     5c8:	e8 17       	cp	r30, r24
     5ca:	f9 07       	cpc	r31, r25
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <sync_fs+0x32>
     5ce:	85 e5       	ldi	r24, 0x55	; 85
     5d0:	fe 01       	movw	r30, r28
     5d2:	e3 5d       	subi	r30, 0xD3	; 211
     5d4:	fd 4f       	sbci	r31, 0xFD	; 253
     5d6:	80 83       	st	Z, r24
     5d8:	8a ea       	ldi	r24, 0xAA	; 170
     5da:	31 96       	adiw	r30, 0x01	; 1
     5dc:	80 83       	st	Z, r24
     5de:	82 e5       	ldi	r24, 0x52	; 82
     5e0:	8f a7       	std	Y+47, r24	; 0x2f
     5e2:	88 ab       	std	Y+48, r24	; 0x30
     5e4:	81 e6       	ldi	r24, 0x61	; 97
     5e6:	89 ab       	std	Y+49, r24	; 0x31
     5e8:	91 e4       	ldi	r25, 0x41	; 65
     5ea:	9a ab       	std	Y+50, r25	; 0x32
     5ec:	22 e7       	ldi	r18, 0x72	; 114
     5ee:	7b 97       	sbiw	r30, 0x1b	; 27
     5f0:	20 83       	st	Z, r18
     5f2:	31 96       	adiw	r30, 0x01	; 1
     5f4:	20 83       	st	Z, r18
     5f6:	31 96       	adiw	r30, 0x01	; 1
     5f8:	90 83       	st	Z, r25
     5fa:	31 96       	adiw	r30, 0x01	; 1
     5fc:	80 83       	st	Z, r24
     5fe:	3f 85       	ldd	r19, Y+15	; 0x0f
     600:	28 89       	ldd	r18, Y+16	; 0x10
     602:	99 89       	ldd	r25, Y+17	; 0x11
     604:	8a 89       	ldd	r24, Y+18	; 0x12
     606:	31 96       	adiw	r30, 0x01	; 1
     608:	30 83       	st	Z, r19
     60a:	31 96       	adiw	r30, 0x01	; 1
     60c:	20 83       	st	Z, r18
     60e:	31 96       	adiw	r30, 0x01	; 1
     610:	90 83       	st	Z, r25
     612:	31 96       	adiw	r30, 0x01	; 1
     614:	80 83       	st	Z, r24
     616:	3b 85       	ldd	r19, Y+11	; 0x0b
     618:	2c 85       	ldd	r18, Y+12	; 0x0c
     61a:	9d 85       	ldd	r25, Y+13	; 0x0d
     61c:	8e 85       	ldd	r24, Y+14	; 0x0e
     61e:	31 96       	adiw	r30, 0x01	; 1
     620:	30 83       	st	Z, r19
     622:	31 96       	adiw	r30, 0x01	; 1
     624:	20 83       	st	Z, r18
     626:	31 96       	adiw	r30, 0x01	; 1
     628:	90 83       	st	Z, r25
     62a:	31 96       	adiw	r30, 0x01	; 1
     62c:	80 83       	st	Z, r24
     62e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     630:	9c 8d       	ldd	r25, Y+28	; 0x1c
     632:	ad 8d       	ldd	r26, Y+29	; 0x1d
     634:	be 8d       	ldd	r27, Y+30	; 0x1e
     636:	9c 01       	movw	r18, r24
     638:	ad 01       	movw	r20, r26
     63a:	2f 5f       	subi	r18, 0xFF	; 255
     63c:	3f 4f       	sbci	r19, 0xFF	; 255
     63e:	4f 4f       	sbci	r20, 0xFF	; 255
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	2b a7       	std	Y+43, r18	; 0x2b
     644:	3c a7       	std	Y+44, r19	; 0x2c
     646:	4d a7       	std	Y+45, r20	; 0x2d
     648:	5e a7       	std	Y+46, r21	; 0x2e
     64a:	01 e0       	ldi	r16, 0x01	; 1
     64c:	10 e0       	ldi	r17, 0x00	; 0
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <disk_write>
     654:	1c 82       	std	Y+4, r1	; 0x04
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <disk_ioctl>
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	81 11       	cpse	r24, r1
     666:	01 c0       	rjmp	.+2      	; 0x66a <sync_fs+0xd6>
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	89 2f       	mov	r24, r25
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	1f 91       	pop	r17
     672:	0f 91       	pop	r16
     674:	08 95       	ret

00000676 <put_fat>:
     676:	2f 92       	push	r2
     678:	3f 92       	push	r3
     67a:	4f 92       	push	r4
     67c:	5f 92       	push	r5
     67e:	6f 92       	push	r6
     680:	7f 92       	push	r7
     682:	8f 92       	push	r8
     684:	9f 92       	push	r9
     686:	af 92       	push	r10
     688:	bf 92       	push	r11
     68a:	cf 92       	push	r12
     68c:	df 92       	push	r13
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	42 30       	cpi	r20, 0x02	; 2
     69c:	51 05       	cpc	r21, r1
     69e:	61 05       	cpc	r22, r1
     6a0:	71 05       	cpc	r23, r1
     6a2:	08 f4       	brcc	.+2      	; 0x6a6 <put_fat+0x30>
     6a4:	d2 c0       	rjmp	.+420    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     6a6:	fc 01       	movw	r30, r24
     6a8:	c3 88       	ldd	r12, Z+19	; 0x13
     6aa:	d4 88       	ldd	r13, Z+20	; 0x14
     6ac:	e5 88       	ldd	r14, Z+21	; 0x15
     6ae:	f6 88       	ldd	r15, Z+22	; 0x16
     6b0:	4c 15       	cp	r20, r12
     6b2:	5d 05       	cpc	r21, r13
     6b4:	6e 05       	cpc	r22, r14
     6b6:	7f 05       	cpc	r23, r15
     6b8:	08 f0       	brcs	.+2      	; 0x6bc <put_fat+0x46>
     6ba:	c9 c0       	rjmp	.+402    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     6bc:	28 01       	movw	r4, r16
     6be:	39 01       	movw	r6, r18
     6c0:	6a 01       	movw	r12, r20
     6c2:	7b 01       	movw	r14, r22
     6c4:	ec 01       	movw	r28, r24
     6c6:	80 81       	ld	r24, Z
     6c8:	82 30       	cpi	r24, 0x02	; 2
     6ca:	09 f4       	brne	.+2      	; 0x6ce <put_fat+0x58>
     6cc:	64 c0       	rjmp	.+200    	; 0x796 <put_fat+0x120>
     6ce:	83 30       	cpi	r24, 0x03	; 3
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <put_fat+0x5e>
     6d2:	82 c0       	rjmp	.+260    	; 0x7d8 <put_fat+0x162>
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	09 f0       	breq	.+2      	; 0x6da <put_fat+0x64>
     6d8:	bc c0       	rjmp	.+376    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     6da:	5a 01       	movw	r10, r20
     6dc:	b6 94       	lsr	r11
     6de:	a7 94       	ror	r10
     6e0:	a4 0e       	add	r10, r20
     6e2:	b5 1e       	adc	r11, r21
     6e4:	c5 01       	movw	r24, r10
     6e6:	89 2f       	mov	r24, r25
     6e8:	99 27       	eor	r25, r25
     6ea:	86 95       	lsr	r24
     6ec:	47 8d       	ldd	r20, Z+31	; 0x1f
     6ee:	50 a1       	ldd	r21, Z+32	; 0x20
     6f0:	61 a1       	ldd	r22, Z+33	; 0x21
     6f2:	72 a1       	ldd	r23, Z+34	; 0x22
     6f4:	48 0f       	add	r20, r24
     6f6:	59 1f       	adc	r21, r25
     6f8:	61 1d       	adc	r22, r1
     6fa:	71 1d       	adc	r23, r1
     6fc:	cf 01       	movw	r24, r30
     6fe:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
     702:	18 2f       	mov	r17, r24
     704:	81 11       	cpse	r24, r1
     706:	c5 c0       	rjmp	.+394    	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     708:	1e 01       	movw	r2, r28
     70a:	ff e2       	ldi	r31, 0x2F	; 47
     70c:	2f 0e       	add	r2, r31
     70e:	31 1c       	adc	r3, r1
     710:	45 01       	movw	r8, r10
     712:	2f ef       	ldi	r18, 0xFF	; 255
     714:	82 1a       	sub	r8, r18
     716:	92 0a       	sbc	r9, r18
     718:	31 e0       	ldi	r19, 0x01	; 1
     71a:	b3 22       	and	r11, r19
     71c:	f1 01       	movw	r30, r2
     71e:	ea 0d       	add	r30, r10
     720:	fb 1d       	adc	r31, r11
     722:	c0 fe       	sbrs	r12, 0
     724:	1e c0       	rjmp	.+60     	; 0x762 <put_fat+0xec>
     726:	80 81       	ld	r24, Z
     728:	28 2f       	mov	r18, r24
     72a:	2f 70       	andi	r18, 0x0F	; 15
     72c:	30 e1       	ldi	r19, 0x10	; 16
     72e:	43 9e       	mul	r4, r19
     730:	c0 01       	movw	r24, r0
     732:	11 24       	eor	r1, r1
     734:	82 2b       	or	r24, r18
     736:	80 83       	st	Z, r24
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	8b 83       	std	Y+3, r24	; 0x03
     73c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     73e:	58 a1       	ldd	r21, Y+32	; 0x20
     740:	69 a1       	ldd	r22, Y+33	; 0x21
     742:	7a a1       	ldd	r23, Y+34	; 0x22
     744:	c4 01       	movw	r24, r8
     746:	89 2f       	mov	r24, r25
     748:	99 27       	eor	r25, r25
     74a:	86 95       	lsr	r24
     74c:	48 0f       	add	r20, r24
     74e:	59 1f       	adc	r21, r25
     750:	61 1d       	adc	r22, r1
     752:	71 1d       	adc	r23, r1
     754:	ce 01       	movw	r24, r28
     756:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
     75a:	88 23       	and	r24, r24
     75c:	09 f4       	brne	.+2      	; 0x760 <put_fat+0xea>
     75e:	7f c0       	rjmp	.+254    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     760:	7a c0       	rjmp	.+244    	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     762:	40 82       	st	Z, r4
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	8b 83       	std	Y+3, r24	; 0x03
     768:	4f 8d       	ldd	r20, Y+31	; 0x1f
     76a:	58 a1       	ldd	r21, Y+32	; 0x20
     76c:	69 a1       	ldd	r22, Y+33	; 0x21
     76e:	7a a1       	ldd	r23, Y+34	; 0x22
     770:	c4 01       	movw	r24, r8
     772:	89 2f       	mov	r24, r25
     774:	99 27       	eor	r25, r25
     776:	86 95       	lsr	r24
     778:	48 0f       	add	r20, r24
     77a:	59 1f       	adc	r21, r25
     77c:	61 1d       	adc	r22, r1
     77e:	71 1d       	adc	r23, r1
     780:	ce 01       	movw	r24, r28
     782:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
     786:	88 23       	and	r24, r24
     788:	09 f4       	brne	.+2      	; 0x78c <put_fat+0x116>
     78a:	77 c0       	rjmp	.+238    	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
     78c:	66 c0       	rjmp	.+204    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     78e:	40 82       	st	Z, r4
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	8b 83       	std	Y+3, r24	; 0x03
     794:	7e c0       	rjmp	.+252    	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     796:	45 2f       	mov	r20, r21
     798:	56 2f       	mov	r21, r22
     79a:	67 2f       	mov	r22, r23
     79c:	77 27       	eor	r23, r23
     79e:	87 8d       	ldd	r24, Z+31	; 0x1f
     7a0:	90 a1       	ldd	r25, Z+32	; 0x20
     7a2:	a1 a1       	ldd	r26, Z+33	; 0x21
     7a4:	b2 a1       	ldd	r27, Z+34	; 0x22
     7a6:	48 0f       	add	r20, r24
     7a8:	59 1f       	adc	r21, r25
     7aa:	6a 1f       	adc	r22, r26
     7ac:	7b 1f       	adc	r23, r27
     7ae:	cf 01       	movw	r24, r30
     7b0:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
     7b4:	18 2f       	mov	r17, r24
     7b6:	81 11       	cpse	r24, r1
     7b8:	6c c0       	rjmp	.+216    	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     7ba:	fe 01       	movw	r30, r28
     7bc:	bf 96       	adiw	r30, 0x2f	; 47
     7be:	cc 0c       	add	r12, r12
     7c0:	dd 1c       	adc	r13, r13
     7c2:	e8 94       	clt
     7c4:	c0 f8       	bld	r12, 0
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	d8 22       	and	r13, r24
     7ca:	ec 0d       	add	r30, r12
     7cc:	fd 1d       	adc	r31, r13
     7ce:	40 82       	st	Z, r4
     7d0:	51 82       	std	Z+1, r5	; 0x01
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	8b 83       	std	Y+3, r24	; 0x03
     7d6:	5d c0       	rjmp	.+186    	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     7d8:	87 8d       	ldd	r24, Z+31	; 0x1f
     7da:	90 a1       	ldd	r25, Z+32	; 0x20
     7dc:	a1 a1       	ldd	r26, Z+33	; 0x21
     7de:	b2 a1       	ldd	r27, Z+34	; 0x22
     7e0:	68 94       	set
     7e2:	16 f8       	bld	r1, 6
     7e4:	76 95       	lsr	r23
     7e6:	67 95       	ror	r22
     7e8:	57 95       	ror	r21
     7ea:	47 95       	ror	r20
     7ec:	16 94       	lsr	r1
     7ee:	d1 f7       	brne	.-12     	; 0x7e4 <put_fat+0x16e>
     7f0:	48 0f       	add	r20, r24
     7f2:	59 1f       	adc	r21, r25
     7f4:	6a 1f       	adc	r22, r26
     7f6:	7b 1f       	adc	r23, r27
     7f8:	cf 01       	movw	r24, r30
     7fa:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
     7fe:	18 2f       	mov	r17, r24
     800:	81 11       	cpse	r24, r1
     802:	47 c0       	rjmp	.+142    	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     804:	ef e0       	ldi	r30, 0x0F	; 15
     806:	7e 22       	and	r7, r30
     808:	ce 01       	movw	r24, r28
     80a:	8f 96       	adiw	r24, 0x2f	; 47
     80c:	cc 0c       	add	r12, r12
     80e:	dd 1c       	adc	r13, r13
     810:	cc 0c       	add	r12, r12
     812:	dd 1c       	adc	r13, r13
     814:	fc ef       	ldi	r31, 0xFC	; 252
     816:	cf 22       	and	r12, r31
     818:	f1 e0       	ldi	r31, 0x01	; 1
     81a:	df 22       	and	r13, r31
     81c:	c8 0e       	add	r12, r24
     81e:	d9 1e       	adc	r13, r25
     820:	c6 01       	movw	r24, r12
     822:	0e 94 0d 01 	call	0x21a	; 0x21a <ld_dword>
     826:	dc 01       	movw	r26, r24
     828:	cb 01       	movw	r24, r22
     82a:	88 27       	eor	r24, r24
     82c:	99 27       	eor	r25, r25
     82e:	aa 27       	eor	r26, r26
     830:	b0 7f       	andi	r27, 0xF0	; 240
     832:	48 2a       	or	r4, r24
     834:	59 2a       	or	r5, r25
     836:	6a 2a       	or	r6, r26
     838:	7b 2a       	or	r7, r27
     83a:	f6 01       	movw	r30, r12
     83c:	40 82       	st	Z, r4
     83e:	51 82       	std	Z+1, r5	; 0x01
     840:	62 82       	std	Z+2, r6	; 0x02
     842:	73 82       	std	Z+3, r7	; 0x03
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	8b 83       	std	Y+3, r24	; 0x03
     848:	24 c0       	rjmp	.+72     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     84a:	12 e0       	ldi	r17, 0x02	; 2
     84c:	22 c0       	rjmp	.+68     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     84e:	12 e0       	ldi	r17, 0x02	; 2
     850:	20 c0       	rjmp	.+64     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     852:	12 e0       	ldi	r17, 0x02	; 2
     854:	1e c0       	rjmp	.+60     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     856:	18 2f       	mov	r17, r24
     858:	1c c0       	rjmp	.+56     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     85a:	18 2f       	mov	r17, r24
     85c:	1a c0       	rjmp	.+52     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     85e:	f1 e0       	ldi	r31, 0x01	; 1
     860:	9f 22       	and	r9, r31
     862:	f1 01       	movw	r30, r2
     864:	e8 0d       	add	r30, r8
     866:	f9 1d       	adc	r31, r9
     868:	68 94       	set
     86a:	13 f8       	bld	r1, 3
     86c:	76 94       	lsr	r7
     86e:	67 94       	ror	r6
     870:	57 94       	ror	r5
     872:	47 94       	ror	r4
     874:	16 94       	lsr	r1
     876:	d1 f7       	brne	.-12     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
     878:	8a cf       	rjmp	.-236    	; 0x78e <put_fat+0x118>
     87a:	21 e0       	ldi	r18, 0x01	; 1
     87c:	92 22       	and	r9, r18
     87e:	f1 01       	movw	r30, r2
     880:	e8 0d       	add	r30, r8
     882:	f9 1d       	adc	r31, r9
     884:	90 81       	ld	r25, Z
     886:	90 7f       	andi	r25, 0xF0	; 240
     888:	85 2d       	mov	r24, r5
     88a:	8f 70       	andi	r24, 0x0F	; 15
     88c:	49 2e       	mov	r4, r25
     88e:	48 2a       	or	r4, r24
     890:	7e cf       	rjmp	.-260    	; 0x78e <put_fat+0x118>
     892:	81 2f       	mov	r24, r17
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	bf 90       	pop	r11
     8a6:	af 90       	pop	r10
     8a8:	9f 90       	pop	r9
     8aa:	8f 90       	pop	r8
     8ac:	7f 90       	pop	r7
     8ae:	6f 90       	pop	r6
     8b0:	5f 90       	pop	r5
     8b2:	4f 90       	pop	r4
     8b4:	3f 90       	pop	r3
     8b6:	2f 90       	pop	r2
     8b8:	08 95       	ret

000008ba <st_clust>:
     8ba:	fb 01       	movw	r30, r22
     8bc:	22 8f       	std	Z+26, r18	; 0x1a
     8be:	33 8f       	std	Z+27, r19	; 0x1b
     8c0:	dc 01       	movw	r26, r24
     8c2:	8c 91       	ld	r24, X
     8c4:	83 30       	cpi	r24, 0x03	; 3
     8c6:	29 f4       	brne	.+10     	; 0x8d2 <st_clust+0x18>
     8c8:	ca 01       	movw	r24, r20
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	84 8b       	std	Z+20, r24	; 0x14
     8d0:	95 8b       	std	Z+21, r25	; 0x15
     8d2:	08 95       	ret

000008d4 <get_fat>:
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	cf 92       	push	r12
     8da:	df 92       	push	r13
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	42 30       	cpi	r20, 0x02	; 2
     8ea:	51 05       	cpc	r21, r1
     8ec:	61 05       	cpc	r22, r1
     8ee:	71 05       	cpc	r23, r1
     8f0:	08 f4       	brcc	.+2      	; 0x8f4 <get_fat+0x20>
     8f2:	a6 c0       	rjmp	.+332    	; 0xa40 <__stack+0x141>
     8f4:	fc 01       	movw	r30, r24
     8f6:	c0 81       	ld	r28, Z
     8f8:	d1 81       	ldd	r29, Z+1	; 0x01
     8fa:	8b 89       	ldd	r24, Y+19	; 0x13
     8fc:	9c 89       	ldd	r25, Y+20	; 0x14
     8fe:	ad 89       	ldd	r26, Y+21	; 0x15
     900:	be 89       	ldd	r27, Y+22	; 0x16
     902:	48 17       	cp	r20, r24
     904:	59 07       	cpc	r21, r25
     906:	6a 07       	cpc	r22, r26
     908:	7b 07       	cpc	r23, r27
     90a:	08 f0       	brcs	.+2      	; 0x90e <__stack+0xf>
     90c:	9e c0       	rjmp	.+316    	; 0xa4a <__stack+0x14b>
     90e:	6a 01       	movw	r12, r20
     910:	7b 01       	movw	r14, r22
     912:	88 81       	ld	r24, Y
     914:	82 30       	cpi	r24, 0x02	; 2
     916:	09 f4       	brne	.+2      	; 0x91a <__stack+0x1b>
     918:	4d c0       	rjmp	.+154    	; 0x9b4 <__stack+0xb5>
     91a:	83 30       	cpi	r24, 0x03	; 3
     91c:	09 f4       	brne	.+2      	; 0x920 <__stack+0x21>
     91e:	6c c0       	rjmp	.+216    	; 0x9f8 <__stack+0xf9>
     920:	81 30       	cpi	r24, 0x01	; 1
     922:	09 f0       	breq	.+2      	; 0x926 <__stack+0x27>
     924:	97 c0       	rjmp	.+302    	; 0xa54 <__stack+0x155>
     926:	8a 01       	movw	r16, r20
     928:	16 95       	lsr	r17
     92a:	07 95       	ror	r16
     92c:	04 0f       	add	r16, r20
     92e:	15 1f       	adc	r17, r21
     930:	c8 01       	movw	r24, r16
     932:	89 2f       	mov	r24, r25
     934:	99 27       	eor	r25, r25
     936:	86 95       	lsr	r24
     938:	4f 8d       	ldd	r20, Y+31	; 0x1f
     93a:	58 a1       	ldd	r21, Y+32	; 0x20
     93c:	69 a1       	ldd	r22, Y+33	; 0x21
     93e:	7a a1       	ldd	r23, Y+34	; 0x22
     940:	48 0f       	add	r20, r24
     942:	59 1f       	adc	r21, r25
     944:	61 1d       	adc	r22, r1
     946:	71 1d       	adc	r23, r1
     948:	ce 01       	movw	r24, r28
     94a:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
     94e:	81 11       	cpse	r24, r1
     950:	86 c0       	rjmp	.+268    	; 0xa5e <__stack+0x15f>
     952:	58 01       	movw	r10, r16
     954:	ff ef       	ldi	r31, 0xFF	; 255
     956:	af 1a       	sub	r10, r31
     958:	bf 0a       	sbc	r11, r31
     95a:	11 70       	andi	r17, 0x01	; 1
     95c:	fe 01       	movw	r30, r28
     95e:	e0 0f       	add	r30, r16
     960:	f1 1f       	adc	r31, r17
     962:	17 a5       	ldd	r17, Z+47	; 0x2f
     964:	c5 01       	movw	r24, r10
     966:	89 2f       	mov	r24, r25
     968:	99 27       	eor	r25, r25
     96a:	86 95       	lsr	r24
     96c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     96e:	58 a1       	ldd	r21, Y+32	; 0x20
     970:	69 a1       	ldd	r22, Y+33	; 0x21
     972:	7a a1       	ldd	r23, Y+34	; 0x22
     974:	48 0f       	add	r20, r24
     976:	59 1f       	adc	r21, r25
     978:	61 1d       	adc	r22, r1
     97a:	71 1d       	adc	r23, r1
     97c:	ce 01       	movw	r24, r28
     97e:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
     982:	81 11       	cpse	r24, r1
     984:	70 c0       	rjmp	.+224    	; 0xa66 <__stack+0x167>
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	b8 22       	and	r11, r24
     98a:	ca 0d       	add	r28, r10
     98c:	db 1d       	adc	r29, r11
     98e:	8f a5       	ldd	r24, Y+47	; 0x2f
     990:	61 2f       	mov	r22, r17
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	78 2b       	or	r23, r24
     996:	c0 fe       	sbrs	r12, 0
     998:	09 c0       	rjmp	.+18     	; 0x9ac <__stack+0xad>
     99a:	72 95       	swap	r23
     99c:	62 95       	swap	r22
     99e:	6f 70       	andi	r22, 0x0F	; 15
     9a0:	67 27       	eor	r22, r23
     9a2:	7f 70       	andi	r23, 0x0F	; 15
     9a4:	67 27       	eor	r22, r23
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	68 c0       	rjmp	.+208    	; 0xa7c <__stack+0x17d>
     9ac:	7f 70       	andi	r23, 0x0F	; 15
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	64 c0       	rjmp	.+200    	; 0xa7c <__stack+0x17d>
     9b4:	45 2f       	mov	r20, r21
     9b6:	56 2f       	mov	r21, r22
     9b8:	67 2f       	mov	r22, r23
     9ba:	77 27       	eor	r23, r23
     9bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     9be:	98 a1       	ldd	r25, Y+32	; 0x20
     9c0:	a9 a1       	ldd	r26, Y+33	; 0x21
     9c2:	ba a1       	ldd	r27, Y+34	; 0x22
     9c4:	48 0f       	add	r20, r24
     9c6:	59 1f       	adc	r21, r25
     9c8:	6a 1f       	adc	r22, r26
     9ca:	7b 1f       	adc	r23, r27
     9cc:	ce 01       	movw	r24, r28
     9ce:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
     9d2:	81 11       	cpse	r24, r1
     9d4:	4c c0       	rjmp	.+152    	; 0xa6e <__stack+0x16f>
     9d6:	af 96       	adiw	r28, 0x2f	; 47
     9d8:	a6 01       	movw	r20, r12
     9da:	44 0f       	add	r20, r20
     9dc:	55 1f       	adc	r21, r21
     9de:	4e 7f       	andi	r20, 0xFE	; 254
     9e0:	51 70       	andi	r21, 0x01	; 1
     9e2:	c4 0f       	add	r28, r20
     9e4:	d5 1f       	adc	r29, r21
     9e6:	69 81       	ldd	r22, Y+1	; 0x01
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	76 2f       	mov	r23, r22
     9ec:	66 27       	eor	r22, r22
     9ee:	88 81       	ld	r24, Y
     9f0:	68 2b       	or	r22, r24
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	42 c0       	rjmp	.+132    	; 0xa7c <__stack+0x17d>
     9f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     9fa:	98 a1       	ldd	r25, Y+32	; 0x20
     9fc:	a9 a1       	ldd	r26, Y+33	; 0x21
     9fe:	ba a1       	ldd	r27, Y+34	; 0x22
     a00:	68 94       	set
     a02:	16 f8       	bld	r1, 6
     a04:	76 95       	lsr	r23
     a06:	67 95       	ror	r22
     a08:	57 95       	ror	r21
     a0a:	47 95       	ror	r20
     a0c:	16 94       	lsr	r1
     a0e:	d1 f7       	brne	.-12     	; 0xa04 <__stack+0x105>
     a10:	48 0f       	add	r20, r24
     a12:	59 1f       	adc	r21, r25
     a14:	6a 1f       	adc	r22, r26
     a16:	7b 1f       	adc	r23, r27
     a18:	ce 01       	movw	r24, r28
     a1a:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
     a1e:	81 11       	cpse	r24, r1
     a20:	2a c0       	rjmp	.+84     	; 0xa76 <__stack+0x177>
     a22:	af 96       	adiw	r28, 0x2f	; 47
     a24:	a6 01       	movw	r20, r12
     a26:	44 0f       	add	r20, r20
     a28:	55 1f       	adc	r21, r21
     a2a:	44 0f       	add	r20, r20
     a2c:	55 1f       	adc	r21, r21
     a2e:	ca 01       	movw	r24, r20
     a30:	8c 7f       	andi	r24, 0xFC	; 252
     a32:	91 70       	andi	r25, 0x01	; 1
     a34:	8c 0f       	add	r24, r28
     a36:	9d 1f       	adc	r25, r29
     a38:	0e 94 0d 01 	call	0x21a	; 0x21a <ld_dword>
     a3c:	9f 70       	andi	r25, 0x0F	; 15
     a3e:	1e c0       	rjmp	.+60     	; 0xa7c <__stack+0x17d>
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	19 c0       	rjmp	.+50     	; 0xa7c <__stack+0x17d>
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	14 c0       	rjmp	.+40     	; 0xa7c <__stack+0x17d>
     a54:	61 e0       	ldi	r22, 0x01	; 1
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0f c0       	rjmp	.+30     	; 0xa7c <__stack+0x17d>
     a5e:	6f ef       	ldi	r22, 0xFF	; 255
     a60:	7f ef       	ldi	r23, 0xFF	; 255
     a62:	cb 01       	movw	r24, r22
     a64:	0b c0       	rjmp	.+22     	; 0xa7c <__stack+0x17d>
     a66:	6f ef       	ldi	r22, 0xFF	; 255
     a68:	7f ef       	ldi	r23, 0xFF	; 255
     a6a:	cb 01       	movw	r24, r22
     a6c:	07 c0       	rjmp	.+14     	; 0xa7c <__stack+0x17d>
     a6e:	6f ef       	ldi	r22, 0xFF	; 255
     a70:	7f ef       	ldi	r23, 0xFF	; 255
     a72:	cb 01       	movw	r24, r22
     a74:	03 c0       	rjmp	.+6      	; 0xa7c <__stack+0x17d>
     a76:	6f ef       	ldi	r22, 0xFF	; 255
     a78:	7f ef       	ldi	r23, 0xFF	; 255
     a7a:	cb 01       	movw	r24, r22
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	ff 90       	pop	r15
     a86:	ef 90       	pop	r14
     a88:	df 90       	pop	r13
     a8a:	cf 90       	pop	r12
     a8c:	bf 90       	pop	r11
     a8e:	af 90       	pop	r10
     a90:	08 95       	ret

00000a92 <dir_sdi>:
     a92:	4f 92       	push	r4
     a94:	5f 92       	push	r5
     a96:	6f 92       	push	r6
     a98:	7f 92       	push	r7
     a9a:	8f 92       	push	r8
     a9c:	9f 92       	push	r9
     a9e:	af 92       	push	r10
     aa0:	bf 92       	push	r11
     aa2:	cf 92       	push	r12
     aa4:	df 92       	push	r13
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	ec 01       	movw	r28, r24
     ab4:	6a 01       	movw	r12, r20
     ab6:	7b 01       	movw	r14, r22
     ab8:	41 15       	cp	r20, r1
     aba:	51 05       	cpc	r21, r1
     abc:	80 e2       	ldi	r24, 0x20	; 32
     abe:	68 07       	cpc	r22, r24
     ac0:	71 05       	cpc	r23, r1
     ac2:	08 f0       	brcs	.+2      	; 0xac6 <dir_sdi+0x34>
     ac4:	b3 c0       	rjmp	.+358    	; 0xc2c <dir_sdi+0x19a>
     ac6:	db 01       	movw	r26, r22
     ac8:	ca 01       	movw	r24, r20
     aca:	8f 71       	andi	r24, 0x1F	; 31
     acc:	99 27       	eor	r25, r25
     ace:	aa 27       	eor	r26, r26
     ad0:	bb 27       	eor	r27, r27
     ad2:	89 2b       	or	r24, r25
     ad4:	8a 2b       	or	r24, r26
     ad6:	8b 2b       	or	r24, r27
     ad8:	09 f0       	breq	.+2      	; 0xadc <dir_sdi+0x4a>
     ada:	aa c0       	rjmp	.+340    	; 0xc30 <dir_sdi+0x19e>
     adc:	08 81       	ld	r16, Y
     ade:	19 81       	ldd	r17, Y+1	; 0x01
     ae0:	4e 87       	std	Y+14, r20	; 0x0e
     ae2:	5f 87       	std	Y+15, r21	; 0x0f
     ae4:	68 8b       	std	Y+16, r22	; 0x10
     ae6:	79 8b       	std	Y+17, r23	; 0x11
     ae8:	8e 80       	ldd	r8, Y+6	; 0x06
     aea:	9f 80       	ldd	r9, Y+7	; 0x07
     aec:	a8 84       	ldd	r10, Y+8	; 0x08
     aee:	b9 84       	ldd	r11, Y+9	; 0x09
     af0:	81 14       	cp	r8, r1
     af2:	91 04       	cpc	r9, r1
     af4:	a1 04       	cpc	r10, r1
     af6:	b1 04       	cpc	r11, r1
     af8:	61 f5       	brne	.+88     	; 0xb52 <dir_sdi+0xc0>
     afa:	f8 01       	movw	r30, r16
     afc:	80 81       	ld	r24, Z
     afe:	83 30       	cpi	r24, 0x03	; 3
     b00:	40 f0       	brcs	.+16     	; 0xb12 <dir_sdi+0x80>
     b02:	83 a1       	ldd	r24, Z+35	; 0x23
     b04:	94 a1       	ldd	r25, Z+36	; 0x24
     b06:	a5 a1       	ldd	r26, Z+37	; 0x25
     b08:	b6 a1       	ldd	r27, Z+38	; 0x26
     b0a:	00 97       	sbiw	r24, 0x00	; 0
     b0c:	a1 05       	cpc	r26, r1
     b0e:	b1 05       	cpc	r27, r1
     b10:	f1 f4       	brne	.+60     	; 0xb4e <dir_sdi+0xbc>
     b12:	f8 01       	movw	r30, r16
     b14:	87 81       	ldd	r24, Z+7	; 0x07
     b16:	90 85       	ldd	r25, Z+8	; 0x08
     b18:	a0 e0       	ldi	r26, 0x00	; 0
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	b7 01       	movw	r22, r14
     b1e:	a6 01       	movw	r20, r12
     b20:	68 94       	set
     b22:	14 f8       	bld	r1, 4
     b24:	76 95       	lsr	r23
     b26:	67 95       	ror	r22
     b28:	57 95       	ror	r21
     b2a:	47 95       	ror	r20
     b2c:	16 94       	lsr	r1
     b2e:	d1 f7       	brne	.-12     	; 0xb24 <dir_sdi+0x92>
     b30:	48 17       	cp	r20, r24
     b32:	59 07       	cpc	r21, r25
     b34:	6a 07       	cpc	r22, r26
     b36:	7b 07       	cpc	r23, r27
     b38:	08 f0       	brcs	.+2      	; 0xb3c <dir_sdi+0xaa>
     b3a:	7c c0       	rjmp	.+248    	; 0xc34 <dir_sdi+0x1a2>
     b3c:	83 a1       	ldd	r24, Z+35	; 0x23
     b3e:	94 a1       	ldd	r25, Z+36	; 0x24
     b40:	a5 a1       	ldd	r26, Z+37	; 0x25
     b42:	b6 a1       	ldd	r27, Z+38	; 0x26
     b44:	8e 8b       	std	Y+22, r24	; 0x16
     b46:	9f 8b       	std	Y+23, r25	; 0x17
     b48:	a8 8f       	std	Y+24, r26	; 0x18
     b4a:	b9 8f       	std	Y+25, r27	; 0x19
     b4c:	46 c0       	rjmp	.+140    	; 0xbda <dir_sdi+0x148>
     b4e:	4c 01       	movw	r8, r24
     b50:	5d 01       	movw	r10, r26
     b52:	f8 01       	movw	r30, r16
     b54:	41 84       	ldd	r4, Z+9	; 0x09
     b56:	52 84       	ldd	r5, Z+10	; 0x0a
     b58:	61 2c       	mov	r6, r1
     b5a:	71 2c       	mov	r7, r1
     b5c:	03 2e       	mov	r0, r19
     b5e:	39 e0       	ldi	r19, 0x09	; 9
     b60:	44 0c       	add	r4, r4
     b62:	55 1c       	adc	r5, r5
     b64:	66 1c       	adc	r6, r6
     b66:	77 1c       	adc	r7, r7
     b68:	3a 95       	dec	r19
     b6a:	d1 f7       	brne	.-12     	; 0xb60 <dir_sdi+0xce>
     b6c:	30 2d       	mov	r19, r0
     b6e:	c4 14       	cp	r12, r4
     b70:	d5 04       	cpc	r13, r5
     b72:	e6 04       	cpc	r14, r6
     b74:	f7 04       	cpc	r15, r7
     b76:	40 f1       	brcs	.+80     	; 0xbc8 <dir_sdi+0x136>
     b78:	b5 01       	movw	r22, r10
     b7a:	a4 01       	movw	r20, r8
     b7c:	ce 01       	movw	r24, r28
     b7e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <get_fat>
     b82:	4b 01       	movw	r8, r22
     b84:	5c 01       	movw	r10, r24
     b86:	6f 3f       	cpi	r22, 0xFF	; 255
     b88:	7f 4f       	sbci	r23, 0xFF	; 255
     b8a:	8f 4f       	sbci	r24, 0xFF	; 255
     b8c:	9f 4f       	sbci	r25, 0xFF	; 255
     b8e:	09 f4       	brne	.+2      	; 0xb92 <dir_sdi+0x100>
     b90:	53 c0       	rjmp	.+166    	; 0xc38 <dir_sdi+0x1a6>
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	88 16       	cp	r8, r24
     b96:	91 04       	cpc	r9, r1
     b98:	a1 04       	cpc	r10, r1
     b9a:	b1 04       	cpc	r11, r1
     b9c:	08 f4       	brcc	.+2      	; 0xba0 <dir_sdi+0x10e>
     b9e:	4e c0       	rjmp	.+156    	; 0xc3c <dir_sdi+0x1aa>
     ba0:	f8 01       	movw	r30, r16
     ba2:	83 89       	ldd	r24, Z+19	; 0x13
     ba4:	94 89       	ldd	r25, Z+20	; 0x14
     ba6:	a5 89       	ldd	r26, Z+21	; 0x15
     ba8:	b6 89       	ldd	r27, Z+22	; 0x16
     baa:	88 16       	cp	r8, r24
     bac:	99 06       	cpc	r9, r25
     bae:	aa 06       	cpc	r10, r26
     bb0:	bb 06       	cpc	r11, r27
     bb2:	08 f0       	brcs	.+2      	; 0xbb6 <dir_sdi+0x124>
     bb4:	45 c0       	rjmp	.+138    	; 0xc40 <dir_sdi+0x1ae>
     bb6:	c4 18       	sub	r12, r4
     bb8:	d5 08       	sbc	r13, r5
     bba:	e6 08       	sbc	r14, r6
     bbc:	f7 08       	sbc	r15, r7
     bbe:	c4 14       	cp	r12, r4
     bc0:	d5 04       	cpc	r13, r5
     bc2:	e6 04       	cpc	r14, r6
     bc4:	f7 04       	cpc	r15, r7
     bc6:	c0 f6       	brcc	.-80     	; 0xb78 <dir_sdi+0xe6>
     bc8:	b5 01       	movw	r22, r10
     bca:	a4 01       	movw	r20, r8
     bcc:	c8 01       	movw	r24, r16
     bce:	0e 94 44 01 	call	0x288	; 0x288 <clst2sect>
     bd2:	6e 8b       	std	Y+22, r22	; 0x16
     bd4:	7f 8b       	std	Y+23, r23	; 0x17
     bd6:	88 8f       	std	Y+24, r24	; 0x18
     bd8:	99 8f       	std	Y+25, r25	; 0x19
     bda:	8a 8a       	std	Y+18, r8	; 0x12
     bdc:	9b 8a       	std	Y+19, r9	; 0x13
     bde:	ac 8a       	std	Y+20, r10	; 0x14
     be0:	bd 8a       	std	Y+21, r11	; 0x15
     be2:	8e 89       	ldd	r24, Y+22	; 0x16
     be4:	9f 89       	ldd	r25, Y+23	; 0x17
     be6:	a8 8d       	ldd	r26, Y+24	; 0x18
     be8:	b9 8d       	ldd	r27, Y+25	; 0x19
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	a1 05       	cpc	r26, r1
     bee:	b1 05       	cpc	r27, r1
     bf0:	49 f1       	breq	.+82     	; 0xc44 <dir_sdi+0x1b2>
     bf2:	b7 01       	movw	r22, r14
     bf4:	a6 01       	movw	r20, r12
     bf6:	03 2e       	mov	r0, r19
     bf8:	39 e0       	ldi	r19, 0x09	; 9
     bfa:	76 95       	lsr	r23
     bfc:	67 95       	ror	r22
     bfe:	57 95       	ror	r21
     c00:	47 95       	ror	r20
     c02:	3a 95       	dec	r19
     c04:	d1 f7       	brne	.-12     	; 0xbfa <dir_sdi+0x168>
     c06:	30 2d       	mov	r19, r0
     c08:	84 0f       	add	r24, r20
     c0a:	95 1f       	adc	r25, r21
     c0c:	a6 1f       	adc	r26, r22
     c0e:	b7 1f       	adc	r27, r23
     c10:	8e 8b       	std	Y+22, r24	; 0x16
     c12:	9f 8b       	std	Y+23, r25	; 0x17
     c14:	a8 8f       	std	Y+24, r26	; 0x18
     c16:	b9 8f       	std	Y+25, r27	; 0x19
     c18:	01 5d       	subi	r16, 0xD1	; 209
     c1a:	1f 4f       	sbci	r17, 0xFF	; 255
     c1c:	f1 e0       	ldi	r31, 0x01	; 1
     c1e:	df 22       	and	r13, r31
     c20:	c0 0e       	add	r12, r16
     c22:	d1 1e       	adc	r13, r17
     c24:	db 8e       	std	Y+27, r13	; 0x1b
     c26:	ca 8e       	std	Y+26, r12	; 0x1a
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0d c0       	rjmp	.+26     	; 0xc46 <dir_sdi+0x1b4>
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	0b c0       	rjmp	.+22     	; 0xc46 <dir_sdi+0x1b4>
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	09 c0       	rjmp	.+18     	; 0xc46 <dir_sdi+0x1b4>
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	07 c0       	rjmp	.+14     	; 0xc46 <dir_sdi+0x1b4>
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	05 c0       	rjmp	.+10     	; 0xc46 <dir_sdi+0x1b4>
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <dir_sdi+0x1b4>
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <dir_sdi+0x1b4>
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	bf 90       	pop	r11
     c58:	af 90       	pop	r10
     c5a:	9f 90       	pop	r9
     c5c:	8f 90       	pop	r8
     c5e:	7f 90       	pop	r7
     c60:	6f 90       	pop	r6
     c62:	5f 90       	pop	r5
     c64:	4f 90       	pop	r4
     c66:	08 95       	ret

00000c68 <create_chain>:
     c68:	4f 92       	push	r4
     c6a:	5f 92       	push	r5
     c6c:	6f 92       	push	r6
     c6e:	7f 92       	push	r7
     c70:	8f 92       	push	r8
     c72:	9f 92       	push	r9
     c74:	af 92       	push	r10
     c76:	bf 92       	push	r11
     c78:	cf 92       	push	r12
     c7a:	df 92       	push	r13
     c7c:	ef 92       	push	r14
     c7e:	ff 92       	push	r15
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	8c 01       	movw	r16, r24
     c8a:	2a 01       	movw	r4, r20
     c8c:	3b 01       	movw	r6, r22
     c8e:	fc 01       	movw	r30, r24
     c90:	c0 81       	ld	r28, Z
     c92:	d1 81       	ldd	r29, Z+1	; 0x01
     c94:	41 15       	cp	r20, r1
     c96:	51 05       	cpc	r21, r1
     c98:	61 05       	cpc	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	c9 f4       	brne	.+50     	; 0xcd0 <create_chain+0x68>
     c9e:	8b 84       	ldd	r8, Y+11	; 0x0b
     ca0:	9c 84       	ldd	r9, Y+12	; 0x0c
     ca2:	ad 84       	ldd	r10, Y+13	; 0x0d
     ca4:	be 84       	ldd	r11, Y+14	; 0x0e
     ca6:	81 14       	cp	r8, r1
     ca8:	91 04       	cpc	r9, r1
     caa:	a1 04       	cpc	r10, r1
     cac:	b1 04       	cpc	r11, r1
     cae:	09 f4       	brne	.+2      	; 0xcb2 <create_chain+0x4a>
     cb0:	22 c1       	rjmp	.+580    	; 0xef6 <create_chain+0x28e>
     cb2:	8b 89       	ldd	r24, Y+19	; 0x13
     cb4:	9c 89       	ldd	r25, Y+20	; 0x14
     cb6:	ad 89       	ldd	r26, Y+21	; 0x15
     cb8:	be 89       	ldd	r27, Y+22	; 0x16
     cba:	88 16       	cp	r8, r24
     cbc:	99 06       	cpc	r9, r25
     cbe:	aa 06       	cpc	r10, r26
     cc0:	bb 06       	cpc	r11, r27
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <create_chain+0x5e>
     cc4:	1c c1       	rjmp	.+568    	; 0xefe <create_chain+0x296>
     cc6:	81 2c       	mov	r8, r1
     cc8:	91 2c       	mov	r9, r1
     cca:	54 01       	movw	r10, r8
     ccc:	83 94       	inc	r8
     cce:	17 c1       	rjmp	.+558    	; 0xefe <create_chain+0x296>
     cd0:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <get_fat>
     cd4:	62 30       	cpi	r22, 0x02	; 2
     cd6:	71 05       	cpc	r23, r1
     cd8:	81 05       	cpc	r24, r1
     cda:	91 05       	cpc	r25, r1
     cdc:	08 f4       	brcc	.+2      	; 0xce0 <create_chain+0x78>
     cde:	d3 c0       	rjmp	.+422    	; 0xe86 <create_chain+0x21e>
     ce0:	6f 3f       	cpi	r22, 0xFF	; 255
     ce2:	ff ef       	ldi	r31, 0xFF	; 255
     ce4:	7f 07       	cpc	r23, r31
     ce6:	8f 07       	cpc	r24, r31
     ce8:	9f 07       	cpc	r25, r31
     cea:	09 f4       	brne	.+2      	; 0xcee <create_chain+0x86>
     cec:	d1 c0       	rjmp	.+418    	; 0xe90 <create_chain+0x228>
     cee:	cb 88       	ldd	r12, Y+19	; 0x13
     cf0:	dc 88       	ldd	r13, Y+20	; 0x14
     cf2:	ed 88       	ldd	r14, Y+21	; 0x15
     cf4:	fe 88       	ldd	r15, Y+22	; 0x16
     cf6:	6c 15       	cp	r22, r12
     cf8:	7d 05       	cpc	r23, r13
     cfa:	8e 05       	cpc	r24, r14
     cfc:	9f 05       	cpc	r25, r15
     cfe:	08 f0       	brcs	.+2      	; 0xd02 <create_chain+0x9a>
     d00:	e9 c0       	rjmp	.+466    	; 0xed4 <create_chain+0x26c>
     d02:	07 c1       	rjmp	.+526    	; 0xf12 <create_chain+0x2aa>
     d04:	73 01       	movw	r14, r6
     d06:	62 01       	movw	r12, r4
     d08:	2f ef       	ldi	r18, 0xFF	; 255
     d0a:	c2 1a       	sub	r12, r18
     d0c:	d2 0a       	sbc	r13, r18
     d0e:	e2 0a       	sbc	r14, r18
     d10:	f2 0a       	sbc	r15, r18
     d12:	8b 89       	ldd	r24, Y+19	; 0x13
     d14:	9c 89       	ldd	r25, Y+20	; 0x14
     d16:	ad 89       	ldd	r26, Y+21	; 0x15
     d18:	be 89       	ldd	r27, Y+22	; 0x16
     d1a:	c8 16       	cp	r12, r24
     d1c:	d9 06       	cpc	r13, r25
     d1e:	ea 06       	cpc	r14, r26
     d20:	fb 06       	cpc	r15, r27
     d22:	28 f0       	brcs	.+10     	; 0xd2e <create_chain+0xc6>
     d24:	c1 2c       	mov	r12, r1
     d26:	d1 2c       	mov	r13, r1
     d28:	76 01       	movw	r14, r12
     d2a:	68 94       	set
     d2c:	c1 f8       	bld	r12, 1
     d2e:	b7 01       	movw	r22, r14
     d30:	a6 01       	movw	r20, r12
     d32:	c8 01       	movw	r24, r16
     d34:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <get_fat>
     d38:	61 30       	cpi	r22, 0x01	; 1
     d3a:	71 05       	cpc	r23, r1
     d3c:	81 05       	cpc	r24, r1
     d3e:	91 05       	cpc	r25, r1
     d40:	09 f4       	brne	.+2      	; 0xd44 <create_chain+0xdc>
     d42:	aa c0       	rjmp	.+340    	; 0xe98 <create_chain+0x230>
     d44:	6f 3f       	cpi	r22, 0xFF	; 255
     d46:	ef ef       	ldi	r30, 0xFF	; 255
     d48:	7e 07       	cpc	r23, r30
     d4a:	8e 07       	cpc	r24, r30
     d4c:	9e 07       	cpc	r25, r30
     d4e:	09 f4       	brne	.+2      	; 0xd52 <create_chain+0xea>
     d50:	a8 c0       	rjmp	.+336    	; 0xea2 <create_chain+0x23a>
     d52:	67 2b       	or	r22, r23
     d54:	68 2b       	or	r22, r24
     d56:	69 2b       	or	r22, r25
     d58:	b1 f0       	breq	.+44     	; 0xd86 <create_chain+0x11e>
     d5a:	8b 84       	ldd	r8, Y+11	; 0x0b
     d5c:	9c 84       	ldd	r9, Y+12	; 0x0c
     d5e:	ad 84       	ldd	r10, Y+13	; 0x0d
     d60:	be 84       	ldd	r11, Y+14	; 0x0e
     d62:	f2 e0       	ldi	r31, 0x02	; 2
     d64:	8f 16       	cp	r8, r31
     d66:	91 04       	cpc	r9, r1
     d68:	a1 04       	cpc	r10, r1
     d6a:	b1 04       	cpc	r11, r1
     d6c:	08 f4       	brcc	.+2      	; 0xd70 <create_chain+0x108>
     d6e:	bd c0       	rjmp	.+378    	; 0xeea <create_chain+0x282>
     d70:	8b 89       	ldd	r24, Y+19	; 0x13
     d72:	9c 89       	ldd	r25, Y+20	; 0x14
     d74:	ad 89       	ldd	r26, Y+21	; 0x15
     d76:	be 89       	ldd	r27, Y+22	; 0x16
     d78:	88 16       	cp	r8, r24
     d7a:	99 06       	cpc	r9, r25
     d7c:	aa 06       	cpc	r10, r26
     d7e:	bb 06       	cpc	r11, r27
     d80:	08 f0       	brcs	.+2      	; 0xd84 <create_chain+0x11c>
     d82:	b6 c0       	rjmp	.+364    	; 0xef0 <create_chain+0x288>
     d84:	07 c0       	rjmp	.+14     	; 0xd94 <create_chain+0x12c>
     d86:	c1 14       	cp	r12, r1
     d88:	d1 04       	cpc	r13, r1
     d8a:	e1 04       	cpc	r14, r1
     d8c:	f1 04       	cpc	r15, r1
     d8e:	d1 f5       	brne	.+116    	; 0xe04 <create_chain+0x19c>
     d90:	53 01       	movw	r10, r6
     d92:	42 01       	movw	r8, r4
     d94:	75 01       	movw	r14, r10
     d96:	64 01       	movw	r12, r8
     d98:	2f ef       	ldi	r18, 0xFF	; 255
     d9a:	c2 1a       	sub	r12, r18
     d9c:	d2 0a       	sbc	r13, r18
     d9e:	e2 0a       	sbc	r14, r18
     da0:	f2 0a       	sbc	r15, r18
     da2:	8b 89       	ldd	r24, Y+19	; 0x13
     da4:	9c 89       	ldd	r25, Y+20	; 0x14
     da6:	ad 89       	ldd	r26, Y+21	; 0x15
     da8:	be 89       	ldd	r27, Y+22	; 0x16
     daa:	c8 16       	cp	r12, r24
     dac:	d9 06       	cpc	r13, r25
     dae:	ea 06       	cpc	r14, r26
     db0:	fb 06       	cpc	r15, r27
     db2:	60 f0       	brcs	.+24     	; 0xdcc <create_chain+0x164>
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	88 16       	cp	r8, r24
     db8:	91 04       	cpc	r9, r1
     dba:	a1 04       	cpc	r10, r1
     dbc:	b1 04       	cpc	r11, r1
     dbe:	08 f4       	brcc	.+2      	; 0xdc2 <create_chain+0x15a>
     dc0:	74 c0       	rjmp	.+232    	; 0xeaa <create_chain+0x242>
     dc2:	c1 2c       	mov	r12, r1
     dc4:	d1 2c       	mov	r13, r1
     dc6:	76 01       	movw	r14, r12
     dc8:	68 94       	set
     dca:	c1 f8       	bld	r12, 1
     dcc:	b7 01       	movw	r22, r14
     dce:	a6 01       	movw	r20, r12
     dd0:	c8 01       	movw	r24, r16
     dd2:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <get_fat>
     dd6:	61 15       	cp	r22, r1
     dd8:	71 05       	cpc	r23, r1
     dda:	81 05       	cpc	r24, r1
     ddc:	91 05       	cpc	r25, r1
     dde:	91 f0       	breq	.+36     	; 0xe04 <create_chain+0x19c>
     de0:	61 30       	cpi	r22, 0x01	; 1
     de2:	71 05       	cpc	r23, r1
     de4:	81 05       	cpc	r24, r1
     de6:	91 05       	cpc	r25, r1
     de8:	09 f4       	brne	.+2      	; 0xdec <create_chain+0x184>
     dea:	63 c0       	rjmp	.+198    	; 0xeb2 <create_chain+0x24a>
     dec:	6f 3f       	cpi	r22, 0xFF	; 255
     dee:	7f 4f       	sbci	r23, 0xFF	; 255
     df0:	8f 4f       	sbci	r24, 0xFF	; 255
     df2:	9f 4f       	sbci	r25, 0xFF	; 255
     df4:	09 f4       	brne	.+2      	; 0xdf8 <create_chain+0x190>
     df6:	62 c0       	rjmp	.+196    	; 0xebc <create_chain+0x254>
     df8:	c8 14       	cp	r12, r8
     dfa:	d9 04       	cpc	r13, r9
     dfc:	ea 04       	cpc	r14, r10
     dfe:	fb 04       	cpc	r15, r11
     e00:	59 f6       	brne	.-106    	; 0xd98 <create_chain+0x130>
     e02:	60 c0       	rjmp	.+192    	; 0xec4 <create_chain+0x25c>
     e04:	0f ef       	ldi	r16, 0xFF	; 255
     e06:	1f ef       	ldi	r17, 0xFF	; 255
     e08:	98 01       	movw	r18, r16
     e0a:	b7 01       	movw	r22, r14
     e0c:	a6 01       	movw	r20, r12
     e0e:	ce 01       	movw	r24, r28
     e10:	0e 94 3b 03 	call	0x676	; 0x676 <put_fat>
     e14:	81 11       	cpse	r24, r1
     e16:	30 c0       	rjmp	.+96     	; 0xe78 <create_chain+0x210>
     e18:	41 14       	cp	r4, r1
     e1a:	51 04       	cpc	r5, r1
     e1c:	61 04       	cpc	r6, r1
     e1e:	71 04       	cpc	r7, r1
     e20:	49 f0       	breq	.+18     	; 0xe34 <create_chain+0x1cc>
     e22:	97 01       	movw	r18, r14
     e24:	86 01       	movw	r16, r12
     e26:	b3 01       	movw	r22, r6
     e28:	a2 01       	movw	r20, r4
     e2a:	ce 01       	movw	r24, r28
     e2c:	0e 94 3b 03 	call	0x676	; 0x676 <put_fat>
     e30:	81 11       	cpse	r24, r1
     e32:	22 c0       	rjmp	.+68     	; 0xe78 <create_chain+0x210>
     e34:	cb 86       	std	Y+11, r12	; 0x0b
     e36:	dc 86       	std	Y+12, r13	; 0x0c
     e38:	ed 86       	std	Y+13, r14	; 0x0d
     e3a:	fe 86       	std	Y+14, r15	; 0x0e
     e3c:	4f 85       	ldd	r20, Y+15	; 0x0f
     e3e:	58 89       	ldd	r21, Y+16	; 0x10
     e40:	69 89       	ldd	r22, Y+17	; 0x11
     e42:	7a 89       	ldd	r23, Y+18	; 0x12
     e44:	8b 89       	ldd	r24, Y+19	; 0x13
     e46:	9c 89       	ldd	r25, Y+20	; 0x14
     e48:	ad 89       	ldd	r26, Y+21	; 0x15
     e4a:	be 89       	ldd	r27, Y+22	; 0x16
     e4c:	02 97       	sbiw	r24, 0x02	; 2
     e4e:	a1 09       	sbc	r26, r1
     e50:	b1 09       	sbc	r27, r1
     e52:	84 17       	cp	r24, r20
     e54:	95 07       	cpc	r25, r21
     e56:	a6 07       	cpc	r26, r22
     e58:	b7 07       	cpc	r27, r23
     e5a:	40 f0       	brcs	.+16     	; 0xe6c <create_chain+0x204>
     e5c:	41 50       	subi	r20, 0x01	; 1
     e5e:	51 09       	sbc	r21, r1
     e60:	61 09       	sbc	r22, r1
     e62:	71 09       	sbc	r23, r1
     e64:	4f 87       	std	Y+15, r20	; 0x0f
     e66:	58 8b       	std	Y+16, r21	; 0x10
     e68:	69 8b       	std	Y+17, r22	; 0x11
     e6a:	7a 8b       	std	Y+18, r23	; 0x12
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	81 60       	ori	r24, 0x01	; 1
     e70:	8c 83       	std	Y+4, r24	; 0x04
     e72:	c7 01       	movw	r24, r14
     e74:	b6 01       	movw	r22, r12
     e76:	4d c0       	rjmp	.+154    	; 0xf12 <create_chain+0x2aa>
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	41 f1       	breq	.+80     	; 0xecc <create_chain+0x264>
     e7c:	61 e0       	ldi	r22, 0x01	; 1
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	46 c0       	rjmp	.+140    	; 0xf12 <create_chain+0x2aa>
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	41 c0       	rjmp	.+130    	; 0xf12 <create_chain+0x2aa>
     e90:	6f ef       	ldi	r22, 0xFF	; 255
     e92:	7f ef       	ldi	r23, 0xFF	; 255
     e94:	cb 01       	movw	r24, r22
     e96:	3d c0       	rjmp	.+122    	; 0xf12 <create_chain+0x2aa>
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	38 c0       	rjmp	.+112    	; 0xf12 <create_chain+0x2aa>
     ea2:	6f ef       	ldi	r22, 0xFF	; 255
     ea4:	7f ef       	ldi	r23, 0xFF	; 255
     ea6:	cb 01       	movw	r24, r22
     ea8:	34 c0       	rjmp	.+104    	; 0xf12 <create_chain+0x2aa>
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	cb 01       	movw	r24, r22
     eb0:	30 c0       	rjmp	.+96     	; 0xf12 <create_chain+0x2aa>
     eb2:	61 e0       	ldi	r22, 0x01	; 1
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	2b c0       	rjmp	.+86     	; 0xf12 <create_chain+0x2aa>
     ebc:	6f ef       	ldi	r22, 0xFF	; 255
     ebe:	7f ef       	ldi	r23, 0xFF	; 255
     ec0:	cb 01       	movw	r24, r22
     ec2:	27 c0       	rjmp	.+78     	; 0xf12 <create_chain+0x2aa>
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	cb 01       	movw	r24, r22
     eca:	23 c0       	rjmp	.+70     	; 0xf12 <create_chain+0x2aa>
     ecc:	6f ef       	ldi	r22, 0xFF	; 255
     ece:	7f ef       	ldi	r23, 0xFF	; 255
     ed0:	cb 01       	movw	r24, r22
     ed2:	1f c0       	rjmp	.+62     	; 0xf12 <create_chain+0x2aa>
     ed4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ed6:	78 89       	ldd	r23, Y+16	; 0x10
     ed8:	89 89       	ldd	r24, Y+17	; 0x11
     eda:	9a 89       	ldd	r25, Y+18	; 0x12
     edc:	61 15       	cp	r22, r1
     ede:	71 05       	cpc	r23, r1
     ee0:	81 05       	cpc	r24, r1
     ee2:	91 05       	cpc	r25, r1
     ee4:	09 f0       	breq	.+2      	; 0xee8 <create_chain+0x280>
     ee6:	0e cf       	rjmp	.-484    	; 0xd04 <create_chain+0x9c>
     ee8:	14 c0       	rjmp	.+40     	; 0xf12 <create_chain+0x2aa>
     eea:	53 01       	movw	r10, r6
     eec:	42 01       	movw	r8, r4
     eee:	52 cf       	rjmp	.-348    	; 0xd94 <create_chain+0x12c>
     ef0:	53 01       	movw	r10, r6
     ef2:	42 01       	movw	r8, r4
     ef4:	4f cf       	rjmp	.-354    	; 0xd94 <create_chain+0x12c>
     ef6:	81 2c       	mov	r8, r1
     ef8:	91 2c       	mov	r9, r1
     efa:	54 01       	movw	r10, r8
     efc:	83 94       	inc	r8
     efe:	6f 85       	ldd	r22, Y+15	; 0x0f
     f00:	78 89       	ldd	r23, Y+16	; 0x10
     f02:	89 89       	ldd	r24, Y+17	; 0x11
     f04:	9a 89       	ldd	r25, Y+18	; 0x12
     f06:	61 15       	cp	r22, r1
     f08:	71 05       	cpc	r23, r1
     f0a:	81 05       	cpc	r24, r1
     f0c:	91 05       	cpc	r25, r1
     f0e:	09 f0       	breq	.+2      	; 0xf12 <create_chain+0x2aa>
     f10:	41 cf       	rjmp	.-382    	; 0xd94 <create_chain+0x12c>
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	df 90       	pop	r13
     f20:	cf 90       	pop	r12
     f22:	bf 90       	pop	r11
     f24:	af 90       	pop	r10
     f26:	9f 90       	pop	r9
     f28:	8f 90       	pop	r8
     f2a:	7f 90       	pop	r7
     f2c:	6f 90       	pop	r6
     f2e:	5f 90       	pop	r5
     f30:	4f 90       	pop	r4
     f32:	08 95       	ret

00000f34 <remove_chain>:
     f34:	4f 92       	push	r4
     f36:	5f 92       	push	r5
     f38:	6f 92       	push	r6
     f3a:	7f 92       	push	r7
     f3c:	af 92       	push	r10
     f3e:	bf 92       	push	r11
     f40:	cf 92       	push	r12
     f42:	df 92       	push	r13
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	5c 01       	movw	r10, r24
     f52:	6a 01       	movw	r12, r20
     f54:	7b 01       	movw	r14, r22
     f56:	b9 01       	movw	r22, r18
     f58:	a8 01       	movw	r20, r16
     f5a:	22 e0       	ldi	r18, 0x02	; 2
     f5c:	c2 16       	cp	r12, r18
     f5e:	d1 04       	cpc	r13, r1
     f60:	e1 04       	cpc	r14, r1
     f62:	f1 04       	cpc	r15, r1
     f64:	08 f4       	brcc	.+2      	; 0xf68 <remove_chain+0x34>
     f66:	63 c0       	rjmp	.+198    	; 0x102e <remove_chain+0xfa>
     f68:	fc 01       	movw	r30, r24
     f6a:	c0 81       	ld	r28, Z
     f6c:	d1 81       	ldd	r29, Z+1	; 0x01
     f6e:	8b 89       	ldd	r24, Y+19	; 0x13
     f70:	9c 89       	ldd	r25, Y+20	; 0x14
     f72:	ad 89       	ldd	r26, Y+21	; 0x15
     f74:	be 89       	ldd	r27, Y+22	; 0x16
     f76:	c8 16       	cp	r12, r24
     f78:	d9 06       	cpc	r13, r25
     f7a:	ea 06       	cpc	r14, r26
     f7c:	fb 06       	cpc	r15, r27
     f7e:	08 f0       	brcs	.+2      	; 0xf82 <remove_chain+0x4e>
     f80:	58 c0       	rjmp	.+176    	; 0x1032 <remove_chain+0xfe>
     f82:	41 15       	cp	r20, r1
     f84:	51 05       	cpc	r21, r1
     f86:	61 05       	cpc	r22, r1
     f88:	71 05       	cpc	r23, r1
     f8a:	41 f0       	breq	.+16     	; 0xf9c <remove_chain+0x68>
     f8c:	0f ef       	ldi	r16, 0xFF	; 255
     f8e:	1f ef       	ldi	r17, 0xFF	; 255
     f90:	98 01       	movw	r18, r16
     f92:	ce 01       	movw	r24, r28
     f94:	0e 94 3b 03 	call	0x676	; 0x676 <put_fat>
     f98:	81 11       	cpse	r24, r1
     f9a:	52 c0       	rjmp	.+164    	; 0x1040 <remove_chain+0x10c>
     f9c:	b7 01       	movw	r22, r14
     f9e:	a6 01       	movw	r20, r12
     fa0:	c5 01       	movw	r24, r10
     fa2:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <get_fat>
     fa6:	2b 01       	movw	r4, r22
     fa8:	3c 01       	movw	r6, r24
     faa:	61 15       	cp	r22, r1
     fac:	71 05       	cpc	r23, r1
     fae:	81 05       	cpc	r24, r1
     fb0:	91 05       	cpc	r25, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <remove_chain+0x82>
     fb4:	40 c0       	rjmp	.+128    	; 0x1036 <remove_chain+0x102>
     fb6:	61 30       	cpi	r22, 0x01	; 1
     fb8:	71 05       	cpc	r23, r1
     fba:	81 05       	cpc	r24, r1
     fbc:	91 05       	cpc	r25, r1
     fbe:	e9 f1       	breq	.+122    	; 0x103a <remove_chain+0x106>
     fc0:	6f 3f       	cpi	r22, 0xFF	; 255
     fc2:	7f 4f       	sbci	r23, 0xFF	; 255
     fc4:	8f 4f       	sbci	r24, 0xFF	; 255
     fc6:	9f 4f       	sbci	r25, 0xFF	; 255
     fc8:	d1 f1       	breq	.+116    	; 0x103e <remove_chain+0x10a>
     fca:	00 e0       	ldi	r16, 0x00	; 0
     fcc:	10 e0       	ldi	r17, 0x00	; 0
     fce:	98 01       	movw	r18, r16
     fd0:	b7 01       	movw	r22, r14
     fd2:	a6 01       	movw	r20, r12
     fd4:	ce 01       	movw	r24, r28
     fd6:	0e 94 3b 03 	call	0x676	; 0x676 <put_fat>
     fda:	81 11       	cpse	r24, r1
     fdc:	31 c0       	rjmp	.+98     	; 0x1040 <remove_chain+0x10c>
     fde:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe0:	98 89       	ldd	r25, Y+16	; 0x10
     fe2:	a9 89       	ldd	r26, Y+17	; 0x11
     fe4:	ba 89       	ldd	r27, Y+18	; 0x12
     fe6:	4b 89       	ldd	r20, Y+19	; 0x13
     fe8:	5c 89       	ldd	r21, Y+20	; 0x14
     fea:	6d 89       	ldd	r22, Y+21	; 0x15
     fec:	7e 89       	ldd	r23, Y+22	; 0x16
     fee:	6a 01       	movw	r12, r20
     ff0:	7b 01       	movw	r14, r22
     ff2:	e2 e0       	ldi	r30, 0x02	; 2
     ff4:	ce 1a       	sub	r12, r30
     ff6:	d1 08       	sbc	r13, r1
     ff8:	e1 08       	sbc	r14, r1
     ffa:	f1 08       	sbc	r15, r1
     ffc:	8c 15       	cp	r24, r12
     ffe:	9d 05       	cpc	r25, r13
    1000:	ae 05       	cpc	r26, r14
    1002:	bf 05       	cpc	r27, r15
    1004:	50 f4       	brcc	.+20     	; 0x101a <remove_chain+0xe6>
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	a1 1d       	adc	r26, r1
    100a:	b1 1d       	adc	r27, r1
    100c:	8f 87       	std	Y+15, r24	; 0x0f
    100e:	98 8b       	std	Y+16, r25	; 0x10
    1010:	a9 8b       	std	Y+17, r26	; 0x11
    1012:	ba 8b       	std	Y+18, r27	; 0x12
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	81 60       	ori	r24, 0x01	; 1
    1018:	8c 83       	std	Y+4, r24	; 0x04
    101a:	73 01       	movw	r14, r6
    101c:	62 01       	movw	r12, r4
    101e:	44 16       	cp	r4, r20
    1020:	55 06       	cpc	r5, r21
    1022:	66 06       	cpc	r6, r22
    1024:	77 06       	cpc	r7, r23
    1026:	08 f4       	brcc	.+2      	; 0x102a <remove_chain+0xf6>
    1028:	b9 cf       	rjmp	.-142    	; 0xf9c <remove_chain+0x68>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	09 c0       	rjmp	.+18     	; 0x1040 <remove_chain+0x10c>
    102e:	82 e0       	ldi	r24, 0x02	; 2
    1030:	07 c0       	rjmp	.+14     	; 0x1040 <remove_chain+0x10c>
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	05 c0       	rjmp	.+10     	; 0x1040 <remove_chain+0x10c>
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	03 c0       	rjmp	.+6      	; 0x1040 <remove_chain+0x10c>
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	01 c0       	rjmp	.+2      	; 0x1040 <remove_chain+0x10c>
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	bf 90       	pop	r11
    1052:	af 90       	pop	r10
    1054:	7f 90       	pop	r7
    1056:	6f 90       	pop	r6
    1058:	5f 90       	pop	r5
    105a:	4f 90       	pop	r4
    105c:	08 95       	ret

0000105e <dir_next>:
    105e:	4f 92       	push	r4
    1060:	5f 92       	push	r5
    1062:	6f 92       	push	r6
    1064:	7f 92       	push	r7
    1066:	af 92       	push	r10
    1068:	bf 92       	push	r11
    106a:	cf 92       	push	r12
    106c:	df 92       	push	r13
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	8b 01       	movw	r16, r22
    107c:	fc 01       	movw	r30, r24
    107e:	c6 84       	ldd	r12, Z+14	; 0x0e
    1080:	d7 84       	ldd	r13, Z+15	; 0x0f
    1082:	e0 88       	ldd	r14, Z+16	; 0x10
    1084:	f1 88       	ldd	r15, Z+17	; 0x11
    1086:	f0 e2       	ldi	r31, 0x20	; 32
    1088:	cf 0e       	add	r12, r31
    108a:	d1 1c       	adc	r13, r1
    108c:	e1 1c       	adc	r14, r1
    108e:	f1 1c       	adc	r15, r1
    1090:	c1 14       	cp	r12, r1
    1092:	d1 04       	cpc	r13, r1
    1094:	20 e2       	ldi	r18, 0x20	; 32
    1096:	e2 06       	cpc	r14, r18
    1098:	f1 04       	cpc	r15, r1
    109a:	38 f0       	brcs	.+14     	; 0x10aa <dir_next+0x4c>
    109c:	fc 01       	movw	r30, r24
    109e:	16 8a       	std	Z+22, r1	; 0x16
    10a0:	17 8a       	std	Z+23, r1	; 0x17
    10a2:	10 8e       	std	Z+24, r1	; 0x18
    10a4:	11 8e       	std	Z+25, r1	; 0x19
    10a6:	84 e0       	ldi	r24, 0x04	; 4
    10a8:	ca c0       	rjmp	.+404    	; 0x123e <dir_next+0x1e0>
    10aa:	fc 01       	movw	r30, r24
    10ac:	46 89       	ldd	r20, Z+22	; 0x16
    10ae:	57 89       	ldd	r21, Z+23	; 0x17
    10b0:	60 8d       	ldd	r22, Z+24	; 0x18
    10b2:	71 8d       	ldd	r23, Z+25	; 0x19
    10b4:	41 15       	cp	r20, r1
    10b6:	51 05       	cpc	r21, r1
    10b8:	61 05       	cpc	r22, r1
    10ba:	71 05       	cpc	r23, r1
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <dir_next+0x62>
    10be:	b2 c0       	rjmp	.+356    	; 0x1224 <dir_next+0x1c6>
    10c0:	ec 01       	movw	r28, r24
    10c2:	a0 80       	ld	r10, Z
    10c4:	b1 80       	ldd	r11, Z+1	; 0x01
    10c6:	d7 01       	movw	r26, r14
    10c8:	c6 01       	movw	r24, r12
    10ca:	91 70       	andi	r25, 0x01	; 1
    10cc:	aa 27       	eor	r26, r26
    10ce:	bb 27       	eor	r27, r27
    10d0:	89 2b       	or	r24, r25
    10d2:	8a 2b       	or	r24, r26
    10d4:	8b 2b       	or	r24, r27
    10d6:	09 f0       	breq	.+2      	; 0x10da <dir_next+0x7c>
    10d8:	96 c0       	rjmp	.+300    	; 0x1206 <dir_next+0x1a8>
    10da:	4f 5f       	subi	r20, 0xFF	; 255
    10dc:	5f 4f       	sbci	r21, 0xFF	; 255
    10de:	6f 4f       	sbci	r22, 0xFF	; 255
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	46 8b       	std	Z+22, r20	; 0x16
    10e4:	57 8b       	std	Z+23, r21	; 0x17
    10e6:	60 8f       	std	Z+24, r22	; 0x18
    10e8:	71 8f       	std	Z+25, r23	; 0x19
    10ea:	42 89       	ldd	r20, Z+18	; 0x12
    10ec:	53 89       	ldd	r21, Z+19	; 0x13
    10ee:	64 89       	ldd	r22, Z+20	; 0x14
    10f0:	75 89       	ldd	r23, Z+21	; 0x15
    10f2:	41 15       	cp	r20, r1
    10f4:	51 05       	cpc	r21, r1
    10f6:	61 05       	cpc	r22, r1
    10f8:	71 05       	cpc	r23, r1
    10fa:	d9 f4       	brne	.+54     	; 0x1132 <dir_next+0xd4>
    10fc:	f5 01       	movw	r30, r10
    10fe:	87 81       	ldd	r24, Z+7	; 0x07
    1100:	90 85       	ldd	r25, Z+8	; 0x08
    1102:	a0 e0       	ldi	r26, 0x00	; 0
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	b7 01       	movw	r22, r14
    1108:	a6 01       	movw	r20, r12
    110a:	68 94       	set
    110c:	14 f8       	bld	r1, 4
    110e:	76 95       	lsr	r23
    1110:	67 95       	ror	r22
    1112:	57 95       	ror	r21
    1114:	47 95       	ror	r20
    1116:	16 94       	lsr	r1
    1118:	d1 f7       	brne	.-12     	; 0x110e <dir_next+0xb0>
    111a:	48 17       	cp	r20, r24
    111c:	59 07       	cpc	r21, r25
    111e:	6a 07       	cpc	r22, r26
    1120:	7b 07       	cpc	r23, r27
    1122:	08 f4       	brcc	.+2      	; 0x1126 <dir_next+0xc8>
    1124:	70 c0       	rjmp	.+224    	; 0x1206 <dir_next+0x1a8>
    1126:	1e 8a       	std	Y+22, r1	; 0x16
    1128:	1f 8a       	std	Y+23, r1	; 0x17
    112a:	18 8e       	std	Y+24, r1	; 0x18
    112c:	19 8e       	std	Y+25, r1	; 0x19
    112e:	84 e0       	ldi	r24, 0x04	; 4
    1130:	86 c0       	rjmp	.+268    	; 0x123e <dir_next+0x1e0>
    1132:	f5 01       	movw	r30, r10
    1134:	81 85       	ldd	r24, Z+9	; 0x09
    1136:	92 85       	ldd	r25, Z+10	; 0x0a
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	a0 e0       	ldi	r26, 0x00	; 0
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	26 01       	movw	r4, r12
    1140:	37 01       	movw	r6, r14
    1142:	03 2e       	mov	r0, r19
    1144:	39 e0       	ldi	r19, 0x09	; 9
    1146:	76 94       	lsr	r7
    1148:	67 94       	ror	r6
    114a:	57 94       	ror	r5
    114c:	47 94       	ror	r4
    114e:	3a 95       	dec	r19
    1150:	d1 f7       	brne	.-12     	; 0x1146 <dir_next+0xe8>
    1152:	30 2d       	mov	r19, r0
    1154:	84 21       	and	r24, r4
    1156:	95 21       	and	r25, r5
    1158:	a6 21       	and	r26, r6
    115a:	b7 21       	and	r27, r7
    115c:	89 2b       	or	r24, r25
    115e:	8a 2b       	or	r24, r26
    1160:	8b 2b       	or	r24, r27
    1162:	09 f0       	breq	.+2      	; 0x1166 <dir_next+0x108>
    1164:	50 c0       	rjmp	.+160    	; 0x1206 <dir_next+0x1a8>
    1166:	ce 01       	movw	r24, r28
    1168:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <get_fat>
    116c:	2b 01       	movw	r4, r22
    116e:	3c 01       	movw	r6, r24
    1170:	62 30       	cpi	r22, 0x02	; 2
    1172:	71 05       	cpc	r23, r1
    1174:	81 05       	cpc	r24, r1
    1176:	91 05       	cpc	r25, r1
    1178:	08 f4       	brcc	.+2      	; 0x117c <dir_next+0x11e>
    117a:	56 c0       	rjmp	.+172    	; 0x1228 <dir_next+0x1ca>
    117c:	6f 3f       	cpi	r22, 0xFF	; 255
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
    1180:	8f 4f       	sbci	r24, 0xFF	; 255
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	09 f4       	brne	.+2      	; 0x1188 <dir_next+0x12a>
    1186:	52 c0       	rjmp	.+164    	; 0x122c <dir_next+0x1ce>
    1188:	f5 01       	movw	r30, r10
    118a:	83 89       	ldd	r24, Z+19	; 0x13
    118c:	94 89       	ldd	r25, Z+20	; 0x14
    118e:	a5 89       	ldd	r26, Z+21	; 0x15
    1190:	b6 89       	ldd	r27, Z+22	; 0x16
    1192:	48 16       	cp	r4, r24
    1194:	59 06       	cpc	r5, r25
    1196:	6a 06       	cpc	r6, r26
    1198:	7b 06       	cpc	r7, r27
    119a:	40 f1       	brcs	.+80     	; 0x11ec <dir_next+0x18e>
    119c:	01 2b       	or	r16, r17
    119e:	31 f4       	brne	.+12     	; 0x11ac <dir_next+0x14e>
    11a0:	1e 8a       	std	Y+22, r1	; 0x16
    11a2:	1f 8a       	std	Y+23, r1	; 0x17
    11a4:	18 8e       	std	Y+24, r1	; 0x18
    11a6:	19 8e       	std	Y+25, r1	; 0x19
    11a8:	84 e0       	ldi	r24, 0x04	; 4
    11aa:	49 c0       	rjmp	.+146    	; 0x123e <dir_next+0x1e0>
    11ac:	4a 89       	ldd	r20, Y+18	; 0x12
    11ae:	5b 89       	ldd	r21, Y+19	; 0x13
    11b0:	6c 89       	ldd	r22, Y+20	; 0x14
    11b2:	7d 89       	ldd	r23, Y+21	; 0x15
    11b4:	ce 01       	movw	r24, r28
    11b6:	0e 94 34 06 	call	0xc68	; 0xc68 <create_chain>
    11ba:	2b 01       	movw	r4, r22
    11bc:	3c 01       	movw	r6, r24
    11be:	61 15       	cp	r22, r1
    11c0:	71 05       	cpc	r23, r1
    11c2:	81 05       	cpc	r24, r1
    11c4:	91 05       	cpc	r25, r1
    11c6:	a1 f1       	breq	.+104    	; 0x1230 <dir_next+0x1d2>
    11c8:	61 30       	cpi	r22, 0x01	; 1
    11ca:	71 05       	cpc	r23, r1
    11cc:	81 05       	cpc	r24, r1
    11ce:	91 05       	cpc	r25, r1
    11d0:	89 f1       	breq	.+98     	; 0x1234 <dir_next+0x1d6>
    11d2:	6f 3f       	cpi	r22, 0xFF	; 255
    11d4:	2f ef       	ldi	r18, 0xFF	; 255
    11d6:	72 07       	cpc	r23, r18
    11d8:	82 07       	cpc	r24, r18
    11da:	92 07       	cpc	r25, r18
    11dc:	69 f1       	breq	.+90     	; 0x1238 <dir_next+0x1da>
    11de:	ab 01       	movw	r20, r22
    11e0:	bc 01       	movw	r22, r24
    11e2:	c5 01       	movw	r24, r10
    11e4:	0e 94 67 02 	call	0x4ce	; 0x4ce <dir_clear>
    11e8:	81 11       	cpse	r24, r1
    11ea:	28 c0       	rjmp	.+80     	; 0x123c <dir_next+0x1de>
    11ec:	4a 8a       	std	Y+18, r4	; 0x12
    11ee:	5b 8a       	std	Y+19, r5	; 0x13
    11f0:	6c 8a       	std	Y+20, r6	; 0x14
    11f2:	7d 8a       	std	Y+21, r7	; 0x15
    11f4:	b3 01       	movw	r22, r6
    11f6:	a2 01       	movw	r20, r4
    11f8:	c5 01       	movw	r24, r10
    11fa:	0e 94 44 01 	call	0x288	; 0x288 <clst2sect>
    11fe:	6e 8b       	std	Y+22, r22	; 0x16
    1200:	7f 8b       	std	Y+23, r23	; 0x17
    1202:	88 8f       	std	Y+24, r24	; 0x18
    1204:	99 8f       	std	Y+25, r25	; 0x19
    1206:	ce 86       	std	Y+14, r12	; 0x0e
    1208:	df 86       	std	Y+15, r13	; 0x0f
    120a:	e8 8a       	std	Y+16, r14	; 0x10
    120c:	f9 8a       	std	Y+17, r15	; 0x11
    120e:	8f e2       	ldi	r24, 0x2F	; 47
    1210:	a8 0e       	add	r10, r24
    1212:	b1 1c       	adc	r11, r1
    1214:	e1 e0       	ldi	r30, 0x01	; 1
    1216:	de 22       	and	r13, r30
    1218:	ca 0c       	add	r12, r10
    121a:	db 1c       	adc	r13, r11
    121c:	db 8e       	std	Y+27, r13	; 0x1b
    121e:	ca 8e       	std	Y+26, r12	; 0x1a
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	0d c0       	rjmp	.+26     	; 0x123e <dir_next+0x1e0>
    1224:	84 e0       	ldi	r24, 0x04	; 4
    1226:	0b c0       	rjmp	.+22     	; 0x123e <dir_next+0x1e0>
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	09 c0       	rjmp	.+18     	; 0x123e <dir_next+0x1e0>
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	07 c0       	rjmp	.+14     	; 0x123e <dir_next+0x1e0>
    1230:	87 e0       	ldi	r24, 0x07	; 7
    1232:	05 c0       	rjmp	.+10     	; 0x123e <dir_next+0x1e0>
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	03 c0       	rjmp	.+6      	; 0x123e <dir_next+0x1e0>
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	01 c0       	rjmp	.+2      	; 0x123e <dir_next+0x1e0>
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	ef 90       	pop	r14
    124a:	df 90       	pop	r13
    124c:	cf 90       	pop	r12
    124e:	bf 90       	pop	r11
    1250:	af 90       	pop	r10
    1252:	7f 90       	pop	r7
    1254:	6f 90       	pop	r6
    1256:	5f 90       	pop	r5
    1258:	4f 90       	pop	r4
    125a:	08 95       	ret

0000125c <dir_register>:
    125c:	ef 92       	push	r14
    125e:	ff 92       	push	r15
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	8c 01       	movw	r16, r24
    1268:	dc 01       	movw	r26, r24
    126a:	ed 90       	ld	r14, X+
    126c:	fc 90       	ld	r15, X
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	ba 01       	movw	r22, r20
    1274:	0e 94 49 05 	call	0xa92	; 0xa92 <dir_sdi>
    1278:	c8 2f       	mov	r28, r24
    127a:	81 11       	cpse	r24, r1
    127c:	1d c0       	rjmp	.+58     	; 0x12b8 <dir_register+0x5c>
    127e:	f8 01       	movw	r30, r16
    1280:	46 89       	ldd	r20, Z+22	; 0x16
    1282:	57 89       	ldd	r21, Z+23	; 0x17
    1284:	60 8d       	ldd	r22, Z+24	; 0x18
    1286:	71 8d       	ldd	r23, Z+25	; 0x19
    1288:	c7 01       	movw	r24, r14
    128a:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
    128e:	c8 2f       	mov	r28, r24
    1290:	81 11       	cpse	r24, r1
    1292:	12 c0       	rjmp	.+36     	; 0x12b8 <dir_register+0x5c>
    1294:	d8 01       	movw	r26, r16
    1296:	5a 96       	adiw	r26, 0x1a	; 26
    1298:	ed 91       	ld	r30, X+
    129a:	fc 91       	ld	r31, X
    129c:	5b 97       	sbiw	r26, 0x1b	; 27
    129e:	80 81       	ld	r24, Z
    12a0:	85 3e       	cpi	r24, 0xE5	; 229
    12a2:	71 f0       	breq	.+28     	; 0x12c0 <dir_register+0x64>
    12a4:	88 23       	and	r24, r24
    12a6:	61 f0       	breq	.+24     	; 0x12c0 <dir_register+0x64>
    12a8:	61 e0       	ldi	r22, 0x01	; 1
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	c8 01       	movw	r24, r16
    12ae:	0e 94 2f 08 	call	0x105e	; 0x105e <dir_next>
    12b2:	c8 2f       	mov	r28, r24
    12b4:	88 23       	and	r24, r24
    12b6:	19 f3       	breq	.-58     	; 0x127e <dir_register+0x22>
    12b8:	c4 30       	cpi	r28, 0x04	; 4
    12ba:	39 f1       	breq	.+78     	; 0x130a <dir_register+0xae>
    12bc:	c1 11       	cpse	r28, r1
    12be:	26 c0       	rjmp	.+76     	; 0x130c <dir_register+0xb0>
    12c0:	f8 01       	movw	r30, r16
    12c2:	46 89       	ldd	r20, Z+22	; 0x16
    12c4:	57 89       	ldd	r21, Z+23	; 0x17
    12c6:	60 8d       	ldd	r22, Z+24	; 0x18
    12c8:	71 8d       	ldd	r23, Z+25	; 0x19
    12ca:	c7 01       	movw	r24, r14
    12cc:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
    12d0:	c8 2f       	mov	r28, r24
    12d2:	81 11       	cpse	r24, r1
    12d4:	1b c0       	rjmp	.+54     	; 0x130c <dir_register+0xb0>
    12d6:	d8 01       	movw	r26, r16
    12d8:	5a 96       	adiw	r26, 0x1a	; 26
    12da:	ed 91       	ld	r30, X+
    12dc:	fc 91       	ld	r31, X
    12de:	5b 97       	sbiw	r26, 0x1b	; 27
    12e0:	cf 01       	movw	r24, r30
    12e2:	80 96       	adiw	r24, 0x20	; 32
    12e4:	11 92       	st	Z+, r1
    12e6:	e8 17       	cp	r30, r24
    12e8:	f9 07       	cpc	r31, r25
    12ea:	e1 f7       	brne	.-8      	; 0x12e4 <dir_register+0x88>
    12ec:	b8 01       	movw	r22, r16
    12ee:	64 5e       	subi	r22, 0xE4	; 228
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	4b e0       	ldi	r20, 0x0B	; 11
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	f8 01       	movw	r30, r16
    12f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    12fa:	93 8d       	ldd	r25, Z+27	; 0x1b
    12fc:	0e 94 28 01 	call	0x250	; 0x250 <mem_cpy>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	d7 01       	movw	r26, r14
    1304:	13 96       	adiw	r26, 0x03	; 3
    1306:	8c 93       	st	X, r24
    1308:	01 c0       	rjmp	.+2      	; 0x130c <dir_register+0xb0>
    130a:	c7 e0       	ldi	r28, 0x07	; 7
    130c:	8c 2f       	mov	r24, r28
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	08 95       	ret

0000131a <check_fs>:
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	ec 01       	movw	r28, r24
    1320:	1b 82       	std	Y+3, r1	; 0x03
    1322:	8f ef       	ldi	r24, 0xFF	; 255
    1324:	9f ef       	ldi	r25, 0xFF	; 255
    1326:	dc 01       	movw	r26, r24
    1328:	8b a7       	std	Y+43, r24	; 0x2b
    132a:	9c a7       	std	Y+44, r25	; 0x2c
    132c:	ad a7       	std	Y+45, r26	; 0x2d
    132e:	be a7       	std	Y+46, r27	; 0x2e
    1330:	ce 01       	movw	r24, r28
    1332:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
    1336:	81 11       	cpse	r24, r1
    1338:	2c c0       	rjmp	.+88     	; 0x1392 <check_fs+0x78>
    133a:	fe 01       	movw	r30, r28
    133c:	e2 5d       	subi	r30, 0xD2	; 210
    133e:	fd 4f       	sbci	r31, 0xFD	; 253
    1340:	80 81       	ld	r24, Z
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	98 2f       	mov	r25, r24
    1346:	88 27       	eor	r24, r24
    1348:	31 97       	sbiw	r30, 0x01	; 1
    134a:	20 81       	ld	r18, Z
    134c:	82 2b       	or	r24, r18
    134e:	85 35       	cpi	r24, 0x55	; 85
    1350:	9a 4a       	sbci	r25, 0xAA	; 170
    1352:	11 f5       	brne	.+68     	; 0x1398 <check_fs+0x7e>
    1354:	8f a5       	ldd	r24, Y+47	; 0x2f
    1356:	8b 3e       	cpi	r24, 0xEB	; 235
    1358:	19 f0       	breq	.+6      	; 0x1360 <check_fs+0x46>
    135a:	88 5e       	subi	r24, 0xE8	; 232
    135c:	82 30       	cpi	r24, 0x02	; 2
    135e:	f8 f4       	brcc	.+62     	; 0x139e <check_fs+0x84>
    1360:	43 e0       	ldi	r20, 0x03	; 3
    1362:	50 e0       	ldi	r21, 0x00	; 0
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	71 e0       	ldi	r23, 0x01	; 1
    1368:	ce 01       	movw	r24, r28
    136a:	8b 59       	subi	r24, 0x9B	; 155
    136c:	9f 4f       	sbci	r25, 0xFF	; 255
    136e:	0e 94 36 01 	call	0x26c	; 0x26c <mem_cmp>
    1372:	89 2b       	or	r24, r25
    1374:	b9 f0       	breq	.+46     	; 0x13a4 <check_fs+0x8a>
    1376:	45 e0       	ldi	r20, 0x05	; 5
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	65 e0       	ldi	r22, 0x05	; 5
    137c:	71 e0       	ldi	r23, 0x01	; 1
    137e:	ce 01       	movw	r24, r28
    1380:	8f 57       	subi	r24, 0x7F	; 127
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	0e 94 36 01 	call	0x26c	; 0x26c <mem_cmp>
    1388:	89 2b       	or	r24, r25
    138a:	79 f0       	breq	.+30     	; 0x13aa <check_fs+0x90>
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e c0       	rjmp	.+28     	; 0x13ae <check_fs+0x94>
    1392:	84 e0       	ldi	r24, 0x04	; 4
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0b c0       	rjmp	.+22     	; 0x13ae <check_fs+0x94>
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	08 c0       	rjmp	.+16     	; 0x13ae <check_fs+0x94>
    139e:	82 e0       	ldi	r24, 0x02	; 2
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	05 c0       	rjmp	.+10     	; 0x13ae <check_fs+0x94>
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <check_fs+0x94>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	08 95       	ret

000013b4 <mount_volume>:
    13b4:	2f 92       	push	r2
    13b6:	3f 92       	push	r3
    13b8:	4f 92       	push	r4
    13ba:	5f 92       	push	r5
    13bc:	6f 92       	push	r6
    13be:	7f 92       	push	r7
    13c0:	8f 92       	push	r8
    13c2:	9f 92       	push	r9
    13c4:	af 92       	push	r10
    13c6:	bf 92       	push	r11
    13c8:	cf 92       	push	r12
    13ca:	df 92       	push	r13
    13cc:	ef 92       	push	r14
    13ce:	ff 92       	push	r15
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	6e 97       	sbiw	r28, 0x1e	; 30
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	6b 01       	movw	r12, r22
    13ea:	b4 2e       	mov	r11, r20
    13ec:	db 01       	movw	r26, r22
    13ee:	1d 92       	st	X+, r1
    13f0:	1c 92       	st	X, r1
    13f2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <get_ldnumber>
    13f6:	7c 01       	movw	r14, r24
    13f8:	99 23       	and	r25, r25
    13fa:	0c f4       	brge	.+2      	; 0x13fe <mount_volume+0x4a>
    13fc:	6a c2       	rjmp	.+1236   	; 0x18d2 <mount_volume+0x51e>
    13fe:	fc 01       	movw	r30, r24
    1400:	ee 0f       	add	r30, r30
    1402:	ff 1f       	adc	r31, r31
    1404:	e6 53       	subi	r30, 0x36	; 54
    1406:	fe 4f       	sbci	r31, 0xFE	; 254
    1408:	00 81       	ld	r16, Z
    140a:	11 81       	ldd	r17, Z+1	; 0x01
    140c:	01 15       	cp	r16, r1
    140e:	11 05       	cpc	r17, r1
    1410:	09 f4       	brne	.+2      	; 0x1414 <mount_volume+0x60>
    1412:	61 c2       	rjmp	.+1218   	; 0x18d6 <mount_volume+0x522>
    1414:	f6 01       	movw	r30, r12
    1416:	11 83       	std	Z+1, r17	; 0x01
    1418:	00 83       	st	Z, r16
    141a:	fb 2d       	mov	r31, r11
    141c:	fe 7f       	andi	r31, 0xFE	; 254
    141e:	bf 2e       	mov	r11, r31
    1420:	d8 01       	movw	r26, r16
    1422:	8c 91       	ld	r24, X
    1424:	88 23       	and	r24, r24
    1426:	69 f0       	breq	.+26     	; 0x1442 <mount_volume+0x8e>
    1428:	11 96       	adiw	r26, 0x01	; 1
    142a:	8c 91       	ld	r24, X
    142c:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <disk_status>
    1430:	80 fd       	sbrc	r24, 0
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <mount_volume+0x8e>
    1434:	bb 20       	and	r11, r11
    1436:	09 f4       	brne	.+2      	; 0x143a <mount_volume+0x86>
    1438:	50 c2       	rjmp	.+1184   	; 0x18da <mount_volume+0x526>
    143a:	82 ff       	sbrs	r24, 2
    143c:	50 c2       	rjmp	.+1184   	; 0x18de <mount_volume+0x52a>
    143e:	8a e0       	ldi	r24, 0x0A	; 10
    1440:	f5 c2       	rjmp	.+1514   	; 0x1a2c <mount_volume+0x678>
    1442:	f8 01       	movw	r30, r16
    1444:	10 82       	st	Z, r1
    1446:	e1 82       	std	Z+1, r14	; 0x01
    1448:	8e 2d       	mov	r24, r14
    144a:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <disk_initialize>
    144e:	80 fd       	sbrc	r24, 0
    1450:	48 c2       	rjmp	.+1168   	; 0x18e2 <mount_volume+0x52e>
    1452:	bb 20       	and	r11, r11
    1454:	09 f4       	brne	.+2      	; 0x1458 <mount_volume+0xa4>
    1456:	6b c2       	rjmp	.+1238   	; 0x192e <mount_volume+0x57a>
    1458:	82 fd       	sbrc	r24, 2
    145a:	45 c2       	rjmp	.+1162   	; 0x18e6 <mount_volume+0x532>
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	ba 01       	movw	r22, r20
    1462:	c8 01       	movw	r24, r16
    1464:	0e 94 8d 09 	call	0x131a	; 0x131a <check_fs>
    1468:	82 30       	cpi	r24, 0x02	; 2
    146a:	91 05       	cpc	r25, r1
    146c:	c9 f5       	brne	.+114    	; 0x14e0 <mount_volume+0x12c>
    146e:	48 01       	movw	r8, r16
    1470:	fb e0       	ldi	r31, 0x0B	; 11
    1472:	8f 1a       	sub	r8, r31
    1474:	fe ef       	ldi	r31, 0xFE	; 254
    1476:	9f 0a       	sbc	r9, r31
    1478:	9e 01       	movw	r18, r28
    147a:	2f 5f       	subi	r18, 0xFF	; 255
    147c:	3f 4f       	sbci	r19, 0xFF	; 255
    147e:	79 01       	movw	r14, r18
    1480:	6e 01       	movw	r12, r28
    1482:	31 e1       	ldi	r19, 0x11	; 17
    1484:	c3 0e       	add	r12, r19
    1486:	d1 1c       	adc	r13, r1
    1488:	57 01       	movw	r10, r14
    148a:	c4 01       	movw	r24, r8
    148c:	0e 94 0d 01 	call	0x21a	; 0x21a <ld_dword>
    1490:	d5 01       	movw	r26, r10
    1492:	6d 93       	st	X+, r22
    1494:	7d 93       	st	X+, r23
    1496:	8d 93       	st	X+, r24
    1498:	9d 93       	st	X+, r25
    149a:	5d 01       	movw	r10, r26
    149c:	b0 e1       	ldi	r27, 0x10	; 16
    149e:	8b 0e       	add	r8, r27
    14a0:	91 1c       	adc	r9, r1
    14a2:	ac 14       	cp	r10, r12
    14a4:	bd 04       	cpc	r11, r13
    14a6:	89 f7       	brne	.-30     	; 0x148a <mount_volume+0xd6>
    14a8:	0f 2e       	mov	r0, r31
    14aa:	f3 e0       	ldi	r31, 0x03	; 3
    14ac:	af 2e       	mov	r10, r31
    14ae:	f0 2d       	mov	r31, r0
    14b0:	b1 2c       	mov	r11, r1
    14b2:	f7 01       	movw	r30, r14
    14b4:	41 91       	ld	r20, Z+
    14b6:	51 91       	ld	r21, Z+
    14b8:	61 91       	ld	r22, Z+
    14ba:	71 91       	ld	r23, Z+
    14bc:	7f 01       	movw	r14, r30
    14be:	41 15       	cp	r20, r1
    14c0:	51 05       	cpc	r21, r1
    14c2:	61 05       	cpc	r22, r1
    14c4:	71 05       	cpc	r23, r1
    14c6:	39 f0       	breq	.+14     	; 0x14d6 <mount_volume+0x122>
    14c8:	c8 01       	movw	r24, r16
    14ca:	0e 94 8d 09 	call	0x131a	; 0x131a <check_fs>
    14ce:	82 30       	cpi	r24, 0x02	; 2
    14d0:	91 05       	cpc	r25, r1
    14d2:	18 f4       	brcc	.+6      	; 0x14da <mount_volume+0x126>
    14d4:	37 c2       	rjmp	.+1134   	; 0x1944 <mount_volume+0x590>
    14d6:	8a 2d       	mov	r24, r10
    14d8:	9b 2d       	mov	r25, r11
    14da:	ce 14       	cp	r12, r14
    14dc:	df 04       	cpc	r13, r15
    14de:	49 f7       	brne	.-46     	; 0x14b2 <mount_volume+0xfe>
    14e0:	84 30       	cpi	r24, 0x04	; 4
    14e2:	91 05       	cpc	r25, r1
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <mount_volume+0x134>
    14e6:	01 c2       	rjmp	.+1026   	; 0x18ea <mount_volume+0x536>
    14e8:	02 97       	sbiw	r24, 0x02	; 2
    14ea:	08 f0       	brcs	.+2      	; 0x14ee <mount_volume+0x13a>
    14ec:	00 c2       	rjmp	.+1024   	; 0x18ee <mount_volume+0x53a>
    14ee:	d8 01       	movw	r26, r16
    14f0:	db 96       	adiw	r26, 0x3b	; 59
    14f2:	8c 91       	ld	r24, X
    14f4:	db 97       	sbiw	r26, 0x3b	; 59
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	98 2f       	mov	r25, r24
    14fa:	88 27       	eor	r24, r24
    14fc:	da 96       	adiw	r26, 0x3a	; 58
    14fe:	2c 91       	ld	r18, X
    1500:	82 2b       	or	r24, r18
    1502:	81 15       	cp	r24, r1
    1504:	92 40       	sbci	r25, 0x02	; 2
    1506:	09 f0       	breq	.+2      	; 0x150a <mount_volume+0x156>
    1508:	f4 c1       	rjmp	.+1000   	; 0x18f2 <mount_volume+0x53e>
    150a:	f8 01       	movw	r30, r16
    150c:	ea 5b       	subi	r30, 0xBA	; 186
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	80 80       	ld	r8, Z
    1512:	91 2c       	mov	r9, r1
    1514:	98 2c       	mov	r9, r8
    1516:	88 24       	eor	r8, r8
    1518:	31 97       	sbiw	r30, 0x01	; 1
    151a:	80 81       	ld	r24, Z
    151c:	88 2a       	or	r8, r24
    151e:	94 01       	movw	r18, r8
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	29 8b       	std	Y+17, r18	; 0x11
    1526:	3a 8b       	std	Y+18, r19	; 0x12
    1528:	4b 8b       	std	Y+19, r20	; 0x13
    152a:	5c 8b       	std	Y+20, r21	; 0x14
    152c:	23 2b       	or	r18, r19
    152e:	24 2b       	or	r18, r20
    1530:	25 2b       	or	r18, r21
    1532:	49 f4       	brne	.+18     	; 0x1546 <mount_volume+0x192>
    1534:	c8 01       	movw	r24, r16
    1536:	8d 5a       	subi	r24, 0xAD	; 173
    1538:	9f 4f       	sbci	r25, 0xFF	; 255
    153a:	0e 94 0d 01 	call	0x21a	; 0x21a <ld_dword>
    153e:	69 8b       	std	Y+17, r22	; 0x11
    1540:	7a 8b       	std	Y+18, r23	; 0x12
    1542:	8b 8b       	std	Y+19, r24	; 0x13
    1544:	9c 8b       	std	Y+20, r25	; 0x14
    1546:	d8 01       	movw	r26, r16
    1548:	9b 96       	adiw	r26, 0x2b	; 43
    154a:	8d 90       	ld	r8, X+
    154c:	9d 90       	ld	r9, X+
    154e:	ad 90       	ld	r10, X+
    1550:	bc 90       	ld	r11, X
    1552:	9e 97       	sbiw	r26, 0x2e	; 46
    1554:	29 89       	ldd	r18, Y+17	; 0x11
    1556:	3a 89       	ldd	r19, Y+18	; 0x12
    1558:	4b 89       	ldd	r20, Y+19	; 0x13
    155a:	5c 89       	ldd	r21, Y+20	; 0x14
    155c:	57 96       	adiw	r26, 0x17	; 23
    155e:	2d 93       	st	X+, r18
    1560:	3d 93       	st	X+, r19
    1562:	4d 93       	st	X+, r20
    1564:	5c 93       	st	X, r21
    1566:	5a 97       	sbiw	r26, 0x1a	; 26
    1568:	df 96       	adiw	r26, 0x3f	; 63
    156a:	7c 90       	ld	r7, X
    156c:	df 97       	sbiw	r26, 0x3f	; 63
    156e:	12 96       	adiw	r26, 0x02	; 2
    1570:	7c 92       	st	X, r7
    1572:	12 97       	sbiw	r26, 0x02	; 2
    1574:	8f ef       	ldi	r24, 0xFF	; 255
    1576:	87 0d       	add	r24, r7
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	08 f0       	brcs	.+2      	; 0x157e <mount_volume+0x1ca>
    157c:	bc c1       	rjmp	.+888    	; 0x18f6 <mount_volume+0x542>
    157e:	dc 96       	adiw	r26, 0x3c	; 60
    1580:	3c 90       	ld	r3, X
    1582:	dc 97       	sbiw	r26, 0x3c	; 60
    1584:	83 2d       	mov	r24, r3
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	1a 96       	adiw	r26, 0x0a	; 10
    158a:	9c 93       	st	X, r25
    158c:	8e 93       	st	-X, r24
    158e:	19 97       	sbiw	r26, 0x09	; 9
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	09 f4       	brne	.+2      	; 0x1596 <mount_volume+0x1e2>
    1594:	b2 c1       	rjmp	.+868    	; 0x18fa <mount_volume+0x546>
    1596:	9c 01       	movw	r18, r24
    1598:	21 50       	subi	r18, 0x01	; 1
    159a:	31 09       	sbc	r19, r1
    159c:	82 23       	and	r24, r18
    159e:	93 23       	and	r25, r19
    15a0:	89 2b       	or	r24, r25
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <mount_volume+0x1f2>
    15a4:	ac c1       	rjmp	.+856    	; 0x18fe <mount_volume+0x54a>
    15a6:	f8 01       	movw	r30, r16
    15a8:	ef 5b       	subi	r30, 0xBF	; 191
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	80 81       	ld	r24, Z
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	98 2f       	mov	r25, r24
    15b2:	88 27       	eor	r24, r24
    15b4:	31 97       	sbiw	r30, 0x01	; 1
    15b6:	20 81       	ld	r18, Z
    15b8:	fc 01       	movw	r30, r24
    15ba:	e2 2b       	or	r30, r18
    15bc:	fe 8b       	std	Y+22, r31	; 0x16
    15be:	ed 8b       	std	Y+21, r30	; 0x15
    15c0:	18 96       	adiw	r26, 0x08	; 8
    15c2:	fc 93       	st	X, r31
    15c4:	ee 93       	st	-X, r30
    15c6:	17 97       	sbiw	r26, 0x07	; 7
    15c8:	cf 01       	movw	r24, r30
    15ca:	8f 70       	andi	r24, 0x0F	; 15
    15cc:	99 27       	eor	r25, r25
    15ce:	89 2b       	or	r24, r25
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <mount_volume+0x220>
    15d2:	97 c1       	rjmp	.+814    	; 0x1902 <mount_volume+0x54e>
    15d4:	f8 01       	movw	r30, r16
    15d6:	ed 5b       	subi	r30, 0xBD	; 189
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	c0 80       	ld	r12, Z
    15dc:	d1 2c       	mov	r13, r1
    15de:	dc 2c       	mov	r13, r12
    15e0:	cc 24       	eor	r12, r12
    15e2:	31 97       	sbiw	r30, 0x01	; 1
    15e4:	80 81       	ld	r24, Z
    15e6:	c8 2a       	or	r12, r24
    15e8:	e1 2c       	mov	r14, r1
    15ea:	f1 2c       	mov	r15, r1
    15ec:	c1 14       	cp	r12, r1
    15ee:	d1 04       	cpc	r13, r1
    15f0:	e1 04       	cpc	r14, r1
    15f2:	f1 04       	cpc	r15, r1
    15f4:	39 f4       	brne	.+14     	; 0x1604 <mount_volume+0x250>
    15f6:	c8 01       	movw	r24, r16
    15f8:	81 5b       	subi	r24, 0xB1	; 177
    15fa:	9f 4f       	sbci	r25, 0xFF	; 255
    15fc:	0e 94 0d 01 	call	0x21a	; 0x21a <ld_dword>
    1600:	6b 01       	movw	r12, r22
    1602:	7c 01       	movw	r14, r24
    1604:	d8 01       	movw	r26, r16
    1606:	de 96       	adiw	r26, 0x3e	; 62
    1608:	ec 91       	ld	r30, X
    160a:	de 97       	sbiw	r26, 0x3e	; 62
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	fe 2f       	mov	r31, r30
    1610:	ee 27       	eor	r30, r30
    1612:	dd 96       	adiw	r26, 0x3d	; 61
    1614:	8c 91       	ld	r24, X
    1616:	e8 2b       	or	r30, r24
    1618:	30 97       	sbiw	r30, 0x00	; 0
    161a:	09 f4       	brne	.+2      	; 0x161e <mount_volume+0x26a>
    161c:	74 c1       	rjmp	.+744    	; 0x1906 <mount_volume+0x552>
    161e:	a7 2d       	mov	r26, r7
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	29 89       	ldd	r18, Y+17	; 0x11
    1624:	3a 89       	ldd	r19, Y+18	; 0x12
    1626:	4b 89       	ldd	r20, Y+19	; 0x13
    1628:	5c 89       	ldd	r21, Y+20	; 0x14
    162a:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__muluhisi3>
    162e:	6b 8f       	std	Y+27, r22	; 0x1b
    1630:	7c 8f       	std	Y+28, r23	; 0x1c
    1632:	8d 8f       	std	Y+29, r24	; 0x1d
    1634:	9e 8f       	std	Y+30, r25	; 0x1e
    1636:	9f 01       	movw	r18, r30
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	2f 8b       	std	Y+23, r18	; 0x17
    163e:	38 8f       	std	Y+24, r19	; 0x18
    1640:	49 8f       	std	Y+25, r20	; 0x19
    1642:	5a 8f       	std	Y+26, r21	; 0x1a
    1644:	8d 89       	ldd	r24, Y+21	; 0x15
    1646:	9e 89       	ldd	r25, Y+22	; 0x16
    1648:	92 95       	swap	r25
    164a:	82 95       	swap	r24
    164c:	8f 70       	andi	r24, 0x0F	; 15
    164e:	89 27       	eor	r24, r25
    1650:	9f 70       	andi	r25, 0x0F	; 15
    1652:	89 27       	eor	r24, r25
    1654:	28 0f       	add	r18, r24
    1656:	39 1f       	adc	r19, r25
    1658:	41 1d       	adc	r20, r1
    165a:	51 1d       	adc	r21, r1
    165c:	4b 8c       	ldd	r4, Y+27	; 0x1b
    165e:	5c 8c       	ldd	r5, Y+28	; 0x1c
    1660:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1662:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1664:	42 0e       	add	r4, r18
    1666:	53 1e       	adc	r5, r19
    1668:	64 1e       	adc	r6, r20
    166a:	75 1e       	adc	r7, r21
    166c:	c4 14       	cp	r12, r4
    166e:	d5 04       	cpc	r13, r5
    1670:	e6 04       	cpc	r14, r6
    1672:	f7 04       	cpc	r15, r7
    1674:	08 f4       	brcc	.+2      	; 0x1678 <mount_volume+0x2c4>
    1676:	49 c1       	rjmp	.+658    	; 0x190a <mount_volume+0x556>
    1678:	c7 01       	movw	r24, r14
    167a:	b6 01       	movw	r22, r12
    167c:	64 19       	sub	r22, r4
    167e:	75 09       	sbc	r23, r5
    1680:	86 09       	sbc	r24, r6
    1682:	97 09       	sbc	r25, r7
    1684:	23 2d       	mov	r18, r3
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e0       	ldi	r20, 0x00	; 0
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__udivmodsi4>
    1690:	da 01       	movw	r26, r20
    1692:	c9 01       	movw	r24, r18
    1694:	21 15       	cp	r18, r1
    1696:	31 05       	cpc	r19, r1
    1698:	41 05       	cpc	r20, r1
    169a:	51 05       	cpc	r21, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <mount_volume+0x2ec>
    169e:	37 c1       	rjmp	.+622    	; 0x190e <mount_volume+0x55a>
    16a0:	26 3f       	cpi	r18, 0xF6	; 246
    16a2:	6f ef       	ldi	r22, 0xFF	; 255
    16a4:	36 07       	cpc	r19, r22
    16a6:	46 07       	cpc	r20, r22
    16a8:	6f e0       	ldi	r22, 0x0F	; 15
    16aa:	56 07       	cpc	r21, r22
    16ac:	30 f4       	brcc	.+12     	; 0x16ba <mount_volume+0x306>
    16ae:	0f 2e       	mov	r0, r31
    16b0:	f3 e0       	ldi	r31, 0x03	; 3
    16b2:	2f 2e       	mov	r2, r31
    16b4:	31 2c       	mov	r3, r1
    16b6:	f0 2d       	mov	r31, r0
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <mount_volume+0x30a>
    16ba:	21 2c       	mov	r2, r1
    16bc:	31 2c       	mov	r3, r1
    16be:	86 3f       	cpi	r24, 0xF6	; 246
    16c0:	ef ef       	ldi	r30, 0xFF	; 255
    16c2:	9e 07       	cpc	r25, r30
    16c4:	a1 05       	cpc	r26, r1
    16c6:	b1 05       	cpc	r27, r1
    16c8:	20 f4       	brcc	.+8      	; 0x16d2 <mount_volume+0x31e>
    16ca:	68 94       	set
    16cc:	22 24       	eor	r2, r2
    16ce:	21 f8       	bld	r2, 1
    16d0:	31 2c       	mov	r3, r1
    16d2:	86 3f       	cpi	r24, 0xF6	; 246
    16d4:	9f 40       	sbci	r25, 0x0F	; 15
    16d6:	a1 05       	cpc	r26, r1
    16d8:	b1 05       	cpc	r27, r1
    16da:	08 f4       	brcc	.+2      	; 0x16de <mount_volume+0x32a>
    16dc:	7a c1       	rjmp	.+756    	; 0x19d2 <mount_volume+0x61e>
    16de:	21 14       	cp	r2, r1
    16e0:	31 04       	cpc	r3, r1
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <mount_volume+0x332>
    16e4:	16 c1       	rjmp	.+556    	; 0x1912 <mount_volume+0x55e>
    16e6:	69 01       	movw	r12, r18
    16e8:	7a 01       	movw	r14, r20
    16ea:	62 e0       	ldi	r22, 0x02	; 2
    16ec:	c6 0e       	add	r12, r22
    16ee:	d1 1c       	adc	r13, r1
    16f0:	e1 1c       	adc	r14, r1
    16f2:	f1 1c       	adc	r15, r1
    16f4:	d8 01       	movw	r26, r16
    16f6:	53 96       	adiw	r26, 0x13	; 19
    16f8:	cd 92       	st	X+, r12
    16fa:	dd 92       	st	X+, r13
    16fc:	ed 92       	st	X+, r14
    16fe:	fc 92       	st	X, r15
    1700:	56 97       	sbiw	r26, 0x16	; 22
    1702:	f8 01       	movw	r30, r16
    1704:	83 8e       	std	Z+27, r8	; 0x1b
    1706:	94 8e       	std	Z+28, r9	; 0x1c
    1708:	a5 8e       	std	Z+29, r10	; 0x1d
    170a:	b6 8e       	std	Z+30, r11	; 0x1e
    170c:	8f 89       	ldd	r24, Y+23	; 0x17
    170e:	98 8d       	ldd	r25, Y+24	; 0x18
    1710:	a9 8d       	ldd	r26, Y+25	; 0x19
    1712:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1714:	88 0d       	add	r24, r8
    1716:	99 1d       	adc	r25, r9
    1718:	aa 1d       	adc	r26, r10
    171a:	bb 1d       	adc	r27, r11
    171c:	87 8f       	std	Z+31, r24	; 0x1f
    171e:	90 a3       	std	Z+32, r25	; 0x20
    1720:	a1 a3       	std	Z+33, r26	; 0x21
    1722:	b2 a3       	std	Z+34, r27	; 0x22
    1724:	b5 01       	movw	r22, r10
    1726:	a4 01       	movw	r20, r8
    1728:	44 0d       	add	r20, r4
    172a:	55 1d       	adc	r21, r5
    172c:	66 1d       	adc	r22, r6
    172e:	77 1d       	adc	r23, r7
    1730:	47 a3       	std	Z+39, r20	; 0x27
    1732:	50 a7       	std	Z+40, r21	; 0x28
    1734:	61 a7       	std	Z+41, r22	; 0x29
    1736:	72 a7       	std	Z+42, r23	; 0x2a
    1738:	f3 e0       	ldi	r31, 0x03	; 3
    173a:	2f 16       	cp	r2, r31
    173c:	31 04       	cpc	r3, r1
    173e:	09 f0       	breq	.+2      	; 0x1742 <mount_volume+0x38e>
    1740:	40 c0       	rjmp	.+128    	; 0x17c2 <mount_volume+0x40e>
    1742:	f8 01       	movw	r30, r16
    1744:	e6 5a       	subi	r30, 0xA6	; 166
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	80 81       	ld	r24, Z
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	98 2f       	mov	r25, r24
    174e:	88 27       	eor	r24, r24
    1750:	31 97       	sbiw	r30, 0x01	; 1
    1752:	20 81       	ld	r18, Z
    1754:	82 2b       	or	r24, r18
    1756:	89 2b       	or	r24, r25
    1758:	09 f0       	breq	.+2      	; 0x175c <mount_volume+0x3a8>
    175a:	dd c0       	rjmp	.+442    	; 0x1916 <mount_volume+0x562>
    175c:	2d 89       	ldd	r18, Y+21	; 0x15
    175e:	3e 89       	ldd	r19, Y+22	; 0x16
    1760:	23 2b       	or	r18, r19
    1762:	09 f0       	breq	.+2      	; 0x1766 <mount_volume+0x3b2>
    1764:	da c0       	rjmp	.+436    	; 0x191a <mount_volume+0x566>
    1766:	c8 01       	movw	r24, r16
    1768:	85 5a       	subi	r24, 0xA5	; 165
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
    176c:	0e 94 0d 01 	call	0x21a	; 0x21a <ld_dword>
    1770:	d8 01       	movw	r26, r16
    1772:	93 96       	adiw	r26, 0x23	; 35
    1774:	6d 93       	st	X+, r22
    1776:	7d 93       	st	X+, r23
    1778:	8d 93       	st	X+, r24
    177a:	9c 93       	st	X, r25
    177c:	96 97       	sbiw	r26, 0x26	; 38
    177e:	cc 0c       	add	r12, r12
    1780:	dd 1c       	adc	r13, r13
    1782:	ee 1c       	adc	r14, r14
    1784:	ff 1c       	adc	r15, r15
    1786:	cc 0c       	add	r12, r12
    1788:	dd 1c       	adc	r13, r13
    178a:	ee 1c       	adc	r14, r14
    178c:	ff 1c       	adc	r15, r15
    178e:	bf ef       	ldi	r27, 0xFF	; 255
    1790:	cb 0e       	add	r12, r27
    1792:	b1 e0       	ldi	r27, 0x01	; 1
    1794:	db 1e       	adc	r13, r27
    1796:	e1 1c       	adc	r14, r1
    1798:	f1 1c       	adc	r15, r1
    179a:	0b 2e       	mov	r0, r27
    179c:	b9 e0       	ldi	r27, 0x09	; 9
    179e:	f6 94       	lsr	r15
    17a0:	e7 94       	ror	r14
    17a2:	d7 94       	ror	r13
    17a4:	c7 94       	ror	r12
    17a6:	ba 95       	dec	r27
    17a8:	d1 f7       	brne	.-12     	; 0x179e <mount_volume+0x3ea>
    17aa:	b0 2d       	mov	r27, r0
    17ac:	29 89       	ldd	r18, Y+17	; 0x11
    17ae:	3a 89       	ldd	r19, Y+18	; 0x12
    17b0:	4b 89       	ldd	r20, Y+19	; 0x13
    17b2:	5c 89       	ldd	r21, Y+20	; 0x14
    17b4:	2c 15       	cp	r18, r12
    17b6:	3d 05       	cpc	r19, r13
    17b8:	4e 05       	cpc	r20, r14
    17ba:	5f 05       	cpc	r21, r15
    17bc:	08 f4       	brcc	.+2      	; 0x17c0 <mount_volume+0x40c>
    17be:	af c0       	rjmp	.+350    	; 0x191e <mount_volume+0x56a>
    17c0:	ed c0       	rjmp	.+474    	; 0x199c <mount_volume+0x5e8>
    17c2:	4d 89       	ldd	r20, Y+21	; 0x15
    17c4:	5e 89       	ldd	r21, Y+22	; 0x16
    17c6:	45 2b       	or	r20, r21
    17c8:	09 f4       	brne	.+2      	; 0x17cc <mount_volume+0x418>
    17ca:	ab c0       	rjmp	.+342    	; 0x1922 <mount_volume+0x56e>
    17cc:	4b 8c       	ldd	r4, Y+27	; 0x1b
    17ce:	5c 8c       	ldd	r5, Y+28	; 0x1c
    17d0:	6d 8c       	ldd	r6, Y+29	; 0x1d
    17d2:	7e 8c       	ldd	r7, Y+30	; 0x1e
    17d4:	48 0e       	add	r4, r24
    17d6:	59 1e       	adc	r5, r25
    17d8:	6a 1e       	adc	r6, r26
    17da:	7b 1e       	adc	r7, r27
    17dc:	d8 01       	movw	r26, r16
    17de:	93 96       	adiw	r26, 0x23	; 35
    17e0:	4d 92       	st	X+, r4
    17e2:	5d 92       	st	X+, r5
    17e4:	6d 92       	st	X+, r6
    17e6:	7c 92       	st	X, r7
    17e8:	96 97       	sbiw	r26, 0x26	; 38
    17ea:	b2 e0       	ldi	r27, 0x02	; 2
    17ec:	2b 16       	cp	r2, r27
    17ee:	31 04       	cpc	r3, r1
    17f0:	29 f4       	brne	.+10     	; 0x17fc <mount_volume+0x448>
    17f2:	cc 0c       	add	r12, r12
    17f4:	dd 1c       	adc	r13, r13
    17f6:	ee 1c       	adc	r14, r14
    17f8:	ff 1c       	adc	r15, r15
    17fa:	b7 c0       	rjmp	.+366    	; 0x196a <mount_volume+0x5b6>
    17fc:	a3 e0       	ldi	r26, 0x03	; 3
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	a7 01       	movw	r20, r14
    1802:	96 01       	movw	r18, r12
    1804:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <__muluhisi3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	b6 95       	lsr	r27
    180e:	a7 95       	ror	r26
    1810:	97 95       	ror	r25
    1812:	87 95       	ror	r24
    1814:	e1 e0       	ldi	r30, 0x01	; 1
    1816:	ce 22       	and	r12, r30
    1818:	dd 24       	eor	r13, r13
    181a:	ee 24       	eor	r14, r14
    181c:	ff 24       	eor	r15, r15
    181e:	c8 0e       	add	r12, r24
    1820:	d9 1e       	adc	r13, r25
    1822:	ea 1e       	adc	r14, r26
    1824:	fb 1e       	adc	r15, r27
    1826:	a1 c0       	rjmp	.+322    	; 0x196a <mount_volume+0x5b6>
    1828:	b5 01       	movw	r22, r10
    182a:	a4 01       	movw	r20, r8
    182c:	4f 5f       	subi	r20, 0xFF	; 255
    182e:	5f 4f       	sbci	r21, 0xFF	; 255
    1830:	6f 4f       	sbci	r22, 0xFF	; 255
    1832:	7f 4f       	sbci	r23, 0xFF	; 255
    1834:	c8 01       	movw	r24, r16
    1836:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
    183a:	81 11       	cpse	r24, r1
    183c:	39 c0       	rjmp	.+114    	; 0x18b0 <mount_volume+0x4fc>
    183e:	d8 01       	movw	r26, r16
    1840:	14 96       	adiw	r26, 0x04	; 4
    1842:	1c 92       	st	X, r1
    1844:	f8 01       	movw	r30, r16
    1846:	e2 5d       	subi	r30, 0xD2	; 210
    1848:	fd 4f       	sbci	r31, 0xFD	; 253
    184a:	80 81       	ld	r24, Z
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	98 2f       	mov	r25, r24
    1850:	88 27       	eor	r24, r24
    1852:	31 97       	sbiw	r30, 0x01	; 1
    1854:	20 81       	ld	r18, Z
    1856:	82 2b       	or	r24, r18
    1858:	85 35       	cpi	r24, 0x55	; 85
    185a:	9a 4a       	sbci	r25, 0xAA	; 170
    185c:	49 f5       	brne	.+82     	; 0x18b0 <mount_volume+0x4fc>
    185e:	c8 01       	movw	r24, r16
    1860:	8f 96       	adiw	r24, 0x2f	; 47
    1862:	0e 94 0d 01 	call	0x21a	; 0x21a <ld_dword>
    1866:	62 35       	cpi	r22, 0x52	; 82
    1868:	72 45       	sbci	r23, 0x52	; 82
    186a:	81 46       	sbci	r24, 0x61	; 97
    186c:	91 44       	sbci	r25, 0x41	; 65
    186e:	01 f5       	brne	.+64     	; 0x18b0 <mount_volume+0x4fc>
    1870:	c8 01       	movw	r24, r16
    1872:	8d 5e       	subi	r24, 0xED	; 237
    1874:	9d 4f       	sbci	r25, 0xFD	; 253
    1876:	0e 94 0d 01 	call	0x21a	; 0x21a <ld_dword>
    187a:	62 37       	cpi	r22, 0x72	; 114
    187c:	72 47       	sbci	r23, 0x72	; 114
    187e:	81 44       	sbci	r24, 0x41	; 65
    1880:	91 46       	sbci	r25, 0x61	; 97
    1882:	b1 f4       	brne	.+44     	; 0x18b0 <mount_volume+0x4fc>
    1884:	c8 01       	movw	r24, r16
    1886:	89 5e       	subi	r24, 0xE9	; 233
    1888:	9d 4f       	sbci	r25, 0xFD	; 253
    188a:	0e 94 0d 01 	call	0x21a	; 0x21a <ld_dword>
    188e:	d8 01       	movw	r26, r16
    1890:	1f 96       	adiw	r26, 0x0f	; 15
    1892:	6d 93       	st	X+, r22
    1894:	7d 93       	st	X+, r23
    1896:	8d 93       	st	X+, r24
    1898:	9c 93       	st	X, r25
    189a:	52 97       	sbiw	r26, 0x12	; 18
    189c:	c8 01       	movw	r24, r16
    189e:	85 5e       	subi	r24, 0xE5	; 229
    18a0:	9d 4f       	sbci	r25, 0xFD	; 253
    18a2:	0e 94 0d 01 	call	0x21a	; 0x21a <ld_dword>
    18a6:	f8 01       	movw	r30, r16
    18a8:	63 87       	std	Z+11, r22	; 0x0b
    18aa:	74 87       	std	Z+12, r23	; 0x0c
    18ac:	85 87       	std	Z+13, r24	; 0x0d
    18ae:	96 87       	std	Z+14, r25	; 0x0e
    18b0:	d8 01       	movw	r26, r16
    18b2:	2c 92       	st	X, r2
    18b4:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end>
    18b8:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <__data_end+0x1>
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <__data_end+0x1>
    18c2:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__data_end>
    18c6:	16 96       	adiw	r26, 0x06	; 6
    18c8:	9c 93       	st	X, r25
    18ca:	8e 93       	st	-X, r24
    18cc:	15 97       	sbiw	r26, 0x05	; 5
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	ad c0       	rjmp	.+346    	; 0x1a2c <mount_volume+0x678>
    18d2:	8b e0       	ldi	r24, 0x0B	; 11
    18d4:	ab c0       	rjmp	.+342    	; 0x1a2c <mount_volume+0x678>
    18d6:	8c e0       	ldi	r24, 0x0C	; 12
    18d8:	a9 c0       	rjmp	.+338    	; 0x1a2c <mount_volume+0x678>
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	a7 c0       	rjmp	.+334    	; 0x1a2c <mount_volume+0x678>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	a5 c0       	rjmp	.+330    	; 0x1a2c <mount_volume+0x678>
    18e2:	83 e0       	ldi	r24, 0x03	; 3
    18e4:	a3 c0       	rjmp	.+326    	; 0x1a2c <mount_volume+0x678>
    18e6:	8a e0       	ldi	r24, 0x0A	; 10
    18e8:	a1 c0       	rjmp	.+322    	; 0x1a2c <mount_volume+0x678>
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	9f c0       	rjmp	.+318    	; 0x1a2c <mount_volume+0x678>
    18ee:	8d e0       	ldi	r24, 0x0D	; 13
    18f0:	9d c0       	rjmp	.+314    	; 0x1a2c <mount_volume+0x678>
    18f2:	8d e0       	ldi	r24, 0x0D	; 13
    18f4:	9b c0       	rjmp	.+310    	; 0x1a2c <mount_volume+0x678>
    18f6:	8d e0       	ldi	r24, 0x0D	; 13
    18f8:	99 c0       	rjmp	.+306    	; 0x1a2c <mount_volume+0x678>
    18fa:	8d e0       	ldi	r24, 0x0D	; 13
    18fc:	97 c0       	rjmp	.+302    	; 0x1a2c <mount_volume+0x678>
    18fe:	8d e0       	ldi	r24, 0x0D	; 13
    1900:	95 c0       	rjmp	.+298    	; 0x1a2c <mount_volume+0x678>
    1902:	8d e0       	ldi	r24, 0x0D	; 13
    1904:	93 c0       	rjmp	.+294    	; 0x1a2c <mount_volume+0x678>
    1906:	8d e0       	ldi	r24, 0x0D	; 13
    1908:	91 c0       	rjmp	.+290    	; 0x1a2c <mount_volume+0x678>
    190a:	8d e0       	ldi	r24, 0x0D	; 13
    190c:	8f c0       	rjmp	.+286    	; 0x1a2c <mount_volume+0x678>
    190e:	8d e0       	ldi	r24, 0x0D	; 13
    1910:	8d c0       	rjmp	.+282    	; 0x1a2c <mount_volume+0x678>
    1912:	8d e0       	ldi	r24, 0x0D	; 13
    1914:	8b c0       	rjmp	.+278    	; 0x1a2c <mount_volume+0x678>
    1916:	8d e0       	ldi	r24, 0x0D	; 13
    1918:	89 c0       	rjmp	.+274    	; 0x1a2c <mount_volume+0x678>
    191a:	8d e0       	ldi	r24, 0x0D	; 13
    191c:	87 c0       	rjmp	.+270    	; 0x1a2c <mount_volume+0x678>
    191e:	8d e0       	ldi	r24, 0x0D	; 13
    1920:	85 c0       	rjmp	.+266    	; 0x1a2c <mount_volume+0x678>
    1922:	8d e0       	ldi	r24, 0x0D	; 13
    1924:	83 c0       	rjmp	.+262    	; 0x1a2c <mount_volume+0x678>
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	81 c0       	rjmp	.+258    	; 0x1a2c <mount_volume+0x678>
    192a:	8d e0       	ldi	r24, 0x0D	; 13
    192c:	7f c0       	rjmp	.+254    	; 0x1a2c <mount_volume+0x678>
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	ba 01       	movw	r22, r20
    1934:	c8 01       	movw	r24, r16
    1936:	0e 94 8d 09 	call	0x131a	; 0x131a <check_fs>
    193a:	82 30       	cpi	r24, 0x02	; 2
    193c:	91 05       	cpc	r25, r1
    193e:	09 f0       	breq	.+2      	; 0x1942 <mount_volume+0x58e>
    1940:	cf cd       	rjmp	.-1122   	; 0x14e0 <mount_volume+0x12c>
    1942:	95 cd       	rjmp	.-1238   	; 0x146e <mount_volume+0xba>
    1944:	04 97       	sbiw	r24, 0x04	; 4
    1946:	09 f0       	breq	.+2      	; 0x194a <mount_volume+0x596>
    1948:	d2 cd       	rjmp	.-1116   	; 0x14ee <mount_volume+0x13a>
    194a:	ed cf       	rjmp	.-38     	; 0x1926 <mount_volume+0x572>
    194c:	8f ef       	ldi	r24, 0xFF	; 255
    194e:	9f ef       	ldi	r25, 0xFF	; 255
    1950:	dc 01       	movw	r26, r24
    1952:	f8 01       	movw	r30, r16
    1954:	87 87       	std	Z+15, r24	; 0x0f
    1956:	90 8b       	std	Z+16, r25	; 0x10
    1958:	a1 8b       	std	Z+17, r26	; 0x11
    195a:	b2 8b       	std	Z+18, r27	; 0x12
    195c:	83 87       	std	Z+11, r24	; 0x0b
    195e:	94 87       	std	Z+12, r25	; 0x0c
    1960:	a5 87       	std	Z+13, r26	; 0x0d
    1962:	b6 87       	std	Z+14, r27	; 0x0e
    1964:	80 e8       	ldi	r24, 0x80	; 128
    1966:	84 83       	std	Z+4, r24	; 0x04
    1968:	a3 cf       	rjmp	.-186    	; 0x18b0 <mount_volume+0x4fc>
    196a:	ff ef       	ldi	r31, 0xFF	; 255
    196c:	cf 0e       	add	r12, r31
    196e:	f1 e0       	ldi	r31, 0x01	; 1
    1970:	df 1e       	adc	r13, r31
    1972:	e1 1c       	adc	r14, r1
    1974:	f1 1c       	adc	r15, r1
    1976:	0b 2e       	mov	r0, r27
    1978:	b9 e0       	ldi	r27, 0x09	; 9
    197a:	f6 94       	lsr	r15
    197c:	e7 94       	ror	r14
    197e:	d7 94       	ror	r13
    1980:	c7 94       	ror	r12
    1982:	ba 95       	dec	r27
    1984:	d1 f7       	brne	.-12     	; 0x197a <mount_volume+0x5c6>
    1986:	b0 2d       	mov	r27, r0
    1988:	29 89       	ldd	r18, Y+17	; 0x11
    198a:	3a 89       	ldd	r19, Y+18	; 0x12
    198c:	4b 89       	ldd	r20, Y+19	; 0x13
    198e:	5c 89       	ldd	r21, Y+20	; 0x14
    1990:	2c 15       	cp	r18, r12
    1992:	3d 05       	cpc	r19, r13
    1994:	4e 05       	cpc	r20, r14
    1996:	5f 05       	cpc	r21, r15
    1998:	40 f2       	brcs	.-112    	; 0x192a <mount_volume+0x576>
    199a:	d8 cf       	rjmp	.-80     	; 0x194c <mount_volume+0x598>
    199c:	8f ef       	ldi	r24, 0xFF	; 255
    199e:	9f ef       	ldi	r25, 0xFF	; 255
    19a0:	dc 01       	movw	r26, r24
    19a2:	f8 01       	movw	r30, r16
    19a4:	87 87       	std	Z+15, r24	; 0x0f
    19a6:	90 8b       	std	Z+16, r25	; 0x10
    19a8:	a1 8b       	std	Z+17, r26	; 0x11
    19aa:	b2 8b       	std	Z+18, r27	; 0x12
    19ac:	83 87       	std	Z+11, r24	; 0x0b
    19ae:	94 87       	std	Z+12, r25	; 0x0c
    19b0:	a5 87       	std	Z+13, r26	; 0x0d
    19b2:	b6 87       	std	Z+14, r27	; 0x0e
    19b4:	80 e8       	ldi	r24, 0x80	; 128
    19b6:	84 83       	std	Z+4, r24	; 0x04
    19b8:	e0 5a       	subi	r30, 0xA0	; 160
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	80 81       	ld	r24, Z
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	98 2f       	mov	r25, r24
    19c2:	88 27       	eor	r24, r24
    19c4:	31 97       	sbiw	r30, 0x01	; 1
    19c6:	20 81       	ld	r18, Z
    19c8:	82 2b       	or	r24, r18
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <mount_volume+0x61c>
    19ce:	70 cf       	rjmp	.-288    	; 0x18b0 <mount_volume+0x4fc>
    19d0:	2b cf       	rjmp	.-426    	; 0x1828 <mount_volume+0x474>
    19d2:	69 01       	movw	r12, r18
    19d4:	7a 01       	movw	r14, r20
    19d6:	f2 e0       	ldi	r31, 0x02	; 2
    19d8:	cf 0e       	add	r12, r31
    19da:	d1 1c       	adc	r13, r1
    19dc:	e1 1c       	adc	r14, r1
    19de:	f1 1c       	adc	r15, r1
    19e0:	d8 01       	movw	r26, r16
    19e2:	53 96       	adiw	r26, 0x13	; 19
    19e4:	cd 92       	st	X+, r12
    19e6:	dd 92       	st	X+, r13
    19e8:	ed 92       	st	X+, r14
    19ea:	fc 92       	st	X, r15
    19ec:	56 97       	sbiw	r26, 0x16	; 22
    19ee:	f8 01       	movw	r30, r16
    19f0:	83 8e       	std	Z+27, r8	; 0x1b
    19f2:	94 8e       	std	Z+28, r9	; 0x1c
    19f4:	a5 8e       	std	Z+29, r10	; 0x1d
    19f6:	b6 8e       	std	Z+30, r11	; 0x1e
    19f8:	8f 89       	ldd	r24, Y+23	; 0x17
    19fa:	98 8d       	ldd	r25, Y+24	; 0x18
    19fc:	a9 8d       	ldd	r26, Y+25	; 0x19
    19fe:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1a00:	88 0d       	add	r24, r8
    1a02:	99 1d       	adc	r25, r9
    1a04:	aa 1d       	adc	r26, r10
    1a06:	bb 1d       	adc	r27, r11
    1a08:	87 8f       	std	Z+31, r24	; 0x1f
    1a0a:	90 a3       	std	Z+32, r25	; 0x20
    1a0c:	a1 a3       	std	Z+33, r26	; 0x21
    1a0e:	b2 a3       	std	Z+34, r27	; 0x22
    1a10:	b5 01       	movw	r22, r10
    1a12:	a4 01       	movw	r20, r8
    1a14:	44 0d       	add	r20, r4
    1a16:	55 1d       	adc	r21, r5
    1a18:	66 1d       	adc	r22, r6
    1a1a:	77 1d       	adc	r23, r7
    1a1c:	47 a3       	std	Z+39, r20	; 0x27
    1a1e:	50 a7       	std	Z+40, r21	; 0x28
    1a20:	61 a7       	std	Z+41, r22	; 0x29
    1a22:	72 a7       	std	Z+42, r23	; 0x2a
    1a24:	22 24       	eor	r2, r2
    1a26:	23 94       	inc	r2
    1a28:	31 2c       	mov	r3, r1
    1a2a:	cb ce       	rjmp	.-618    	; 0x17c2 <mount_volume+0x40e>
    1a2c:	6e 96       	adiw	r28, 0x1e	; 30
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	f8 94       	cli
    1a32:	de bf       	out	0x3e, r29	; 62
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	cd bf       	out	0x3d, r28	; 61
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	1f 91       	pop	r17
    1a3e:	0f 91       	pop	r16
    1a40:	ff 90       	pop	r15
    1a42:	ef 90       	pop	r14
    1a44:	df 90       	pop	r13
    1a46:	cf 90       	pop	r12
    1a48:	bf 90       	pop	r11
    1a4a:	af 90       	pop	r10
    1a4c:	9f 90       	pop	r9
    1a4e:	8f 90       	pop	r8
    1a50:	7f 90       	pop	r7
    1a52:	6f 90       	pop	r6
    1a54:	5f 90       	pop	r5
    1a56:	4f 90       	pop	r4
    1a58:	3f 90       	pop	r3
    1a5a:	2f 90       	pop	r2
    1a5c:	08 95       	ret

00001a5e <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	dc 01       	movw	r26, r24
    1a64:	fb 01       	movw	r30, r22
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1a66:	93 8d       	ldd	r25, Z+27	; 0x1b
    1a68:	69 2f       	mov	r22, r25
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	76 2f       	mov	r23, r22
    1a6e:	66 27       	eor	r22, r22
	const BYTE* dir		/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    1a70:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a72:	68 2b       	or	r22, r24
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
    1a78:	2c 91       	ld	r18, X
    1a7a:	23 30       	cpi	r18, 0x03	; 3
    1a7c:	79 f4       	brne	.+30     	; 0x1a9c <ld_clust+0x3e>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1a7e:	05 89       	ldd	r16, Z+21	; 0x15
    1a80:	10 e0       	ldi	r17, 0x00	; 0
    1a82:	10 2f       	mov	r17, r16
    1a84:	00 27       	eor	r16, r16
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    1a86:	24 89       	ldd	r18, Z+20	; 0x14
    1a88:	02 2b       	or	r16, r18
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	98 01       	movw	r18, r16
    1a90:	11 27       	eor	r17, r17
    1a92:	00 27       	eor	r16, r16
    1a94:	60 2b       	or	r22, r16
    1a96:	71 2b       	or	r23, r17
    1a98:	82 2b       	or	r24, r18
    1a9a:	93 2b       	or	r25, r19
	}

	return cl;
}
    1a9c:	1f 91       	pop	r17
    1a9e:	0f 91       	pop	r16
    1aa0:	08 95       	ret

00001aa2 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
    1aa2:	2f 92       	push	r2
    1aa4:	3f 92       	push	r3
    1aa6:	4f 92       	push	r4
    1aa8:	5f 92       	push	r5
    1aaa:	6f 92       	push	r6
    1aac:	7f 92       	push	r7
    1aae:	8f 92       	push	r8
    1ab0:	9f 92       	push	r9
    1ab2:	af 92       	push	r10
    1ab4:	bf 92       	push	r11
    1ab6:	cf 92       	push	r12
    1ab8:	df 92       	push	r13
    1aba:	ef 92       	push	r14
    1abc:	ff 92       	push	r15
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	2a 97       	sbiw	r28, 0x0a	; 10
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	0d 90       	ld	r0, X+
    1ada:	bc 91       	ld	r27, X
    1adc:	a0 2d       	mov	r26, r0
    1ade:	ba 83       	std	Y+2, r27	; 0x02
    1ae0:	a9 83       	std	Y+1, r26	; 0x01
    1ae2:	e6 2f       	mov	r30, r22
    1ae4:	f7 2f       	mov	r31, r23
    1ae6:	9a 87       	std	Y+10, r25	; 0x0a
    1ae8:	89 87       	std	Y+9, r24	; 0x09
    1aea:	1f 01       	movw	r2, r30
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
    1aec:	81 91       	ld	r24, Z+
    1aee:	8f 32       	cpi	r24, 0x2F	; 47
    1af0:	e1 f3       	breq	.-8      	; 0x1aea <follow_path+0x48>
    1af2:	8c 35       	cpi	r24, 0x5C	; 92
    1af4:	d1 f3       	breq	.-12     	; 0x1aea <follow_path+0x48>
    1af6:	e9 85       	ldd	r30, Y+9	; 0x09
    1af8:	fa 85       	ldd	r31, Y+10	; 0x0a
		dp->obj.sclust = 0;					/* Start from root directory */
    1afa:	df 01       	movw	r26, r30
    1afc:	16 82       	std	Z+6, r1	; 0x06
    1afe:	17 82       	std	Z+7, r1	; 0x07
    1b00:	10 86       	std	Z+8, r1	; 0x08
    1b02:	11 86       	std	Z+9, r1	; 0x09
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    1b04:	f1 01       	movw	r30, r2
    1b06:	80 81       	ld	r24, Z
    1b08:	80 32       	cpi	r24, 0x20	; 32
    1b0a:	60 f4       	brcc	.+24     	; 0x1b24 <follow_path+0x82>
		dp->fn[NSFLAG] = NS_NONAME;
    1b0c:	80 e8       	ldi	r24, 0x80	; 128
    1b0e:	97 96       	adiw	r26, 0x27	; 39
    1b10:	8c 93       	st	X, r24
    1b12:	97 97       	sbiw	r26, 0x27	; 39
		res = dir_sdi(dp, 0);
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	50 e0       	ldi	r21, 0x00	; 0
    1b18:	ba 01       	movw	r22, r20
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 49 05 	call	0xa92	; 0xa92 <dir_sdi>
    1b20:	88 2e       	mov	r8, r24
    1b22:	23 c1       	rjmp	.+582    	; 0x1d6a <follow_path+0x2c8>
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
    1b24:	69 84       	ldd	r6, Y+9	; 0x09
    1b26:	7a 84       	ldd	r7, Y+10	; 0x0a
    1b28:	fc e1       	ldi	r31, 0x1C	; 28
    1b2a:	6f 0e       	add	r6, r31
    1b2c:	71 1c       	adc	r7, r1
    1b2e:	e9 84       	ldd	r14, Y+9	; 0x09
    1b30:	fa 84       	ldd	r15, Y+10	; 0x0a
    1b32:	87 e2       	ldi	r24, 0x27	; 39
    1b34:	e8 0e       	add	r14, r24
    1b36:	f1 1c       	adc	r15, r1
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    1b38:	10 e2       	ldi	r17, 0x20	; 32
	} while (--cnt);
    1b3a:	b1 2c       	mov	r11, r1
    1b3c:	68 94       	set
    1b3e:	55 24       	eor	r5, r5
    1b40:	53 f8       	bld	r5, 3
    1b42:	41 2c       	mov	r4, r1
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
			i = 8; ni = 11;				/* Enter file extension field */
    1b44:	0f 2e       	mov	r0, r31
    1b46:	fb e0       	ldi	r31, 0x0B	; 11
    1b48:	af 2e       	mov	r10, r31
    1b4a:	f0 2d       	mov	r31, r0
    1b4c:	91 2c       	mov	r9, r1
    1b4e:	5d 82       	std	Y+5, r5	; 0x05
    1b50:	4e 82       	std	Y+6, r4	; 0x06
    1b52:	af 82       	std	Y+7, r10	; 0x07
    1b54:	98 86       	std	Y+8, r9	; 0x08
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    1b56:	a9 81       	ldd	r26, Y+1	; 0x01
    1b58:	ba 81       	ldd	r27, Y+2	; 0x02
    1b5a:	9f 96       	adiw	r26, 0x2f	; 47
    1b5c:	bc 83       	std	Y+4, r27	; 0x04
    1b5e:	ab 83       	std	Y+3, r26	; 0x03
    1b60:	f3 01       	movw	r30, r6
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    1b62:	11 93       	st	Z+, r17
	} while (--cnt);
    1b64:	ee 15       	cp	r30, r14
    1b66:	ff 05       	cpc	r31, r15
    1b68:	e1 f7       	brne	.-8      	; 0x1b62 <follow_path+0xc0>
    1b6a:	f1 01       	movw	r30, r2
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	7b 2d       	mov	r23, r11
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	c5 2c       	mov	r12, r5
    1b76:	d4 2c       	mov	r13, r4
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
    1b78:	2f 5f       	subi	r18, 0xFF	; 255
    1b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7c:	01 91       	ld	r16, Z+
		if (c <= ' ') break; 			/* Break if end of the path name */
    1b7e:	01 32       	cpi	r16, 0x21	; 33
    1b80:	b0 f1       	brcs	.+108    	; 0x1bee <follow_path+0x14c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
    1b82:	0f 32       	cpi	r16, 0x2F	; 47
    1b84:	11 f0       	breq	.+4      	; 0x1b8a <follow_path+0xe8>
    1b86:	0c 35       	cpi	r16, 0x5C	; 92
    1b88:	61 f4       	brne	.+24     	; 0x1ba2 <follow_path+0x100>
    1b8a:	f1 01       	movw	r30, r2
    1b8c:	e2 0f       	add	r30, r18
    1b8e:	f3 1f       	adc	r31, r19
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <follow_path+0xf4>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
    1b92:	2f 5f       	subi	r18, 0xFF	; 255
    1b94:	3f 4f       	sbci	r19, 0xFF	; 255
    1b96:	81 91       	ld	r24, Z+
    1b98:	8f 32       	cpi	r24, 0x2F	; 47
    1b9a:	d9 f3       	breq	.-10     	; 0x1b92 <follow_path+0xf0>
    1b9c:	8c 35       	cpi	r24, 0x5C	; 92
    1b9e:	c9 f3       	breq	.-14     	; 0x1b92 <follow_path+0xf0>
    1ba0:	26 c0       	rjmp	.+76     	; 0x1bee <follow_path+0x14c>
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
    1ba2:	0e 32       	cpi	r16, 0x2E	; 46
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <follow_path+0x106>
    1ba6:	d8 c0       	rjmp	.+432    	; 0x1d58 <follow_path+0x2b6>
    1ba8:	6c 15       	cp	r22, r12
    1baa:	7d 05       	cpc	r23, r13
    1bac:	08 f0       	brcs	.+2      	; 0x1bb0 <follow_path+0x10e>
    1bae:	9a c0       	rjmp	.+308    	; 0x1ce4 <follow_path+0x242>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
    1bb0:	00 23       	and	r16, r16
    1bb2:	0c f0       	brlt	.+2      	; 0x1bb6 <follow_path+0x114>
    1bb4:	b4 c0       	rjmp	.+360    	; 0x1d1e <follow_path+0x27c>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
    1bb6:	0f 77       	andi	r16, 0x7F	; 127
    1bb8:	a0 2f       	mov	r26, r16
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	a6 5e       	subi	r26, 0xE6	; 230
    1bbe:	be 4f       	sbci	r27, 0xFE	; 254
    1bc0:	0c 91       	ld	r16, X
    1bc2:	ad c0       	rjmp	.+346    	; 0x1d1e <follow_path+0x27c>


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
    1bc4:	8d 91       	ld	r24, X+
    1bc6:	88 23       	and	r24, r24
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <follow_path+0x12a>
    1bca:	b1 c0       	rjmp	.+354    	; 0x1d2e <follow_path+0x28c>
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	48 17       	cp	r20, r24
    1bd0:	59 07       	cpc	r21, r25
    1bd2:	c1 f7       	brne	.-16     	; 0x1bc4 <follow_path+0x122>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    1bd4:	0f 2e       	mov	r0, r31
    1bd6:	f6 e0       	ldi	r31, 0x06	; 6
    1bd8:	8f 2e       	mov	r8, r31
    1bda:	f0 2d       	mov	r31, r0
    1bdc:	c6 c0       	rjmp	.+396    	; 0x1d6a <follow_path+0x2c8>
			if (IsLower(c)) c -= 0x20;	/* To upper */
    1bde:	00 52       	subi	r16, 0x20	; 32
			sfn[i++] = c;
    1be0:	d3 01       	movw	r26, r6
    1be2:	a6 0f       	add	r26, r22
    1be4:	b7 1f       	adc	r27, r23
    1be6:	0c 93       	st	X, r16
    1be8:	6f 5f       	subi	r22, 0xFF	; 255
    1bea:	7f 4f       	sbci	r23, 0xFF	; 255
    1bec:	c5 cf       	rjmp	.-118    	; 0x1b78 <follow_path+0xd6>
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
    1bee:	22 0e       	add	r2, r18
    1bf0:	33 1e       	adc	r3, r19
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    1bf2:	67 2b       	or	r22, r23
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <follow_path+0x156>
    1bf6:	7b c0       	rjmp	.+246    	; 0x1cee <follow_path+0x24c>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    1bf8:	a9 85       	ldd	r26, Y+9	; 0x09
    1bfa:	ba 85       	ldd	r27, Y+10	; 0x0a
    1bfc:	5c 96       	adiw	r26, 0x1c	; 28
    1bfe:	8c 91       	ld	r24, X
    1c00:	5c 97       	sbiw	r26, 0x1c	; 28
    1c02:	85 3e       	cpi	r24, 0xE5	; 229
    1c04:	19 f4       	brne	.+6      	; 0x1c0c <follow_path+0x16a>
    1c06:	e5 e0       	ldi	r30, 0x05	; 5
    1c08:	5c 96       	adiw	r26, 0x1c	; 28
    1c0a:	ec 93       	st	X, r30
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    1c0c:	01 32       	cpi	r16, 0x21	; 33
    1c0e:	10 f0       	brcs	.+4      	; 0x1c14 <follow_path+0x172>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	01 c0       	rjmp	.+2      	; 0x1c16 <follow_path+0x174>
    1c14:	84 e0       	ldi	r24, 0x04	; 4
    1c16:	a9 85       	ldd	r26, Y+9	; 0x09
    1c18:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c1a:	97 96       	adiw	r26, 0x27	; 39
    1c1c:	8c 93       	st	X, r24
    1c1e:	97 97       	sbiw	r26, 0x27	; 39
static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    1c20:	cd 90       	ld	r12, X+
    1c22:	dc 90       	ld	r13, X
    1c24:	11 97       	sbiw	r26, 0x01	; 1
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	ba 01       	movw	r22, r20
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 49 05 	call	0xa92	; 0xa92 <dir_sdi>
    1c32:	88 2e       	mov	r8, r24
	if (res != FR_OK) return res;
    1c34:	81 11       	cpse	r24, r1
    1c36:	81 c0       	rjmp	.+258    	; 0x1d3a <follow_path+0x298>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
    1c38:	a9 85       	ldd	r26, Y+9	; 0x09
    1c3a:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c3c:	56 96       	adiw	r26, 0x16	; 22
    1c3e:	4d 91       	ld	r20, X+
    1c40:	5d 91       	ld	r21, X+
    1c42:	6d 91       	ld	r22, X+
    1c44:	7c 91       	ld	r23, X
    1c46:	59 97       	sbiw	r26, 0x19	; 25
    1c48:	c6 01       	movw	r24, r12
    1c4a:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
    1c4e:	88 2e       	mov	r8, r24
		if (res != FR_OK) break;
    1c50:	81 11       	cpse	r24, r1
    1c52:	74 c0       	rjmp	.+232    	; 0x1d3c <follow_path+0x29a>
		c = dp->dir[DIR_Name];
    1c54:	a9 85       	ldd	r26, Y+9	; 0x09
    1c56:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c58:	5a 96       	adiw	r26, 0x1a	; 26
    1c5a:	ed 91       	ld	r30, X+
    1c5c:	fc 91       	ld	r31, X
    1c5e:	5b 97       	sbiw	r26, 0x1b	; 27
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1c60:	80 81       	ld	r24, Z
    1c62:	88 23       	and	r24, r24
    1c64:	d9 f0       	breq	.+54     	; 0x1c9c <follow_path+0x1fa>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    1c66:	03 85       	ldd	r16, Z+11	; 0x0b
    1c68:	80 2f       	mov	r24, r16
    1c6a:	8f 73       	andi	r24, 0x3F	; 63
    1c6c:	14 96       	adiw	r26, 0x04	; 4
    1c6e:	8c 93       	st	X, r24
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    1c70:	83 85       	ldd	r24, Z+11	; 0x0b
    1c72:	83 fd       	sbrc	r24, 3
    1c74:	09 c0       	rjmp	.+18     	; 0x1c88 <follow_path+0x1e6>
    1c76:	4a 2d       	mov	r20, r10
    1c78:	59 2d       	mov	r21, r9
    1c7a:	b3 01       	movw	r22, r6
    1c7c:	cf 01       	movw	r24, r30
    1c7e:	0e 94 36 01 	call	0x26c	; 0x26c <mem_cmp>
    1c82:	89 2b       	or	r24, r25
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <follow_path+0x1e6>
    1c86:	62 c0       	rjmp	.+196    	; 0x1d4c <follow_path+0x2aa>
#endif
		res = dir_next(dp, 0);	/* Next entry */
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	7b 2d       	mov	r23, r11
    1c8c:	89 85       	ldd	r24, Y+9	; 0x09
    1c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c90:	0e 94 2f 08 	call	0x105e	; 0x105e <dir_next>
    1c94:	88 2e       	mov	r8, r24
	} while (res == FR_OK);
    1c96:	88 23       	and	r24, r24
    1c98:	79 f2       	breq	.-98     	; 0x1c38 <follow_path+0x196>
    1c9a:	50 c0       	rjmp	.+160    	; 0x1d3c <follow_path+0x29a>
    1c9c:	89 85       	ldd	r24, Y+9	; 0x09
    1c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca0:	dc 01       	movw	r26, r24
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    1ca2:	97 96       	adiw	r26, 0x27	; 39
    1ca4:	8c 91       	ld	r24, X
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    1ca6:	82 fd       	sbrc	r24, 2
    1ca8:	27 c0       	rjmp	.+78     	; 0x1cf8 <follow_path+0x256>
    1caa:	0f 2e       	mov	r0, r31
    1cac:	f5 e0       	ldi	r31, 0x05	; 5
    1cae:	8f 2e       	mov	r8, r31
    1cb0:	f0 2d       	mov	r31, r0
    1cb2:	5b c0       	rjmp	.+182    	; 0x1d6a <follow_path+0x2c8>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
    1cb4:	04 ff       	sbrs	r16, 4
    1cb6:	24 c0       	rjmp	.+72     	; 0x1d00 <follow_path+0x25e>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    1cb8:	e9 85       	ldd	r30, Y+9	; 0x09
    1cba:	fa 85       	ldd	r31, Y+10	; 0x0a
    1cbc:	66 85       	ldd	r22, Z+14	; 0x0e
    1cbe:	77 85       	ldd	r23, Z+15	; 0x0f
    1cc0:	71 70       	andi	r23, 0x01	; 1
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	68 0f       	add	r22, r24
    1cc8:	79 1f       	adc	r23, r25
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cce:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <ld_clust>
    1cd2:	a9 85       	ldd	r26, Y+9	; 0x09
    1cd4:	ba 85       	ldd	r27, Y+10	; 0x0a
    1cd6:	16 96       	adiw	r26, 0x06	; 6
    1cd8:	6d 93       	st	X+, r22
    1cda:	7d 93       	st	X+, r23
    1cdc:	8d 93       	st	X+, r24
    1cde:	9c 93       	st	X, r25
    1ce0:	19 97       	sbiw	r26, 0x09	; 9
			}
		}
    1ce2:	3e cf       	rjmp	.-388    	; 0x1b60 <follow_path+0xbe>
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
    1ce4:	0f 2e       	mov	r0, r31
    1ce6:	f6 e0       	ldi	r31, 0x06	; 6
    1ce8:	8f 2e       	mov	r8, r31
    1cea:	f0 2d       	mov	r31, r0
    1cec:	3e c0       	rjmp	.+124    	; 0x1d6a <follow_path+0x2c8>
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    1cee:	0f 2e       	mov	r0, r31
    1cf0:	f6 e0       	ldi	r31, 0x06	; 6
    1cf2:	8f 2e       	mov	r8, r31
    1cf4:	f0 2d       	mov	r31, r0
    1cf6:	39 c0       	rjmp	.+114    	; 0x1d6a <follow_path+0x2c8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
    1cf8:	68 94       	set
    1cfa:	88 24       	eor	r8, r8
    1cfc:	82 f8       	bld	r8, 2
    1cfe:	35 c0       	rjmp	.+106    	; 0x1d6a <follow_path+0x2c8>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    1d00:	0f 2e       	mov	r0, r31
    1d02:	f5 e0       	ldi	r31, 0x05	; 5
    1d04:	8f 2e       	mov	r8, r31
    1d06:	f0 2d       	mov	r31, r0
    1d08:	30 c0       	rjmp	.+96     	; 0x1d6a <follow_path+0x2c8>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    1d0a:	0f 2e       	mov	r0, r31
    1d0c:	f6 e0       	ldi	r31, 0x06	; 6
    1d0e:	8f 2e       	mov	r8, r31
    1d10:	f0 2d       	mov	r31, r0
    1d12:	2b c0       	rjmp	.+86     	; 0x1d6a <follow_path+0x2c8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    1d14:	0f 2e       	mov	r0, r31
    1d16:	f6 e0       	ldi	r31, 0x06	; 6
    1d18:	8f 2e       	mov	r8, r31
    1d1a:	f0 2d       	mov	r31, r0
    1d1c:	26 c0       	rjmp	.+76     	; 0x1d6a <follow_path+0x2c8>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    1d1e:	40 2f       	mov	r20, r16
    1d20:	50 e0       	ldi	r21, 0x00	; 0


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
    1d22:	42 32       	cpi	r20, 0x22	; 34
    1d24:	51 05       	cpc	r21, r1
    1d26:	89 f3       	breq	.-30     	; 0x1d0a <follow_path+0x268>
    1d28:	ac e0       	ldi	r26, 0x0C	; 12
    1d2a:	b1 e0       	ldi	r27, 0x01	; 1
    1d2c:	4b cf       	rjmp	.-362    	; 0x1bc4 <follow_path+0x122>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
    1d2e:	8f e9       	ldi	r24, 0x9F	; 159
    1d30:	80 0f       	add	r24, r16
    1d32:	8a 31       	cpi	r24, 0x1A	; 26
    1d34:	08 f4       	brcc	.+2      	; 0x1d38 <follow_path+0x296>
    1d36:	53 cf       	rjmp	.-346    	; 0x1bde <follow_path+0x13c>
    1d38:	53 cf       	rjmp	.-346    	; 0x1be0 <follow_path+0x13e>
    1d3a:	00 c0       	rjmp	.+0      	; 0x1d3c <follow_path+0x29a>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    1d3c:	a9 85       	ldd	r26, Y+9	; 0x09
    1d3e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1d40:	97 96       	adiw	r26, 0x27	; 39
    1d42:	8c 91       	ld	r24, X
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    1d44:	b4 e0       	ldi	r27, 0x04	; 4
    1d46:	8b 12       	cpse	r8, r27
    1d48:	10 c0       	rjmp	.+32     	; 0x1d6a <follow_path+0x2c8>
    1d4a:	ad cf       	rjmp	.-166    	; 0x1ca6 <follow_path+0x204>
    1d4c:	e9 85       	ldd	r30, Y+9	; 0x09
    1d4e:	fa 85       	ldd	r31, Y+10	; 0x0a
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    1d50:	87 a1       	ldd	r24, Z+39	; 0x27
    1d52:	82 ff       	sbrs	r24, 2
    1d54:	af cf       	rjmp	.-162    	; 0x1cb4 <follow_path+0x212>
    1d56:	09 c0       	rjmp	.+18     	; 0x1d6a <follow_path+0x2c8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    1d58:	8b e0       	ldi	r24, 0x0B	; 11
    1d5a:	c8 16       	cp	r12, r24
    1d5c:	d1 04       	cpc	r13, r1
    1d5e:	d1 f2       	breq	.-76     	; 0x1d14 <follow_path+0x272>
			i = 8; ni = 11;				/* Enter file extension field */
    1d60:	6d 81       	ldd	r22, Y+5	; 0x05
    1d62:	7e 81       	ldd	r23, Y+6	; 0x06
    1d64:	cf 80       	ldd	r12, Y+7	; 0x07
    1d66:	d8 84       	ldd	r13, Y+8	; 0x08
    1d68:	07 cf       	rjmp	.-498    	; 0x1b78 <follow_path+0xd6>
			}
		}
	}

	return res;
}
    1d6a:	88 2d       	mov	r24, r8
    1d6c:	2a 96       	adiw	r28, 0x0a	; 10
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	ff 90       	pop	r15
    1d82:	ef 90       	pop	r14
    1d84:	df 90       	pop	r13
    1d86:	cf 90       	pop	r12
    1d88:	bf 90       	pop	r11
    1d8a:	af 90       	pop	r10
    1d8c:	9f 90       	pop	r9
    1d8e:	8f 90       	pop	r8
    1d90:	7f 90       	pop	r7
    1d92:	6f 90       	pop	r6
    1d94:	5f 90       	pop	r5
    1d96:	4f 90       	pop	r4
    1d98:	3f 90       	pop	r3
    1d9a:	2f 90       	pop	r2
    1d9c:	08 95       	ret

00001d9e <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    1d9e:	1f 93       	push	r17
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <f_mount+0x8>
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <f_mount+0xa>
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <f_mount+0xc>
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	9c 83       	std	Y+4, r25	; 0x04
    1db0:	8b 83       	std	Y+3, r24	; 0x03
    1db2:	7e 83       	std	Y+6, r23	; 0x06
    1db4:	6d 83       	std	Y+5, r22	; 0x05
    1db6:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    1db8:	7a 83       	std	Y+2, r23	; 0x02
    1dba:	69 83       	std	Y+1, r22	; 0x01


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	01 96       	adiw	r24, 0x01	; 1
    1dc0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    1dc4:	99 23       	and	r25, r25
    1dc6:	24 f1       	brlt	.+72     	; 0x1e10 <f_mount+0x72>
	cfs = FatFs[vol];					/* Pointer to fs object */
    1dc8:	fc 01       	movw	r30, r24
    1dca:	ee 0f       	add	r30, r30
    1dcc:	ff 1f       	adc	r31, r31
    1dce:	e6 53       	subi	r30, 0x36	; 54
    1dd0:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd2:	01 90       	ld	r0, Z+
    1dd4:	f0 81       	ld	r31, Z
    1dd6:	e0 2d       	mov	r30, r0

	if (cfs) {
    1dd8:	30 97       	sbiw	r30, 0x00	; 0
    1dda:	09 f0       	breq	.+2      	; 0x1dde <f_mount+0x40>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    1ddc:	10 82       	st	Z, r1
	}

	if (fs) {
    1dde:	eb 81       	ldd	r30, Y+3	; 0x03
    1de0:	fc 81       	ldd	r31, Y+4	; 0x04
    1de2:	30 97       	sbiw	r30, 0x00	; 0
    1de4:	09 f0       	breq	.+2      	; 0x1de8 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
    1de6:	10 82       	st	Z, r1
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	fc 01       	movw	r30, r24
    1dee:	e6 53       	subi	r30, 0x36	; 54
    1df0:	fe 4f       	sbci	r31, 0xFE	; 254
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	9c 81       	ldd	r25, Y+4	; 0x04
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	80 83       	st	Z, r24

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    1dfa:	11 23       	and	r17, r17
    1dfc:	59 f0       	breq	.+22     	; 0x1e14 <f_mount+0x76>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	be 01       	movw	r22, r28
    1e02:	6d 5f       	subi	r22, 0xFD	; 253
    1e04:	7f 4f       	sbci	r23, 0xFF	; 255
    1e06:	ce 01       	movw	r24, r28
    1e08:	05 96       	adiw	r24, 0x05	; 5
    1e0a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <mount_volume>
	LEAVE_FF(fs, res);
    1e0e:	03 c0       	rjmp	.+6      	; 0x1e16 <f_mount+0x78>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    1e10:	8b e0       	ldi	r24, 0x0B	; 11
    1e12:	01 c0       	rjmp	.+2      	; 0x1e16 <f_mount+0x78>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    1e14:	80 e0       	ldi	r24, 0x00	; 0

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    1e16:	26 96       	adiw	r28, 0x06	; 6
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	1f 91       	pop	r17
    1e28:	08 95       	ret

00001e2a <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1e2a:	2f 92       	push	r2
    1e2c:	3f 92       	push	r3
    1e2e:	4f 92       	push	r4
    1e30:	5f 92       	push	r5
    1e32:	6f 92       	push	r6
    1e34:	7f 92       	push	r7
    1e36:	8f 92       	push	r8
    1e38:	9f 92       	push	r9
    1e3a:	af 92       	push	r10
    1e3c:	bf 92       	push	r11
    1e3e:	cf 92       	push	r12
    1e40:	df 92       	push	r13
    1e42:	ef 92       	push	r14
    1e44:	ff 92       	push	r15
    1e46:	0f 93       	push	r16
    1e48:	1f 93       	push	r17
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	ac 97       	sbiw	r28, 0x2c	; 44
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	7c a7       	std	Y+44, r23	; 0x2c
    1e60:	6b a7       	std	Y+43, r22	; 0x2b
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <f_open+0x3e>
    1e66:	1d c1       	rjmp	.+570    	; 0x20a2 <f_open+0x278>
    1e68:	14 2f       	mov	r17, r20
    1e6a:	1c 01       	movw	r2, r24

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
    1e6c:	84 2f       	mov	r24, r20
    1e6e:	8f 73       	andi	r24, 0x3F	; 63
    1e70:	d8 2e       	mov	r13, r24
	res = mount_volume(&path, &fs, mode);
    1e72:	48 2f       	mov	r20, r24
    1e74:	be 01       	movw	r22, r28
    1e76:	67 5d       	subi	r22, 0xD7	; 215
    1e78:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	8b 96       	adiw	r24, 0x2b	; 43
    1e7e:	0e 94 da 09 	call	0x13b4	; 0x13b4 <mount_volume>
	if (res == FR_OK) {
    1e82:	81 11       	cpse	r24, r1
    1e84:	0a c1       	rjmp	.+532    	; 0x209a <f_open+0x270>
		dj.obj.fs = fs;
    1e86:	89 a5       	ldd	r24, Y+41	; 0x29
    1e88:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    1e8e:	6b a5       	ldd	r22, Y+43	; 0x2b
    1e90:	7c a5       	ldd	r23, Y+44	; 0x2c
    1e92:	ce 01       	movw	r24, r28
    1e94:	01 96       	adiw	r24, 0x01	; 1
    1e96:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
    1e9a:	81 11       	cpse	r24, r1
    1e9c:	04 c1       	rjmp	.+520    	; 0x20a6 <f_open+0x27c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    1e9e:	88 a5       	ldd	r24, Y+40	; 0x28
    1ea0:	88 23       	and	r24, r24
    1ea2:	0c f0       	brlt	.+2      	; 0x1ea6 <f_open+0x7c>
    1ea4:	09 c1       	rjmp	.+530    	; 0x20b8 <f_open+0x28e>
    1ea6:	03 c1       	rjmp	.+518    	; 0x20ae <f_open+0x284>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
			if (res != FR_OK) {					/* No file, create new */
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
    1ea8:	84 30       	cpi	r24, 0x04	; 4
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <f_open+0x84>
    1eac:	2c c1       	rjmp	.+600    	; 0x2106 <f_open+0x2dc>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    1eae:	ce 01       	movw	r24, r28
    1eb0:	01 96       	adiw	r24, 0x01	; 1
    1eb2:	0e 94 2e 09 	call	0x125c	; 0x125c <dir_register>
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1eb6:	9d 2d       	mov	r25, r13
    1eb8:	98 60       	ori	r25, 0x08	; 8
    1eba:	d9 2e       	mov	r13, r25
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    1ebc:	88 23       	and	r24, r24
    1ebe:	39 f0       	breq	.+14     	; 0x1ece <f_open+0xa4>
    1ec0:	ec c0       	rjmp	.+472    	; 0x209a <f_open+0x270>
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	81 71       	andi	r24, 0x11	; 17
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <f_open+0xa0>
    1ec8:	45 c1       	rjmp	.+650    	; 0x2154 <f_open+0x32a>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    1eca:	12 fd       	sbrc	r17, 2
    1ecc:	45 c1       	rjmp	.+650    	; 0x2158 <f_open+0x32e>
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    1ece:	d3 fe       	sbrs	r13, 3
    1ed0:	58 c0       	rjmp	.+176    	; 0x1f82 <f_open+0x158>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
    1ed2:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1ed4:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1ed6:	a9 a4       	ldd	r10, Y+41	; 0x29
    1ed8:	ba a4       	ldd	r11, Y+42	; 0x2a
    1eda:	b8 01       	movw	r22, r16
    1edc:	c5 01       	movw	r24, r10
    1ede:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <ld_clust>
    1ee2:	2b 01       	movw	r4, r22
    1ee4:	3c 01       	movw	r6, r24
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	16 86       	std	Z+14, r1	; 0x0e
	*ptr++ = (BYTE)val; val >>= 8;
    1eea:	17 86       	std	Z+15, r1	; 0x0f
	*ptr++ = (BYTE)val; val >>= 8;
    1eec:	81 e2       	ldi	r24, 0x21	; 33
    1eee:	80 8b       	std	Z+16, r24	; 0x10
	*ptr++ = (BYTE)val;
    1ef0:	8e e4       	ldi	r24, 0x4E	; 78
    1ef2:	81 8b       	std	Z+17, r24	; 0x11
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    1ef4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1ef6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1ef8:	80 e2       	ldi	r24, 0x20	; 32
    1efa:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    1efc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1efe:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	a9 01       	movw	r20, r18
    1f06:	c5 01       	movw	r24, r10
    1f08:	0e 94 5d 04 	call	0x8ba	; 0x8ba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
    1f0c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1f0e:	fc 8d       	ldd	r31, Y+28	; 0x1c
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1f10:	14 8e       	std	Z+28, r1	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    1f12:	15 8e       	std	Z+29, r1	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    1f14:	16 8e       	std	Z+30, r1	; 0x1e
	*ptr++ = (BYTE)val;
    1f16:	17 8e       	std	Z+31, r1	; 0x1f
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
					fs->wflag = 1;
    1f18:	e9 a5       	ldd	r30, Y+41	; 0x29
    1f1a:	fa a5       	ldd	r31, Y+42	; 0x2a
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	83 83       	std	Z+3, r24	; 0x03
					if (cl != 0) {						/* Remove the cluster chain if exist */
    1f20:	41 14       	cp	r4, r1
    1f22:	51 04       	cpc	r5, r1
    1f24:	61 04       	cpc	r6, r1
    1f26:	71 04       	cpc	r7, r1
    1f28:	49 f1       	breq	.+82     	; 0x1f7c <f_open+0x152>
						sc = fs->winsect;
    1f2a:	83 a4       	ldd	r8, Z+43	; 0x2b
    1f2c:	94 a4       	ldd	r9, Z+44	; 0x2c
    1f2e:	a5 a4       	ldd	r10, Z+45	; 0x2d
    1f30:	b6 a4       	ldd	r11, Z+46	; 0x2e
						res = remove_chain(&dj.obj, cl, 0);
    1f32:	00 e0       	ldi	r16, 0x00	; 0
    1f34:	10 e0       	ldi	r17, 0x00	; 0
    1f36:	98 01       	movw	r18, r16
    1f38:	b3 01       	movw	r22, r6
    1f3a:	a2 01       	movw	r20, r4
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	01 96       	adiw	r24, 0x01	; 1
    1f40:	0e 94 9a 07 	call	0xf34	; 0xf34 <remove_chain>
						if (res == FR_OK) {
    1f44:	81 11       	cpse	r24, r1
    1f46:	a9 c0       	rjmp	.+338    	; 0x209a <f_open+0x270>
							res = move_window(fs, sc);
    1f48:	b5 01       	movw	r22, r10
    1f4a:	a4 01       	movw	r20, r8
    1f4c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f50:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    1f54:	e9 a5       	ldd	r30, Y+41	; 0x29
    1f56:	fa a5       	ldd	r31, Y+42	; 0x2a
    1f58:	91 e0       	ldi	r25, 0x01	; 1
    1f5a:	49 1a       	sub	r4, r25
    1f5c:	51 08       	sbc	r5, r1
    1f5e:	61 08       	sbc	r6, r1
    1f60:	71 08       	sbc	r7, r1
    1f62:	43 86       	std	Z+11, r4	; 0x0b
    1f64:	54 86       	std	Z+12, r5	; 0x0c
    1f66:	65 86       	std	Z+13, r6	; 0x0d
    1f68:	76 86       	std	Z+14, r7	; 0x0e
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
    1f6a:	88 23       	and	r24, r24
    1f6c:	39 f0       	breq	.+14     	; 0x1f7c <f_open+0x152>
    1f6e:	95 c0       	rjmp	.+298    	; 0x209a <f_open+0x270>
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
    1f70:	11 ff       	sbrs	r17, 1
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <f_open+0x14e>
    1f74:	80 fd       	sbrc	r24, 0
    1f76:	f2 c0       	rjmp	.+484    	; 0x215c <f_open+0x332>
					}
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    1f78:	13 ff       	sbrs	r17, 3
    1f7a:	03 c0       	rjmp	.+6      	; 0x1f82 <f_open+0x158>
    1f7c:	ed 2d       	mov	r30, r13
    1f7e:	e0 64       	ori	r30, 0x40	; 64
    1f80:	de 2e       	mov	r13, r30
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    1f82:	e9 a5       	ldd	r30, Y+41	; 0x29
    1f84:	fa a5       	ldd	r31, Y+42	; 0x2a
    1f86:	83 a5       	ldd	r24, Z+43	; 0x2b
    1f88:	94 a5       	ldd	r25, Z+44	; 0x2c
    1f8a:	a5 a5       	ldd	r26, Z+45	; 0x2d
    1f8c:	b6 a5       	ldd	r27, Z+46	; 0x2e
    1f8e:	f1 01       	movw	r30, r2
    1f90:	84 8f       	std	Z+28, r24	; 0x1c
    1f92:	95 8f       	std	Z+29, r25	; 0x1d
    1f94:	a6 8f       	std	Z+30, r26	; 0x1e
    1f96:	b7 8f       	std	Z+31, r27	; 0x1f
			fp->dir_ptr = dj.dir;
    1f98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f9c:	91 a3       	std	Z+33, r25	; 0x21
    1f9e:	80 a3       	std	Z+32, r24	; 0x20
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
    1fa0:	ab 8c       	ldd	r10, Y+27	; 0x1b
    1fa2:	bc 8c       	ldd	r11, Y+28	; 0x1c
    1fa4:	09 a5       	ldd	r16, Y+41	; 0x29
    1fa6:	1a a5       	ldd	r17, Y+42	; 0x2a
    1fa8:	b5 01       	movw	r22, r10
    1faa:	c8 01       	movw	r24, r16
    1fac:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <ld_clust>
    1fb0:	2b 01       	movw	r4, r22
    1fb2:	3c 01       	movw	r6, r24
    1fb4:	f1 01       	movw	r30, r2
    1fb6:	66 83       	std	Z+6, r22	; 0x06
    1fb8:	77 83       	std	Z+7, r23	; 0x07
    1fba:	80 87       	std	Z+8, r24	; 0x08
    1fbc:	91 87       	std	Z+9, r25	; 0x09
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    1fbe:	c5 01       	movw	r24, r10
    1fc0:	4c 96       	adiw	r24, 0x1c	; 28
    1fc2:	0e 94 0d 01 	call	0x21a	; 0x21a <ld_dword>
    1fc6:	4b 01       	movw	r8, r22
    1fc8:	5c 01       	movw	r10, r24
    1fca:	f1 01       	movw	r30, r2
    1fcc:	62 87       	std	Z+10, r22	; 0x0a
    1fce:	73 87       	std	Z+11, r23	; 0x0b
    1fd0:	84 87       	std	Z+12, r24	; 0x0c
    1fd2:	95 87       	std	Z+13, r25	; 0x0d
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
    1fd4:	11 83       	std	Z+1, r17	; 0x01
    1fd6:	00 83       	st	Z, r16
			fp->obj.id = fs->id;
    1fd8:	f8 01       	movw	r30, r16
    1fda:	85 81       	ldd	r24, Z+5	; 0x05
    1fdc:	96 81       	ldd	r25, Z+6	; 0x06
    1fde:	f1 01       	movw	r30, r2
    1fe0:	93 83       	std	Z+3, r25	; 0x03
    1fe2:	82 83       	std	Z+2, r24	; 0x02
			fp->flag = mode;		/* Set file access mode */
    1fe4:	d6 86       	std	Z+14, r13	; 0x0e
			fp->err = 0;			/* Clear error flag */
    1fe6:	17 86       	std	Z+15, r1	; 0x0f
			fp->sect = 0;			/* Invalidate current data sector */
    1fe8:	10 8e       	std	Z+24, r1	; 0x18
    1fea:	11 8e       	std	Z+25, r1	; 0x19
    1fec:	12 8e       	std	Z+26, r1	; 0x1a
    1fee:	13 8e       	std	Z+27, r1	; 0x1b
			fp->fptr = 0;			/* Set file pointer top of the file */
    1ff0:	10 8a       	std	Z+16, r1	; 0x10
    1ff2:	11 8a       	std	Z+17, r1	; 0x11
    1ff4:	12 8a       	std	Z+18, r1	; 0x12
    1ff6:	13 8a       	std	Z+19, r1	; 0x13
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    1ff8:	d5 fe       	sbrs	r13, 5
    1ffa:	82 c0       	rjmp	.+260    	; 0x2100 <f_open+0x2d6>
    1ffc:	81 14       	cp	r8, r1
    1ffe:	91 04       	cpc	r9, r1
    2000:	a1 04       	cpc	r10, r1
    2002:	b1 04       	cpc	r11, r1
    2004:	09 f4       	brne	.+2      	; 0x2008 <f_open+0x1de>
    2006:	7c c0       	rjmp	.+248    	; 0x2100 <f_open+0x2d6>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    2008:	80 8a       	std	Z+16, r8	; 0x10
    200a:	91 8a       	std	Z+17, r9	; 0x11
    200c:	a2 8a       	std	Z+18, r10	; 0x12
    200e:	b3 8a       	std	Z+19, r11	; 0x13
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    2010:	f8 01       	movw	r30, r16
    2012:	81 85       	ldd	r24, Z+9	; 0x09
    2014:	92 85       	ldd	r25, Z+10	; 0x0a
    2016:	a0 e0       	ldi	r26, 0x00	; 0
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	6c 01       	movw	r12, r24
    201c:	7d 01       	movw	r14, r26
    201e:	0b 2e       	mov	r0, r27
    2020:	b9 e0       	ldi	r27, 0x09	; 9
    2022:	cc 0c       	add	r12, r12
    2024:	dd 1c       	adc	r13, r13
    2026:	ee 1c       	adc	r14, r14
    2028:	ff 1c       	adc	r15, r15
    202a:	ba 95       	dec	r27
    202c:	d1 f7       	brne	.-12     	; 0x2022 <f_open+0x1f8>
    202e:	b0 2d       	mov	r27, r0
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    2030:	c8 14       	cp	r12, r8
    2032:	d9 04       	cpc	r13, r9
    2034:	ea 04       	cpc	r14, r10
    2036:	fb 04       	cpc	r15, r11
    2038:	08 f0       	brcs	.+2      	; 0x203c <f_open+0x212>
    203a:	50 c0       	rjmp	.+160    	; 0x20dc <f_open+0x2b2>
					clst = get_fat(&fp->obj, clst);
    203c:	b3 01       	movw	r22, r6
    203e:	a2 01       	movw	r20, r4
    2040:	c1 01       	movw	r24, r2
    2042:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <get_fat>
    2046:	2b 01       	movw	r4, r22
    2048:	3c 01       	movw	r6, r24
					if (clst <= 1) res = FR_INT_ERR;
    204a:	62 30       	cpi	r22, 0x02	; 2
    204c:	71 05       	cpc	r23, r1
    204e:	81 05       	cpc	r24, r1
    2050:	91 05       	cpc	r25, r1
    2052:	08 f0       	brcs	.+2      	; 0x2056 <f_open+0x22c>
    2054:	78 c0       	rjmp	.+240    	; 0x2146 <f_open+0x31c>
    2056:	66 c0       	rjmp	.+204    	; 0x2124 <f_open+0x2fa>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					sc = clst2sect(fs, clst);
    2058:	b3 01       	movw	r22, r6
    205a:	a2 01       	movw	r20, r4
    205c:	89 a5       	ldd	r24, Y+41	; 0x29
    205e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2060:	0e 94 44 01 	call	0x288	; 0x288 <clst2sect>
					if (sc == 0) {
    2064:	61 15       	cp	r22, r1
    2066:	71 05       	cpc	r23, r1
    2068:	81 05       	cpc	r24, r1
    206a:	91 05       	cpc	r25, r1
    206c:	09 f4       	brne	.+2      	; 0x2070 <f_open+0x246>
    206e:	46 c0       	rjmp	.+140    	; 0x20fc <f_open+0x2d2>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    2070:	07 2e       	mov	r0, r23
    2072:	79 e0       	ldi	r23, 0x09	; 9
    2074:	b6 94       	lsr	r11
    2076:	a7 94       	ror	r10
    2078:	97 94       	ror	r9
    207a:	87 94       	ror	r8
    207c:	7a 95       	dec	r23
    207e:	d1 f7       	brne	.-12     	; 0x2074 <f_open+0x24a>
    2080:	70 2d       	mov	r23, r0
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	88 0d       	add	r24, r8
    2088:	99 1d       	adc	r25, r9
    208a:	aa 1d       	adc	r26, r10
    208c:	bb 1d       	adc	r27, r11
    208e:	f1 01       	movw	r30, r2
    2090:	80 8f       	std	Z+24, r24	; 0x18
    2092:	91 8f       	std	Z+25, r25	; 0x19
    2094:	a2 8f       	std	Z+26, r26	; 0x1a
    2096:	b3 8f       	std	Z+27, r27	; 0x1b
    2098:	33 c0       	rjmp	.+102    	; 0x2100 <f_open+0x2d6>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    209a:	f1 01       	movw	r30, r2
    209c:	11 82       	std	Z+1, r1	; 0x01
    209e:	10 82       	st	Z, r1
    20a0:	61 c0       	rjmp	.+194    	; 0x2164 <f_open+0x33a>
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    20a2:	89 e0       	ldi	r24, 0x09	; 9
    20a4:	5f c0       	rjmp	.+190    	; 0x2164 <f_open+0x33a>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    20a6:	41 2f       	mov	r20, r17
    20a8:	4c 71       	andi	r20, 0x1C	; 28
    20aa:	59 f0       	breq	.+22     	; 0x20c2 <f_open+0x298>
    20ac:	fd ce       	rjmp	.-518    	; 0x1ea8 <f_open+0x7e>
    20ae:	41 2f       	mov	r20, r17
    20b0:	4c 71       	andi	r20, 0x1C	; 28
    20b2:	41 f5       	brne	.+80     	; 0x2104 <f_open+0x2da>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
				res = FR_INVALID_NAME;
    20b4:	86 e0       	ldi	r24, 0x06	; 6
    20b6:	05 c0       	rjmp	.+10     	; 0x20c2 <f_open+0x298>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    20b8:	81 2f       	mov	r24, r17
    20ba:	8c 71       	andi	r24, 0x1C	; 28
    20bc:	09 f0       	breq	.+2      	; 0x20c0 <f_open+0x296>
    20be:	01 cf       	rjmp	.-510    	; 0x1ec2 <f_open+0x98>
    20c0:	26 c0       	rjmp	.+76     	; 0x210e <f_open+0x2e4>
				}
			}
		}
#endif

		if (res == FR_OK) {
    20c2:	81 11       	cpse	r24, r1
    20c4:	ea cf       	rjmp	.-44     	; 0x209a <f_open+0x270>
    20c6:	6c cf       	rjmp	.-296    	; 0x1fa0 <f_open+0x176>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
    20c8:	8f ef       	ldi	r24, 0xFF	; 255
    20ca:	9f ef       	ldi	r25, 0xFF	; 255
    20cc:	dc 01       	movw	r26, r24
    20ce:	f1 01       	movw	r30, r2
    20d0:	84 8b       	std	Z+20, r24	; 0x14
    20d2:	95 8b       	std	Z+21, r25	; 0x15
    20d4:	a6 8b       	std	Z+22, r26	; 0x16
    20d6:	b7 8b       	std	Z+23, r27	; 0x17
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	df cf       	rjmp	.-66     	; 0x209a <f_open+0x270>
				}
				fp->clust = clst;
    20dc:	f1 01       	movw	r30, r2
    20de:	44 8a       	std	Z+20, r4	; 0x14
    20e0:	55 8a       	std	Z+21, r5	; 0x15
    20e2:	66 8a       	std	Z+22, r6	; 0x16
    20e4:	77 8a       	std	Z+23, r7	; 0x17
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    20e6:	d5 01       	movw	r26, r10
    20e8:	c4 01       	movw	r24, r8
    20ea:	91 70       	andi	r25, 0x01	; 1
    20ec:	aa 27       	eor	r26, r26
    20ee:	bb 27       	eor	r27, r27
    20f0:	89 2b       	or	r24, r25
    20f2:	8a 2b       	or	r24, r26
    20f4:	8b 2b       	or	r24, r27
    20f6:	09 f0       	breq	.+2      	; 0x20fa <f_open+0x2d0>
    20f8:	af cf       	rjmp	.-162    	; 0x2058 <f_open+0x22e>
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <f_open+0x2d6>
					sc = clst2sect(fs, clst);
					if (sc == 0) {
						res = FR_INT_ERR;
    20fc:	82 e0       	ldi	r24, 0x02	; 2
    20fe:	cd cf       	rjmp	.-102    	; 0x209a <f_open+0x270>
		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	30 c0       	rjmp	.+96     	; 0x2164 <f_open+0x33a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
				res = FR_INVALID_NAME;
    2104:	86 e0       	ldi	r24, 0x06	; 6
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    2106:	fd 2d       	mov	r31, r13
    2108:	f8 60       	ori	r31, 0x08	; 8
    210a:	df 2e       	mov	r13, r31
    210c:	da cf       	rjmp	.-76     	; 0x20c2 <f_open+0x298>
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
    210e:	8d 81       	ldd	r24, Y+5	; 0x05
    2110:	84 fd       	sbrc	r24, 4
    2112:	26 c0       	rjmp	.+76     	; 0x2160 <f_open+0x336>
    2114:	2d cf       	rjmp	.-422    	; 0x1f70 <f_open+0x146>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
    2116:	f1 01       	movw	r30, r2
    2118:	44 8a       	std	Z+20, r4	; 0x14
    211a:	55 8a       	std	Z+21, r5	; 0x15
    211c:	66 8a       	std	Z+22, r6	; 0x16
    211e:	77 8a       	std	Z+23, r7	; 0x17
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
    2120:	82 e0       	ldi	r24, 0x02	; 2
    2122:	bb cf       	rjmp	.-138    	; 0x209a <f_open+0x270>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    2124:	6f 3f       	cpi	r22, 0xFF	; 255
    2126:	7f 4f       	sbci	r23, 0xFF	; 255
    2128:	8f 4f       	sbci	r24, 0xFF	; 255
    212a:	9f 4f       	sbci	r25, 0xFF	; 255
    212c:	69 f2       	breq	.-102    	; 0x20c8 <f_open+0x29e>
    212e:	f3 cf       	rjmp	.-26     	; 0x2116 <f_open+0x2ec>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    2130:	8c 18       	sub	r8, r12
    2132:	9d 08       	sbc	r9, r13
    2134:	ae 08       	sbc	r10, r14
    2136:	bf 08       	sbc	r11, r15
    2138:	c8 14       	cp	r12, r8
    213a:	d9 04       	cpc	r13, r9
    213c:	ea 04       	cpc	r14, r10
    213e:	fb 04       	cpc	r15, r11
    2140:	08 f4       	brcc	.+2      	; 0x2144 <f_open+0x31a>
    2142:	7c cf       	rjmp	.-264    	; 0x203c <f_open+0x212>
    2144:	cb cf       	rjmp	.-106    	; 0x20dc <f_open+0x2b2>
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    2146:	8f ef       	ldi	r24, 0xFF	; 255
    2148:	48 16       	cp	r4, r24
    214a:	58 06       	cpc	r5, r24
    214c:	68 06       	cpc	r6, r24
    214e:	78 06       	cpc	r7, r24
    2150:	79 f7       	brne	.-34     	; 0x2130 <f_open+0x306>
    2152:	ba cf       	rjmp	.-140    	; 0x20c8 <f_open+0x29e>
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    2154:	87 e0       	ldi	r24, 0x07	; 7
    2156:	a1 cf       	rjmp	.-190    	; 0x209a <f_open+0x270>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    2158:	88 e0       	ldi	r24, 0x08	; 8
    215a:	9f cf       	rjmp	.-194    	; 0x209a <f_open+0x270>
			if (res == FR_OK) {					/* Is the object exsiting? */
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
						res = FR_DENIED;
    215c:	87 e0       	ldi	r24, 0x07	; 7
    215e:	9d cf       	rjmp	.-198    	; 0x209a <f_open+0x270>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
					res = FR_NO_FILE;
    2160:	84 e0       	ldi	r24, 0x04	; 4
    2162:	9b cf       	rjmp	.-202    	; 0x209a <f_open+0x270>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
}
    2164:	ac 96       	adiw	r28, 0x2c	; 44
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	ff 90       	pop	r15
    217a:	ef 90       	pop	r14
    217c:	df 90       	pop	r13
    217e:	cf 90       	pop	r12
    2180:	bf 90       	pop	r11
    2182:	af 90       	pop	r10
    2184:	9f 90       	pop	r9
    2186:	8f 90       	pop	r8
    2188:	7f 90       	pop	r7
    218a:	6f 90       	pop	r6
    218c:	5f 90       	pop	r5
    218e:	4f 90       	pop	r4
    2190:	3f 90       	pop	r3
    2192:	2f 90       	pop	r2
    2194:	08 95       	ret

00002196 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
    2196:	2f 92       	push	r2
    2198:	3f 92       	push	r3
    219a:	4f 92       	push	r4
    219c:	5f 92       	push	r5
    219e:	6f 92       	push	r6
    21a0:	7f 92       	push	r7
    21a2:	8f 92       	push	r8
    21a4:	9f 92       	push	r9
    21a6:	af 92       	push	r10
    21a8:	bf 92       	push	r11
    21aa:	cf 92       	push	r12
    21ac:	df 92       	push	r13
    21ae:	ef 92       	push	r14
    21b0:	ff 92       	push	r15
    21b2:	0f 93       	push	r16
    21b4:	1f 93       	push	r17
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <f_read+0x26>
    21bc:	00 d0       	rcall	.+0      	; 0x21be <f_read+0x28>
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <f_read+0x2a>
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	7c 01       	movw	r14, r24
    21c6:	3b 01       	movw	r6, r22
    21c8:	5a 01       	movw	r10, r20
    21ca:	49 01       	movw	r8, r18
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    21cc:	f9 01       	movw	r30, r18
    21ce:	11 82       	std	Z+1, r1	; 0x01
    21d0:	10 82       	st	Z, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
    21d2:	8d 83       	std	Y+5, r24	; 0x05
    21d4:	fe 82       	std	Y+6, r15	; 0x06
    21d6:	be 01       	movw	r22, r28
    21d8:	6f 5f       	subi	r22, 0xFF	; 255
    21da:	7f 4f       	sbci	r23, 0xFF	; 255
    21dc:	0e 94 a2 01 	call	0x344	; 0x344 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    21e0:	81 11       	cpse	r24, r1
    21e2:	23 c1       	rjmp	.+582    	; 0x242a <f_read+0x294>
    21e4:	f7 01       	movw	r30, r14
    21e6:	87 85       	ldd	r24, Z+15	; 0x0f
    21e8:	81 11       	cpse	r24, r1
    21ea:	1f c1       	rjmp	.+574    	; 0x242a <f_read+0x294>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    21ec:	86 85       	ldd	r24, Z+14	; 0x0e
    21ee:	80 ff       	sbrs	r24, 0
    21f0:	19 c1       	rjmp	.+562    	; 0x2424 <f_read+0x28e>
	remain = fp->obj.objsize - fp->fptr;
    21f2:	82 85       	ldd	r24, Z+10	; 0x0a
    21f4:	93 85       	ldd	r25, Z+11	; 0x0b
    21f6:	a4 85       	ldd	r26, Z+12	; 0x0c
    21f8:	b5 85       	ldd	r27, Z+13	; 0x0d
    21fa:	40 89       	ldd	r20, Z+16	; 0x10
    21fc:	51 89       	ldd	r21, Z+17	; 0x11
    21fe:	62 89       	ldd	r22, Z+18	; 0x12
    2200:	73 89       	ldd	r23, Z+19	; 0x13
    2202:	84 1b       	sub	r24, r20
    2204:	95 0b       	sbc	r25, r21
    2206:	a6 0b       	sbc	r26, r22
    2208:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    220a:	a5 01       	movw	r20, r10
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	84 17       	cp	r24, r20
    2212:	95 07       	cpc	r25, r21
    2214:	a6 07       	cpc	r26, r22
    2216:	b7 07       	cpc	r27, r23
    2218:	08 f4       	brcc	.+2      	; 0x221c <f_read+0x86>
    221a:	5c 01       	movw	r10, r24

	for ( ;  btr;								/* Repeat until btr bytes read */
    221c:	a1 14       	cp	r10, r1
    221e:	b1 04       	cpc	r11, r1
    2220:	09 f4       	brne	.+2      	; 0x2224 <f_read+0x8e>
    2222:	02 c1       	rjmp	.+516    	; 0x2428 <f_read+0x292>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
    2224:	f7 01       	movw	r30, r14
    2226:	80 89       	ldd	r24, Z+16	; 0x10
    2228:	91 89       	ldd	r25, Z+17	; 0x11
    222a:	a2 89       	ldd	r26, Z+18	; 0x12
    222c:	b3 89       	ldd	r27, Z+19	; 0x13
    222e:	ac 01       	movw	r20, r24
    2230:	bd 01       	movw	r22, r26
    2232:	51 70       	andi	r21, 0x01	; 1
    2234:	66 27       	eor	r22, r22
    2236:	77 27       	eor	r23, r23
    2238:	45 2b       	or	r20, r21
    223a:	46 2b       	or	r20, r22
    223c:	47 2b       	or	r20, r23
    223e:	09 f0       	breq	.+2      	; 0x2242 <f_read+0xac>
    2240:	a9 c0       	rjmp	.+338    	; 0x2394 <f_read+0x1fe>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
    2242:	e9 81       	ldd	r30, Y+1	; 0x01
    2244:	fa 81       	ldd	r31, Y+2	; 0x02
    2246:	01 85       	ldd	r16, Z+9	; 0x09
    2248:	12 85       	ldd	r17, Z+10	; 0x0a
    224a:	01 50       	subi	r16, 0x01	; 1
    224c:	11 09       	sbc	r17, r1
    224e:	ac 01       	movw	r20, r24
    2250:	bd 01       	movw	r22, r26
    2252:	03 2e       	mov	r0, r19
    2254:	39 e0       	ldi	r19, 0x09	; 9
    2256:	76 95       	lsr	r23
    2258:	67 95       	ror	r22
    225a:	57 95       	ror	r21
    225c:	47 95       	ror	r20
    225e:	3a 95       	dec	r19
    2260:	d1 f7       	brne	.-12     	; 0x2256 <f_read+0xc0>
    2262:	30 2d       	mov	r19, r0
    2264:	04 23       	and	r16, r20
    2266:	15 23       	and	r17, r21
			if (csect == 0) {					/* On the cluster boundary? */
    2268:	01 15       	cp	r16, r1
    226a:	11 05       	cpc	r17, r1
    226c:	59 f5       	brne	.+86     	; 0x22c4 <f_read+0x12e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    226e:	89 2b       	or	r24, r25
    2270:	8a 2b       	or	r24, r26
    2272:	8b 2b       	or	r24, r27
    2274:	31 f4       	brne	.+12     	; 0x2282 <f_read+0xec>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    2276:	f7 01       	movw	r30, r14
    2278:	66 81       	ldd	r22, Z+6	; 0x06
    227a:	77 81       	ldd	r23, Z+7	; 0x07
    227c:	80 85       	ldd	r24, Z+8	; 0x08
    227e:	91 85       	ldd	r25, Z+9	; 0x09
    2280:	09 c0       	rjmp	.+18     	; 0x2294 <f_read+0xfe>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
    2282:	f7 01       	movw	r30, r14
    2284:	44 89       	ldd	r20, Z+20	; 0x14
    2286:	55 89       	ldd	r21, Z+21	; 0x15
    2288:	66 89       	ldd	r22, Z+22	; 0x16
    228a:	77 89       	ldd	r23, Z+23	; 0x17
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	9e 81       	ldd	r25, Y+6	; 0x06
    2290:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <get_fat>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    2294:	62 30       	cpi	r22, 0x02	; 2
    2296:	71 05       	cpc	r23, r1
    2298:	81 05       	cpc	r24, r1
    229a:	91 05       	cpc	r25, r1
    229c:	20 f4       	brcc	.+8      	; 0x22a6 <f_read+0x110>
    229e:	82 e0       	ldi	r24, 0x02	; 2
    22a0:	f7 01       	movw	r30, r14
    22a2:	87 87       	std	Z+15, r24	; 0x0f
    22a4:	c2 c0       	rjmp	.+388    	; 0x242a <f_read+0x294>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    22a6:	6f 3f       	cpi	r22, 0xFF	; 255
    22a8:	ff ef       	ldi	r31, 0xFF	; 255
    22aa:	7f 07       	cpc	r23, r31
    22ac:	8f 07       	cpc	r24, r31
    22ae:	9f 07       	cpc	r25, r31
    22b0:	21 f4       	brne	.+8      	; 0x22ba <f_read+0x124>
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	f7 01       	movw	r30, r14
    22b6:	87 87       	std	Z+15, r24	; 0x0f
    22b8:	b8 c0       	rjmp	.+368    	; 0x242a <f_read+0x294>
				fp->clust = clst;				/* Update current cluster */
    22ba:	f7 01       	movw	r30, r14
    22bc:	64 8b       	std	Z+20, r22	; 0x14
    22be:	75 8b       	std	Z+21, r23	; 0x15
    22c0:	86 8b       	std	Z+22, r24	; 0x16
    22c2:	97 8b       	std	Z+23, r25	; 0x17
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	9a 81       	ldd	r25, Y+2	; 0x02
    22c8:	9c 83       	std	Y+4, r25	; 0x04
    22ca:	8b 83       	std	Y+3, r24	; 0x03
    22cc:	f7 01       	movw	r30, r14
    22ce:	44 89       	ldd	r20, Z+20	; 0x14
    22d0:	55 89       	ldd	r21, Z+21	; 0x15
    22d2:	66 89       	ldd	r22, Z+22	; 0x16
    22d4:	77 89       	ldd	r23, Z+23	; 0x17
    22d6:	0e 94 44 01 	call	0x288	; 0x288 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    22da:	61 15       	cp	r22, r1
    22dc:	71 05       	cpc	r23, r1
    22de:	81 05       	cpc	r24, r1
    22e0:	91 05       	cpc	r25, r1
    22e2:	21 f4       	brne	.+8      	; 0x22ec <f_read+0x156>
    22e4:	82 e0       	ldi	r24, 0x02	; 2
    22e6:	f7 01       	movw	r30, r14
    22e8:	87 87       	std	Z+15, r24	; 0x0f
    22ea:	9f c0       	rjmp	.+318    	; 0x242a <f_read+0x294>
			sect += csect;
    22ec:	1b 01       	movw	r2, r22
    22ee:	2c 01       	movw	r4, r24
    22f0:	20 0e       	add	r2, r16
    22f2:	31 1e       	adc	r3, r17
    22f4:	41 1c       	adc	r4, r1
    22f6:	51 1c       	adc	r5, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
    22f8:	65 01       	movw	r12, r10
    22fa:	cd 2c       	mov	r12, r13
    22fc:	dd 24       	eor	r13, r13
    22fe:	c6 94       	lsr	r12
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
    2300:	c1 14       	cp	r12, r1
    2302:	d1 04       	cpc	r13, r1
    2304:	09 f4       	brne	.+2      	; 0x2308 <f_read+0x172>
    2306:	41 c0       	rjmp	.+130    	; 0x238a <f_read+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    2308:	eb 81       	ldd	r30, Y+3	; 0x03
    230a:	fc 81       	ldd	r31, Y+4	; 0x04
    230c:	81 85       	ldd	r24, Z+9	; 0x09
    230e:	92 85       	ldd	r25, Z+10	; 0x0a
    2310:	98 01       	movw	r18, r16
    2312:	2c 0d       	add	r18, r12
    2314:	3d 1d       	adc	r19, r13
    2316:	82 17       	cp	r24, r18
    2318:	93 07       	cpc	r25, r19
    231a:	18 f4       	brcc	.+6      	; 0x2322 <f_read+0x18c>
					cc = fs->csize - csect;
    231c:	6c 01       	movw	r12, r24
    231e:	c0 1a       	sub	r12, r16
    2320:	d1 0a       	sbc	r13, r17
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    2322:	86 01       	movw	r16, r12
    2324:	a2 01       	movw	r20, r4
    2326:	91 01       	movw	r18, r2
    2328:	b3 01       	movw	r22, r6
    232a:	eb 81       	ldd	r30, Y+3	; 0x03
    232c:	fc 81       	ldd	r31, Y+4	; 0x04
    232e:	81 81       	ldd	r24, Z+1	; 0x01
    2330:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <disk_read>
    2334:	88 23       	and	r24, r24
    2336:	21 f0       	breq	.+8      	; 0x2340 <f_read+0x1aa>
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	f7 01       	movw	r30, r14
    233c:	87 87       	std	Z+15, r24	; 0x0f
    233e:	75 c0       	rjmp	.+234    	; 0x242a <f_read+0x294>
#if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
    2340:	e9 81       	ldd	r30, Y+1	; 0x01
    2342:	fa 81       	ldd	r31, Y+2	; 0x02
    2344:	83 81       	ldd	r24, Z+3	; 0x03
    2346:	88 23       	and	r24, r24
    2348:	e1 f0       	breq	.+56     	; 0x2382 <f_read+0x1ec>
    234a:	83 a5       	ldd	r24, Z+43	; 0x2b
    234c:	94 a5       	ldd	r25, Z+44	; 0x2c
    234e:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2350:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2352:	82 19       	sub	r24, r2
    2354:	93 09       	sbc	r25, r3
    2356:	a4 09       	sbc	r26, r4
    2358:	b5 09       	sbc	r27, r5
    235a:	a6 01       	movw	r20, r12
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	70 e0       	ldi	r23, 0x00	; 0
    2360:	84 17       	cp	r24, r20
    2362:	95 07       	cpc	r25, r21
    2364:	a6 07       	cpc	r26, r22
    2366:	b7 07       	cpc	r27, r23
    2368:	60 f4       	brcc	.+24     	; 0x2382 <f_read+0x1ec>
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
    236a:	bf 01       	movw	r22, r30
    236c:	61 5d       	subi	r22, 0xD1	; 209
    236e:	7f 4f       	sbci	r23, 0xFF	; 255
    2370:	98 2f       	mov	r25, r24
    2372:	88 27       	eor	r24, r24
    2374:	99 0f       	add	r25, r25
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	52 e0       	ldi	r21, 0x02	; 2
    237a:	86 0d       	add	r24, r6
    237c:	97 1d       	adc	r25, r7
    237e:	0e 94 28 01 	call	0x250	; 0x250 <mem_cpy>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
    2382:	dc 2c       	mov	r13, r12
    2384:	cc 24       	eor	r12, r12
    2386:	dd 0c       	add	r13, r13
				continue;
    2388:	2f c0       	rjmp	.+94     	; 0x23e8 <f_read+0x252>
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
			}
#endif
			fp->sect = sect;
    238a:	f7 01       	movw	r30, r14
    238c:	20 8e       	std	Z+24, r2	; 0x18
    238e:	31 8e       	std	Z+25, r3	; 0x19
    2390:	42 8e       	std	Z+26, r4	; 0x1a
    2392:	53 8e       	std	Z+27, r5	; 0x1b
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    2394:	f7 01       	movw	r30, r14
    2396:	80 89       	ldd	r24, Z+16	; 0x10
    2398:	91 89       	ldd	r25, Z+17	; 0x11
    239a:	91 70       	andi	r25, 0x01	; 1
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	32 e0       	ldi	r19, 0x02	; 2
    23a0:	69 01       	movw	r12, r18
    23a2:	c8 1a       	sub	r12, r24
    23a4:	d9 0a       	sbc	r13, r25
    23a6:	ac 14       	cp	r10, r12
    23a8:	bd 04       	cpc	r11, r13
    23aa:	08 f4       	brcc	.+2      	; 0x23ae <f_read+0x218>
    23ac:	65 01       	movw	r12, r10
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    23ae:	f7 01       	movw	r30, r14
    23b0:	40 8d       	ldd	r20, Z+24	; 0x18
    23b2:	51 8d       	ldd	r21, Z+25	; 0x19
    23b4:	62 8d       	ldd	r22, Z+26	; 0x1a
    23b6:	73 8d       	ldd	r23, Z+27	; 0x1b
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	9a 81       	ldd	r25, Y+2	; 0x02
    23bc:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
    23c0:	88 23       	and	r24, r24
    23c2:	21 f0       	breq	.+8      	; 0x23cc <f_read+0x236>
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	f7 01       	movw	r30, r14
    23c8:	87 87       	std	Z+15, r24	; 0x0f
    23ca:	2f c0       	rjmp	.+94     	; 0x242a <f_read+0x294>
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
    23cc:	69 81       	ldd	r22, Y+1	; 0x01
    23ce:	7a 81       	ldd	r23, Y+2	; 0x02
    23d0:	61 5d       	subi	r22, 0xD1	; 209
    23d2:	7f 4f       	sbci	r23, 0xFF	; 255
    23d4:	f7 01       	movw	r30, r14
    23d6:	80 89       	ldd	r24, Z+16	; 0x10
    23d8:	91 89       	ldd	r25, Z+17	; 0x11
    23da:	91 70       	andi	r25, 0x01	; 1
    23dc:	68 0f       	add	r22, r24
    23de:	79 1f       	adc	r23, r25
    23e0:	a6 01       	movw	r20, r12
    23e2:	c3 01       	movw	r24, r6
    23e4:	0e 94 28 01 	call	0x250	; 0x250 <mem_cpy>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until btr bytes read */
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
    23e8:	ac 18       	sub	r10, r12
    23ea:	bd 08       	sbc	r11, r13
    23ec:	f4 01       	movw	r30, r8
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	8c 0d       	add	r24, r12
    23f4:	9d 1d       	adc	r25, r13
    23f6:	91 83       	std	Z+1, r25	; 0x01
    23f8:	80 83       	st	Z, r24
    23fa:	6c 0c       	add	r6, r12
    23fc:	7d 1c       	adc	r7, r13
    23fe:	f7 01       	movw	r30, r14
    2400:	80 89       	ldd	r24, Z+16	; 0x10
    2402:	91 89       	ldd	r25, Z+17	; 0x11
    2404:	a2 89       	ldd	r26, Z+18	; 0x12
    2406:	b3 89       	ldd	r27, Z+19	; 0x13
    2408:	8c 0d       	add	r24, r12
    240a:	9d 1d       	adc	r25, r13
    240c:	a1 1d       	adc	r26, r1
    240e:	b1 1d       	adc	r27, r1
    2410:	80 8b       	std	Z+16, r24	; 0x10
    2412:	91 8b       	std	Z+17, r25	; 0x11
    2414:	a2 8b       	std	Z+18, r26	; 0x12
    2416:	b3 8b       	std	Z+19, r27	; 0x13
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until btr bytes read */
    2418:	a1 14       	cp	r10, r1
    241a:	b1 04       	cpc	r11, r1
    241c:	09 f0       	breq	.+2      	; 0x2420 <f_read+0x28a>
    241e:	02 cf       	rjmp	.-508    	; 0x2224 <f_read+0x8e>
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	03 c0       	rjmp	.+6      	; 0x242a <f_read+0x294>


	*br = 0;	/* Clear read byte counter */
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    2424:	87 e0       	ldi	r24, 0x07	; 7
    2426:	01 c0       	rjmp	.+2      	; 0x242a <f_read+0x294>
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
    2428:	80 e0       	ldi	r24, 0x00	; 0
}
    242a:	26 96       	adiw	r28, 0x06	; 6
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	1f 91       	pop	r17
    243c:	0f 91       	pop	r16
    243e:	ff 90       	pop	r15
    2440:	ef 90       	pop	r14
    2442:	df 90       	pop	r13
    2444:	cf 90       	pop	r12
    2446:	bf 90       	pop	r11
    2448:	af 90       	pop	r10
    244a:	9f 90       	pop	r9
    244c:	8f 90       	pop	r8
    244e:	7f 90       	pop	r7
    2450:	6f 90       	pop	r6
    2452:	5f 90       	pop	r5
    2454:	4f 90       	pop	r4
    2456:	3f 90       	pop	r3
    2458:	2f 90       	pop	r2
    245a:	08 95       	ret

0000245c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    245c:	2f 92       	push	r2
    245e:	3f 92       	push	r3
    2460:	4f 92       	push	r4
    2462:	5f 92       	push	r5
    2464:	6f 92       	push	r6
    2466:	7f 92       	push	r7
    2468:	8f 92       	push	r8
    246a:	9f 92       	push	r9
    246c:	af 92       	push	r10
    246e:	bf 92       	push	r11
    2470:	cf 92       	push	r12
    2472:	df 92       	push	r13
    2474:	ef 92       	push	r14
    2476:	ff 92       	push	r15
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	00 d0       	rcall	.+0      	; 0x2482 <f_write+0x26>
    2482:	00 d0       	rcall	.+0      	; 0x2484 <f_write+0x28>
    2484:	00 d0       	rcall	.+0      	; 0x2486 <f_write+0x2a>
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	7c 01       	movw	r14, r24
    248c:	3b 01       	movw	r6, r22
    248e:	5a 01       	movw	r10, r20
    2490:	49 01       	movw	r8, r18
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    2492:	f9 01       	movw	r30, r18
    2494:	11 82       	std	Z+1, r1	; 0x01
    2496:	10 82       	st	Z, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
    2498:	8d 83       	std	Y+5, r24	; 0x05
    249a:	fe 82       	std	Y+6, r15	; 0x06
    249c:	be 01       	movw	r22, r28
    249e:	6f 5f       	subi	r22, 0xFF	; 255
    24a0:	7f 4f       	sbci	r23, 0xFF	; 255
    24a2:	0e 94 a2 01 	call	0x344	; 0x344 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    24a6:	81 11       	cpse	r24, r1
    24a8:	8d c1       	rjmp	.+794    	; 0x27c4 <f_write+0x368>
    24aa:	f7 01       	movw	r30, r14
    24ac:	87 85       	ldd	r24, Z+15	; 0x0f
    24ae:	81 11       	cpse	r24, r1
    24b0:	89 c1       	rjmp	.+786    	; 0x27c4 <f_write+0x368>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    24b2:	86 85       	ldd	r24, Z+14	; 0x0e
    24b4:	81 ff       	sbrs	r24, 1
    24b6:	85 c1       	rjmp	.+778    	; 0x27c2 <f_write+0x366>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    24b8:	80 89       	ldd	r24, Z+16	; 0x10
    24ba:	91 89       	ldd	r25, Z+17	; 0x11
    24bc:	a2 89       	ldd	r26, Z+18	; 0x12
    24be:	b3 89       	ldd	r27, Z+19	; 0x13
    24c0:	ac 01       	movw	r20, r24
    24c2:	bd 01       	movw	r22, r26
    24c4:	4a 0d       	add	r20, r10
    24c6:	5b 1d       	adc	r21, r11
    24c8:	61 1d       	adc	r22, r1
    24ca:	71 1d       	adc	r23, r1
    24cc:	48 17       	cp	r20, r24
    24ce:	59 07       	cpc	r21, r25
    24d0:	6a 07       	cpc	r22, r26
    24d2:	7b 07       	cpc	r23, r27
    24d4:	18 f4       	brcc	.+6      	; 0x24dc <f_write+0x80>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    24d6:	5c 01       	movw	r10, r24
    24d8:	a0 94       	com	r10
    24da:	b0 94       	com	r11
	}

	for ( ;  btw;							/* Repeat until all data written */
    24dc:	a1 14       	cp	r10, r1
    24de:	b1 04       	cpc	r11, r1
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <f_write+0x88>
    24e2:	69 c1       	rjmp	.+722    	; 0x27b6 <f_write+0x35a>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    24e4:	f7 01       	movw	r30, r14
    24e6:	80 89       	ldd	r24, Z+16	; 0x10
    24e8:	91 89       	ldd	r25, Z+17	; 0x11
    24ea:	a2 89       	ldd	r26, Z+18	; 0x12
    24ec:	b3 89       	ldd	r27, Z+19	; 0x13
    24ee:	ac 01       	movw	r20, r24
    24f0:	bd 01       	movw	r22, r26
    24f2:	51 70       	andi	r21, 0x01	; 1
    24f4:	66 27       	eor	r22, r22
    24f6:	77 27       	eor	r23, r23
    24f8:	45 2b       	or	r20, r21
    24fa:	46 2b       	or	r20, r22
    24fc:	47 2b       	or	r20, r23
    24fe:	09 f0       	breq	.+2      	; 0x2502 <f_write+0xa6>
    2500:	00 c1       	rjmp	.+512    	; 0x2702 <f_write+0x2a6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    2502:	e9 81       	ldd	r30, Y+1	; 0x01
    2504:	fa 81       	ldd	r31, Y+2	; 0x02
    2506:	01 85       	ldd	r16, Z+9	; 0x09
    2508:	12 85       	ldd	r17, Z+10	; 0x0a
    250a:	01 50       	subi	r16, 0x01	; 1
    250c:	11 09       	sbc	r17, r1
    250e:	ac 01       	movw	r20, r24
    2510:	bd 01       	movw	r22, r26
    2512:	03 2e       	mov	r0, r19
    2514:	39 e0       	ldi	r19, 0x09	; 9
    2516:	76 95       	lsr	r23
    2518:	67 95       	ror	r22
    251a:	57 95       	ror	r21
    251c:	47 95       	ror	r20
    251e:	3a 95       	dec	r19
    2520:	d1 f7       	brne	.-12     	; 0x2516 <f_write+0xba>
    2522:	30 2d       	mov	r19, r0
    2524:	04 23       	and	r16, r20
    2526:	15 23       	and	r17, r21
			if (csect == 0) {				/* On the cluster boundary? */
    2528:	01 15       	cp	r16, r1
    252a:	11 05       	cpc	r17, r1
    252c:	09 f0       	breq	.+2      	; 0x2530 <f_write+0xd4>
    252e:	49 c0       	rjmp	.+146    	; 0x25c2 <f_write+0x166>
				if (fp->fptr == 0) {		/* On the top of the file? */
    2530:	89 2b       	or	r24, r25
    2532:	8a 2b       	or	r24, r26
    2534:	8b 2b       	or	r24, r27
    2536:	91 f4       	brne	.+36     	; 0x255c <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
    2538:	f7 01       	movw	r30, r14
    253a:	66 81       	ldd	r22, Z+6	; 0x06
    253c:	77 81       	ldd	r23, Z+7	; 0x07
    253e:	80 85       	ldd	r24, Z+8	; 0x08
    2540:	91 85       	ldd	r25, Z+9	; 0x09
					if (clst == 0) {		/* If no cluster is allocated, */
    2542:	61 15       	cp	r22, r1
    2544:	71 05       	cpc	r23, r1
    2546:	81 05       	cpc	r24, r1
    2548:	91 05       	cpc	r25, r1
    254a:	b9 f4       	brne	.+46     	; 0x257a <f_write+0x11e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	ba 01       	movw	r22, r20
    2552:	8d 81       	ldd	r24, Y+5	; 0x05
    2554:	9e 81       	ldd	r25, Y+6	; 0x06
    2556:	0e 94 34 06 	call	0xc68	; 0xc68 <create_chain>
    255a:	09 c0       	rjmp	.+18     	; 0x256e <f_write+0x112>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    255c:	f7 01       	movw	r30, r14
    255e:	44 89       	ldd	r20, Z+20	; 0x14
    2560:	55 89       	ldd	r21, Z+21	; 0x15
    2562:	66 89       	ldd	r22, Z+22	; 0x16
    2564:	77 89       	ldd	r23, Z+23	; 0x17
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	9e 81       	ldd	r25, Y+6	; 0x06
    256a:	0e 94 34 06 	call	0xc68	; 0xc68 <create_chain>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    256e:	61 15       	cp	r22, r1
    2570:	71 05       	cpc	r23, r1
    2572:	81 05       	cpc	r24, r1
    2574:	91 05       	cpc	r25, r1
    2576:	09 f4       	brne	.+2      	; 0x257a <f_write+0x11e>
    2578:	1e c1       	rjmp	.+572    	; 0x27b6 <f_write+0x35a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    257a:	61 30       	cpi	r22, 0x01	; 1
    257c:	71 05       	cpc	r23, r1
    257e:	81 05       	cpc	r24, r1
    2580:	91 05       	cpc	r25, r1
    2582:	21 f4       	brne	.+8      	; 0x258c <f_write+0x130>
    2584:	82 e0       	ldi	r24, 0x02	; 2
    2586:	f7 01       	movw	r30, r14
    2588:	87 87       	std	Z+15, r24	; 0x0f
    258a:	1c c1       	rjmp	.+568    	; 0x27c4 <f_write+0x368>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    258c:	6f 3f       	cpi	r22, 0xFF	; 255
    258e:	ff ef       	ldi	r31, 0xFF	; 255
    2590:	7f 07       	cpc	r23, r31
    2592:	8f 07       	cpc	r24, r31
    2594:	9f 07       	cpc	r25, r31
    2596:	21 f4       	brne	.+8      	; 0x25a0 <f_write+0x144>
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	f7 01       	movw	r30, r14
    259c:	87 87       	std	Z+15, r24	; 0x0f
    259e:	12 c1       	rjmp	.+548    	; 0x27c4 <f_write+0x368>
				fp->clust = clst;			/* Update current cluster */
    25a0:	f7 01       	movw	r30, r14
    25a2:	64 8b       	std	Z+20, r22	; 0x14
    25a4:	75 8b       	std	Z+21, r23	; 0x15
    25a6:	86 8b       	std	Z+22, r24	; 0x16
    25a8:	97 8b       	std	Z+23, r25	; 0x17
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    25aa:	26 81       	ldd	r18, Z+6	; 0x06
    25ac:	37 81       	ldd	r19, Z+7	; 0x07
    25ae:	40 85       	ldd	r20, Z+8	; 0x08
    25b0:	51 85       	ldd	r21, Z+9	; 0x09
    25b2:	23 2b       	or	r18, r19
    25b4:	24 2b       	or	r18, r20
    25b6:	25 2b       	or	r18, r21
    25b8:	21 f4       	brne	.+8      	; 0x25c2 <f_write+0x166>
    25ba:	66 83       	std	Z+6, r22	; 0x06
    25bc:	77 83       	std	Z+7, r23	; 0x07
    25be:	80 87       	std	Z+8, r24	; 0x08
    25c0:	91 87       	std	Z+9, r25	; 0x09
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
    25c2:	29 81       	ldd	r18, Y+1	; 0x01
    25c4:	3a 81       	ldd	r19, Y+2	; 0x02
    25c6:	f9 01       	movw	r30, r18
    25c8:	43 a5       	ldd	r20, Z+43	; 0x2b
    25ca:	54 a5       	ldd	r21, Z+44	; 0x2c
    25cc:	65 a5       	ldd	r22, Z+45	; 0x2d
    25ce:	76 a5       	ldd	r23, Z+46	; 0x2e
    25d0:	f7 01       	movw	r30, r14
    25d2:	80 8d       	ldd	r24, Z+24	; 0x18
    25d4:	91 8d       	ldd	r25, Z+25	; 0x19
    25d6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25d8:	b3 8d       	ldd	r27, Z+27	; 0x1b
    25da:	48 17       	cp	r20, r24
    25dc:	59 07       	cpc	r21, r25
    25de:	6a 07       	cpc	r22, r26
    25e0:	7b 07       	cpc	r23, r27
    25e2:	49 f4       	brne	.+18     	; 0x25f6 <f_write+0x19a>
    25e4:	c9 01       	movw	r24, r18
    25e6:	0e 94 cf 01 	call	0x39e	; 0x39e <sync_window>
    25ea:	88 23       	and	r24, r24
    25ec:	21 f0       	breq	.+8      	; 0x25f6 <f_write+0x19a>
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	f7 01       	movw	r30, r14
    25f2:	87 87       	std	Z+15, r24	; 0x0f
    25f4:	e7 c0       	rjmp	.+462    	; 0x27c4 <f_write+0x368>
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	9a 81       	ldd	r25, Y+2	; 0x02
    25fa:	9c 83       	std	Y+4, r25	; 0x04
    25fc:	8b 83       	std	Y+3, r24	; 0x03
    25fe:	f7 01       	movw	r30, r14
    2600:	44 89       	ldd	r20, Z+20	; 0x14
    2602:	55 89       	ldd	r21, Z+21	; 0x15
    2604:	66 89       	ldd	r22, Z+22	; 0x16
    2606:	77 89       	ldd	r23, Z+23	; 0x17
    2608:	0e 94 44 01 	call	0x288	; 0x288 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    260c:	61 15       	cp	r22, r1
    260e:	71 05       	cpc	r23, r1
    2610:	81 05       	cpc	r24, r1
    2612:	91 05       	cpc	r25, r1
    2614:	21 f4       	brne	.+8      	; 0x261e <f_write+0x1c2>
    2616:	82 e0       	ldi	r24, 0x02	; 2
    2618:	f7 01       	movw	r30, r14
    261a:	87 87       	std	Z+15, r24	; 0x0f
    261c:	d3 c0       	rjmp	.+422    	; 0x27c4 <f_write+0x368>
			sect += csect;
    261e:	1b 01       	movw	r2, r22
    2620:	2c 01       	movw	r4, r24
    2622:	20 0e       	add	r2, r16
    2624:	31 1e       	adc	r3, r17
    2626:	41 1c       	adc	r4, r1
    2628:	51 1c       	adc	r5, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    262a:	65 01       	movw	r12, r10
    262c:	cd 2c       	mov	r12, r13
    262e:	dd 24       	eor	r13, r13
    2630:	c6 94       	lsr	r12
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
    2632:	c1 14       	cp	r12, r1
    2634:	d1 04       	cpc	r13, r1
    2636:	09 f4       	brne	.+2      	; 0x263a <f_write+0x1de>
    2638:	41 c0       	rjmp	.+130    	; 0x26bc <f_write+0x260>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    263a:	eb 81       	ldd	r30, Y+3	; 0x03
    263c:	fc 81       	ldd	r31, Y+4	; 0x04
    263e:	81 85       	ldd	r24, Z+9	; 0x09
    2640:	92 85       	ldd	r25, Z+10	; 0x0a
    2642:	98 01       	movw	r18, r16
    2644:	2c 0d       	add	r18, r12
    2646:	3d 1d       	adc	r19, r13
    2648:	82 17       	cp	r24, r18
    264a:	93 07       	cpc	r25, r19
    264c:	18 f4       	brcc	.+6      	; 0x2654 <f_write+0x1f8>
					cc = fs->csize - csect;
    264e:	6c 01       	movw	r12, r24
    2650:	c0 1a       	sub	r12, r16
    2652:	d1 0a       	sbc	r13, r17
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    2654:	86 01       	movw	r16, r12
    2656:	a2 01       	movw	r20, r4
    2658:	91 01       	movw	r18, r2
    265a:	b3 01       	movw	r22, r6
    265c:	eb 81       	ldd	r30, Y+3	; 0x03
    265e:	fc 81       	ldd	r31, Y+4	; 0x04
    2660:	81 81       	ldd	r24, Z+1	; 0x01
    2662:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <disk_write>
    2666:	88 23       	and	r24, r24
    2668:	21 f0       	breq	.+8      	; 0x2672 <f_write+0x216>
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	f7 01       	movw	r30, r14
    266e:	87 87       	std	Z+15, r24	; 0x0f
    2670:	a9 c0       	rjmp	.+338    	; 0x27c4 <f_write+0x368>
#if FF_FS_MINIMIZE <= 2
#if FF_FS_TINY
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    2672:	e9 81       	ldd	r30, Y+1	; 0x01
    2674:	fa 81       	ldd	r31, Y+2	; 0x02
    2676:	43 a5       	ldd	r20, Z+43	; 0x2b
    2678:	54 a5       	ldd	r21, Z+44	; 0x2c
    267a:	65 a5       	ldd	r22, Z+45	; 0x2d
    267c:	76 a5       	ldd	r23, Z+46	; 0x2e
    267e:	42 19       	sub	r20, r2
    2680:	53 09       	sbc	r21, r3
    2682:	64 09       	sbc	r22, r4
    2684:	75 09       	sbc	r23, r5
    2686:	c6 01       	movw	r24, r12
    2688:	a0 e0       	ldi	r26, 0x00	; 0
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	48 17       	cp	r20, r24
    268e:	59 07       	cpc	r21, r25
    2690:	6a 07       	cpc	r22, r26
    2692:	7b 07       	cpc	r23, r27
    2694:	78 f4       	brcc	.+30     	; 0x26b4 <f_write+0x258>
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
    2696:	54 2f       	mov	r21, r20
    2698:	44 27       	eor	r20, r20
    269a:	55 0f       	add	r21, r21
    269c:	b3 01       	movw	r22, r6
    269e:	64 0f       	add	r22, r20
    26a0:	75 1f       	adc	r23, r21
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	52 e0       	ldi	r21, 0x02	; 2
    26a6:	cf 01       	movw	r24, r30
    26a8:	8f 96       	adiw	r24, 0x2f	; 47
    26aa:	0e 94 28 01 	call	0x250	; 0x250 <mem_cpy>
					fs->wflag = 0;
    26ae:	e9 81       	ldd	r30, Y+1	; 0x01
    26b0:	fa 81       	ldd	r31, Y+2	; 0x02
    26b2:	13 82       	std	Z+3, r1	; 0x03
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    26b4:	dc 2c       	mov	r13, r12
    26b6:	cc 24       	eor	r12, r12
    26b8:	dd 0c       	add	r13, r13
				continue;
    26ba:	51 c0       	rjmp	.+162    	; 0x275e <f_write+0x302>
			}
#if FF_FS_TINY
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
    26bc:	f7 01       	movw	r30, r14
    26be:	40 89       	ldd	r20, Z+16	; 0x10
    26c0:	51 89       	ldd	r21, Z+17	; 0x11
    26c2:	62 89       	ldd	r22, Z+18	; 0x12
    26c4:	73 89       	ldd	r23, Z+19	; 0x13
    26c6:	82 85       	ldd	r24, Z+10	; 0x0a
    26c8:	93 85       	ldd	r25, Z+11	; 0x0b
    26ca:	a4 85       	ldd	r26, Z+12	; 0x0c
    26cc:	b5 85       	ldd	r27, Z+13	; 0x0d
    26ce:	48 17       	cp	r20, r24
    26d0:	59 07       	cpc	r21, r25
    26d2:	6a 07       	cpc	r22, r26
    26d4:	7b 07       	cpc	r23, r27
    26d6:	80 f0       	brcs	.+32     	; 0x26f8 <f_write+0x29c>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
    26d8:	8b 81       	ldd	r24, Y+3	; 0x03
    26da:	9c 81       	ldd	r25, Y+4	; 0x04
    26dc:	0e 94 cf 01 	call	0x39e	; 0x39e <sync_window>
    26e0:	88 23       	and	r24, r24
    26e2:	21 f0       	breq	.+8      	; 0x26ec <f_write+0x290>
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	f7 01       	movw	r30, r14
    26e8:	87 87       	std	Z+15, r24	; 0x0f
    26ea:	6c c0       	rjmp	.+216    	; 0x27c4 <f_write+0x368>
				fs->winsect = sect;
    26ec:	e9 81       	ldd	r30, Y+1	; 0x01
    26ee:	fa 81       	ldd	r31, Y+2	; 0x02
    26f0:	23 a6       	std	Z+43, r2	; 0x2b
    26f2:	34 a6       	std	Z+44, r3	; 0x2c
    26f4:	45 a6       	std	Z+45, r4	; 0x2d
    26f6:	56 a6       	std	Z+46, r5	; 0x2e
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
    26f8:	f7 01       	movw	r30, r14
    26fa:	20 8e       	std	Z+24, r2	; 0x18
    26fc:	31 8e       	std	Z+25, r3	; 0x19
    26fe:	42 8e       	std	Z+26, r4	; 0x1a
    2700:	53 8e       	std	Z+27, r5	; 0x1b
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    2702:	f7 01       	movw	r30, r14
    2704:	80 89       	ldd	r24, Z+16	; 0x10
    2706:	91 89       	ldd	r25, Z+17	; 0x11
    2708:	91 70       	andi	r25, 0x01	; 1
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	32 e0       	ldi	r19, 0x02	; 2
    270e:	69 01       	movw	r12, r18
    2710:	c8 1a       	sub	r12, r24
    2712:	d9 0a       	sbc	r13, r25
    2714:	ac 14       	cp	r10, r12
    2716:	bd 04       	cpc	r11, r13
    2718:	08 f4       	brcc	.+2      	; 0x271c <f_write+0x2c0>
    271a:	65 01       	movw	r12, r10
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    271c:	f7 01       	movw	r30, r14
    271e:	40 8d       	ldd	r20, Z+24	; 0x18
    2720:	51 8d       	ldd	r21, Z+25	; 0x19
    2722:	62 8d       	ldd	r22, Z+26	; 0x1a
    2724:	73 8d       	ldd	r23, Z+27	; 0x1b
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	9a 81       	ldd	r25, Y+2	; 0x02
    272a:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
    272e:	88 23       	and	r24, r24
    2730:	21 f0       	breq	.+8      	; 0x273a <f_write+0x2de>
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	f7 01       	movw	r30, r14
    2736:	87 87       	std	Z+15, r24	; 0x0f
    2738:	45 c0       	rjmp	.+138    	; 0x27c4 <f_write+0x368>
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    273a:	29 81       	ldd	r18, Y+1	; 0x01
    273c:	3a 81       	ldd	r19, Y+2	; 0x02
    273e:	21 5d       	subi	r18, 0xD1	; 209
    2740:	3f 4f       	sbci	r19, 0xFF	; 255
    2742:	f7 01       	movw	r30, r14
    2744:	80 89       	ldd	r24, Z+16	; 0x10
    2746:	91 89       	ldd	r25, Z+17	; 0x11
    2748:	91 70       	andi	r25, 0x01	; 1
    274a:	a6 01       	movw	r20, r12
    274c:	b3 01       	movw	r22, r6
    274e:	82 0f       	add	r24, r18
    2750:	93 1f       	adc	r25, r19
    2752:	0e 94 28 01 	call	0x250	; 0x250 <mem_cpy>
		fs->wflag = 1;
    2756:	e9 81       	ldd	r30, Y+1	; 0x01
    2758:	fa 81       	ldd	r31, Y+2	; 0x02
    275a:	21 e0       	ldi	r18, 0x01	; 1
    275c:	23 83       	std	Z+3, r18	; 0x03
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
    275e:	ac 18       	sub	r10, r12
    2760:	bd 08       	sbc	r11, r13
    2762:	f4 01       	movw	r30, r8
    2764:	80 81       	ld	r24, Z
    2766:	91 81       	ldd	r25, Z+1	; 0x01
    2768:	8c 0d       	add	r24, r12
    276a:	9d 1d       	adc	r25, r13
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	80 83       	st	Z, r24
    2770:	6c 0c       	add	r6, r12
    2772:	7d 1c       	adc	r7, r13
    2774:	f7 01       	movw	r30, r14
    2776:	80 89       	ldd	r24, Z+16	; 0x10
    2778:	91 89       	ldd	r25, Z+17	; 0x11
    277a:	a2 89       	ldd	r26, Z+18	; 0x12
    277c:	b3 89       	ldd	r27, Z+19	; 0x13
    277e:	8c 0d       	add	r24, r12
    2780:	9d 1d       	adc	r25, r13
    2782:	a1 1d       	adc	r26, r1
    2784:	b1 1d       	adc	r27, r1
    2786:	80 8b       	std	Z+16, r24	; 0x10
    2788:	91 8b       	std	Z+17, r25	; 0x11
    278a:	a2 8b       	std	Z+18, r26	; 0x12
    278c:	b3 8b       	std	Z+19, r27	; 0x13
    278e:	42 85       	ldd	r20, Z+10	; 0x0a
    2790:	53 85       	ldd	r21, Z+11	; 0x0b
    2792:	64 85       	ldd	r22, Z+12	; 0x0c
    2794:	75 85       	ldd	r23, Z+13	; 0x0d
    2796:	48 17       	cp	r20, r24
    2798:	59 07       	cpc	r21, r25
    279a:	6a 07       	cpc	r22, r26
    279c:	7b 07       	cpc	r23, r27
    279e:	10 f4       	brcc	.+4      	; 0x27a4 <f_write+0x348>
    27a0:	ac 01       	movw	r20, r24
    27a2:	bd 01       	movw	r22, r26
    27a4:	f7 01       	movw	r30, r14
    27a6:	42 87       	std	Z+10, r20	; 0x0a
    27a8:	53 87       	std	Z+11, r21	; 0x0b
    27aa:	64 87       	std	Z+12, r22	; 0x0c
    27ac:	75 87       	std	Z+13, r23	; 0x0d
	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
    27ae:	a1 14       	cp	r10, r1
    27b0:	b1 04       	cpc	r11, r1
    27b2:	09 f0       	breq	.+2      	; 0x27b6 <f_write+0x35a>
    27b4:	97 ce       	rjmp	.-722    	; 0x24e4 <f_write+0x88>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
    27b6:	f7 01       	movw	r30, r14
    27b8:	86 85       	ldd	r24, Z+14	; 0x0e
    27ba:	80 64       	ori	r24, 0x40	; 64
    27bc:	86 87       	std	Z+14, r24	; 0x0e

	LEAVE_FF(fs, FR_OK);
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	01 c0       	rjmp	.+2      	; 0x27c4 <f_write+0x368>


	*bw = 0;	/* Clear write byte counter */
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    27c2:	87 e0       	ldi	r24, 0x07	; 7
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
    27c4:	26 96       	adiw	r28, 0x06	; 6
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	ff 90       	pop	r15
    27da:	ef 90       	pop	r14
    27dc:	df 90       	pop	r13
    27de:	cf 90       	pop	r12
    27e0:	bf 90       	pop	r11
    27e2:	af 90       	pop	r10
    27e4:	9f 90       	pop	r9
    27e6:	8f 90       	pop	r8
    27e8:	7f 90       	pop	r7
    27ea:	6f 90       	pop	r6
    27ec:	5f 90       	pop	r5
    27ee:	4f 90       	pop	r4
    27f0:	3f 90       	pop	r3
    27f2:	2f 90       	pop	r2
    27f4:	08 95       	ret

000027f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    27f6:	ef 92       	push	r14
    27f8:	ff 92       	push	r15
    27fa:	0f 93       	push	r16
    27fc:	1f 93       	push	r17
    27fe:	cf 93       	push	r28
    2800:	df 93       	push	r29
    2802:	00 d0       	rcall	.+0      	; 0x2804 <f_sync+0xe>
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	8c 01       	movw	r16, r24
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    280a:	be 01       	movw	r22, r28
    280c:	6f 5f       	subi	r22, 0xFF	; 255
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	0e 94 a2 01 	call	0x344	; 0x344 <validate>
	if (res == FR_OK) {
    2814:	81 11       	cpse	r24, r1
    2816:	3c c0       	rjmp	.+120    	; 0x2890 <f_sync+0x9a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    2818:	f8 01       	movw	r30, r16
    281a:	96 85       	ldd	r25, Z+14	; 0x0e
    281c:	96 ff       	sbrs	r25, 6
    281e:	38 c0       	rjmp	.+112    	; 0x2890 <f_sync+0x9a>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
    2820:	44 8d       	ldd	r20, Z+28	; 0x1c
    2822:	55 8d       	ldd	r21, Z+29	; 0x1d
    2824:	66 8d       	ldd	r22, Z+30	; 0x1e
    2826:	77 8d       	ldd	r23, Z+31	; 0x1f
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	9a 81       	ldd	r25, Y+2	; 0x02
    282c:	0e 94 29 02 	call	0x452	; 0x452 <move_window>
				if (res == FR_OK) {
    2830:	81 11       	cpse	r24, r1
    2832:	2e c0       	rjmp	.+92     	; 0x2890 <f_sync+0x9a>
					dir = fp->dir_ptr;
    2834:	f8 01       	movw	r30, r16
    2836:	e0 a0       	ldd	r14, Z+32	; 0x20
    2838:	f1 a0       	ldd	r15, Z+33	; 0x21
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    283a:	f7 01       	movw	r30, r14
    283c:	83 85       	ldd	r24, Z+11	; 0x0b
    283e:	80 62       	ori	r24, 0x20	; 32
    2840:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
    2842:	f8 01       	movw	r30, r16
    2844:	26 81       	ldd	r18, Z+6	; 0x06
    2846:	37 81       	ldd	r19, Z+7	; 0x07
    2848:	40 85       	ldd	r20, Z+8	; 0x08
    284a:	51 85       	ldd	r21, Z+9	; 0x09
    284c:	b7 01       	movw	r22, r14
    284e:	80 81       	ld	r24, Z
    2850:	91 81       	ldd	r25, Z+1	; 0x01
    2852:	0e 94 5d 04 	call	0x8ba	; 0x8ba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    2856:	f8 01       	movw	r30, r16
    2858:	32 85       	ldd	r19, Z+10	; 0x0a
    285a:	23 85       	ldd	r18, Z+11	; 0x0b
    285c:	94 85       	ldd	r25, Z+12	; 0x0c
    285e:	85 85       	ldd	r24, Z+13	; 0x0d
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2860:	f7 01       	movw	r30, r14
    2862:	34 8f       	std	Z+28, r19	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    2864:	25 8f       	std	Z+29, r18	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    2866:	96 8f       	std	Z+30, r25	; 0x1e
	*ptr++ = (BYTE)val;
    2868:	87 8f       	std	Z+31, r24	; 0x1f
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    286a:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    286c:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    286e:	81 e2       	ldi	r24, 0x21	; 33
    2870:	80 8f       	std	Z+24, r24	; 0x18
	*ptr++ = (BYTE)val;
    2872:	8e e4       	ldi	r24, 0x4E	; 78
    2874:	81 8f       	std	Z+25, r24	; 0x19
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2876:	12 8a       	std	Z+18, r1	; 0x12
	*ptr++ = (BYTE)val;
    2878:	13 8a       	std	Z+19, r1	; 0x13
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	9a 81       	ldd	r25, Y+2	; 0x02
    287e:	21 e0       	ldi	r18, 0x01	; 1
    2880:	fc 01       	movw	r30, r24
    2882:	23 83       	std	Z+3, r18	; 0x03
					res = sync_fs(fs);					/* Restore it to the directory */
    2884:	0e 94 ca 02 	call	0x594	; 0x594 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
    2888:	f8 01       	movw	r30, r16
    288a:	96 85       	ldd	r25, Z+14	; 0x0e
    288c:	9f 7b       	andi	r25, 0xBF	; 191
    288e:	96 87       	std	Z+14, r25	; 0x0e
			}
		}
	}

	LEAVE_FF(fs, res);
}
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	1f 91       	pop	r17
    289a:	0f 91       	pop	r16
    289c:	ff 90       	pop	r15
    289e:	ef 90       	pop	r14
    28a0:	08 95       	ret

000028a2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
    28a2:	0f 93       	push	r16
    28a4:	1f 93       	push	r17
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <f_close+0xa>
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
    28b0:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    28b2:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <f_sync>
	if (res == FR_OK)
    28b6:	81 11       	cpse	r24, r1
    28b8:	0b c0       	rjmp	.+22     	; 0x28d0 <f_close+0x2e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
    28ba:	be 01       	movw	r22, r28
    28bc:	6f 5f       	subi	r22, 0xFF	; 255
    28be:	7f 4f       	sbci	r23, 0xFF	; 255
    28c0:	c8 01       	movw	r24, r16
    28c2:	0e 94 a2 01 	call	0x344	; 0x344 <validate>
		if (res == FR_OK) {
    28c6:	81 11       	cpse	r24, r1
    28c8:	03 c0       	rjmp	.+6      	; 0x28d0 <f_close+0x2e>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
    28ca:	f8 01       	movw	r30, r16
    28cc:	11 82       	std	Z+1, r1	; 0x01
    28ce:	10 82       	st	Z, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	1f 91       	pop	r17
    28da:	0f 91       	pop	r16
    28dc:	08 95       	ret

000028de <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
    28de:	2f 92       	push	r2
    28e0:	3f 92       	push	r3
    28e2:	4f 92       	push	r4
    28e4:	5f 92       	push	r5
    28e6:	6f 92       	push	r6
    28e8:	7f 92       	push	r7
    28ea:	8f 92       	push	r8
    28ec:	9f 92       	push	r9
    28ee:	af 92       	push	r10
    28f0:	bf 92       	push	r11
    28f2:	cf 92       	push	r12
    28f4:	df 92       	push	r13
    28f6:	ef 92       	push	r14
    28f8:	ff 92       	push	r15
    28fa:	0f 93       	push	r16
    28fc:	1f 93       	push	r17
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	00 d0       	rcall	.+0      	; 0x2904 <f_lseek+0x26>
    2904:	00 d0       	rcall	.+0      	; 0x2906 <f_lseek+0x28>
    2906:	00 d0       	rcall	.+0      	; 0x2908 <f_lseek+0x2a>
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	8c 01       	movw	r16, r24
    290e:	6a 01       	movw	r12, r20
    2910:	7b 01       	movw	r14, r22
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, tlen, ulen, *tbl;
	LBA_t dsc;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
    2912:	78 2e       	mov	r7, r24
    2914:	61 2e       	mov	r6, r17
    2916:	be 01       	movw	r22, r28
    2918:	6f 5f       	subi	r22, 0xFF	; 255
    291a:	7f 4f       	sbci	r23, 0xFF	; 255
    291c:	0e 94 a2 01 	call	0x344	; 0x344 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
    2920:	81 11       	cpse	r24, r1
    2922:	76 c1       	rjmp	.+748    	; 0x2c10 <f_lseek+0x332>
    2924:	d8 01       	movw	r26, r16
    2926:	1f 96       	adiw	r26, 0x0f	; 15
    2928:	8c 91       	ld	r24, X
    292a:	1f 97       	sbiw	r26, 0x0f	; 15
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
    292c:	81 11       	cpse	r24, r1
    292e:	70 c1       	rjmp	.+736    	; 0x2c10 <f_lseek+0x332>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
    2930:	1a 96       	adiw	r26, 0x0a	; 10
    2932:	8d 91       	ld	r24, X+
    2934:	9d 91       	ld	r25, X+
    2936:	0d 90       	ld	r0, X+
    2938:	bc 91       	ld	r27, X
    293a:	a0 2d       	mov	r26, r0
    293c:	8c 15       	cp	r24, r12
    293e:	9d 05       	cpc	r25, r13
    2940:	ae 05       	cpc	r26, r14
    2942:	bf 05       	cpc	r27, r15
    2944:	30 f4       	brcc	.+12     	; 0x2952 <f_lseek+0x74>
    2946:	f8 01       	movw	r30, r16
    2948:	26 85       	ldd	r18, Z+14	; 0x0e
    294a:	21 fd       	sbrc	r18, 1
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <f_lseek+0x74>
			ofs = fp->obj.objsize;
    294e:	6c 01       	movw	r12, r24
    2950:	7d 01       	movw	r14, r26
		}
		ifptr = fp->fptr;
    2952:	f8 01       	movw	r30, r16
    2954:	80 89       	ldd	r24, Z+16	; 0x10
    2956:	91 89       	ldd	r25, Z+17	; 0x11
    2958:	a2 89       	ldd	r26, Z+18	; 0x12
    295a:	b3 89       	ldd	r27, Z+19	; 0x13
		fp->fptr = nsect = 0;
    295c:	10 8a       	std	Z+16, r1	; 0x10
    295e:	11 8a       	std	Z+17, r1	; 0x11
    2960:	12 8a       	std	Z+18, r1	; 0x12
    2962:	13 8a       	std	Z+19, r1	; 0x13
		if (ofs > 0) {
    2964:	c1 14       	cp	r12, r1
    2966:	d1 04       	cpc	r13, r1
    2968:	e1 04       	cpc	r14, r1
    296a:	f1 04       	cpc	r15, r1
    296c:	09 f4       	brne	.+2      	; 0x2970 <f_lseek+0x92>
    296e:	4b c1       	rjmp	.+662    	; 0x2c06 <f_lseek+0x328>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
    2970:	e9 81       	ldd	r30, Y+1	; 0x01
    2972:	fa 81       	ldd	r31, Y+2	; 0x02
    2974:	81 84       	ldd	r8, Z+9	; 0x09
    2976:	92 84       	ldd	r9, Z+10	; 0x0a
    2978:	a1 2c       	mov	r10, r1
    297a:	b1 2c       	mov	r11, r1
    297c:	07 2e       	mov	r0, r23
    297e:	79 e0       	ldi	r23, 0x09	; 9
    2980:	88 0c       	add	r8, r8
    2982:	99 1c       	adc	r9, r9
    2984:	aa 1c       	adc	r10, r10
    2986:	bb 1c       	adc	r11, r11
    2988:	7a 95       	dec	r23
    298a:	d1 f7       	brne	.-12     	; 0x2980 <f_lseek+0xa2>
    298c:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	a1 05       	cpc	r26, r1
    2992:	b1 05       	cpc	r27, r1
    2994:	e9 f1       	breq	.+122    	; 0x2a10 <f_lseek+0x132>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2996:	1c 01       	movw	r2, r24
    2998:	2d 01       	movw	r4, r26
    299a:	f1 e0       	ldi	r31, 0x01	; 1
    299c:	2f 1a       	sub	r2, r31
    299e:	31 08       	sbc	r3, r1
    29a0:	41 08       	sbc	r4, r1
    29a2:	51 08       	sbc	r5, r1
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs > 0) {
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    29a4:	c7 01       	movw	r24, r14
    29a6:	b6 01       	movw	r22, r12
    29a8:	61 50       	subi	r22, 0x01	; 1
    29aa:	71 09       	sbc	r23, r1
    29ac:	81 09       	sbc	r24, r1
    29ae:	91 09       	sbc	r25, r1
    29b0:	a5 01       	movw	r20, r10
    29b2:	94 01       	movw	r18, r8
    29b4:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__udivmodsi4>
    29b8:	2b 83       	std	Y+3, r18	; 0x03
    29ba:	3c 83       	std	Y+4, r19	; 0x04
    29bc:	4d 83       	std	Y+5, r20	; 0x05
    29be:	5e 83       	std	Y+6, r21	; 0x06
    29c0:	c2 01       	movw	r24, r4
    29c2:	b1 01       	movw	r22, r2
    29c4:	a5 01       	movw	r20, r10
    29c6:	94 01       	movw	r18, r8
    29c8:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__udivmodsi4>
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	9c 81       	ldd	r25, Y+4	; 0x04
    29d0:	ad 81       	ldd	r26, Y+5	; 0x05
    29d2:	be 81       	ldd	r27, Y+6	; 0x06
    29d4:	82 17       	cp	r24, r18
    29d6:	93 07       	cpc	r25, r19
    29d8:	a4 07       	cpc	r26, r20
    29da:	b5 07       	cpc	r27, r21
    29dc:	c8 f0       	brcs	.+50     	; 0x2a10 <f_lseek+0x132>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
    29de:	88 27       	eor	r24, r24
    29e0:	99 27       	eor	r25, r25
    29e2:	dc 01       	movw	r26, r24
    29e4:	88 19       	sub	r24, r8
    29e6:	99 09       	sbc	r25, r9
    29e8:	aa 09       	sbc	r26, r10
    29ea:	bb 09       	sbc	r27, r11
    29ec:	82 21       	and	r24, r2
    29ee:	93 21       	and	r25, r3
    29f0:	a4 21       	and	r26, r4
    29f2:	b5 21       	and	r27, r5
    29f4:	f8 01       	movw	r30, r16
    29f6:	80 8b       	std	Z+16, r24	; 0x10
    29f8:	91 8b       	std	Z+17, r25	; 0x11
    29fa:	a2 8b       	std	Z+18, r26	; 0x12
    29fc:	b3 8b       	std	Z+19, r27	; 0x13
				ofs -= fp->fptr;
    29fe:	c8 1a       	sub	r12, r24
    2a00:	d9 0a       	sbc	r13, r25
    2a02:	ea 0a       	sbc	r14, r26
    2a04:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    2a06:	44 89       	ldd	r20, Z+20	; 0x14
    2a08:	55 89       	ldd	r21, Z+21	; 0x15
    2a0a:	66 89       	ldd	r22, Z+22	; 0x16
    2a0c:	77 89       	ldd	r23, Z+23	; 0x17
    2a0e:	34 c0       	rjmp	.+104    	; 0x2a78 <f_lseek+0x19a>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
    2a10:	d8 01       	movw	r26, r16
    2a12:	16 96       	adiw	r26, 0x06	; 6
    2a14:	4d 91       	ld	r20, X+
    2a16:	5d 91       	ld	r21, X+
    2a18:	6d 91       	ld	r22, X+
    2a1a:	7c 91       	ld	r23, X
    2a1c:	19 97       	sbiw	r26, 0x09	; 9
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2a1e:	41 15       	cp	r20, r1
    2a20:	51 05       	cpc	r21, r1
    2a22:	61 05       	cpc	r22, r1
    2a24:	71 05       	cpc	r23, r1
    2a26:	09 f5       	brne	.+66     	; 0x2a6a <f_lseek+0x18c>
					clst = create_chain(&fp->obj, 0);
    2a28:	40 e0       	ldi	r20, 0x00	; 0
    2a2a:	50 e0       	ldi	r21, 0x00	; 0
    2a2c:	ba 01       	movw	r22, r20
    2a2e:	c8 01       	movw	r24, r16
    2a30:	0e 94 34 06 	call	0xc68	; 0xc68 <create_chain>
    2a34:	ab 01       	movw	r20, r22
    2a36:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fs, FR_INT_ERR);
    2a38:	41 30       	cpi	r20, 0x01	; 1
    2a3a:	51 05       	cpc	r21, r1
    2a3c:	61 05       	cpc	r22, r1
    2a3e:	71 05       	cpc	r23, r1
    2a40:	21 f4       	brne	.+8      	; 0x2a4a <f_lseek+0x16c>
    2a42:	82 e0       	ldi	r24, 0x02	; 2
    2a44:	f8 01       	movw	r30, r16
    2a46:	87 87       	std	Z+15, r24	; 0x0f
    2a48:	e3 c0       	rjmp	.+454    	; 0x2c10 <f_lseek+0x332>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    2a4a:	4f 3f       	cpi	r20, 0xFF	; 255
    2a4c:	ff ef       	ldi	r31, 0xFF	; 255
    2a4e:	5f 07       	cpc	r21, r31
    2a50:	6f 07       	cpc	r22, r31
    2a52:	7f 07       	cpc	r23, r31
    2a54:	29 f4       	brne	.+10     	; 0x2a60 <f_lseek+0x182>
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	d8 01       	movw	r26, r16
    2a5a:	1f 96       	adiw	r26, 0x0f	; 15
    2a5c:	8c 93       	st	X, r24
    2a5e:	d8 c0       	rjmp	.+432    	; 0x2c10 <f_lseek+0x332>
					fp->obj.sclust = clst;
    2a60:	f8 01       	movw	r30, r16
    2a62:	46 83       	std	Z+6, r20	; 0x06
    2a64:	57 83       	std	Z+7, r21	; 0x07
    2a66:	60 87       	std	Z+8, r22	; 0x08
    2a68:	71 87       	std	Z+9, r23	; 0x09
				}
#endif
				fp->clust = clst;
    2a6a:	d8 01       	movw	r26, r16
    2a6c:	54 96       	adiw	r26, 0x14	; 20
    2a6e:	4d 93       	st	X+, r20
    2a70:	5d 93       	st	X+, r21
    2a72:	6d 93       	st	X+, r22
    2a74:	7c 93       	st	X, r23
    2a76:	57 97       	sbiw	r26, 0x17	; 23
			}
			if (clst != 0) {
    2a78:	41 15       	cp	r20, r1
    2a7a:	51 05       	cpc	r21, r1
    2a7c:	61 05       	cpc	r22, r1
    2a7e:	71 05       	cpc	r23, r1
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <f_lseek+0x1a6>
    2a82:	8a c0       	rjmp	.+276    	; 0x2b98 <f_lseek+0x2ba>
				while (ofs > bcs) {						/* Cluster following loop */
    2a84:	8c 14       	cp	r8, r12
    2a86:	9d 04       	cpc	r9, r13
    2a88:	ae 04       	cpc	r10, r14
    2a8a:	bf 04       	cpc	r11, r15
    2a8c:	08 f0       	brcs	.+2      	; 0x2a90 <f_lseek+0x1b2>
    2a8e:	52 c0       	rjmp	.+164    	; 0x2b34 <f_lseek+0x256>
					ofs -= bcs; fp->fptr += bcs;
    2a90:	c8 18       	sub	r12, r8
    2a92:	d9 08       	sbc	r13, r9
    2a94:	ea 08       	sbc	r14, r10
    2a96:	fb 08       	sbc	r15, r11
    2a98:	f8 01       	movw	r30, r16
    2a9a:	80 89       	ldd	r24, Z+16	; 0x10
    2a9c:	91 89       	ldd	r25, Z+17	; 0x11
    2a9e:	a2 89       	ldd	r26, Z+18	; 0x12
    2aa0:	b3 89       	ldd	r27, Z+19	; 0x13
    2aa2:	88 0d       	add	r24, r8
    2aa4:	99 1d       	adc	r25, r9
    2aa6:	aa 1d       	adc	r26, r10
    2aa8:	bb 1d       	adc	r27, r11
    2aaa:	80 8b       	std	Z+16, r24	; 0x10
    2aac:	91 8b       	std	Z+17, r25	; 0x11
    2aae:	a2 8b       	std	Z+18, r26	; 0x12
    2ab0:	b3 8b       	std	Z+19, r27	; 0x13
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2ab2:	86 85       	ldd	r24, Z+14	; 0x0e
    2ab4:	81 ff       	sbrs	r24, 1
    2ab6:	0c c0       	rjmp	.+24     	; 0x2ad0 <f_lseek+0x1f2>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
    2ab8:	87 2d       	mov	r24, r7
    2aba:	96 2d       	mov	r25, r6
    2abc:	0e 94 34 06 	call	0xc68	; 0xc68 <create_chain>
    2ac0:	ab 01       	movw	r20, r22
    2ac2:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* Clip file size in case of disk full */
    2ac4:	41 15       	cp	r20, r1
    2ac6:	51 05       	cpc	r21, r1
    2ac8:	61 05       	cpc	r22, r1
    2aca:	71 05       	cpc	r23, r1
    2acc:	39 f4       	brne	.+14     	; 0x2adc <f_lseek+0x1fe>
    2ace:	68 c0       	rjmp	.+208    	; 0x2ba0 <f_lseek+0x2c2>
							ofs = 0; break;
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
    2ad0:	87 2d       	mov	r24, r7
    2ad2:	96 2d       	mov	r25, r6
    2ad4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <get_fat>
    2ad8:	ab 01       	movw	r20, r22
    2ada:	bc 01       	movw	r22, r24
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    2adc:	4f 3f       	cpi	r20, 0xFF	; 255
    2ade:	ff ef       	ldi	r31, 0xFF	; 255
    2ae0:	5f 07       	cpc	r21, r31
    2ae2:	6f 07       	cpc	r22, r31
    2ae4:	7f 07       	cpc	r23, r31
    2ae6:	29 f4       	brne	.+10     	; 0x2af2 <f_lseek+0x214>
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	d8 01       	movw	r26, r16
    2aec:	1f 96       	adiw	r26, 0x0f	; 15
    2aee:	8c 93       	st	X, r24
    2af0:	8f c0       	rjmp	.+286    	; 0x2c10 <f_lseek+0x332>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
    2af2:	42 30       	cpi	r20, 0x02	; 2
    2af4:	51 05       	cpc	r21, r1
    2af6:	61 05       	cpc	r22, r1
    2af8:	71 05       	cpc	r23, r1
    2afa:	58 f0       	brcs	.+22     	; 0x2b12 <f_lseek+0x234>
    2afc:	e9 81       	ldd	r30, Y+1	; 0x01
    2afe:	fa 81       	ldd	r31, Y+2	; 0x02
    2b00:	83 89       	ldd	r24, Z+19	; 0x13
    2b02:	94 89       	ldd	r25, Z+20	; 0x14
    2b04:	a5 89       	ldd	r26, Z+21	; 0x15
    2b06:	b6 89       	ldd	r27, Z+22	; 0x16
    2b08:	48 17       	cp	r20, r24
    2b0a:	59 07       	cpc	r21, r25
    2b0c:	6a 07       	cpc	r22, r26
    2b0e:	7b 07       	cpc	r23, r27
    2b10:	20 f0       	brcs	.+8      	; 0x2b1a <f_lseek+0x23c>
    2b12:	82 e0       	ldi	r24, 0x02	; 2
    2b14:	f8 01       	movw	r30, r16
    2b16:	87 87       	std	Z+15, r24	; 0x0f
    2b18:	7b c0       	rjmp	.+246    	; 0x2c10 <f_lseek+0x332>
					fp->clust = clst;
    2b1a:	d8 01       	movw	r26, r16
    2b1c:	54 96       	adiw	r26, 0x14	; 20
    2b1e:	4d 93       	st	X+, r20
    2b20:	5d 93       	st	X+, r21
    2b22:	6d 93       	st	X+, r22
    2b24:	7c 93       	st	X, r23
    2b26:	57 97       	sbiw	r26, 0x17	; 23
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2b28:	8c 14       	cp	r8, r12
    2b2a:	9d 04       	cpc	r9, r13
    2b2c:	ae 04       	cpc	r10, r14
    2b2e:	bf 04       	cpc	r11, r15
    2b30:	08 f4       	brcc	.+2      	; 0x2b34 <f_lseek+0x256>
    2b32:	ae cf       	rjmp	.-164    	; 0x2a90 <f_lseek+0x1b2>
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
					fp->clust = clst;
				}
				fp->fptr += ofs;
    2b34:	f8 01       	movw	r30, r16
    2b36:	80 89       	ldd	r24, Z+16	; 0x10
    2b38:	91 89       	ldd	r25, Z+17	; 0x11
    2b3a:	a2 89       	ldd	r26, Z+18	; 0x12
    2b3c:	b3 89       	ldd	r27, Z+19	; 0x13
    2b3e:	8c 0d       	add	r24, r12
    2b40:	9d 1d       	adc	r25, r13
    2b42:	ae 1d       	adc	r26, r14
    2b44:	bf 1d       	adc	r27, r15
    2b46:	80 8b       	std	Z+16, r24	; 0x10
    2b48:	91 8b       	std	Z+17, r25	; 0x11
    2b4a:	a2 8b       	std	Z+18, r26	; 0x12
    2b4c:	b3 8b       	std	Z+19, r27	; 0x13
				if (ofs % SS(fs)) {
    2b4e:	d7 01       	movw	r26, r14
    2b50:	c6 01       	movw	r24, r12
    2b52:	91 70       	andi	r25, 0x01	; 1
    2b54:	aa 27       	eor	r26, r26
    2b56:	bb 27       	eor	r27, r27
    2b58:	89 2b       	or	r24, r25
    2b5a:	8a 2b       	or	r24, r26
    2b5c:	8b 2b       	or	r24, r27
    2b5e:	21 f1       	breq	.+72     	; 0x2ba8 <f_lseek+0x2ca>
					nsect = clst2sect(fs, clst);	/* Current sector */
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	9a 81       	ldd	r25, Y+2	; 0x02
    2b64:	0e 94 44 01 	call	0x288	; 0x288 <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
    2b68:	61 15       	cp	r22, r1
    2b6a:	71 05       	cpc	r23, r1
    2b6c:	81 05       	cpc	r24, r1
    2b6e:	91 05       	cpc	r25, r1
    2b70:	29 f4       	brne	.+10     	; 0x2b7c <f_lseek+0x29e>
    2b72:	82 e0       	ldi	r24, 0x02	; 2
    2b74:	d8 01       	movw	r26, r16
    2b76:	1f 96       	adiw	r26, 0x0f	; 15
    2b78:	8c 93       	st	X, r24
    2b7a:	4a c0       	rjmp	.+148    	; 0x2c10 <f_lseek+0x332>
					nsect += (DWORD)(ofs / SS(fs));
    2b7c:	0b 2e       	mov	r0, r27
    2b7e:	b9 e0       	ldi	r27, 0x09	; 9
    2b80:	f6 94       	lsr	r15
    2b82:	e7 94       	ror	r14
    2b84:	d7 94       	ror	r13
    2b86:	c7 94       	ror	r12
    2b88:	ba 95       	dec	r27
    2b8a:	d1 f7       	brne	.-12     	; 0x2b80 <f_lseek+0x2a2>
    2b8c:	b0 2d       	mov	r27, r0
    2b8e:	c6 0e       	add	r12, r22
    2b90:	d7 1e       	adc	r13, r23
    2b92:	e8 1e       	adc	r14, r24
    2b94:	f9 1e       	adc	r15, r25
    2b96:	0b c0       	rjmp	.+22     	; 0x2bae <f_lseek+0x2d0>
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2b98:	c1 2c       	mov	r12, r1
    2b9a:	d1 2c       	mov	r13, r1
    2b9c:	76 01       	movw	r14, r12
    2b9e:	07 c0       	rjmp	.+14     	; 0x2bae <f_lseek+0x2d0>
    2ba0:	c1 2c       	mov	r12, r1
    2ba2:	d1 2c       	mov	r13, r1
    2ba4:	76 01       	movw	r14, r12
    2ba6:	03 c0       	rjmp	.+6      	; 0x2bae <f_lseek+0x2d0>
    2ba8:	c1 2c       	mov	r12, r1
    2baa:	d1 2c       	mov	r13, r1
    2bac:	76 01       	movw	r14, r12
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
					nsect += (DWORD)(ofs / SS(fs));
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
    2bae:	f8 01       	movw	r30, r16
    2bb0:	80 89       	ldd	r24, Z+16	; 0x10
    2bb2:	91 89       	ldd	r25, Z+17	; 0x11
    2bb4:	a2 89       	ldd	r26, Z+18	; 0x12
    2bb6:	b3 89       	ldd	r27, Z+19	; 0x13
    2bb8:	42 85       	ldd	r20, Z+10	; 0x0a
    2bba:	53 85       	ldd	r21, Z+11	; 0x0b
    2bbc:	64 85       	ldd	r22, Z+12	; 0x0c
    2bbe:	75 85       	ldd	r23, Z+13	; 0x0d
    2bc0:	48 17       	cp	r20, r24
    2bc2:	59 07       	cpc	r21, r25
    2bc4:	6a 07       	cpc	r22, r26
    2bc6:	7b 07       	cpc	r23, r27
    2bc8:	38 f4       	brcc	.+14     	; 0x2bd8 <f_lseek+0x2fa>
			fp->obj.objsize = fp->fptr;
    2bca:	82 87       	std	Z+10, r24	; 0x0a
    2bcc:	93 87       	std	Z+11, r25	; 0x0b
    2bce:	a4 87       	std	Z+12, r26	; 0x0c
    2bd0:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA_MODIFIED;
    2bd2:	26 85       	ldd	r18, Z+14	; 0x0e
    2bd4:	20 64       	ori	r18, 0x40	; 64
    2bd6:	26 87       	std	Z+14, r18	; 0x0e
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
    2bd8:	91 70       	andi	r25, 0x01	; 1
    2bda:	aa 27       	eor	r26, r26
    2bdc:	bb 27       	eor	r27, r27
    2bde:	89 2b       	or	r24, r25
    2be0:	8a 2b       	or	r24, r26
    2be2:	8b 2b       	or	r24, r27
    2be4:	91 f0       	breq	.+36     	; 0x2c0a <f_lseek+0x32c>
    2be6:	f8 01       	movw	r30, r16
    2be8:	80 8d       	ldd	r24, Z+24	; 0x18
    2bea:	91 8d       	ldd	r25, Z+25	; 0x19
    2bec:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2bee:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2bf0:	c8 16       	cp	r12, r24
    2bf2:	d9 06       	cpc	r13, r25
    2bf4:	ea 06       	cpc	r14, r26
    2bf6:	fb 06       	cpc	r15, r27
    2bf8:	51 f0       	breq	.+20     	; 0x2c0e <f_lseek+0x330>
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
#endif
			fp->sect = nsect;
    2bfa:	c0 8e       	std	Z+24, r12	; 0x18
    2bfc:	d1 8e       	std	Z+25, r13	; 0x19
    2bfe:	e2 8e       	std	Z+26, r14	; 0x1a
    2c00:	f3 8e       	std	Z+27, r15	; 0x1b
		}
	}

	LEAVE_FF(fs, res);
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	05 c0       	rjmp	.+10     	; 0x2c10 <f_lseek+0x332>
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	03 c0       	rjmp	.+6      	; 0x2c10 <f_lseek+0x332>
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	01 c0       	rjmp	.+2      	; 0x2c10 <f_lseek+0x332>
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
}
    2c10:	26 96       	adiw	r28, 0x06	; 6
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	cd bf       	out	0x3d, r28	; 61
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	1f 91       	pop	r17
    2c22:	0f 91       	pop	r16
    2c24:	ff 90       	pop	r15
    2c26:	ef 90       	pop	r14
    2c28:	df 90       	pop	r13
    2c2a:	cf 90       	pop	r12
    2c2c:	bf 90       	pop	r11
    2c2e:	af 90       	pop	r10
    2c30:	9f 90       	pop	r9
    2c32:	8f 90       	pop	r8
    2c34:	7f 90       	pop	r7
    2c36:	6f 90       	pop	r6
    2c38:	5f 90       	pop	r5
    2c3a:	4f 90       	pop	r4
    2c3c:	3f 90       	pop	r3
    2c3e:	2f 90       	pop	r2
    2c40:	08 95       	ret

00002c42 <put_on_Cycle_buffer>:
	}
	
	return 0;
}
void Clear_Cycle_buffer (volatile struct cycle_Buffer * Cycle_Buffer_f){
	Cycle_Buffer_f->start_c = Cycle_Buffer_f->end_c;
    2c42:	f9 01       	movw	r30, r18
    2c44:	a1 81       	ldd	r26, Z+1	; 0x01
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	11 96       	adiw	r26, 0x01	; 1
    2c4a:	aa 0f       	add	r26, r26
    2c4c:	bb 1f       	adc	r27, r27
    2c4e:	a2 0f       	add	r26, r18
    2c50:	b3 1f       	adc	r27, r19
    2c52:	11 96       	adiw	r26, 0x01	; 1
    2c54:	9c 93       	st	X, r25
    2c56:	8e 93       	st	-X, r24
    2c58:	81 81       	ldd	r24, Z+1	; 0x01
    2c5a:	d9 01       	movw	r26, r18
    2c5c:	94 e0       	ldi	r25, 0x04	; 4
    2c5e:	89 9f       	mul	r24, r25
    2c60:	a0 0d       	add	r26, r0
    2c62:	b1 1d       	adc	r27, r1
    2c64:	11 24       	eor	r1, r1
    2c66:	9a 96       	adiw	r26, 0x2a	; 42
    2c68:	4d 93       	st	X+, r20
    2c6a:	5d 93       	st	X+, r21
    2c6c:	6d 93       	st	X+, r22
    2c6e:	7c 93       	st	X, r23
    2c70:	9d 97       	sbiw	r26, 0x2d	; 45
    2c72:	81 81       	ldd	r24, Z+1	; 0x01
    2c74:	8f 5f       	subi	r24, 0xFF	; 255
    2c76:	81 83       	std	Z+1, r24	; 0x01
    2c78:	81 81       	ldd	r24, Z+1	; 0x01
    2c7a:	84 31       	cpi	r24, 0x14	; 20
    2c7c:	08 f0       	brcs	.+2      	; 0x2c80 <put_on_Cycle_buffer+0x3e>
    2c7e:	11 82       	std	Z+1, r1	; 0x01
    2c80:	91 81       	ldd	r25, Z+1	; 0x01
    2c82:	80 81       	ld	r24, Z
    2c84:	98 13       	cpse	r25, r24
    2c86:	07 c0       	rjmp	.+14     	; 0x2c96 <put_on_Cycle_buffer+0x54>
    2c88:	80 81       	ld	r24, Z
    2c8a:	8f 5f       	subi	r24, 0xFF	; 255
    2c8c:	80 83       	st	Z, r24
    2c8e:	80 81       	ld	r24, Z
    2c90:	84 31       	cpi	r24, 0x14	; 20
    2c92:	08 f0       	brcs	.+2      	; 0x2c96 <put_on_Cycle_buffer+0x54>
    2c94:	10 82       	st	Z, r1
    2c96:	08 95       	ret

00002c98 <get_from_Cycle_buffer>:
    2c98:	cf 93       	push	r28
    2c9a:	df 93       	push	r29
    2c9c:	ec 01       	movw	r28, r24
    2c9e:	fa 01       	movw	r30, r20
    2ca0:	20 81       	ld	r18, Z
    2ca2:	91 81       	ldd	r25, Z+1	; 0x01
    2ca4:	29 17       	cp	r18, r25
    2ca6:	31 f1       	breq	.+76     	; 0x2cf4 <get_from_Cycle_buffer+0x5c>
    2ca8:	a0 81       	ld	r26, Z
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	11 96       	adiw	r26, 0x01	; 1
    2cae:	aa 0f       	add	r26, r26
    2cb0:	bb 1f       	adc	r27, r27
    2cb2:	a4 0f       	add	r26, r20
    2cb4:	b5 1f       	adc	r27, r21
    2cb6:	8d 91       	ld	r24, X+
    2cb8:	9c 91       	ld	r25, X
    2cba:	99 83       	std	Y+1, r25	; 0x01
    2cbc:	88 83       	st	Y, r24
    2cbe:	80 81       	ld	r24, Z
    2cc0:	da 01       	movw	r26, r20
    2cc2:	94 e0       	ldi	r25, 0x04	; 4
    2cc4:	89 9f       	mul	r24, r25
    2cc6:	a0 0d       	add	r26, r0
    2cc8:	b1 1d       	adc	r27, r1
    2cca:	11 24       	eor	r1, r1
    2ccc:	9a 96       	adiw	r26, 0x2a	; 42
    2cce:	8d 91       	ld	r24, X+
    2cd0:	9d 91       	ld	r25, X+
    2cd2:	0d 90       	ld	r0, X+
    2cd4:	bc 91       	ld	r27, X
    2cd6:	a0 2d       	mov	r26, r0
    2cd8:	eb 01       	movw	r28, r22
    2cda:	88 83       	st	Y, r24
    2cdc:	99 83       	std	Y+1, r25	; 0x01
    2cde:	aa 83       	std	Y+2, r26	; 0x02
    2ce0:	bb 83       	std	Y+3, r27	; 0x03
    2ce2:	80 81       	ld	r24, Z
    2ce4:	8f 5f       	subi	r24, 0xFF	; 255
    2ce6:	80 83       	st	Z, r24
    2ce8:	80 81       	ld	r24, Z
    2cea:	84 31       	cpi	r24, 0x14	; 20
    2cec:	28 f0       	brcs	.+10     	; 0x2cf8 <get_from_Cycle_buffer+0x60>
    2cee:	10 82       	st	Z, r1
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	03 c0       	rjmp	.+6      	; 0x2cfa <get_from_Cycle_buffer+0x62>
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	01 c0       	rjmp	.+2      	; 0x2cfa <get_from_Cycle_buffer+0x62>
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	df 91       	pop	r29
    2cfc:	cf 91       	pop	r28
    2cfe:	08 95       	ret

00002d00 <conversion_result>:

uint16_t conversion_result (void){
	uint16_t conv_result;
	
	//conv_result = (ADCH << 8) | (ADCL);
	conv_result = ADCW;
    2d00:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    2d04:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	return conv_result;
    2d08:	08 95       	ret

00002d0a <LCD_SendCommandHigh>:
	while(r)
	{
		LCD_SendData(r);
		r = pgm_read_byte(Text++);
	}
}
    2d0a:	5f 98       	cbi	0x0b, 7	; 11
    2d0c:	84 ff       	sbrs	r24, 4
    2d0e:	02 c0       	rjmp	.+4      	; 0x2d14 <LCD_SendCommandHigh+0xa>
    2d10:	5d 9a       	sbi	0x0b, 5	; 11
    2d12:	01 c0       	rjmp	.+2      	; 0x2d16 <LCD_SendCommandHigh+0xc>
    2d14:	5d 98       	cbi	0x0b, 5	; 11
    2d16:	85 ff       	sbrs	r24, 5
    2d18:	02 c0       	rjmp	.+4      	; 0x2d1e <LCD_SendCommandHigh+0x14>
    2d1a:	5c 9a       	sbi	0x0b, 4	; 11
    2d1c:	01 c0       	rjmp	.+2      	; 0x2d20 <LCD_SendCommandHigh+0x16>
    2d1e:	5c 98       	cbi	0x0b, 4	; 11
    2d20:	86 ff       	sbrs	r24, 6
    2d22:	02 c0       	rjmp	.+4      	; 0x2d28 <LCD_SendCommandHigh+0x1e>
    2d24:	5b 9a       	sbi	0x0b, 3	; 11
    2d26:	01 c0       	rjmp	.+2      	; 0x2d2a <LCD_SendCommandHigh+0x20>
    2d28:	5b 98       	cbi	0x0b, 3	; 11
    2d2a:	88 23       	and	r24, r24
    2d2c:	14 f4       	brge	.+4      	; 0x2d32 <LCD_SendCommandHigh+0x28>
    2d2e:	5a 9a       	sbi	0x0b, 2	; 11
    2d30:	01 c0       	rjmp	.+2      	; 0x2d34 <LCD_SendCommandHigh+0x2a>
    2d32:	5a 98       	cbi	0x0b, 2	; 11
    2d34:	5e 9a       	sbi	0x0b, 6	; 11
    2d36:	85 e0       	ldi	r24, 0x05	; 5
    2d38:	8a 95       	dec	r24
    2d3a:	f1 f7       	brne	.-4      	; 0x2d38 <LCD_SendCommandHigh+0x2e>
    2d3c:	00 00       	nop
    2d3e:	5e 98       	cbi	0x0b, 6	; 11
    2d40:	08 95       	ret

00002d42 <LCD_Send>:
    2d42:	84 ff       	sbrs	r24, 4
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <LCD_Send+0x8>
    2d46:	5d 9a       	sbi	0x0b, 5	; 11
    2d48:	01 c0       	rjmp	.+2      	; 0x2d4c <LCD_Send+0xa>
    2d4a:	5d 98       	cbi	0x0b, 5	; 11
    2d4c:	85 ff       	sbrs	r24, 5
    2d4e:	02 c0       	rjmp	.+4      	; 0x2d54 <LCD_Send+0x12>
    2d50:	5c 9a       	sbi	0x0b, 4	; 11
    2d52:	01 c0       	rjmp	.+2      	; 0x2d56 <LCD_Send+0x14>
    2d54:	5c 98       	cbi	0x0b, 4	; 11
    2d56:	86 ff       	sbrs	r24, 6
    2d58:	02 c0       	rjmp	.+4      	; 0x2d5e <LCD_Send+0x1c>
    2d5a:	5b 9a       	sbi	0x0b, 3	; 11
    2d5c:	01 c0       	rjmp	.+2      	; 0x2d60 <LCD_Send+0x1e>
    2d5e:	5b 98       	cbi	0x0b, 3	; 11
    2d60:	88 23       	and	r24, r24
    2d62:	14 f4       	brge	.+4      	; 0x2d68 <LCD_Send+0x26>
    2d64:	5a 9a       	sbi	0x0b, 2	; 11
    2d66:	01 c0       	rjmp	.+2      	; 0x2d6a <LCD_Send+0x28>
    2d68:	5a 98       	cbi	0x0b, 2	; 11
    2d6a:	5e 9a       	sbi	0x0b, 6	; 11
    2d6c:	95 e0       	ldi	r25, 0x05	; 5
    2d6e:	9a 95       	dec	r25
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <LCD_Send+0x2c>
    2d72:	00 00       	nop
    2d74:	5e 98       	cbi	0x0b, 6	; 11
    2d76:	80 ff       	sbrs	r24, 0
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <LCD_Send+0x3c>
    2d7a:	5d 9a       	sbi	0x0b, 5	; 11
    2d7c:	01 c0       	rjmp	.+2      	; 0x2d80 <LCD_Send+0x3e>
    2d7e:	5d 98       	cbi	0x0b, 5	; 11
    2d80:	81 ff       	sbrs	r24, 1
    2d82:	02 c0       	rjmp	.+4      	; 0x2d88 <LCD_Send+0x46>
    2d84:	5c 9a       	sbi	0x0b, 4	; 11
    2d86:	01 c0       	rjmp	.+2      	; 0x2d8a <LCD_Send+0x48>
    2d88:	5c 98       	cbi	0x0b, 4	; 11
    2d8a:	82 ff       	sbrs	r24, 2
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <LCD_Send+0x50>
    2d8e:	5b 9a       	sbi	0x0b, 3	; 11
    2d90:	01 c0       	rjmp	.+2      	; 0x2d94 <LCD_Send+0x52>
    2d92:	5b 98       	cbi	0x0b, 3	; 11
    2d94:	83 ff       	sbrs	r24, 3
    2d96:	02 c0       	rjmp	.+4      	; 0x2d9c <LCD_Send+0x5a>
    2d98:	5a 9a       	sbi	0x0b, 2	; 11
    2d9a:	01 c0       	rjmp	.+2      	; 0x2d9e <LCD_Send+0x5c>
    2d9c:	5a 98       	cbi	0x0b, 2	; 11
    2d9e:	5e 9a       	sbi	0x0b, 6	; 11
    2da0:	85 e0       	ldi	r24, 0x05	; 5
    2da2:	8a 95       	dec	r24
    2da4:	f1 f7       	brne	.-4      	; 0x2da2 <LCD_Send+0x60>
    2da6:	00 00       	nop
    2da8:	5e 98       	cbi	0x0b, 6	; 11
    2daa:	08 95       	ret

00002dac <LCD_WaitBusy>:
    2dac:	55 98       	cbi	0x0a, 5	; 10
    2dae:	54 98       	cbi	0x0a, 4	; 10
    2db0:	53 98       	cbi	0x0a, 3	; 10
    2db2:	52 98       	cbi	0x0a, 2	; 10
    2db4:	5f 98       	cbi	0x0b, 7	; 11
    2db6:	28 9a       	sbi	0x05, 0	; 5
    2db8:	5e 9a       	sbi	0x0b, 6	; 11
    2dba:	85 e0       	ldi	r24, 0x05	; 5
    2dbc:	8a 95       	dec	r24
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <LCD_WaitBusy+0x10>
    2dc0:	00 00       	nop
    2dc2:	4a 9b       	sbis	0x09, 2	; 9
    2dc4:	08 c0       	rjmp	.+16     	; 0x2dd6 <LCD_WaitBusy+0x2a>
    2dc6:	5e 98       	cbi	0x0b, 6	; 11
    2dc8:	5e 9a       	sbi	0x0b, 6	; 11
    2dca:	85 e0       	ldi	r24, 0x05	; 5
    2dcc:	8a 95       	dec	r24
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <LCD_WaitBusy+0x20>
    2dd0:	00 00       	nop
    2dd2:	5e 98       	cbi	0x0b, 6	; 11
    2dd4:	f1 cf       	rjmp	.-30     	; 0x2db8 <LCD_WaitBusy+0xc>
    2dd6:	5e 98       	cbi	0x0b, 6	; 11
    2dd8:	5e 9a       	sbi	0x0b, 6	; 11
    2dda:	85 e0       	ldi	r24, 0x05	; 5
    2ddc:	8a 95       	dec	r24
    2dde:	f1 f7       	brne	.-4      	; 0x2ddc <LCD_WaitBusy+0x30>
    2de0:	00 00       	nop
    2de2:	5e 98       	cbi	0x0b, 6	; 11
    2de4:	55 9a       	sbi	0x0a, 5	; 10
    2de6:	54 9a       	sbi	0x0a, 4	; 10
    2de8:	53 9a       	sbi	0x0a, 3	; 10
    2dea:	52 9a       	sbi	0x0a, 2	; 10
    2dec:	28 98       	cbi	0x05, 0	; 5
    2dee:	08 95       	ret

00002df0 <LCD_SendCommand>:
    2df0:	cf 93       	push	r28
    2df2:	c8 2f       	mov	r28, r24
    2df4:	0e 94 d6 16 	call	0x2dac	; 0x2dac <LCD_WaitBusy>
    2df8:	5f 98       	cbi	0x0b, 7	; 11
    2dfa:	8c 2f       	mov	r24, r28
    2dfc:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <LCD_Send>
    2e00:	cf 91       	pop	r28
    2e02:	08 95       	ret

00002e04 <LCD_Setup>:
    2e04:	55 9a       	sbi	0x0a, 5	; 10
    2e06:	54 9a       	sbi	0x0a, 4	; 10
    2e08:	53 9a       	sbi	0x0a, 3	; 10
    2e0a:	52 9a       	sbi	0x0a, 2	; 10
    2e0c:	57 9a       	sbi	0x0a, 7	; 10
    2e0e:	20 9a       	sbi	0x04, 0	; 4
    2e10:	56 9a       	sbi	0x0a, 6	; 10
    2e12:	5d 98       	cbi	0x0b, 5	; 11
    2e14:	5c 98       	cbi	0x0b, 4	; 11
    2e16:	5b 98       	cbi	0x0b, 3	; 11
    2e18:	5a 98       	cbi	0x0b, 2	; 11
    2e1a:	5f 98       	cbi	0x0b, 7	; 11
    2e1c:	28 98       	cbi	0x05, 0	; 5
    2e1e:	5e 98       	cbi	0x0b, 6	; 11
    2e20:	2f ef       	ldi	r18, 0xFF	; 255
    2e22:	89 ef       	ldi	r24, 0xF9	; 249
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	21 50       	subi	r18, 0x01	; 1
    2e28:	80 40       	sbci	r24, 0x00	; 0
    2e2a:	90 40       	sbci	r25, 0x00	; 0
    2e2c:	e1 f7       	brne	.-8      	; 0x2e26 <LCD_Setup+0x22>
    2e2e:	00 c0       	rjmp	.+0      	; 0x2e30 <LCD_Setup+0x2c>
    2e30:	00 00       	nop
    2e32:	80 e3       	ldi	r24, 0x30	; 48
    2e34:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_SendCommandHigh>
    2e38:	8f e3       	ldi	r24, 0x3F	; 63
    2e3a:	9c e9       	ldi	r25, 0x9C	; 156
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <LCD_Setup+0x38>
    2e40:	00 c0       	rjmp	.+0      	; 0x2e42 <LCD_Setup+0x3e>
    2e42:	00 00       	nop
    2e44:	80 e3       	ldi	r24, 0x30	; 48
    2e46:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_SendCommandHigh>
    2e4a:	8f e9       	ldi	r24, 0x9F	; 159
    2e4c:	9f e0       	ldi	r25, 0x0F	; 15
    2e4e:	01 97       	sbiw	r24, 0x01	; 1
    2e50:	f1 f7       	brne	.-4      	; 0x2e4e <LCD_Setup+0x4a>
    2e52:	00 c0       	rjmp	.+0      	; 0x2e54 <LCD_Setup+0x50>
    2e54:	00 00       	nop
    2e56:	80 e3       	ldi	r24, 0x30	; 48
    2e58:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_SendCommandHigh>
    2e5c:	8f e9       	ldi	r24, 0x9F	; 159
    2e5e:	9f e0       	ldi	r25, 0x0F	; 15
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	f1 f7       	brne	.-4      	; 0x2e60 <LCD_Setup+0x5c>
    2e64:	00 c0       	rjmp	.+0      	; 0x2e66 <LCD_Setup+0x62>
    2e66:	00 00       	nop
    2e68:	80 e2       	ldi	r24, 0x20	; 32
    2e6a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_SendCommandHigh>
    2e6e:	88 e2       	ldi	r24, 0x28	; 40
    2e70:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_SendCommand>
    2e74:	8c e0       	ldi	r24, 0x0C	; 12
    2e76:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_SendCommand>
    2e7a:	86 e0       	ldi	r24, 0x06	; 6
    2e7c:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_SendCommand>
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_SendCommand>
    2e86:	08 95       	ret

00002e88 <LCD_SendData>:
    2e88:	cf 93       	push	r28
    2e8a:	c8 2f       	mov	r28, r24
    2e8c:	0e 94 d6 16 	call	0x2dac	; 0x2dac <LCD_WaitBusy>
    2e90:	5f 9a       	sbi	0x0b, 7	; 11
    2e92:	8c 2f       	mov	r24, r28
    2e94:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <LCD_Send>
    2e98:	cf 91       	pop	r28
    2e9a:	08 95       	ret

00002e9c <LCD_Clear>:
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_SendCommand>
    2ea2:	08 95       	ret

00002ea4 <LCD_GotoXY>:
    2ea4:	80 31       	cpi	r24, 0x10	; 16
    2ea6:	58 f4       	brcc	.+22     	; 0x2ebe <LCD_GotoXY+0x1a>
    2ea8:	62 30       	cpi	r22, 0x02	; 2
    2eaa:	48 f4       	brcc	.+18     	; 0x2ebe <LCD_GotoXY+0x1a>
    2eac:	61 30       	cpi	r22, 0x01	; 1
    2eae:	11 f4       	brne	.+4      	; 0x2eb4 <LCD_GotoXY+0x10>
    2eb0:	90 e4       	ldi	r25, 0x40	; 64
    2eb2:	01 c0       	rjmp	.+2      	; 0x2eb6 <LCD_GotoXY+0x12>
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	80 68       	ori	r24, 0x80	; 128
    2eb8:	89 2b       	or	r24, r25
    2eba:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_SendCommand>
    2ebe:	08 95       	ret

00002ec0 <LCD_PrintString>:
    2ec0:	cf 93       	push	r28
    2ec2:	df 93       	push	r29
    2ec4:	ec 01       	movw	r28, r24
    2ec6:	88 81       	ld	r24, Y
    2ec8:	88 23       	and	r24, r24
    2eca:	31 f0       	breq	.+12     	; 0x2ed8 <LCD_PrintString+0x18>
    2ecc:	21 96       	adiw	r28, 0x01	; 1
    2ece:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_SendData>
    2ed2:	89 91       	ld	r24, Y+
    2ed4:	81 11       	cpse	r24, r1
    2ed6:	fb cf       	rjmp	.-10     	; 0x2ece <LCD_PrintString+0xe>
    2ed8:	df 91       	pop	r29
    2eda:	cf 91       	pop	r28
    2edc:	08 95       	ret

00002ede <LCD_PrintInteger>:

//Print integer.
void LCD_PrintInteger(int32_t Value)
{
    2ede:	1f 93       	push	r17
    2ee0:	cf 93       	push	r28
    2ee2:	df 93       	push	r29
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	2c 97       	sbiw	r28, 0x0c	; 12
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	f8 94       	cli
    2eee:	de bf       	out	0x3e, r29	; 62
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
	if (Value == 0 )
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	a1 05       	cpc	r26, r1
    2efc:	b1 05       	cpc	r27, r1
    2efe:	21 f4       	brne	.+8      	; 0x2f08 <LCD_PrintInteger+0x2a>
}

//Print character.
void LCD_PrintChar(char Character)
{
	LCD_SendData(Character);
    2f00:	80 e3       	ldi	r24, 0x30	; 48
    2f02:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_SendData>
    2f06:	37 c1       	rjmp	.+622    	; 0x3176 <LCD_PrintInteger+0x298>
{
	if (Value == 0 )
	{
		LCD_PrintChar('0');
	}
	else if ((Value > INT32_MIN ) && (Value <= INT32_MAX))
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	a1 05       	cpc	r26, r1
    2f0c:	20 e8       	ldi	r18, 0x80	; 128
    2f0e:	b2 07       	cpc	r27, r18
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <LCD_PrintInteger+0x36>
    2f12:	31 c1       	rjmp	.+610    	; 0x3176 <LCD_PrintInteger+0x298>
	{
		//int32_max + sign + null = 12 bytes
		char arr[12] = { '\0' };
    2f14:	ae 01       	movw	r20, r28
    2f16:	4f 5f       	subi	r20, 0xFF	; 255
    2f18:	5f 4f       	sbci	r21, 0xFF	; 255
    2f1a:	2c e0       	ldi	r18, 0x0C	; 12
    2f1c:	fa 01       	movw	r30, r20
    2f1e:	11 92       	st	Z+, r1
    2f20:	2a 95       	dec	r18
    2f22:	e9 f7       	brne	.-6      	; 0x2f1e <LCD_PrintInteger+0x40>
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
    2f24:	20 e3       	ldi	r18, 0x30	; 48
    2f26:	2b 87       	std	Y+11, r18	; 0x0b
    2f28:	2a 87       	std	Y+10, r18	; 0x0a
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
    2f2a:	29 87       	std	Y+9, r18	; 0x09
    2f2c:	28 87       	std	Y+8, r18	; 0x08
    2f2e:	2f 83       	std	Y+7, r18	; 0x07
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
    2f30:	2e 83       	std	Y+6, r18	; 0x06
    2f32:	2d 83       	std	Y+5, r18	; 0x05
    2f34:	2c 83       	std	Y+4, r18	; 0x04
//Converts integer value to BCD.
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
    2f36:	2b 83       	std	Y+3, r18	; 0x03
    2f38:	2a 83       	std	Y+2, r18	; 0x02
    2f3a:	29 83       	std	Y+1, r18	; 0x01
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    2f3c:	bb 23       	and	r27, r27
    2f3e:	4c f4       	brge	.+18     	; 0x2f52 <LCD_PrintInteger+0x74>
	{
		isNegative = 1;
		Value = -Value;
    2f40:	b0 95       	com	r27
    2f42:	a0 95       	com	r26
    2f44:	90 95       	com	r25
    2f46:	81 95       	neg	r24
    2f48:	9f 4f       	sbci	r25, 0xFF	; 255
    2f4a:	af 4f       	sbci	r26, 0xFF	; 255
    2f4c:	bf 4f       	sbci	r27, 0xFF	; 255
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
	{
		isNegative = 1;
    2f4e:	11 e0       	ldi	r17, 0x01	; 1
    2f50:	01 c0       	rjmp	.+2      	; 0x2f54 <LCD_PrintInteger+0x76>
}

//Converts integer value to BCD.
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
    2f52:	10 e0       	ldi	r17, 0x00	; 0
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    2f54:	81 30       	cpi	r24, 0x01	; 1
    2f56:	fa ec       	ldi	r31, 0xCA	; 202
    2f58:	9f 07       	cpc	r25, r31
    2f5a:	fa e9       	ldi	r31, 0x9A	; 154
    2f5c:	af 07       	cpc	r26, r31
    2f5e:	fb e3       	ldi	r31, 0x3B	; 59
    2f60:	bf 07       	cpc	r27, r31
    2f62:	8c f0       	brlt	.+34     	; 0x2f86 <LCD_PrintInteger+0xa8>
    2f64:	21 e3       	ldi	r18, 0x31	; 49
    2f66:	01 c0       	rjmp	.+2      	; 0x2f6a <LCD_PrintInteger+0x8c>
    2f68:	23 2f       	mov	r18, r19
	{
		Value -= 1000000000;
    2f6a:	9a 5c       	subi	r25, 0xCA	; 202
    2f6c:	aa 49       	sbci	r26, 0x9A	; 154
    2f6e:	bb 43       	sbci	r27, 0x3B	; 59
    2f70:	31 e0       	ldi	r19, 0x01	; 1
    2f72:	32 0f       	add	r19, r18
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    2f74:	81 30       	cpi	r24, 0x01	; 1
    2f76:	4a ec       	ldi	r20, 0xCA	; 202
    2f78:	94 07       	cpc	r25, r20
    2f7a:	4a e9       	ldi	r20, 0x9A	; 154
    2f7c:	a4 07       	cpc	r26, r20
    2f7e:	4b e3       	ldi	r20, 0x3B	; 59
    2f80:	b4 07       	cpc	r27, r20
    2f82:	94 f7       	brge	.-28     	; 0x2f68 <LCD_PrintInteger+0x8a>
    2f84:	2a 83       	std	Y+2, r18	; 0x02
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    2f86:	81 15       	cp	r24, r1
    2f88:	e1 ee       	ldi	r30, 0xE1	; 225
    2f8a:	9e 07       	cpc	r25, r30
    2f8c:	e5 ef       	ldi	r30, 0xF5	; 245
    2f8e:	ae 07       	cpc	r26, r30
    2f90:	e5 e0       	ldi	r30, 0x05	; 5
    2f92:	be 07       	cpc	r27, r30
    2f94:	8c f0       	brlt	.+34     	; 0x2fb8 <LCD_PrintInteger+0xda>
    2f96:	21 e3       	ldi	r18, 0x31	; 49
    2f98:	01 c0       	rjmp	.+2      	; 0x2f9c <LCD_PrintInteger+0xbe>
    2f9a:	23 2f       	mov	r18, r19
	{
		Value -= 100000000;
    2f9c:	91 5e       	subi	r25, 0xE1	; 225
    2f9e:	a5 4f       	sbci	r26, 0xF5	; 245
    2fa0:	b5 40       	sbci	r27, 0x05	; 5
    2fa2:	31 e0       	ldi	r19, 0x01	; 1
    2fa4:	32 0f       	add	r19, r18
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    2fa6:	81 15       	cp	r24, r1
    2fa8:	f1 ee       	ldi	r31, 0xE1	; 225
    2faa:	9f 07       	cpc	r25, r31
    2fac:	f5 ef       	ldi	r31, 0xF5	; 245
    2fae:	af 07       	cpc	r26, r31
    2fb0:	f5 e0       	ldi	r31, 0x05	; 5
    2fb2:	bf 07       	cpc	r27, r31
    2fb4:	94 f7       	brge	.-28     	; 0x2f9a <LCD_PrintInteger+0xbc>
    2fb6:	2b 83       	std	Y+3, r18	; 0x03
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    2fb8:	80 38       	cpi	r24, 0x80	; 128
    2fba:	26 e9       	ldi	r18, 0x96	; 150
    2fbc:	92 07       	cpc	r25, r18
    2fbe:	28 e9       	ldi	r18, 0x98	; 152
    2fc0:	a2 07       	cpc	r26, r18
    2fc2:	b1 05       	cpc	r27, r1
    2fc4:	8c f0       	brlt	.+34     	; 0x2fe8 <LCD_PrintInteger+0x10a>
    2fc6:	21 e3       	ldi	r18, 0x31	; 49
    2fc8:	01 c0       	rjmp	.+2      	; 0x2fcc <LCD_PrintInteger+0xee>
    2fca:	23 2f       	mov	r18, r19
	{
		Value -= 10000000;
    2fcc:	80 58       	subi	r24, 0x80	; 128
    2fce:	96 49       	sbci	r25, 0x96	; 150
    2fd0:	a8 49       	sbci	r26, 0x98	; 152
    2fd2:	b1 09       	sbc	r27, r1
    2fd4:	31 e0       	ldi	r19, 0x01	; 1
    2fd6:	32 0f       	add	r19, r18
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    2fd8:	80 38       	cpi	r24, 0x80	; 128
    2fda:	46 e9       	ldi	r20, 0x96	; 150
    2fdc:	94 07       	cpc	r25, r20
    2fde:	48 e9       	ldi	r20, 0x98	; 152
    2fe0:	a4 07       	cpc	r26, r20
    2fe2:	b1 05       	cpc	r27, r1
    2fe4:	94 f7       	brge	.-28     	; 0x2fca <LCD_PrintInteger+0xec>
    2fe6:	2c 83       	std	Y+4, r18	; 0x04
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    2fe8:	80 34       	cpi	r24, 0x40	; 64
    2fea:	e2 e4       	ldi	r30, 0x42	; 66
    2fec:	9e 07       	cpc	r25, r30
    2fee:	ef e0       	ldi	r30, 0x0F	; 15
    2ff0:	ae 07       	cpc	r26, r30
    2ff2:	b1 05       	cpc	r27, r1
    2ff4:	8c f0       	brlt	.+34     	; 0x3018 <LCD_PrintInteger+0x13a>
    2ff6:	21 e3       	ldi	r18, 0x31	; 49
    2ff8:	01 c0       	rjmp	.+2      	; 0x2ffc <LCD_PrintInteger+0x11e>
    2ffa:	23 2f       	mov	r18, r19
	{
		Value -= 1000000;
    2ffc:	80 54       	subi	r24, 0x40	; 64
    2ffe:	92 44       	sbci	r25, 0x42	; 66
    3000:	af 40       	sbci	r26, 0x0F	; 15
    3002:	b1 09       	sbc	r27, r1
    3004:	31 e0       	ldi	r19, 0x01	; 1
    3006:	32 0f       	add	r19, r18
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    3008:	80 34       	cpi	r24, 0x40	; 64
    300a:	f2 e4       	ldi	r31, 0x42	; 66
    300c:	9f 07       	cpc	r25, r31
    300e:	ff e0       	ldi	r31, 0x0F	; 15
    3010:	af 07       	cpc	r26, r31
    3012:	b1 05       	cpc	r27, r1
    3014:	94 f7       	brge	.-28     	; 0x2ffa <LCD_PrintInteger+0x11c>
    3016:	2d 83       	std	Y+5, r18	; 0x05
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    3018:	80 3a       	cpi	r24, 0xA0	; 160
    301a:	26 e8       	ldi	r18, 0x86	; 134
    301c:	92 07       	cpc	r25, r18
    301e:	21 e0       	ldi	r18, 0x01	; 1
    3020:	a2 07       	cpc	r26, r18
    3022:	b1 05       	cpc	r27, r1
    3024:	8c f0       	brlt	.+34     	; 0x3048 <LCD_PrintInteger+0x16a>
    3026:	21 e3       	ldi	r18, 0x31	; 49
    3028:	01 c0       	rjmp	.+2      	; 0x302c <LCD_PrintInteger+0x14e>
    302a:	23 2f       	mov	r18, r19
	{
		Value -= 100000;
    302c:	80 5a       	subi	r24, 0xA0	; 160
    302e:	96 48       	sbci	r25, 0x86	; 134
    3030:	a1 40       	sbci	r26, 0x01	; 1
    3032:	b1 09       	sbc	r27, r1
    3034:	31 e0       	ldi	r19, 0x01	; 1
    3036:	32 0f       	add	r19, r18
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    3038:	80 3a       	cpi	r24, 0xA0	; 160
    303a:	46 e8       	ldi	r20, 0x86	; 134
    303c:	94 07       	cpc	r25, r20
    303e:	41 e0       	ldi	r20, 0x01	; 1
    3040:	a4 07       	cpc	r26, r20
    3042:	b1 05       	cpc	r27, r1
    3044:	94 f7       	brge	.-28     	; 0x302a <LCD_PrintInteger+0x14c>
    3046:	2e 83       	std	Y+6, r18	; 0x06
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    3048:	80 31       	cpi	r24, 0x10	; 16
    304a:	e7 e2       	ldi	r30, 0x27	; 39
    304c:	9e 07       	cpc	r25, r30
    304e:	a1 05       	cpc	r26, r1
    3050:	b1 05       	cpc	r27, r1
    3052:	84 f0       	brlt	.+32     	; 0x3074 <LCD_PrintInteger+0x196>
    3054:	21 e3       	ldi	r18, 0x31	; 49
    3056:	01 c0       	rjmp	.+2      	; 0x305a <LCD_PrintInteger+0x17c>
    3058:	23 2f       	mov	r18, r19
	{
		Value -= 10000;
    305a:	80 51       	subi	r24, 0x10	; 16
    305c:	97 42       	sbci	r25, 0x27	; 39
    305e:	a1 09       	sbc	r26, r1
    3060:	b1 09       	sbc	r27, r1
    3062:	31 e0       	ldi	r19, 0x01	; 1
    3064:	32 0f       	add	r19, r18
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    3066:	80 31       	cpi	r24, 0x10	; 16
    3068:	f7 e2       	ldi	r31, 0x27	; 39
    306a:	9f 07       	cpc	r25, r31
    306c:	a1 05       	cpc	r26, r1
    306e:	b1 05       	cpc	r27, r1
    3070:	9c f7       	brge	.-26     	; 0x3058 <LCD_PrintInteger+0x17a>
    3072:	2f 83       	std	Y+7, r18	; 0x07
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    3074:	88 3e       	cpi	r24, 0xE8	; 232
    3076:	23 e0       	ldi	r18, 0x03	; 3
    3078:	92 07       	cpc	r25, r18
    307a:	a1 05       	cpc	r26, r1
    307c:	b1 05       	cpc	r27, r1
    307e:	84 f0       	brlt	.+32     	; 0x30a0 <LCD_PrintInteger+0x1c2>
    3080:	21 e3       	ldi	r18, 0x31	; 49
    3082:	01 c0       	rjmp	.+2      	; 0x3086 <LCD_PrintInteger+0x1a8>
    3084:	23 2f       	mov	r18, r19
	{
		Value -= 1000;
    3086:	88 5e       	subi	r24, 0xE8	; 232
    3088:	93 40       	sbci	r25, 0x03	; 3
    308a:	a1 09       	sbc	r26, r1
    308c:	b1 09       	sbc	r27, r1
    308e:	31 e0       	ldi	r19, 0x01	; 1
    3090:	32 0f       	add	r19, r18
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    3092:	88 3e       	cpi	r24, 0xE8	; 232
    3094:	43 e0       	ldi	r20, 0x03	; 3
    3096:	94 07       	cpc	r25, r20
    3098:	a1 05       	cpc	r26, r1
    309a:	b1 05       	cpc	r27, r1
    309c:	9c f7       	brge	.-26     	; 0x3084 <LCD_PrintInteger+0x1a6>
    309e:	28 87       	std	Y+8, r18	; 0x08
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    30a0:	84 36       	cpi	r24, 0x64	; 100
    30a2:	91 05       	cpc	r25, r1
    30a4:	a1 05       	cpc	r26, r1
    30a6:	b1 05       	cpc	r27, r1
    30a8:	7c f0       	brlt	.+30     	; 0x30c8 <LCD_PrintInteger+0x1ea>
    30aa:	21 e3       	ldi	r18, 0x31	; 49
    30ac:	01 c0       	rjmp	.+2      	; 0x30b0 <LCD_PrintInteger+0x1d2>
    30ae:	23 2f       	mov	r18, r19
	{
		Value -= 100;
    30b0:	84 56       	subi	r24, 0x64	; 100
    30b2:	91 09       	sbc	r25, r1
    30b4:	a1 09       	sbc	r26, r1
    30b6:	b1 09       	sbc	r27, r1
    30b8:	31 e0       	ldi	r19, 0x01	; 1
    30ba:	32 0f       	add	r19, r18
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    30bc:	84 36       	cpi	r24, 0x64	; 100
    30be:	91 05       	cpc	r25, r1
    30c0:	a1 05       	cpc	r26, r1
    30c2:	b1 05       	cpc	r27, r1
    30c4:	a4 f7       	brge	.-24     	; 0x30ae <LCD_PrintInteger+0x1d0>
    30c6:	29 87       	std	Y+9, r18	; 0x09
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    30c8:	8a 30       	cpi	r24, 0x0A	; 10
    30ca:	91 05       	cpc	r25, r1
    30cc:	a1 05       	cpc	r26, r1
    30ce:	b1 05       	cpc	r27, r1
    30d0:	74 f0       	brlt	.+28     	; 0x30ee <LCD_PrintInteger+0x210>
    30d2:	21 e3       	ldi	r18, 0x31	; 49
    30d4:	01 c0       	rjmp	.+2      	; 0x30d8 <LCD_PrintInteger+0x1fa>
    30d6:	23 2f       	mov	r18, r19
	{
		Value -= 10;
    30d8:	0a 97       	sbiw	r24, 0x0a	; 10
    30da:	a1 09       	sbc	r26, r1
    30dc:	b1 09       	sbc	r27, r1
    30de:	31 e0       	ldi	r19, 0x01	; 1
    30e0:	32 0f       	add	r19, r18
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    30e2:	8a 30       	cpi	r24, 0x0A	; 10
    30e4:	91 05       	cpc	r25, r1
    30e6:	a1 05       	cpc	r26, r1
    30e8:	b1 05       	cpc	r27, r1
    30ea:	ac f7       	brge	.-22     	; 0x30d6 <LCD_PrintInteger+0x1f8>
    30ec:	2a 87       	std	Y+10, r18	; 0x0a
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    30ee:	18 16       	cp	r1, r24
    30f0:	19 06       	cpc	r1, r25
    30f2:	1a 06       	cpc	r1, r26
    30f4:	1b 06       	cpc	r1, r27
    30f6:	0c f0       	brlt	.+2      	; 0x30fa <LCD_PrintInteger+0x21c>
    30f8:	3c c0       	rjmp	.+120    	; 0x3172 <LCD_PrintInteger+0x294>
    30fa:	ac 01       	movw	r20, r24
    30fc:	bd 01       	movw	r22, r26
	{
		Value -= 1;
    30fe:	41 50       	subi	r20, 0x01	; 1
    3100:	51 09       	sbc	r21, r1
    3102:	61 09       	sbc	r22, r1
    3104:	71 09       	sbc	r23, r1
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    3106:	d9 f7       	brne	.-10     	; 0x30fe <LCD_PrintInteger+0x220>
    3108:	80 5d       	subi	r24, 0xD0	; 208
    310a:	8b 87       	std	Y+11, r24	; 0x0b
    310c:	32 c0       	rjmp	.+100    	; 0x3172 <LCD_PrintInteger+0x294>
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
		i++;
    310e:	98 2f       	mov	r25, r24
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	89 0f       	add	r24, r25
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    3114:	e1 e0       	ldi	r30, 0x01	; 1
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	ec 0f       	add	r30, r28
    311a:	fd 1f       	adc	r31, r29
    311c:	e8 0f       	add	r30, r24
    311e:	f1 1d       	adc	r31, r1
    3120:	20 81       	ld	r18, Z
    3122:	20 33       	cpi	r18, 0x30	; 48
    3124:	a1 f3       	breq	.-24     	; 0x310e <LCD_PrintInteger+0x230>
		i++;

	//Add sign 
	if (isNegative)
    3126:	11 23       	and	r17, r17
    3128:	31 f0       	breq	.+12     	; 0x3136 <LCD_PrintInteger+0x258>
	{
		i--;
		BCD[i] = '-';
    312a:	fe 01       	movw	r30, r28
    312c:	e9 0f       	add	r30, r25
    312e:	f1 1d       	adc	r31, r1
    3130:	8d e2       	ldi	r24, 0x2D	; 45
    3132:	81 83       	std	Z+1, r24	; 0x01
    3134:	89 2f       	mov	r24, r25
	}

	//Shift array
	uint8_t end = 10 - i;
    3136:	4a e0       	ldi	r20, 0x0A	; 10
    3138:	48 1b       	sub	r20, r24
	uint8_t offset = i;
	i = 0;
    313a:	20 e0       	ldi	r18, 0x00	; 0
	while (i <= end)
	{
		BCD[i] = BCD[i + offset];
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	e1 e0       	ldi	r30, 0x01	; 1
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	ec 0f       	add	r30, r28
    3144:	fd 1f       	adc	r31, r29
    3146:	e2 0f       	add	r30, r18
    3148:	f1 1d       	adc	r31, r1
    314a:	df 01       	movw	r26, r30
    314c:	a8 0f       	add	r26, r24
    314e:	b9 1f       	adc	r27, r25
    3150:	3c 91       	ld	r19, X
    3152:	30 83       	st	Z, r19
		i++;
    3154:	2f 5f       	subi	r18, 0xFF	; 255

	//Shift array
	uint8_t end = 10 - i;
	uint8_t offset = i;
	i = 0;
	while (i <= end)
    3156:	42 17       	cp	r20, r18
    3158:	90 f7       	brcc	.-28     	; 0x313e <LCD_PrintInteger+0x260>
	{
		BCD[i] = BCD[i + offset];
		i++;
	}
	BCD[i] = '\0';
    315a:	e1 e0       	ldi	r30, 0x01	; 1
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	ec 0f       	add	r30, r28
    3160:	fd 1f       	adc	r31, r29
    3162:	e2 0f       	add	r30, r18
    3164:	f1 1d       	adc	r31, r1
    3166:	10 82       	st	Z, r1
		
		//Convert integer to array (returns in reversed order)
		Int2bcd(Value, arr);
		
		//Print
		LCD_PrintString(arr);
    3168:	ce 01       	movw	r24, r28
    316a:	01 96       	adiw	r24, 0x01	; 1
    316c:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_PrintString>
	}
}
    3170:	02 c0       	rjmp	.+4      	; 0x3176 <LCD_PrintInteger+0x298>
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	cd cf       	rjmp	.-102    	; 0x3110 <LCD_PrintInteger+0x232>
		Int2bcd(Value, arr);
		
		//Print
		LCD_PrintString(arr);
	}
}
    3176:	2c 96       	adiw	r28, 0x0c	; 12
    3178:	0f b6       	in	r0, 0x3f	; 63
    317a:	f8 94       	cli
    317c:	de bf       	out	0x3e, r29	; 62
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	cd bf       	out	0x3d, r28	; 61
    3182:	df 91       	pop	r29
    3184:	cf 91       	pop	r28
    3186:	1f 91       	pop	r17
    3188:	08 95       	ret

0000318a <USART_Init>:
uint8_t append_string_with_limits(char *string, char *string_to_append, char max_size){
	
	char *p = string + strlen(string);
	strcpy(p, string_to_append);
	return 1;
}
    318a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    318e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    3192:	e0 ec       	ldi	r30, 0xC0	; 192
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	82 60       	ori	r24, 0x02	; 2
    319a:	80 83       	st	Z, r24
    319c:	88 e1       	ldi	r24, 0x18	; 24
    319e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    31a2:	86 e0       	ldi	r24, 0x06	; 6
    31a4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    31a8:	08 95       	ret

000031aa <USART_Transmit>:
    31aa:	e0 ec       	ldi	r30, 0xC0	; 192
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	90 81       	ld	r25, Z
    31b0:	95 ff       	sbrs	r25, 5
    31b2:	fd cf       	rjmp	.-6      	; 0x31ae <USART_Transmit+0x4>
    31b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    31b8:	08 95       	ret

000031ba <uart_puts>:
    31ba:	cf 93       	push	r28
    31bc:	df 93       	push	r29
    31be:	ec 01       	movw	r28, r24
    31c0:	88 81       	ld	r24, Y
    31c2:	88 23       	and	r24, r24
    31c4:	31 f0       	breq	.+12     	; 0x31d2 <uart_puts+0x18>
    31c6:	21 96       	adiw	r28, 0x01	; 1
    31c8:	0e 94 d5 18 	call	0x31aa	; 0x31aa <USART_Transmit>
    31cc:	89 91       	ld	r24, Y+
    31ce:	81 11       	cpse	r24, r1
    31d0:	fb cf       	rjmp	.-10     	; 0x31c8 <uart_puts+0xe>
    31d2:	df 91       	pop	r29
    31d4:	cf 91       	pop	r28
    31d6:	08 95       	ret

000031d8 <uart_puts_P>:
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	ec 01       	movw	r28, r24
    31de:	fc 01       	movw	r30, r24
    31e0:	84 91       	lpm	r24, Z
    31e2:	88 23       	and	r24, r24
    31e4:	49 f0       	breq	.+18     	; 0x31f8 <uart_puts_P+0x20>
    31e6:	fe 01       	movw	r30, r28
    31e8:	21 96       	adiw	r28, 0x01	; 1
    31ea:	84 91       	lpm	r24, Z
    31ec:	0e 94 d5 18 	call	0x31aa	; 0x31aa <USART_Transmit>
    31f0:	fe 01       	movw	r30, r28
    31f2:	84 91       	lpm	r24, Z
    31f4:	81 11       	cpse	r24, r1
    31f6:	f7 cf       	rjmp	.-18     	; 0x31e6 <uart_puts_P+0xe>
    31f8:	df 91       	pop	r29
    31fa:	cf 91       	pop	r28
    31fc:	08 95       	ret

000031fe <uart_puts_rn_P>:
    31fe:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <uart_puts_P>
    3202:	8a e2       	ldi	r24, 0x2A	; 42
    3204:	91 e0       	ldi	r25, 0x01	; 1
    3206:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <uart_puts_P>
    320a:	08 95       	ret

0000320c <uart_puts_with_length>:
    320c:	0f 93       	push	r16
    320e:	1f 93       	push	r17
    3210:	cf 93       	push	r28
    3212:	df 93       	push	r29
    3214:	fc 01       	movw	r30, r24
    3216:	eb 01       	movw	r28, r22
    3218:	80 81       	ld	r24, Z
    321a:	88 23       	and	r24, r24
    321c:	79 f0       	breq	.+30     	; 0x323c <uart_puts_with_length+0x30>
    321e:	20 97       	sbiw	r28, 0x00	; 0
    3220:	69 f0       	breq	.+26     	; 0x323c <uart_puts_with_length+0x30>
    3222:	8f 01       	movw	r16, r30
    3224:	0f 5f       	subi	r16, 0xFF	; 255
    3226:	1f 4f       	sbci	r17, 0xFF	; 255
    3228:	0e 94 d5 18 	call	0x31aa	; 0x31aa <USART_Transmit>
    322c:	21 97       	sbiw	r28, 0x01	; 1
    322e:	f8 01       	movw	r30, r16
    3230:	81 91       	ld	r24, Z+
    3232:	8f 01       	movw	r16, r30
    3234:	88 23       	and	r24, r24
    3236:	11 f0       	breq	.+4      	; 0x323c <uart_puts_with_length+0x30>
    3238:	20 97       	sbiw	r28, 0x00	; 0
    323a:	b1 f7       	brne	.-20     	; 0x3228 <uart_puts_with_length+0x1c>
    323c:	df 91       	pop	r29
    323e:	cf 91       	pop	r28
    3240:	1f 91       	pop	r17
    3242:	0f 91       	pop	r16
    3244:	08 95       	ret

00003246 <uart_puts_rn>:
    3246:	0e 94 dd 18 	call	0x31ba	; 0x31ba <uart_puts>
    324a:	81 eb       	ldi	r24, 0xB1	; 177
    324c:	91 e0       	ldi	r25, 0x01	; 1
    324e:	0e 94 dd 18 	call	0x31ba	; 0x31ba <uart_puts>
    3252:	08 95       	ret

00003254 <Sent_error_message_P>:
    3254:	0f 93       	push	r16
    3256:	1f 93       	push	r17
    3258:	cf 93       	push	r28
    325a:	df 93       	push	r29
    325c:	00 d0       	rcall	.+0      	; 0x325e <Sent_error_message_P+0xa>
    325e:	00 d0       	rcall	.+0      	; 0x3260 <Sent_error_message_P+0xc>
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
    3264:	8b 01       	movw	r16, r22
    3266:	81 11       	cpse	r24, r1
    3268:	08 c0       	rjmp	.+16     	; 0x327a <Sent_error_message_P+0x26>
    326a:	cb 01       	movw	r24, r22
    326c:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <uart_puts_P>
    3270:	83 e1       	ldi	r24, 0x13	; 19
    3272:	91 e0       	ldi	r25, 0x01	; 1
    3274:	0e 94 ff 18 	call	0x31fe	; 0x31fe <uart_puts_rn_P>
    3278:	12 c0       	rjmp	.+36     	; 0x329e <Sent_error_message_P+0x4a>
    327a:	4a e0       	ldi	r20, 0x0A	; 10
    327c:	be 01       	movw	r22, r28
    327e:	6f 5f       	subi	r22, 0xFF	; 255
    3280:	7f 4f       	sbci	r23, 0xFF	; 255
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <__itoa_ncheck>
    3288:	c8 01       	movw	r24, r16
    328a:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <uart_puts_P>
    328e:	8d ef       	ldi	r24, 0xFD	; 253
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <uart_puts_P>
    3296:	ce 01       	movw	r24, r28
    3298:	01 96       	adiw	r24, 0x01	; 1
    329a:	0e 94 23 19 	call	0x3246	; 0x3246 <uart_puts_rn>
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	df 91       	pop	r29
    32a8:	cf 91       	pop	r28
    32aa:	1f 91       	pop	r17
    32ac:	0f 91       	pop	r16
    32ae:	08 95       	ret

000032b0 <init_timer>:
    32b0:	82 e0       	ldi	r24, 0x02	; 2
    32b2:	84 bd       	out	0x24, r24	; 36
    32b4:	95 e0       	ldi	r25, 0x05	; 5
    32b6:	95 bd       	out	0x25, r25	; 37
    32b8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    32bc:	8c e7       	ldi	r24, 0x7C	; 124
    32be:	87 bd       	out	0x27, r24	; 39
    32c0:	78 94       	sei
    32c2:	08 95       	ret

000032c4 <adc_init>:
    32c4:	85 ec       	ldi	r24, 0xC5	; 197
    32c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    32ca:	87 e8       	ldi	r24, 0x87	; 135
    32cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    32d0:	08 95       	ret

000032d2 <__vector_21>:
    32d2:	1f 92       	push	r1
    32d4:	0f 92       	push	r0
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	0f 92       	push	r0
    32da:	11 24       	eor	r1, r1
    32dc:	2f 93       	push	r18
    32de:	3f 93       	push	r19
    32e0:	4f 93       	push	r20
    32e2:	5f 93       	push	r21
    32e4:	6f 93       	push	r22
    32e6:	7f 93       	push	r23
    32e8:	8f 93       	push	r24
    32ea:	9f 93       	push	r25
    32ec:	af 93       	push	r26
    32ee:	bf 93       	push	r27
    32f0:	ef 93       	push	r30
    32f2:	ff 93       	push	r31
    32f4:	0e 94 08 01 	call	0x210	; 0x210 <run_next_step_state_func_ADC>
    32f8:	ff 91       	pop	r31
    32fa:	ef 91       	pop	r30
    32fc:	bf 91       	pop	r27
    32fe:	af 91       	pop	r26
    3300:	9f 91       	pop	r25
    3302:	8f 91       	pop	r24
    3304:	7f 91       	pop	r23
    3306:	6f 91       	pop	r22
    3308:	5f 91       	pop	r21
    330a:	4f 91       	pop	r20
    330c:	3f 91       	pop	r19
    330e:	2f 91       	pop	r18
    3310:	0f 90       	pop	r0
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	0f 90       	pop	r0
    3316:	1f 90       	pop	r1
    3318:	18 95       	reti

0000331a <__vector_14>:
    331a:	1f 92       	push	r1
    331c:	0f 92       	push	r0
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	0f 92       	push	r0
    3322:	11 24       	eor	r1, r1
    3324:	2f 93       	push	r18
    3326:	3f 93       	push	r19
    3328:	4f 93       	push	r20
    332a:	5f 93       	push	r21
    332c:	6f 93       	push	r22
    332e:	7f 93       	push	r23
    3330:	8f 93       	push	r24
    3332:	9f 93       	push	r25
    3334:	af 93       	push	r26
    3336:	bf 93       	push	r27
    3338:	ef 93       	push	r30
    333a:	ff 93       	push	r31
    333c:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <licznik>
    3340:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <licznik+0x1>
    3344:	01 96       	adiw	r24, 0x01	; 1
    3346:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <licznik+0x1>
    334a:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <licznik>
    334e:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <licznik_32bit>
    3352:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <licznik_32bit+0x1>
    3356:	a0 91 d2 01 	lds	r26, 0x01D2	; 0x8001d2 <licznik_32bit+0x2>
    335a:	b0 91 d3 01 	lds	r27, 0x01D3	; 0x8001d3 <licznik_32bit+0x3>
    335e:	01 96       	adiw	r24, 0x01	; 1
    3360:	a1 1d       	adc	r26, r1
    3362:	b1 1d       	adc	r27, r1
    3364:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <licznik_32bit>
    3368:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <licznik_32bit+0x1>
    336c:	a0 93 d2 01 	sts	0x01D2, r26	; 0x8001d2 <licznik_32bit+0x2>
    3370:	b0 93 d3 01 	sts	0x01D3, r27	; 0x8001d3 <licznik_32bit+0x3>
    3374:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <licznik>
    3378:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <licznik+0x1>
    337c:	8d 37       	cpi	r24, 0x7D	; 125
    337e:	91 05       	cpc	r25, r1
    3380:	30 f0       	brcs	.+12     	; 0x338e <__vector_14+0x74>
    3382:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <licznik+0x1>
    3386:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <licznik>
    338a:	0e 94 c6 00 	call	0x18c	; 0x18c <start_measure_current_ADC>
    338e:	ff 91       	pop	r31
    3390:	ef 91       	pop	r30
    3392:	bf 91       	pop	r27
    3394:	af 91       	pop	r26
    3396:	9f 91       	pop	r25
    3398:	8f 91       	pop	r24
    339a:	7f 91       	pop	r23
    339c:	6f 91       	pop	r22
    339e:	5f 91       	pop	r21
    33a0:	4f 91       	pop	r20
    33a2:	3f 91       	pop	r19
    33a4:	2f 91       	pop	r18
    33a6:	0f 90       	pop	r0
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	0f 90       	pop	r0
    33ac:	1f 90       	pop	r1
    33ae:	18 95       	reti

000033b0 <append_string>:
    33b0:	fc 01       	movw	r30, r24
    33b2:	01 90       	ld	r0, Z+
    33b4:	00 20       	and	r0, r0
    33b6:	e9 f7       	brne	.-6      	; 0x33b2 <append_string+0x2>
    33b8:	cf 01       	movw	r24, r30
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <strcpy>
    33c0:	08 95       	ret

000033c2 <main>:
				uint32_t licznik2;
				uint16_t adc2;
				//char string_to_sd3[64];
				uint8_t Error2;
int main (void) // clock 16 Mhz
{
    33c2:	cf 93       	push	r28
    33c4:	df 93       	push	r29
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
    33ca:	ce 5b       	subi	r28, 0xBE	; 190
    33cc:	d1 09       	sbc	r29, r1
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	f8 94       	cli
    33d2:	de bf       	out	0x3e, r29	; 62
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	cd bf       	out	0x3d, r28	; 61
	//PORTC &= ~(1<<PORTC5);
	licznik_32bit = 0;
    33d8:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <licznik_32bit>
    33dc:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <licznik_32bit+0x1>
    33e0:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <licznik_32bit+0x2>
    33e4:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <licznik_32bit+0x3>
	flag_adc_conversion_done = 0;
    33e8:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <flag_adc_conversion_done>
	LCD_Setup();
    33ec:	0e 94 02 17 	call	0x2e04	; 0x2e04 <LCD_Setup>
		
	//Print
	uint8_t line;
	for (line = 0; line < 2; line++)
	{
		LCD_GotoXY(0, line);
    33f0:	60 e0       	ldi	r22, 0x00	; 0
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCD_GotoXY>
		LCD_PrintString("Line: ");
    33f8:	8a e9       	ldi	r24, 0x9A	; 154
    33fa:	91 e0       	ldi	r25, 0x01	; 1
    33fc:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_PrintString>
		LCD_PrintInteger(timer);
    3400:	60 e0       	ldi	r22, 0x00	; 0
    3402:	70 e0       	ldi	r23, 0x00	; 0
    3404:	cb 01       	movw	r24, r22
    3406:	0e 94 6f 17 	call	0x2ede	; 0x2ede <LCD_PrintInteger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    340a:	2f ef       	ldi	r18, 0xFF	; 255
    340c:	89 e6       	ldi	r24, 0x69	; 105
    340e:	98 e1       	ldi	r25, 0x18	; 24
    3410:	21 50       	subi	r18, 0x01	; 1
    3412:	80 40       	sbci	r24, 0x00	; 0
    3414:	90 40       	sbci	r25, 0x00	; 0
    3416:	e1 f7       	brne	.-8      	; 0x3410 <main+0x4e>
    3418:	00 c0       	rjmp	.+0      	; 0x341a <main+0x58>
    341a:	00 00       	nop
		
	//Print
	uint8_t line;
	for (line = 0; line < 2; line++)
	{
		LCD_GotoXY(0, line);
    341c:	61 e0       	ldi	r22, 0x01	; 1
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCD_GotoXY>
		LCD_PrintString("Line: ");
    3424:	8a e9       	ldi	r24, 0x9A	; 154
    3426:	91 e0       	ldi	r25, 0x01	; 1
    3428:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_PrintString>
		LCD_PrintInteger(timer);
    342c:	61 e0       	ldi	r22, 0x01	; 1
    342e:	70 e0       	ldi	r23, 0x00	; 0
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	0e 94 6f 17 	call	0x2ede	; 0x2ede <LCD_PrintInteger>
    3438:	ef ef       	ldi	r30, 0xFF	; 255
    343a:	f9 e6       	ldi	r31, 0x69	; 105
    343c:	28 e1       	ldi	r18, 0x18	; 24
    343e:	e1 50       	subi	r30, 0x01	; 1
    3440:	f0 40       	sbci	r31, 0x00	; 0
    3442:	20 40       	sbci	r18, 0x00	; 0
    3444:	e1 f7       	brne	.-8      	; 0x343e <main+0x7c>
    3446:	00 c0       	rjmp	.+0      	; 0x3448 <main+0x86>
    3448:	00 00       	nop
    344a:	8f ef       	ldi	r24, 0xFF	; 255
    344c:	99 e6       	ldi	r25, 0x69	; 105
    344e:	e8 e1       	ldi	r30, 0x18	; 24
    3450:	81 50       	subi	r24, 0x01	; 1
    3452:	90 40       	sbci	r25, 0x00	; 0
    3454:	e0 40       	sbci	r30, 0x00	; 0
    3456:	e1 f7       	brne	.-8      	; 0x3450 <main+0x8e>
    3458:	00 c0       	rjmp	.+0      	; 0x345a <main+0x98>
    345a:	00 00       	nop


	//CLKPR  = 1<<CLKPCE; //change clock to 8 Mhz
	//CLKPR  = 1<<CLKPS0;
	//USART_Init_Baud_Rate( 38400 ); // do not work at very high baud rate
	USART_Init(1); //Use this when you want to get very very high baud rate
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	0e 94 c5 18 	call	0x318a	; 0x318a <USART_Init>


	//uart_puts_rn("Arduino Booted");
	//uart_puts_P(PSTR("\r\n Arduino Booted \r\n"));
	uart_puts_rn_P(PSTR("\r\n Arduino Booted"));
    3464:	8b ee       	ldi	r24, 0xEB	; 235
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	0e 94 ff 18 	call	0x31fe	; 0x31fe <uart_puts_rn_P>
	adc_init();
    346c:	0e 94 62 19 	call	0x32c4	; 0x32c4 <adc_init>
// 	while(1){
// 		_delay_ms(500);
// 		start_conversion_synchro();
// 	}
	
init_timer();
    3470:	0e 94 58 19 	call	0x32b0	; 0x32b0 <init_timer>
    3474:	ff ef       	ldi	r31, 0xFF	; 255
    3476:	23 e2       	ldi	r18, 0x23	; 35
    3478:	84 ef       	ldi	r24, 0xF4	; 244
    347a:	f1 50       	subi	r31, 0x01	; 1
    347c:	20 40       	sbci	r18, 0x00	; 0
    347e:	80 40       	sbci	r24, 0x00	; 0
    3480:	e1 f7       	brne	.-8      	; 0x347a <main+0xb8>
    3482:	00 c0       	rjmp	.+0      	; 0x3484 <main+0xc2>
    3484:	00 00       	nop
	//SET_LED_ON();
	_delay_ms(5000);
	//SET_LED_OFF();

	FRESULT fr;
	f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
    3486:	40 e0       	ldi	r20, 0x00	; 0
    3488:	63 eb       	ldi	r22, 0xB3	; 179
    348a:	71 e0       	ldi	r23, 0x01	; 1
    348c:	82 e5       	ldi	r24, 0x52	; 82
    348e:	92 e0       	ldi	r25, 0x02	; 2
    3490:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <f_mount>
// }
// 
// 
// 
 	//fr = f_open(&Fil, "WRITE2.TXT", FA_WRITE | FA_OPEN_APPEND | FA_READ);	/* Create a file */
	 fr = f_open(&Fil, "WRITE2.TXT", FA_WRITE | FA_CREATE_ALWAYS );
    3494:	4a e0       	ldi	r20, 0x0A	; 10
    3496:	61 ea       	ldi	r22, 0xA1	; 161
    3498:	71 e0       	ldi	r23, 0x01	; 1
    349a:	8f e6       	ldi	r24, 0x6F	; 111
    349c:	95 e0       	ldi	r25, 0x05	; 5
    349e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <f_open>
    34a2:	18 2f       	mov	r17, r24
 	//Sent_error_message(fr, "File open WRITE2.TXT");
	Sent_error_message_P(fr, PSTR("File open WRITE2.TXT"));
    34a4:	66 ed       	ldi	r22, 0xD6	; 214
    34a6:	70 e0       	ldi	r23, 0x00	; 0
    34a8:	0e 94 2a 19 	call	0x3254	; 0x3254 <Sent_error_message_P>
 	if (fr == FR_OK) {
    34ac:	11 11       	cpse	r17, r1
    34ae:	3a c0       	rjmp	.+116    	; 0x3524 <main+0x162>
// 		//if (fr == FR_OK && Bytes_Written == 11) {		/* Lights green LED if data written well */
// 		//	uart_puts_rn("Write to file succesfully");
// 			//DDRB |= (1<<5); PORTB |= (1<<5);	/* Set PB4 high */
// 		//}
// 		
 		fr = f_rewind(&Fil);
    34b0:	40 e0       	ldi	r20, 0x00	; 0
    34b2:	50 e0       	ldi	r21, 0x00	; 0
    34b4:	ba 01       	movw	r22, r20
    34b6:	8f e6       	ldi	r24, 0x6F	; 111
    34b8:	95 e0       	ldi	r25, 0x05	; 5
    34ba:	0e 94 6f 14 	call	0x28de	; 0x28de <f_lseek>
		//Sent_error_message(fr, "Rewind file");
		Sent_error_message_P(fr, PSTR("Rewind file"));
    34be:	6a ec       	ldi	r22, 0xCA	; 202
    34c0:	70 e0       	ldi	r23, 0x00	; 0
    34c2:	0e 94 2a 19 	call	0x3254	; 0x3254 <Sent_error_message_P>
 		
		UINT Bytes_to_read = 128;
		UINT Bytes_readed = 0;
    34c6:	c9 54       	subi	r28, 0x49	; 73
    34c8:	df 4f       	sbci	r29, 0xFF	; 255
    34ca:	19 82       	std	Y+1, r1	; 0x01
    34cc:	18 82       	st	Y, r1
    34ce:	c7 5b       	subi	r28, 0xB7	; 183
    34d0:	d0 40       	sbci	r29, 0x00	; 0
		do 
		{
			
			BYTE Buff[150];

			fr = f_read ( &Fil, Buff, Bytes_to_read, &Bytes_readed);
    34d2:	9e 01       	movw	r18, r28
    34d4:	29 54       	subi	r18, 0x49	; 73
    34d6:	3f 4f       	sbci	r19, 0xFF	; 255
    34d8:	40 e8       	ldi	r20, 0x80	; 128
    34da:	50 e0       	ldi	r21, 0x00	; 0
    34dc:	be 01       	movw	r22, r28
    34de:	6f 5f       	subi	r22, 0xFF	; 255
    34e0:	7f 4f       	sbci	r23, 0xFF	; 255
    34e2:	8f e6       	ldi	r24, 0x6F	; 111
    34e4:	95 e0       	ldi	r25, 0x05	; 5
    34e6:	0e 94 cb 10 	call	0x2196	; 0x2196 <f_read>
			//Sent_error_message(fr, "Read file");
			//if(fr) Sent_error_message(fr, "Read file");
			if(fr) Sent_error_message_P(fr, PSTR("Read file"));
    34ea:	88 23       	and	r24, r24
    34ec:	09 f4       	brne	.+2      	; 0x34f0 <main+0x12e>
    34ee:	1f c1       	rjmp	.+574    	; 0x372e <main+0x36c>
    34f0:	60 ec       	ldi	r22, 0xC0	; 192
    34f2:	70 e0       	ldi	r23, 0x00	; 0
    34f4:	0e 94 2a 19 	call	0x3254	; 0x3254 <Sent_error_message_P>
    34f8:	0d c0       	rjmp	.+26     	; 0x3514 <main+0x152>
				
				//uart_puts_rn("Bytes Readed: ");
				uart_puts_with_length((char*)(Buff), Bytes_readed);
				//uart_puts_rn("");
				if(Bytes_to_read != Bytes_readed){
					uart_puts_rn_P(PSTR("End of file"));
    34fa:	84 eb       	ldi	r24, 0xB4	; 180
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	0e 94 ff 18 	call	0x31fe	; 0x31fe <uart_puts_rn_P>
				}
			}
			
		} while (Bytes_to_read == Bytes_readed && fr == FR_OK);
    3502:	c9 54       	subi	r28, 0x49	; 73
    3504:	df 4f       	sbci	r29, 0xFF	; 255
    3506:	88 81       	ld	r24, Y
    3508:	99 81       	ldd	r25, Y+1	; 0x01
    350a:	c7 5b       	subi	r28, 0xB7	; 183
    350c:	d0 40       	sbci	r29, 0x00	; 0
    350e:	80 38       	cpi	r24, 0x80	; 128
    3510:	91 05       	cpc	r25, r1
    3512:	f9 f2       	breq	.-66     	; 0x34d2 <main+0x110>
		
		
		fr = f_close(&Fil);	
    3514:	8f e6       	ldi	r24, 0x6F	; 111
    3516:	95 e0       	ldi	r25, 0x05	; 5
    3518:	0e 94 51 14 	call	0x28a2	; 0x28a2 <f_close>
		//Sent_error_message(fr, "Close file");
		Sent_error_message_P(fr, PSTR("Close file"));
    351c:	69 ea       	ldi	r22, 0xA9	; 169
    351e:	70 e0       	ldi	r23, 0x00	; 0
    3520:	0e 94 2a 19 	call	0x3254	; 0x3254 <Sent_error_message_P>
				append_string(string_to_sd, "\r\n");
				//uart_puts_rn(string_to_sd);
				uart_puts(string_to_sd);
				*/
				//uint8_t licznik_i = 0;
				uint16_t Buffer_string_size = 0;
    3524:	41 2c       	mov	r4, r1
					cli();
					
				while(!error && Buffer_string_size <= SD_BLOCK_BYTES){
					sei();

					error = get_from_Cycle_buffer(&adc, &licznik, &Cycle_Buffer_1);
    3526:	5e 01       	movw	r10, r28
    3528:	97 eb       	ldi	r25, 0xB7	; 183
    352a:	a9 0e       	add	r10, r25
    352c:	b1 1c       	adc	r11, r1
    352e:	6e 01       	movw	r12, r28
    3530:	ed eb       	ldi	r30, 0xBD	; 189
    3532:	ce 0e       	add	r12, r30
    3534:	d1 1c       	adc	r13, r1
					if(!error){
						//put_on_Cycle_buffer(adc_result, licznik_32bit, Cycle_Buffer_1);
						//utoa( buffer_adc[licznik_i], adc_result_string, 10 );
						adc_result_string[0] = '\0';
    3536:	1e 01       	movw	r2, r28
    3538:	f7 e9       	ldi	r31, 0x97	; 151
    353a:	2f 0e       	add	r2, r31
    353c:	31 1c       	adc	r3, r1
					cli();
					
				while(!error && Buffer_string_size <= SD_BLOCK_BYTES){
					sei();

					error = get_from_Cycle_buffer(&adc, &licznik, &Cycle_Buffer_1);
    353e:	7a 2c       	mov	r7, r10
    3540:	8b 2c       	mov	r8, r11
    3542:	9c 2c       	mov	r9, r12
    3544:	ed 2c       	mov	r14, r13
					if(!error){
						//put_on_Cycle_buffer(adc_result, licznik_32bit, Cycle_Buffer_1);
						//utoa( buffer_adc[licznik_i], adc_result_string, 10 );
						adc_result_string[0] = '\0';
    3546:	52 2c       	mov	r5, r2
    3548:	63 2c       	mov	r6, r3

// 	for (;;) {
// 
// 	}
	while(1){
		if(flag_adc_conversion_done){
    354a:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <flag_adc_conversion_done>
    354e:	88 23       	and	r24, r24
    3550:	e1 f3       	breq	.-8      	; 0x354a <main+0x188>
			

			
			uart_puts("1 sec\r\n");
    3552:	8c ea       	ldi	r24, 0xAC	; 172
    3554:	91 e0       	ldi	r25, 0x01	; 1
    3556:	0e 94 dd 18 	call	0x31ba	; 0x31ba <uart_puts>
			//uart_puts("flag_conv\r\n");
				flag_adc_conversion_done = 0;
    355a:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <flag_adc_conversion_done>
				uint16_t adc;
				
				//while(licznik_i < buffer_counter && Buffer_string_size <= 200){
					//string_to_sd2[0]= '\0';
					//uart_puts("string_to_sd2\r\n");
					cli();
    355e:	f8 94       	cli
				append_string(string_to_sd, "\r\n");
				//uart_puts_rn(string_to_sd);
				uart_puts(string_to_sd);
				*/
				//uint8_t licznik_i = 0;
				uint16_t Buffer_string_size = 0;
    3560:	04 2d       	mov	r16, r4
    3562:	10 e0       	ldi	r17, 0x00	; 0
					//string_to_sd2[0]= '\0';
					//uart_puts("string_to_sd2\r\n");
					cli();
					
				while(!error && Buffer_string_size <= SD_BLOCK_BYTES){
					sei();
    3564:	78 94       	sei

					error = get_from_Cycle_buffer(&adc, &licznik, &Cycle_Buffer_1);
    3566:	47 ed       	ldi	r20, 0xD7	; 215
    3568:	51 e0       	ldi	r21, 0x01	; 1
    356a:	67 2d       	mov	r22, r7
    356c:	78 2d       	mov	r23, r8
    356e:	89 2d       	mov	r24, r9
    3570:	9e 2d       	mov	r25, r14
    3572:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <get_from_Cycle_buffer>
    3576:	f8 2e       	mov	r15, r24
					if(!error){
    3578:	81 11       	cpse	r24, r1
    357a:	36 c0       	rjmp	.+108    	; 0x35e8 <main+0x226>
						//put_on_Cycle_buffer(adc_result, licznik_32bit, Cycle_Buffer_1);
						//utoa( buffer_adc[licznik_i], adc_result_string, 10 );
						adc_result_string[0] = '\0';
    357c:	f1 01       	movw	r30, r2
    357e:	10 82       	st	Z, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    3580:	4a e0       	ldi	r20, 0x0A	; 10
    3582:	65 2d       	mov	r22, r5
    3584:	76 2d       	mov	r23, r6
    3586:	f6 01       	movw	r30, r12
    3588:	80 81       	ld	r24, Z
    358a:	91 81       	ldd	r25, Z+1	; 0x01
    358c:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <__utoa_ncheck>
						utoa( adc, adc_result_string, 10 );
						//utoa( buffer_licznik_32bit[licznik_i], licznik_32bit_string, 10 );
						licznik_32bit_string[0] = '\0';
    3590:	19 82       	std	Y+1, r1	; 0x01
    3592:	4a e0       	ldi	r20, 0x0A	; 10
    3594:	be 01       	movw	r22, r28
    3596:	6f 5f       	subi	r22, 0xFF	; 255
    3598:	7f 4f       	sbci	r23, 0xFF	; 255
    359a:	f5 01       	movw	r30, r10
    359c:	80 81       	ld	r24, Z
    359e:	91 81       	ldd	r25, Z+1	; 0x01
    35a0:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <__utoa_ncheck>
						append_string(string_to_sd2, ";");
						append_string(string_to_sd2, licznik_32bit_string);
						append_string(string_to_sd2, "\r\n");
						uart_puts(string_to_sd2);*/
						//uart_puts("\r\n");
						append_string(Buffer_string, adc_result_string);
    35a4:	65 2d       	mov	r22, r5
    35a6:	76 2d       	mov	r23, r6
    35a8:	81 e8       	ldi	r24, 0x81	; 129
    35aa:	94 e0       	ldi	r25, 0x04	; 4
    35ac:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <append_string>
						append_string(Buffer_string, ";");
    35b0:	64 eb       	ldi	r22, 0xB4	; 180
    35b2:	71 e0       	ldi	r23, 0x01	; 1
    35b4:	81 e8       	ldi	r24, 0x81	; 129
    35b6:	94 e0       	ldi	r25, 0x04	; 4
    35b8:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <append_string>
						append_string(Buffer_string, licznik_32bit_string);
    35bc:	be 01       	movw	r22, r28
    35be:	6f 5f       	subi	r22, 0xFF	; 255
    35c0:	7f 4f       	sbci	r23, 0xFF	; 255
    35c2:	81 e8       	ldi	r24, 0x81	; 129
    35c4:	94 e0       	ldi	r25, 0x04	; 4
    35c6:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <append_string>
						append_string(Buffer_string, "\r\n");
    35ca:	61 eb       	ldi	r22, 0xB1	; 177
    35cc:	71 e0       	ldi	r23, 0x01	; 1
    35ce:	81 e8       	ldi	r24, 0x81	; 129
    35d0:	94 e0       	ldi	r25, 0x04	; 4
    35d2:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <append_string>
						//append_string(Buffer_string, string_to_sd2);
						Buffer_string_size = strlen(Buffer_string);
    35d6:	e1 e8       	ldi	r30, 0x81	; 129
    35d8:	f4 e0       	ldi	r31, 0x04	; 4
    35da:	01 90       	ld	r0, Z+
    35dc:	00 20       	and	r0, r0
    35de:	e9 f7       	brne	.-6      	; 0x35da <main+0x218>
    35e0:	31 97       	sbiw	r30, 0x01	; 1
    35e2:	8f 01       	movw	r16, r30
    35e4:	01 58       	subi	r16, 0x81	; 129
    35e6:	14 40       	sbci	r17, 0x04	; 4
						//licznik_i++;
						//error = get_from_Cycle_buffer(&adc, &licznik, &Cycle_Buffer_1);
					}
					LCD_Clear();
    35e8:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <LCD_Clear>
					uint8_t line = 0;
					LCD_GotoXY(0, line);
    35ec:	60 e0       	ldi	r22, 0x00	; 0
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCD_GotoXY>
					LCD_PrintString("ADC:");
    35f4:	86 eb       	ldi	r24, 0xB6	; 182
    35f6:	91 e0       	ldi	r25, 0x01	; 1
    35f8:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_PrintString>
					uint32_t adc_32_converted_to_mV, adc_32_converted_to_mV2;
					adc_32_converted_to_mV = ((uint32_t)adc * 1100) / 1024;
					LCD_PrintInteger(adc_32_converted_to_mV);
    35fc:	f6 01       	movw	r30, r12
    35fe:	20 81       	ld	r18, Z
    3600:	31 81       	ldd	r19, Z+1	; 0x01
    3602:	ac e4       	ldi	r26, 0x4C	; 76
    3604:	b4 e0       	ldi	r27, 0x04	; 4
    3606:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <__umulhisi3>
    360a:	05 2e       	mov	r0, r21
    360c:	5a e0       	ldi	r21, 0x0A	; 10
    360e:	96 95       	lsr	r25
    3610:	87 95       	ror	r24
    3612:	77 95       	ror	r23
    3614:	67 95       	ror	r22
    3616:	5a 95       	dec	r21
    3618:	d1 f7       	brne	.-12     	; 0x360e <main+0x24c>
    361a:	50 2d       	mov	r21, r0
    361c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <LCD_PrintInteger>
					LCD_PrintString("mV ");
    3620:	8b eb       	ldi	r24, 0xBB	; 187
    3622:	91 e0       	ldi	r25, 0x01	; 1
    3624:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_PrintString>
					uint32_t seconds;
					seconds = licznik / 125;
					LCD_PrintInteger(seconds);
    3628:	f5 01       	movw	r30, r10
    362a:	60 81       	ld	r22, Z
    362c:	71 81       	ldd	r23, Z+1	; 0x01
    362e:	82 81       	ldd	r24, Z+2	; 0x02
    3630:	93 81       	ldd	r25, Z+3	; 0x03
    3632:	2d e7       	ldi	r18, 0x7D	; 125
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	40 e0       	ldi	r20, 0x00	; 0
    3638:	50 e0       	ldi	r21, 0x00	; 0
    363a:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__udivmodsi4>
    363e:	ca 01       	movw	r24, r20
    3640:	b9 01       	movw	r22, r18
    3642:	0e 94 6f 17 	call	0x2ede	; 0x2ede <LCD_PrintInteger>
					LCD_PrintString("s");
    3646:	8f eb       	ldi	r24, 0xBF	; 191
    3648:	91 e0       	ldi	r25, 0x01	; 1
    364a:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_PrintString>
					line = 1;
					LCD_GotoXY(0, line);
    364e:	61 e0       	ldi	r22, 0x01	; 1
    3650:	80 e0       	ldi	r24, 0x00	; 0
    3652:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCD_GotoXY>
					LCD_PrintString("ADC2:");
    3656:	81 ec       	ldi	r24, 0xC1	; 193
    3658:	91 e0       	ldi	r25, 0x01	; 1
    365a:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_PrintString>
					adc_32_converted_to_mV2 = ((uint32_t)adc_result2 * 1100) / 1024;
    365e:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <adc_result2>
    3662:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <adc_result2+0x1>
					LCD_PrintInteger(adc_32_converted_to_mV2);
    3666:	ac e4       	ldi	r26, 0x4C	; 76
    3668:	b4 e0       	ldi	r27, 0x04	; 4
    366a:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <__umulhisi3>
    366e:	05 2e       	mov	r0, r21
    3670:	5a e0       	ldi	r21, 0x0A	; 10
    3672:	96 95       	lsr	r25
    3674:	87 95       	ror	r24
    3676:	77 95       	ror	r23
    3678:	67 95       	ror	r22
    367a:	5a 95       	dec	r21
    367c:	d1 f7       	brne	.-12     	; 0x3672 <main+0x2b0>
    367e:	50 2d       	mov	r21, r0
    3680:	0e 94 6f 17 	call	0x2ede	; 0x2ede <LCD_PrintInteger>
	
					
					cli();
    3684:	f8 94       	cli
				//while(licznik_i < buffer_counter && Buffer_string_size <= 200){
					//string_to_sd2[0]= '\0';
					//uart_puts("string_to_sd2\r\n");
					cli();
					
				while(!error && Buffer_string_size <= SD_BLOCK_BYTES){
    3686:	f1 10       	cpse	r15, r1
    3688:	04 c0       	rjmp	.+8      	; 0x3692 <main+0x2d0>
    368a:	09 3c       	cpi	r16, 0xC9	; 201
    368c:	11 05       	cpc	r17, r1
    368e:	08 f4       	brcc	.+2      	; 0x3692 <main+0x2d0>
    3690:	69 cf       	rjmp	.-302    	; 0x3564 <main+0x1a2>
	
					
					cli();
				}
				
				buffer_counter = 0;
    3692:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <buffer_counter>
				flag_adc_conversion_done = 0;
    3696:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <flag_adc_conversion_done>
				sei();
    369a:	78 94       	sei
				
				//append_string(Buffer_string, string_to_sd2);
				//uint16_t Buffer_string_size;
				//uart_puts(string_to_sd2);
				
				Buffer_string_size = strlen(Buffer_string);
    369c:	e1 e8       	ldi	r30, 0x81	; 129
    369e:	f4 e0       	ldi	r31, 0x04	; 4
    36a0:	01 90       	ld	r0, Z+
    36a2:	00 20       	and	r0, r0
    36a4:	e9 f7       	brne	.-6      	; 0x36a0 <main+0x2de>
    36a6:	31 97       	sbiw	r30, 0x01	; 1
    36a8:	e1 58       	subi	r30, 0x81	; 129
    36aa:	f4 40       	sbci	r31, 0x04	; 4
				//Buffer_string_size = 201;

				if(Buffer_string_size > SD_BLOCK_BYTES){
    36ac:	e9 3c       	cpi	r30, 0xC9	; 201
    36ae:	f1 05       	cpc	r31, r1
    36b0:	08 f4       	brcc	.+2      	; 0x36b4 <main+0x2f2>
    36b2:	4b cf       	rjmp	.-362    	; 0x354a <main+0x188>
									//Clear_Cycle_buffer(&Cycle_Buffer_1);
									//uart_puts("Clear cycle buffer \r\n");
					//append_string(Buffer_string, "new write\r\n");
					//uart_puts("write Buffer_string \r\n");
					uart_puts(Buffer_string);
    36b4:	81 e8       	ldi	r24, 0x81	; 129
    36b6:	94 e0       	ldi	r25, 0x04	; 4
    36b8:	0e 94 dd 18 	call	0x31ba	; 0x31ba <uart_puts>
					//uart_puts("write Buffer_string_end \r\n");
					Buffer_string_size = strlen(Buffer_string);
								
				fr = f_open(&Fil, "WRITE2.TXT", FA_WRITE | FA_OPEN_APPEND );	/* Create a file */
    36bc:	42 e3       	ldi	r20, 0x32	; 50
    36be:	61 ea       	ldi	r22, 0xA1	; 161
    36c0:	71 e0       	ldi	r23, 0x01	; 1
    36c2:	8f e6       	ldi	r24, 0x6F	; 111
    36c4:	95 e0       	ldi	r25, 0x05	; 5
    36c6:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <f_open>
    36ca:	18 2f       	mov	r17, r24
				//Sent_error_message(fr, "File open WRITE2.TXT");
				Sent_error_message_P(fr, PSTR("File open WRITE2.TXT"));
    36cc:	64 e9       	ldi	r22, 0x94	; 148
    36ce:	70 e0       	ldi	r23, 0x00	; 0
    36d0:	0e 94 2a 19 	call	0x3254	; 0x3254 <Sent_error_message_P>
				if (fr == FR_OK) {
    36d4:	11 11       	cpse	r17, r1
    36d6:	1f c0       	rjmp	.+62     	; 0x3716 <main+0x354>
					UINT Bytes_Written;
					//BYTE Bytes_to_write[512];
					//for(int i = 0; i < 512;i++)
					//Bytes_to_write[i] = i;
					//for(int i = 0; i < 100;i++){
						fr = f_write(&Fil, (BYTE*)(Buffer_string), strlen(Buffer_string), &Bytes_Written);	/* Write data to the file */
    36d8:	e1 e8       	ldi	r30, 0x81	; 129
    36da:	f4 e0       	ldi	r31, 0x04	; 4
    36dc:	01 90       	ld	r0, Z+
    36de:	00 20       	and	r0, r0
    36e0:	e9 f7       	brne	.-6      	; 0x36dc <main+0x31a>
    36e2:	31 97       	sbiw	r30, 0x01	; 1
    36e4:	af 01       	movw	r20, r30
    36e6:	41 58       	subi	r20, 0x81	; 129
    36e8:	54 40       	sbci	r21, 0x04	; 4
    36ea:	9e 01       	movw	r18, r28
    36ec:	25 54       	subi	r18, 0x45	; 69
    36ee:	3f 4f       	sbci	r19, 0xFF	; 255
    36f0:	61 e8       	ldi	r22, 0x81	; 129
    36f2:	74 e0       	ldi	r23, 0x04	; 4
    36f4:	8f e6       	ldi	r24, 0x6F	; 111
    36f6:	95 e0       	ldi	r25, 0x05	; 5
    36f8:	0e 94 2e 12 	call	0x245c	; 0x245c <f_write>
						//Sent_error_message(fr, "File write WRITE2.TXT");
						Sent_error_message_P(fr, PSTR("File write WRITE2.TXT"));
    36fc:	6e e7       	ldi	r22, 0x7E	; 126
    36fe:	70 e0       	ldi	r23, 0x00	; 0
    3700:	0e 94 2a 19 	call	0x3254	; 0x3254 <Sent_error_message_P>
					//}
					fr = f_close(&Fil);
    3704:	8f e6       	ldi	r24, 0x6F	; 111
    3706:	95 e0       	ldi	r25, 0x05	; 5
    3708:	0e 94 51 14 	call	0x28a2	; 0x28a2 <f_close>
    370c:	18 2f       	mov	r17, r24
					//Sent_error_message(fr, "Close file WRITE2.TXT");
					Sent_error_message_P(fr, PSTR("Close file WRITE2.TXT"));
    370e:	68 e6       	ldi	r22, 0x68	; 104
    3710:	70 e0       	ldi	r23, 0x00	; 0
    3712:	0e 94 2a 19 	call	0x3254	; 0x3254 <Sent_error_message_P>
				
				}
				if (fr == FR_DISK_ERR){
    3716:	11 30       	cpi	r17, 0x01	; 1
    3718:	39 f4       	brne	.+14     	; 0x3728 <main+0x366>
					//fr = f_close(&Fil);
					//Sent_error_message(fr, "File open WRITE2.TXT");
					f_mount(&FatFs, "", 0);
    371a:	40 e0       	ldi	r20, 0x00	; 0
    371c:	63 eb       	ldi	r22, 0xB3	; 179
    371e:	71 e0       	ldi	r23, 0x01	; 1
    3720:	82 e5       	ldi	r24, 0x52	; 82
    3722:	92 e0       	ldi	r25, 0x02	; 2
    3724:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <f_mount>
void delete_string(char *string){
	
	//char *p = string + strlen(string);
	//strcpy(p, string_to_append);
	
	*string = '\0';
    3728:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <Buffer_string>
    372c:	0e cf       	rjmp	.-484    	; 0x354a <main+0x188>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    372e:	4a e0       	ldi	r20, 0x0A	; 10
    3730:	be 01       	movw	r22, r28
    3732:	69 56       	subi	r22, 0x69	; 105
    3734:	7f 4f       	sbci	r23, 0xFF	; 255
    3736:	c9 54       	subi	r28, 0x49	; 73
    3738:	df 4f       	sbci	r29, 0xFF	; 255
    373a:	88 81       	ld	r24, Y
    373c:	99 81       	ldd	r25, Y+1	; 0x01
    373e:	c7 5b       	subi	r28, 0xB7	; 183
    3740:	d0 40       	sbci	r29, 0x00	; 0
    3742:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <__itoa_ncheck>
				char b[ 32 ];
				itoa( Bytes_readed, b, 10 );
				//uart_puts_rn(b);
				
				//uart_puts_rn("Bytes Readed: ");
				uart_puts_with_length((char*)(Buff), Bytes_readed);
    3746:	c9 54       	subi	r28, 0x49	; 73
    3748:	df 4f       	sbci	r29, 0xFF	; 255
    374a:	68 81       	ld	r22, Y
    374c:	79 81       	ldd	r23, Y+1	; 0x01
    374e:	c7 5b       	subi	r28, 0xB7	; 183
    3750:	d0 40       	sbci	r29, 0x00	; 0
    3752:	ce 01       	movw	r24, r28
    3754:	01 96       	adiw	r24, 0x01	; 1
    3756:	0e 94 06 19 	call	0x320c	; 0x320c <uart_puts_with_length>
				//uart_puts_rn("");
				if(Bytes_to_read != Bytes_readed){
    375a:	c9 54       	subi	r28, 0x49	; 73
    375c:	df 4f       	sbci	r29, 0xFF	; 255
    375e:	88 81       	ld	r24, Y
    3760:	99 81       	ldd	r25, Y+1	; 0x01
    3762:	c7 5b       	subi	r28, 0xB7	; 183
    3764:	d0 40       	sbci	r29, 0x00	; 0
    3766:	80 38       	cpi	r24, 0x80	; 128
    3768:	91 05       	cpc	r25, r1
    376a:	09 f0       	breq	.+2      	; 0x376e <main+0x3ac>
    376c:	c6 ce       	rjmp	.-628    	; 0x34fa <main+0x138>
    376e:	c9 ce       	rjmp	.-622    	; 0x3502 <main+0x140>

00003770 <dly_us>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3770:	25 e0       	ldi	r18, 0x05	; 5
    3772:	2a 95       	dec	r18
    3774:	f1 f7       	brne	.-4      	; 0x3772 <dly_us+0x2>
    3776:	00 00       	nop
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif*/
_delay_us(1);
	} while (--n);
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	d1 f7       	brne	.-12     	; 0x3770 <dly_us>
}
    377c:	08 95       	ret

0000377e <SPI_MasterInit>:
#define DD_SCK PB5
#define DD_MISO PB4
#define DD_CS PB2

void SPI_MasterInit(void){
	CS_INIT();
    377e:	22 9a       	sbi	0x04, 2	; 4
	DDR_SPI &= ~(( 1<<DD_MISO ) );
    3780:	24 98       	cbi	0x04, 4	; 4
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)| ( 1<<DD_CS ); /* Set MOSI and SCK output, all others input */
    3782:	84 b1       	in	r24, 0x04	; 4
    3784:	8c 62       	ori	r24, 0x2C	; 44
    3786:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X);//|(1<<SPR1)|(1<<SPR0)|(1<<SPI2X); /* Enable SPI, Master, set clock rate fck/16 */
    3788:	81 e5       	ldi	r24, 0x51	; 81
    378a:	8c bd       	out	0x2c, r24	; 44
    378c:	08 95       	ret

0000378e <SPI_MasterTransmit>:
	
	}
	
BYTE SPI_MasterTransmit(BYTE cData){/* Start transmission */
	BYTE received_data;
	SPDR = cData;/* Wait for transmission complete */
    378e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    3790:	0d b4       	in	r0, 0x2d	; 45
    3792:	07 fe       	sbrs	r0, 7
    3794:	fd cf       	rjmp	.-6      	; 0x3790 <SPI_MasterTransmit+0x2>
	received_data = SPDR;
    3796:	8e b5       	in	r24, 0x2e	; 46
	return received_data;
	}
    3798:	08 95       	ret

0000379a <rcvr_mmc>:
static
void rcvr_mmc (
	BYTE *buff,	/* Pointer to read buffer */
	UINT bc		/* Number of bytes to receive */
)
{
    379a:	0f 93       	push	r16
    379c:	1f 93       	push	r17
    379e:	cf 93       	push	r28
    37a0:	df 93       	push	r29
    37a2:	eb 01       	movw	r28, r22
    37a4:	8c 01       	movw	r16, r24
// 		r <<= 1; if (DO) r++;	/* bit1 */
// 		CK_H(); CK_L();
// 		r <<= 1; if (DO) r++;	/* bit0 */
// 		CK_H(); CK_L();
// 		*buff++ = r;			/* Store a received byte */
		*buff++ = SPI_MasterTransmit(255);
    37a6:	8f ef       	ldi	r24, 0xFF	; 255
    37a8:	0e 94 c7 1b 	call	0x378e	; 0x378e <SPI_MasterTransmit>
    37ac:	f8 01       	movw	r30, r16
    37ae:	81 93       	st	Z+, r24
    37b0:	8f 01       	movw	r16, r30
	} while (--bc);
    37b2:	21 97       	sbiw	r28, 0x01	; 1
    37b4:	c1 f7       	brne	.-16     	; 0x37a6 <rcvr_mmc+0xc>
}
    37b6:	df 91       	pop	r29
    37b8:	cf 91       	pop	r28
    37ba:	1f 91       	pop	r17
    37bc:	0f 91       	pop	r16
    37be:	08 95       	ret

000037c0 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
    37c0:	0f 93       	push	r16
    37c2:	1f 93       	push	r17
    37c4:	cf 93       	push	r28
    37c6:	df 93       	push	r29
    37c8:	1f 92       	push	r1
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    37ce:	08 e8       	ldi	r16, 0x88	; 136
    37d0:	13 e1       	ldi	r17, 0x13	; 19
		rcvr_mmc(&d, 1);
    37d2:	61 e0       	ldi	r22, 0x01	; 1
    37d4:	70 e0       	ldi	r23, 0x00	; 0
    37d6:	ce 01       	movw	r24, r28
    37d8:	01 96       	adiw	r24, 0x01	; 1
    37da:	0e 94 cd 1b 	call	0x379a	; 0x379a <rcvr_mmc>
		if (d == 0xFF) break;
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	8f 3f       	cpi	r24, 0xFF	; 255
    37e2:	39 f0       	breq	.+14     	; 0x37f2 <wait_ready+0x32>
		dly_us(100);
    37e4:	84 e6       	ldi	r24, 0x64	; 100
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	0e 94 b8 1b 	call	0x3770	; 0x3770 <dly_us>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    37ec:	01 50       	subi	r16, 0x01	; 1
    37ee:	11 09       	sbc	r17, r1
    37f0:	81 f7       	brne	.-32     	; 0x37d2 <wait_ready+0x12>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	01 2b       	or	r16, r17
    37f8:	11 f4       	brne	.+4      	; 0x37fe <wait_ready+0x3e>
    37fa:	80 e0       	ldi	r24, 0x00	; 0
    37fc:	90 e0       	ldi	r25, 0x00	; 0
}
    37fe:	0f 90       	pop	r0
    3800:	df 91       	pop	r29
    3802:	cf 91       	pop	r28
    3804:	1f 91       	pop	r17
    3806:	0f 91       	pop	r16
    3808:	08 95       	ret

0000380a <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    380a:	cf 93       	push	r28
    380c:	df 93       	push	r29
    380e:	1f 92       	push	r1
    3810:	cd b7       	in	r28, 0x3d	; 61
    3812:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();				/* Set CS# high */
    3814:	2a 9a       	sbi	0x05, 2	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    3816:	61 e0       	ldi	r22, 0x01	; 1
    3818:	70 e0       	ldi	r23, 0x00	; 0
    381a:	ce 01       	movw	r24, r28
    381c:	01 96       	adiw	r24, 0x01	; 1
    381e:	0e 94 cd 1b 	call	0x379a	; 0x379a <rcvr_mmc>
}
    3822:	0f 90       	pop	r0
    3824:	df 91       	pop	r29
    3826:	cf 91       	pop	r28
    3828:	08 95       	ret

0000382a <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
    382a:	0f 93       	push	r16
    382c:	1f 93       	push	r17
    382e:	cf 93       	push	r28
    3830:	df 93       	push	r29
    3832:	1f 92       	push	r1
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();				/* Set CS# low */
    3838:	2a 98       	cbi	0x05, 2	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    383a:	61 e0       	ldi	r22, 0x01	; 1
    383c:	70 e0       	ldi	r23, 0x00	; 0
    383e:	ce 01       	movw	r24, r28
    3840:	01 96       	adiw	r24, 0x01	; 1
    3842:	0e 94 cd 1b 	call	0x379a	; 0x379a <rcvr_mmc>
	if (wait_ready()) return 1;	/* Wait for card ready */
    3846:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <wait_ready>
    384a:	8c 01       	movw	r16, r24
    384c:	89 2b       	or	r24, r25
    384e:	19 f4       	brne	.+6      	; 0x3856 <select+0x2c>
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
			//return 1;
	deselect();
    3850:	0e 94 05 1c 	call	0x380a	; 0x380a <deselect>
	return 0;			/* Failed */
    3854:	02 c0       	rjmp	.+4      	; 0x385a <select+0x30>
{
	BYTE d;

	CS_L();				/* Set CS# low */
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
	if (wait_ready()) return 1;	/* Wait for card ready */
    3856:	01 e0       	ldi	r16, 0x01	; 1
    3858:	10 e0       	ldi	r17, 0x00	; 0
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
			//return 1;
	deselect();
	return 0;			/* Failed */
}
    385a:	c8 01       	movw	r24, r16
    385c:	0f 90       	pop	r0
    385e:	df 91       	pop	r29
    3860:	cf 91       	pop	r28
    3862:	1f 91       	pop	r17
    3864:	0f 91       	pop	r16
    3866:	08 95       	ret

00003868 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
    3868:	cf 92       	push	r12
    386a:	df 92       	push	r13
    386c:	ef 92       	push	r14
    386e:	ff 92       	push	r15
    3870:	0f 93       	push	r16
    3872:	1f 93       	push	r17
    3874:	cf 93       	push	r28
    3876:	df 93       	push	r29
    3878:	00 d0       	rcall	.+0      	; 0x387a <rcvr_datablock+0x12>
    387a:	cd b7       	in	r28, 0x3d	; 61
    387c:	de b7       	in	r29, 0x3e	; 62
    387e:	7c 01       	movw	r14, r24
    3880:	6b 01       	movw	r12, r22
    3882:	08 ee       	ldi	r16, 0xE8	; 232
    3884:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
    3886:	61 e0       	ldi	r22, 0x01	; 1
    3888:	70 e0       	ldi	r23, 0x00	; 0
    388a:	ce 01       	movw	r24, r28
    388c:	01 96       	adiw	r24, 0x01	; 1
    388e:	0e 94 cd 1b 	call	0x379a	; 0x379a <rcvr_mmc>
		if (d[0] != 0xFF) break;
    3892:	89 81       	ldd	r24, Y+1	; 0x01
    3894:	8f 3f       	cpi	r24, 0xFF	; 255
    3896:	39 f4       	brne	.+14     	; 0x38a6 <rcvr_datablock+0x3e>
		dly_us(100);
    3898:	84 e6       	ldi	r24, 0x64	; 100
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	0e 94 b8 1b 	call	0x3770	; 0x3770 <dly_us>
    38a0:	01 50       	subi	r16, 0x01	; 1
    38a2:	11 09       	sbc	r17, r1
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    38a4:	81 f7       	brne	.-32     	; 0x3886 <rcvr_datablock+0x1e>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	8e 3f       	cpi	r24, 0xFE	; 254
    38aa:	69 f4       	brne	.+26     	; 0x38c6 <rcvr_datablock+0x5e>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    38ac:	b6 01       	movw	r22, r12
    38ae:	c7 01       	movw	r24, r14
    38b0:	0e 94 cd 1b 	call	0x379a	; 0x379a <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
    38b4:	62 e0       	ldi	r22, 0x02	; 2
    38b6:	70 e0       	ldi	r23, 0x00	; 0
    38b8:	ce 01       	movw	r24, r28
    38ba:	01 96       	adiw	r24, 0x01	; 1
    38bc:	0e 94 cd 1b 	call	0x379a	; 0x379a <rcvr_mmc>

	return 1;						/* Return with success */
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	02 c0       	rjmp	.+4      	; 0x38ca <rcvr_datablock+0x62>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	90 e0       	ldi	r25, 0x00	; 0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
    38ca:	0f 90       	pop	r0
    38cc:	0f 90       	pop	r0
    38ce:	df 91       	pop	r29
    38d0:	cf 91       	pop	r28
    38d2:	1f 91       	pop	r17
    38d4:	0f 91       	pop	r16
    38d6:	ff 90       	pop	r15
    38d8:	ef 90       	pop	r14
    38da:	df 90       	pop	r13
    38dc:	cf 90       	pop	r12
    38de:	08 95       	ret

000038e0 <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
    38e0:	0f 93       	push	r16
    38e2:	1f 93       	push	r17
    38e4:	cf 93       	push	r28
    38e6:	df 93       	push	r29
    38e8:	eb 01       	movw	r28, r22
    38ea:	8c 01       	movw	r16, r24


	do {
		d = *buff++;	/* Get a byte to be sent */
		
		SPI_MasterTransmit(d);
    38ec:	f8 01       	movw	r30, r16
    38ee:	81 91       	ld	r24, Z+
    38f0:	8f 01       	movw	r16, r30
    38f2:	0e 94 c7 1b 	call	0x378e	; 0x378e <SPI_MasterTransmit>
		//CK_H(); CK_L();
	//	if (d & 0x01) DI_H(); else { DI_L();	/* bit0 */
			//PORTB |= (1<<5);
		//}
		//CK_H(); CK_L();
	} while (--bc);
    38f6:	21 97       	sbiw	r28, 0x01	; 1
    38f8:	c9 f7       	brne	.-14     	; 0x38ec <xmit_mmc+0xc>
}
    38fa:	df 91       	pop	r29
    38fc:	cf 91       	pop	r28
    38fe:	1f 91       	pop	r17
    3900:	0f 91       	pop	r16
    3902:	08 95       	ret

00003904 <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    3904:	df 92       	push	r13
    3906:	ef 92       	push	r14
    3908:	ff 92       	push	r15
    390a:	0f 93       	push	r16
    390c:	1f 93       	push	r17
    390e:	cf 93       	push	r28
    3910:	df 93       	push	r29
    3912:	cd b7       	in	r28, 0x3d	; 61
    3914:	de b7       	in	r29, 0x3e	; 62
    3916:	27 97       	sbiw	r28, 0x07	; 7
    3918:	0f b6       	in	r0, 0x3f	; 63
    391a:	f8 94       	cli
    391c:	de bf       	out	0x3e, r29	; 62
    391e:	0f be       	out	0x3f, r0	; 63
    3920:	cd bf       	out	0x3d, r28	; 61
    3922:	18 2f       	mov	r17, r24
    3924:	04 2f       	mov	r16, r20
    3926:	f5 2e       	mov	r15, r21
    3928:	e6 2e       	mov	r14, r22
    392a:	d7 2e       	mov	r13, r23
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    392c:	88 23       	and	r24, r24
    392e:	54 f4       	brge	.+20     	; 0x3944 <send_cmd+0x40>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
    3930:	40 e0       	ldi	r20, 0x00	; 0
    3932:	50 e0       	ldi	r21, 0x00	; 0
    3934:	ba 01       	movw	r22, r20
    3936:	87 e3       	ldi	r24, 0x37	; 55
    3938:	0e 94 82 1c 	call	0x3904	; 0x3904 <send_cmd>
		if (n > 1) return n;
    393c:	82 30       	cpi	r24, 0x02	; 2
    393e:	08 f0       	brcs	.+2      	; 0x3942 <send_cmd+0x3e>
    3940:	57 c0       	rjmp	.+174    	; 0x39f0 <send_cmd+0xec>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    3942:	1f 77       	andi	r17, 0x7F	; 127
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    3944:	1c 30       	cpi	r17, 0x0C	; 12
    3946:	29 f1       	breq	.+74     	; 0x3992 <send_cmd+0x8e>
		deselect();
    3948:	0e 94 05 1c 	call	0x380a	; 0x380a <deselect>
		if (!select()) return 0xFF;
    394c:	0e 94 15 1c 	call	0x382a	; 0x382a <select>
    3950:	89 2b       	or	r24, r25
    3952:	e9 f0       	breq	.+58     	; 0x398e <send_cmd+0x8a>
	}
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    3954:	81 2f       	mov	r24, r17
    3956:	80 64       	ori	r24, 0x40	; 64
    3958:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    395a:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    395c:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    395e:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    3960:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    3962:	11 23       	and	r17, r17
    3964:	e1 f1       	breq	.+120    	; 0x39de <send_cmd+0xda>
    3966:	38 c0       	rjmp	.+112    	; 0x39d8 <send_cmd+0xd4>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
	xmit_mmc(buf, 6);

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    3968:	61 e0       	ldi	r22, 0x01	; 1
    396a:	70 e0       	ldi	r23, 0x00	; 0
    396c:	ce 01       	movw	r24, r28
    396e:	01 96       	adiw	r24, 0x01	; 1
    3970:	0e 94 cd 1b 	call	0x379a	; 0x379a <rcvr_mmc>
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    3974:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
    3976:	61 e0       	ldi	r22, 0x01	; 1
    3978:	70 e0       	ldi	r23, 0x00	; 0
    397a:	ce 01       	movw	r24, r28
    397c:	01 96       	adiw	r24, 0x01	; 1
    397e:	0e 94 cd 1b 	call	0x379a	; 0x379a <rcvr_mmc>
	while ((d & 0x80) && --n);
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	88 23       	and	r24, r24
    3986:	a4 f5       	brge	.+104    	; 0x39f0 <send_cmd+0xec>
    3988:	11 50       	subi	r17, 0x01	; 1
    398a:	a9 f7       	brne	.-22     	; 0x3976 <send_cmd+0x72>
    398c:	31 c0       	rjmp	.+98     	; 0x39f0 <send_cmd+0xec>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    398e:	8f ef       	ldi	r24, 0xFF	; 255
    3990:	2f c0       	rjmp	.+94     	; 0x39f0 <send_cmd+0xec>
	}
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    3992:	8c e4       	ldi	r24, 0x4C	; 76
    3994:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    3996:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    3998:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    399a:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    399c:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    39a2:	66 e0       	ldi	r22, 0x06	; 6
    39a4:	70 e0       	ldi	r23, 0x00	; 0
    39a6:	ce 01       	movw	r24, r28
    39a8:	02 96       	adiw	r24, 0x02	; 2
    39aa:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    39ae:	1c 30       	cpi	r17, 0x0C	; 12
    39b0:	09 f7       	brne	.-62     	; 0x3974 <send_cmd+0x70>
    39b2:	da cf       	rjmp	.-76     	; 0x3968 <send_cmd+0x64>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    39b4:	87 e8       	ldi	r24, 0x87	; 135
    39b6:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    39b8:	66 e0       	ldi	r22, 0x06	; 6
    39ba:	70 e0       	ldi	r23, 0x00	; 0
    39bc:	ce 01       	movw	r24, r28
    39be:	02 96       	adiw	r24, 0x02	; 2
    39c0:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <xmit_mmc>
    39c4:	d7 cf       	rjmp	.-82     	; 0x3974 <send_cmd+0x70>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    39ca:	66 e0       	ldi	r22, 0x06	; 6
    39cc:	70 e0       	ldi	r23, 0x00	; 0
    39ce:	ce 01       	movw	r24, r28
    39d0:	02 96       	adiw	r24, 0x02	; 2
    39d2:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <xmit_mmc>
    39d6:	ce cf       	rjmp	.-100    	; 0x3974 <send_cmd+0x70>
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    39d8:	18 30       	cpi	r17, 0x08	; 8
    39da:	61 f3       	breq	.-40     	; 0x39b4 <send_cmd+0xb0>
    39dc:	f4 cf       	rjmp	.-24     	; 0x39c6 <send_cmd+0xc2>
	buf[5] = n;
    39de:	85 e9       	ldi	r24, 0x95	; 149
    39e0:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    39e2:	66 e0       	ldi	r22, 0x06	; 6
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	ce 01       	movw	r24, r28
    39e8:	02 96       	adiw	r24, 0x02	; 2
    39ea:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <xmit_mmc>
    39ee:	c2 cf       	rjmp	.-124    	; 0x3974 <send_cmd+0x70>
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
    39f0:	27 96       	adiw	r28, 0x07	; 7
    39f2:	0f b6       	in	r0, 0x3f	; 63
    39f4:	f8 94       	cli
    39f6:	de bf       	out	0x3e, r29	; 62
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	cd bf       	out	0x3d, r28	; 61
    39fc:	df 91       	pop	r29
    39fe:	cf 91       	pop	r28
    3a00:	1f 91       	pop	r17
    3a02:	0f 91       	pop	r16
    3a04:	ff 90       	pop	r15
    3a06:	ef 90       	pop	r14
    3a08:	df 90       	pop	r13
    3a0a:	08 95       	ret

00003a0c <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    3a0c:	ef 92       	push	r14
    3a0e:	ff 92       	push	r15
    3a10:	1f 93       	push	r17
    3a12:	cf 93       	push	r28
    3a14:	df 93       	push	r29
    3a16:	00 d0       	rcall	.+0      	; 0x3a18 <xmit_datablock+0xc>
    3a18:	cd b7       	in	r28, 0x3d	; 61
    3a1a:	de b7       	in	r29, 0x3e	; 62
    3a1c:	7c 01       	movw	r14, r24
    3a1e:	16 2f       	mov	r17, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
    3a20:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <wait_ready>
    3a24:	00 97       	sbiw	r24, 0x00	; 0
    3a26:	31 f1       	breq	.+76     	; 0x3a74 <xmit_datablock+0x68>

	d[0] = token;
    3a28:	19 83       	std	Y+1, r17	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
    3a2a:	61 e0       	ldi	r22, 0x01	; 1
    3a2c:	70 e0       	ldi	r23, 0x00	; 0
    3a2e:	ce 01       	movw	r24, r28
    3a30:	01 96       	adiw	r24, 0x01	; 1
    3a32:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
    3a36:	1d 3f       	cpi	r17, 0xFD	; 253
    3a38:	d9 f0       	breq	.+54     	; 0x3a70 <xmit_datablock+0x64>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    3a3a:	60 e0       	ldi	r22, 0x00	; 0
    3a3c:	72 e0       	ldi	r23, 0x02	; 2
    3a3e:	c7 01       	movw	r24, r14
    3a40:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    3a44:	62 e0       	ldi	r22, 0x02	; 2
    3a46:	70 e0       	ldi	r23, 0x00	; 0
    3a48:	ce 01       	movw	r24, r28
    3a4a:	01 96       	adiw	r24, 0x01	; 1
    3a4c:	0e 94 cd 1b 	call	0x379a	; 0x379a <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
    3a50:	61 e0       	ldi	r22, 0x01	; 1
    3a52:	70 e0       	ldi	r23, 0x00	; 0
    3a54:	ce 01       	movw	r24, r28
    3a56:	01 96       	adiw	r24, 0x01	; 1
    3a58:	0e 94 cd 1b 	call	0x379a	; 0x379a <rcvr_mmc>
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	8f 71       	andi	r24, 0x1F	; 31
    3a60:	31 e0       	ldi	r19, 0x01	; 1
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	85 30       	cpi	r24, 0x05	; 5
    3a66:	09 f0       	breq	.+2      	; 0x3a6a <xmit_datablock+0x5e>
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	83 2f       	mov	r24, r19
    3a6c:	92 2f       	mov	r25, r18
    3a6e:	02 c0       	rjmp	.+4      	; 0x3a74 <xmit_datablock+0x68>
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	90 e0       	ldi	r25, 0x00	; 0
}
    3a74:	0f 90       	pop	r0
    3a76:	0f 90       	pop	r0
    3a78:	df 91       	pop	r29
    3a7a:	cf 91       	pop	r28
    3a7c:	1f 91       	pop	r17
    3a7e:	ff 90       	pop	r15
    3a80:	ef 90       	pop	r14
    3a82:	08 95       	ret

00003a84 <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    3a84:	81 11       	cpse	r24, r1
    3a86:	03 c0       	rjmp	.+6      	; 0x3a8e <disk_status+0xa>

	return Stat;
    3a88:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3a8c:	08 95       	ret

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    3a8e:	81 e0       	ldi	r24, 0x01	; 1

	return Stat;
}
    3a90:	08 95       	ret

00003a92 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    3a92:	ef 92       	push	r14
    3a94:	ff 92       	push	r15
    3a96:	0f 93       	push	r16
    3a98:	1f 93       	push	r17
    3a9a:	cf 93       	push	r28
    3a9c:	df 93       	push	r29
    3a9e:	00 d0       	rcall	.+0      	; 0x3aa0 <disk_initialize+0xe>
    3aa0:	00 d0       	rcall	.+0      	; 0x3aa2 <disk_initialize+0x10>
    3aa2:	cd b7       	in	r28, 0x3d	; 61
    3aa4:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    3aa6:	81 11       	cpse	r24, r1
    3aa8:	ac c0       	rjmp	.+344    	; 0x3c02 <disk_initialize+0x170>

	dly_us(10000);			/* 10ms */
    3aaa:	80 e1       	ldi	r24, 0x10	; 16
    3aac:	97 e2       	ldi	r25, 0x27	; 39
    3aae:	0e 94 b8 1b 	call	0x3770	; 0x3770 <dly_us>
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
    3ab2:	22 9a       	sbi	0x04, 2	; 4
    3ab4:	2a 9a       	sbi	0x05, 2	; 5
	//CK_INIT(); //CK_L();		/* Initialize port pin tied to SCLK */
	//DI_INIT();				/* Initialize port pin tied to DI */
	//DO_INIT();				/* Initialize port pin tied to DO */
	SPI_MasterInit();
    3ab6:	0e 94 bf 1b 	call	0x377e	; 0x377e <SPI_MasterInit>
    3aba:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    3abc:	61 e0       	ldi	r22, 0x01	; 1
    3abe:	70 e0       	ldi	r23, 0x00	; 0
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	01 96       	adiw	r24, 0x01	; 1
    3ac4:	0e 94 cd 1b 	call	0x379a	; 0x379a <rcvr_mmc>
    3ac8:	11 50       	subi	r17, 0x01	; 1
    3aca:	c1 f7       	brne	.-16     	; 0x3abc <disk_initialize+0x2a>
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    3acc:	40 e0       	ldi	r20, 0x00	; 0
    3ace:	50 e0       	ldi	r21, 0x00	; 0
    3ad0:	ba 01       	movw	r22, r20
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	0e 94 82 1c 	call	0x3904	; 0x3904 <send_cmd>
    3ad8:	81 30       	cpi	r24, 0x01	; 1
    3ada:	09 f0       	breq	.+2      	; 0x3ade <disk_initialize+0x4c>
    3adc:	77 c0       	rjmp	.+238    	; 0x3bcc <disk_initialize+0x13a>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    3ade:	4a ea       	ldi	r20, 0xAA	; 170
    3ae0:	51 e0       	ldi	r21, 0x01	; 1
    3ae2:	60 e0       	ldi	r22, 0x00	; 0
    3ae4:	70 e0       	ldi	r23, 0x00	; 0
    3ae6:	88 e0       	ldi	r24, 0x08	; 8
    3ae8:	0e 94 82 1c 	call	0x3904	; 0x3904 <send_cmd>
    3aec:	81 30       	cpi	r24, 0x01	; 1
    3aee:	d1 f5       	brne	.+116    	; 0x3b64 <disk_initialize+0xd2>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    3af0:	64 e0       	ldi	r22, 0x04	; 4
    3af2:	70 e0       	ldi	r23, 0x00	; 0
    3af4:	ce 01       	movw	r24, r28
    3af6:	01 96       	adiw	r24, 0x01	; 1
    3af8:	0e 94 cd 1b 	call	0x379a	; 0x379a <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    3afc:	8b 81       	ldd	r24, Y+3	; 0x03
    3afe:	81 30       	cpi	r24, 0x01	; 1
    3b00:	09 f0       	breq	.+2      	; 0x3b04 <disk_initialize+0x72>
    3b02:	66 c0       	rjmp	.+204    	; 0x3bd0 <disk_initialize+0x13e>
    3b04:	8c 81       	ldd	r24, Y+4	; 0x04
    3b06:	8a 3a       	cpi	r24, 0xAA	; 170
    3b08:	09 f0       	breq	.+2      	; 0x3b0c <disk_initialize+0x7a>
    3b0a:	64 c0       	rjmp	.+200    	; 0x3bd4 <disk_initialize+0x142>
    3b0c:	08 ee       	ldi	r16, 0xE8	; 232
    3b0e:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    3b10:	40 e0       	ldi	r20, 0x00	; 0
    3b12:	50 e0       	ldi	r21, 0x00	; 0
    3b14:	60 e0       	ldi	r22, 0x00	; 0
    3b16:	70 e4       	ldi	r23, 0x40	; 64
    3b18:	89 ea       	ldi	r24, 0xA9	; 169
    3b1a:	0e 94 82 1c 	call	0x3904	; 0x3904 <send_cmd>
    3b1e:	88 23       	and	r24, r24
    3b20:	49 f0       	breq	.+18     	; 0x3b34 <disk_initialize+0xa2>
					dly_us(1000);
    3b22:	88 ee       	ldi	r24, 0xE8	; 232
    3b24:	93 e0       	ldi	r25, 0x03	; 3
    3b26:	0e 94 b8 1b 	call	0x3770	; 0x3770 <dly_us>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    3b2a:	01 50       	subi	r16, 0x01	; 1
    3b2c:	11 09       	sbc	r17, r1
    3b2e:	81 f7       	brne	.-32     	; 0x3b10 <disk_initialize+0x7e>
	//DO_INIT();				/* Initialize port pin tied to DO */
	SPI_MasterInit();
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	ty = 0;
    3b30:	f1 2c       	mov	r15, r1
    3b32:	5c c0       	rjmp	.+184    	; 0x3bec <disk_initialize+0x15a>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    3b34:	01 2b       	or	r16, r17
    3b36:	09 f4       	brne	.+2      	; 0x3b3a <disk_initialize+0xa8>
    3b38:	4f c0       	rjmp	.+158    	; 0x3bd8 <disk_initialize+0x146>
    3b3a:	40 e0       	ldi	r20, 0x00	; 0
    3b3c:	50 e0       	ldi	r21, 0x00	; 0
    3b3e:	ba 01       	movw	r22, r20
    3b40:	8a e3       	ldi	r24, 0x3A	; 58
    3b42:	0e 94 82 1c 	call	0x3904	; 0x3904 <send_cmd>
    3b46:	81 11       	cpse	r24, r1
    3b48:	49 c0       	rjmp	.+146    	; 0x3bdc <disk_initialize+0x14a>
					rcvr_mmc(buf, 4);
    3b4a:	64 e0       	ldi	r22, 0x04	; 4
    3b4c:	70 e0       	ldi	r23, 0x00	; 0
    3b4e:	ce 01       	movw	r24, r28
    3b50:	01 96       	adiw	r24, 0x01	; 1
    3b52:	0e 94 cd 1b 	call	0x379a	; 0x379a <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    3b56:	89 81       	ldd	r24, Y+1	; 0x01
    3b58:	86 fd       	sbrc	r24, 6
    3b5a:	42 c0       	rjmp	.+132    	; 0x3be0 <disk_initialize+0x14e>
    3b5c:	68 94       	set
    3b5e:	ff 24       	eor	r15, r15
    3b60:	f2 f8       	bld	r15, 2
    3b62:	44 c0       	rjmp	.+136    	; 0x3bec <disk_initialize+0x15a>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    3b64:	40 e0       	ldi	r20, 0x00	; 0
    3b66:	50 e0       	ldi	r21, 0x00	; 0
    3b68:	ba 01       	movw	r22, r20
    3b6a:	89 ea       	ldi	r24, 0xA9	; 169
    3b6c:	0e 94 82 1c 	call	0x3904	; 0x3904 <send_cmd>
    3b70:	82 30       	cpi	r24, 0x02	; 2
    3b72:	28 f0       	brcs	.+10     	; 0x3b7e <disk_initialize+0xec>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    3b74:	ee 24       	eor	r14, r14
    3b76:	e3 94       	inc	r14
    3b78:	ff 24       	eor	r15, r15
    3b7a:	f3 94       	inc	r15
    3b7c:	07 c0       	rjmp	.+14     	; 0x3b8c <disk_initialize+0xfa>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    3b7e:	0f 2e       	mov	r0, r31
    3b80:	f9 ea       	ldi	r31, 0xA9	; 169
    3b82:	ef 2e       	mov	r14, r31
    3b84:	f0 2d       	mov	r31, r0
    3b86:	68 94       	set
    3b88:	ff 24       	eor	r15, r15
    3b8a:	f1 f8       	bld	r15, 1
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    3b8c:	08 ee       	ldi	r16, 0xE8	; 232
    3b8e:	13 e0       	ldi	r17, 0x03	; 3
				if (send_cmd(cmd, 0) == 0) break;
    3b90:	40 e0       	ldi	r20, 0x00	; 0
    3b92:	50 e0       	ldi	r21, 0x00	; 0
    3b94:	ba 01       	movw	r22, r20
    3b96:	8e 2d       	mov	r24, r14
    3b98:	0e 94 82 1c 	call	0x3904	; 0x3904 <send_cmd>
    3b9c:	88 23       	and	r24, r24
    3b9e:	49 f0       	breq	.+18     	; 0x3bb2 <disk_initialize+0x120>
				dly_us(1000);
    3ba0:	88 ee       	ldi	r24, 0xE8	; 232
    3ba2:	93 e0       	ldi	r25, 0x03	; 3
    3ba4:	0e 94 b8 1b 	call	0x3770	; 0x3770 <dly_us>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    3ba8:	01 50       	subi	r16, 0x01	; 1
    3baa:	11 09       	sbc	r17, r1
    3bac:	89 f7       	brne	.-30     	; 0x3b90 <disk_initialize+0xfe>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    3bae:	f1 2c       	mov	r15, r1
    3bb0:	1d c0       	rjmp	.+58     	; 0x3bec <disk_initialize+0x15a>
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    3bb2:	01 2b       	or	r16, r17
    3bb4:	d1 f0       	breq	.+52     	; 0x3bea <disk_initialize+0x158>
    3bb6:	40 e0       	ldi	r20, 0x00	; 0
    3bb8:	52 e0       	ldi	r21, 0x02	; 2
    3bba:	60 e0       	ldi	r22, 0x00	; 0
    3bbc:	70 e0       	ldi	r23, 0x00	; 0
    3bbe:	80 e1       	ldi	r24, 0x10	; 16
    3bc0:	0e 94 82 1c 	call	0x3904	; 0x3904 <send_cmd>
    3bc4:	88 23       	and	r24, r24
    3bc6:	91 f0       	breq	.+36     	; 0x3bec <disk_initialize+0x15a>
				ty = 0;
    3bc8:	f1 2c       	mov	r15, r1
    3bca:	10 c0       	rjmp	.+32     	; 0x3bec <disk_initialize+0x15a>
	//DO_INIT();				/* Initialize port pin tied to DO */
	SPI_MasterInit();
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	ty = 0;
    3bcc:	f1 2c       	mov	r15, r1
    3bce:	0e c0       	rjmp	.+28     	; 0x3bec <disk_initialize+0x15a>
    3bd0:	f1 2c       	mov	r15, r1
    3bd2:	0c c0       	rjmp	.+24     	; 0x3bec <disk_initialize+0x15a>
    3bd4:	f1 2c       	mov	r15, r1
    3bd6:	0a c0       	rjmp	.+20     	; 0x3bec <disk_initialize+0x15a>
    3bd8:	f1 2c       	mov	r15, r1
    3bda:	08 c0       	rjmp	.+16     	; 0x3bec <disk_initialize+0x15a>
    3bdc:	f1 2c       	mov	r15, r1
    3bde:	06 c0       	rjmp	.+12     	; 0x3bec <disk_initialize+0x15a>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
					rcvr_mmc(buf, 4);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    3be0:	0f 2e       	mov	r0, r31
    3be2:	fc e0       	ldi	r31, 0x0C	; 12
    3be4:	ff 2e       	mov	r15, r31
    3be6:	f0 2d       	mov	r31, r0
    3be8:	01 c0       	rjmp	.+2      	; 0x3bec <disk_initialize+0x15a>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    3bea:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
    3bec:	f0 92 cd 01 	sts	0x01CD, r15	; 0x8001cd <CardType>
	s = ty ? 0 : STA_NOINIT;
    3bf0:	11 e0       	ldi	r17, 0x01	; 1
    3bf2:	f1 10       	cpse	r15, r1
    3bf4:	10 e0       	ldi	r17, 0x00	; 0
	Stat = s;
    3bf6:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <__DATA_REGION_ORIGIN__>

	deselect();
    3bfa:	0e 94 05 1c 	call	0x380a	; 0x380a <deselect>

	return s;
    3bfe:	81 2f       	mov	r24, r17
    3c00:	01 c0       	rjmp	.+2      	; 0x3c04 <disk_initialize+0x172>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    3c02:	83 e0       	ldi	r24, 0x03	; 3
	Stat = s;

	deselect();

	return s;
}
    3c04:	0f 90       	pop	r0
    3c06:	0f 90       	pop	r0
    3c08:	0f 90       	pop	r0
    3c0a:	0f 90       	pop	r0
    3c0c:	df 91       	pop	r29
    3c0e:	cf 91       	pop	r28
    3c10:	1f 91       	pop	r17
    3c12:	0f 91       	pop	r16
    3c14:	ff 90       	pop	r15
    3c16:	ef 90       	pop	r14
    3c18:	08 95       	ret

00003c1a <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3c1a:	ff 92       	push	r15
    3c1c:	0f 93       	push	r16
    3c1e:	1f 93       	push	r17
    3c20:	cf 93       	push	r28
    3c22:	df 93       	push	r29
    3c24:	eb 01       	movw	r28, r22

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    3c26:	81 11       	cpse	r24, r1
    3c28:	3f c0       	rjmp	.+126    	; 0x3ca8 <disk_read+0x8e>
{
	BYTE cmd;
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3c2a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3c2e:	80 fd       	sbrc	r24, 0
    3c30:	3d c0       	rjmp	.+122    	; 0x3cac <disk_read+0x92>
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    3c32:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <CardType>
    3c36:	83 fd       	sbrc	r24, 3
    3c38:	09 c0       	rjmp	.+18     	; 0x3c4c <disk_read+0x32>
    3c3a:	01 2e       	mov	r0, r17
    3c3c:	19 e0       	ldi	r17, 0x09	; 9
    3c3e:	22 0f       	add	r18, r18
    3c40:	33 1f       	adc	r19, r19
    3c42:	44 1f       	adc	r20, r20
    3c44:	55 1f       	adc	r21, r21
    3c46:	1a 95       	dec	r17
    3c48:	d1 f7       	brne	.-12     	; 0x3c3e <disk_read+0x24>
    3c4a:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    3c4c:	02 30       	cpi	r16, 0x02	; 2
    3c4e:	11 05       	cpc	r17, r1
    3c50:	28 f4       	brcc	.+10     	; 0x3c5c <disk_read+0x42>
    3c52:	0f 2e       	mov	r0, r31
    3c54:	f1 e1       	ldi	r31, 0x11	; 17
    3c56:	ff 2e       	mov	r15, r31
    3c58:	f0 2d       	mov	r31, r0
    3c5a:	04 c0       	rjmp	.+8      	; 0x3c64 <disk_read+0x4a>
    3c5c:	0f 2e       	mov	r0, r31
    3c5e:	f2 e1       	ldi	r31, 0x12	; 18
    3c60:	ff 2e       	mov	r15, r31
    3c62:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sect) == 0) {
    3c64:	ba 01       	movw	r22, r20
    3c66:	a9 01       	movw	r20, r18
    3c68:	8f 2d       	mov	r24, r15
    3c6a:	0e 94 82 1c 	call	0x3904	; 0x3904 <send_cmd>
    3c6e:	81 11       	cpse	r24, r1
    3c70:	14 c0       	rjmp	.+40     	; 0x3c9a <disk_read+0x80>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    3c72:	60 e0       	ldi	r22, 0x00	; 0
    3c74:	72 e0       	ldi	r23, 0x02	; 2
    3c76:	ce 01       	movw	r24, r28
    3c78:	0e 94 34 1c 	call	0x3868	; 0x3868 <rcvr_datablock>
    3c7c:	89 2b       	or	r24, r25
    3c7e:	21 f0       	breq	.+8      	; 0x3c88 <disk_read+0x6e>
			buff += 512;
    3c80:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    3c82:	01 50       	subi	r16, 0x01	; 1
    3c84:	11 09       	sbc	r17, r1
    3c86:	a9 f7       	brne	.-22     	; 0x3c72 <disk_read+0x58>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    3c88:	82 e1       	ldi	r24, 0x12	; 18
    3c8a:	f8 12       	cpse	r15, r24
    3c8c:	06 c0       	rjmp	.+12     	; 0x3c9a <disk_read+0x80>
    3c8e:	40 e0       	ldi	r20, 0x00	; 0
    3c90:	50 e0       	ldi	r21, 0x00	; 0
    3c92:	ba 01       	movw	r22, r20
    3c94:	8c e0       	ldi	r24, 0x0C	; 12
    3c96:	0e 94 82 1c 	call	0x3904	; 0x3904 <send_cmd>
	}
	deselect();
    3c9a:	0e 94 05 1c 	call	0x380a	; 0x380a <deselect>

	return count ? RES_ERROR : RES_OK;
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	01 2b       	or	r16, r17
    3ca2:	29 f4       	brne	.+10     	; 0x3cae <disk_read+0x94>
    3ca4:	80 e0       	ldi	r24, 0x00	; 0
    3ca6:	03 c0       	rjmp	.+6      	; 0x3cae <disk_read+0x94>
{
	BYTE cmd;
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3ca8:	83 e0       	ldi	r24, 0x03	; 3
    3caa:	01 c0       	rjmp	.+2      	; 0x3cae <disk_read+0x94>
    3cac:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    3cae:	df 91       	pop	r29
    3cb0:	cf 91       	pop	r28
    3cb2:	1f 91       	pop	r17
    3cb4:	0f 91       	pop	r16
    3cb6:	ff 90       	pop	r15
    3cb8:	08 95       	ret

00003cba <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3cba:	cf 92       	push	r12
    3cbc:	df 92       	push	r13
    3cbe:	ef 92       	push	r14
    3cc0:	ff 92       	push	r15
    3cc2:	0f 93       	push	r16
    3cc4:	1f 93       	push	r17
    3cc6:	cf 93       	push	r28
    3cc8:	df 93       	push	r29
    3cca:	eb 01       	movw	r28, r22
    3ccc:	69 01       	movw	r12, r18
    3cce:	7a 01       	movw	r14, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    3cd0:	81 11       	cpse	r24, r1
    3cd2:	50 c0       	rjmp	.+160    	; 0x3d74 <disk_write+0xba>
)
{
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3cd4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3cd8:	80 fd       	sbrc	r24, 0
    3cda:	4e c0       	rjmp	.+156    	; 0x3d78 <disk_write+0xbe>
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    3cdc:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <CardType>
    3ce0:	83 fd       	sbrc	r24, 3
    3ce2:	09 c0       	rjmp	.+18     	; 0x3cf6 <disk_write+0x3c>
    3ce4:	0b 2e       	mov	r0, r27
    3ce6:	b9 e0       	ldi	r27, 0x09	; 9
    3ce8:	cc 0c       	add	r12, r12
    3cea:	dd 1c       	adc	r13, r13
    3cec:	ee 1c       	adc	r14, r14
    3cee:	ff 1c       	adc	r15, r15
    3cf0:	ba 95       	dec	r27
    3cf2:	d1 f7       	brne	.-12     	; 0x3ce8 <disk_write+0x2e>
    3cf4:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    3cf6:	01 30       	cpi	r16, 0x01	; 1
    3cf8:	11 05       	cpc	r17, r1
    3cfa:	99 f4       	brne	.+38     	; 0x3d22 <disk_write+0x68>
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
    3cfc:	b7 01       	movw	r22, r14
    3cfe:	a6 01       	movw	r20, r12
    3d00:	88 e1       	ldi	r24, 0x18	; 24
    3d02:	0e 94 82 1c 	call	0x3904	; 0x3904 <send_cmd>
    3d06:	81 11       	cpse	r24, r1
    3d08:	2e c0       	rjmp	.+92     	; 0x3d66 <disk_write+0xac>
			&& xmit_datablock(buff, 0xFE))
    3d0a:	6e ef       	ldi	r22, 0xFE	; 254
    3d0c:	ce 01       	movw	r24, r28
    3d0e:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <xmit_datablock>
    3d12:	31 e0       	ldi	r19, 0x01	; 1
    3d14:	20 e0       	ldi	r18, 0x00	; 0
    3d16:	89 2b       	or	r24, r25
    3d18:	09 f0       	breq	.+2      	; 0x3d1c <disk_write+0x62>
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	03 2f       	mov	r16, r19
    3d1e:	12 2f       	mov	r17, r18
    3d20:	22 c0       	rjmp	.+68     	; 0x3d66 <disk_write+0xac>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    3d22:	86 70       	andi	r24, 0x06	; 6
    3d24:	31 f0       	breq	.+12     	; 0x3d32 <disk_write+0x78>
    3d26:	a8 01       	movw	r20, r16
    3d28:	60 e0       	ldi	r22, 0x00	; 0
    3d2a:	70 e0       	ldi	r23, 0x00	; 0
    3d2c:	87 e9       	ldi	r24, 0x97	; 151
    3d2e:	0e 94 82 1c 	call	0x3904	; 0x3904 <send_cmd>
		if (send_cmd(CMD25, sect) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    3d32:	b7 01       	movw	r22, r14
    3d34:	a6 01       	movw	r20, r12
    3d36:	89 e1       	ldi	r24, 0x19	; 25
    3d38:	0e 94 82 1c 	call	0x3904	; 0x3904 <send_cmd>
    3d3c:	81 11       	cpse	r24, r1
    3d3e:	13 c0       	rjmp	.+38     	; 0x3d66 <disk_write+0xac>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    3d40:	6c ef       	ldi	r22, 0xFC	; 252
    3d42:	ce 01       	movw	r24, r28
    3d44:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <xmit_datablock>
    3d48:	89 2b       	or	r24, r25
    3d4a:	21 f0       	breq	.+8      	; 0x3d54 <disk_write+0x9a>
				buff += 512;
    3d4c:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    3d4e:	01 50       	subi	r16, 0x01	; 1
    3d50:	11 09       	sbc	r17, r1
    3d52:	b1 f7       	brne	.-20     	; 0x3d40 <disk_write+0x86>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    3d54:	6d ef       	ldi	r22, 0xFD	; 253
    3d56:	80 e0       	ldi	r24, 0x00	; 0
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <xmit_datablock>
    3d5e:	89 2b       	or	r24, r25
    3d60:	11 f4       	brne	.+4      	; 0x3d66 <disk_write+0xac>
				count = 1;
    3d62:	01 e0       	ldi	r16, 0x01	; 1
    3d64:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    3d66:	0e 94 05 1c 	call	0x380a	; 0x380a <deselect>

	return count ? RES_ERROR : RES_OK;
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	01 2b       	or	r16, r17
    3d6e:	29 f4       	brne	.+10     	; 0x3d7a <disk_write+0xc0>
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	03 c0       	rjmp	.+6      	; 0x3d7a <disk_write+0xc0>
)
{
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3d74:	83 e0       	ldi	r24, 0x03	; 3
    3d76:	01 c0       	rjmp	.+2      	; 0x3d7a <disk_write+0xc0>
    3d78:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    3d7a:	df 91       	pop	r29
    3d7c:	cf 91       	pop	r28
    3d7e:	1f 91       	pop	r17
    3d80:	0f 91       	pop	r16
    3d82:	ff 90       	pop	r15
    3d84:	ef 90       	pop	r14
    3d86:	df 90       	pop	r13
    3d88:	cf 90       	pop	r12
    3d8a:	08 95       	ret

00003d8c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    3d8c:	0f 93       	push	r16
    3d8e:	1f 93       	push	r17
    3d90:	cf 93       	push	r28
    3d92:	df 93       	push	r29
    3d94:	cd b7       	in	r28, 0x3d	; 61
    3d96:	de b7       	in	r29, 0x3e	; 62
    3d98:	60 97       	sbiw	r28, 0x10	; 16
    3d9a:	0f b6       	in	r0, 0x3f	; 63
    3d9c:	f8 94       	cli
    3d9e:	de bf       	out	0x3e, r29	; 62
    3da0:	0f be       	out	0x3f, r0	; 63
    3da2:	cd bf       	out	0x3d, r28	; 61

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    3da4:	81 11       	cpse	r24, r1
    3da6:	9c c0       	rjmp	.+312    	; 0x3ee0 <disk_ioctl+0x154>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    3da8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3dac:	80 fd       	sbrc	r24, 0
    3dae:	9a c0       	rjmp	.+308    	; 0x3ee4 <disk_ioctl+0x158>
    3db0:	8a 01       	movw	r16, r20

	res = RES_ERROR;
	switch (ctrl) {
    3db2:	61 30       	cpi	r22, 0x01	; 1
    3db4:	69 f0       	breq	.+26     	; 0x3dd0 <disk_ioctl+0x44>
    3db6:	20 f0       	brcs	.+8      	; 0x3dc0 <disk_ioctl+0x34>
    3db8:	63 30       	cpi	r22, 0x03	; 3
    3dba:	09 f4       	brne	.+2      	; 0x3dbe <disk_ioctl+0x32>
    3dbc:	7d c0       	rjmp	.+250    	; 0x3eb8 <disk_ioctl+0x12c>
    3dbe:	87 c0       	rjmp	.+270    	; 0x3ece <disk_ioctl+0x142>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
    3dc0:	0e 94 15 1c 	call	0x382a	; 0x382a <select>
    3dc4:	11 e0       	ldi	r17, 0x01	; 1
    3dc6:	89 2b       	or	r24, r25
    3dc8:	09 f4       	brne	.+2      	; 0x3dcc <disk_ioctl+0x40>
    3dca:	86 c0       	rjmp	.+268    	; 0x3ed8 <disk_ioctl+0x14c>
    3dcc:	10 e0       	ldi	r17, 0x00	; 0
    3dce:	84 c0       	rjmp	.+264    	; 0x3ed8 <disk_ioctl+0x14c>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    3dd0:	40 e0       	ldi	r20, 0x00	; 0
    3dd2:	50 e0       	ldi	r21, 0x00	; 0
    3dd4:	ba 01       	movw	r22, r20
    3dd6:	89 e0       	ldi	r24, 0x09	; 9
    3dd8:	0e 94 82 1c 	call	0x3904	; 0x3904 <send_cmd>
    3ddc:	81 11       	cpse	r24, r1
    3dde:	79 c0       	rjmp	.+242    	; 0x3ed2 <disk_ioctl+0x146>
    3de0:	60 e1       	ldi	r22, 0x10	; 16
    3de2:	70 e0       	ldi	r23, 0x00	; 0
    3de4:	ce 01       	movw	r24, r28
    3de6:	01 96       	adiw	r24, 0x01	; 1
    3de8:	0e 94 34 1c 	call	0x3868	; 0x3868 <rcvr_datablock>
    3dec:	89 2b       	or	r24, r25
    3dee:	09 f4       	brne	.+2      	; 0x3df2 <disk_ioctl+0x66>
    3df0:	72 c0       	rjmp	.+228    	; 0x3ed6 <disk_ioctl+0x14a>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    3df2:	89 81       	ldd	r24, Y+1	; 0x01
    3df4:	82 95       	swap	r24
    3df6:	86 95       	lsr	r24
    3df8:	86 95       	lsr	r24
    3dfa:	83 70       	andi	r24, 0x03	; 3
    3dfc:	81 30       	cpi	r24, 0x01	; 1
    3dfe:	31 f5       	brne	.+76     	; 0x3e4c <disk_ioctl+0xc0>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(LBA_t*)buff = cs << 10;
    3e00:	29 85       	ldd	r18, Y+9	; 0x09
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	32 2f       	mov	r19, r18
    3e06:	22 27       	eor	r18, r18
    3e08:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e0a:	28 0f       	add	r18, r24
    3e0c:	31 1d       	adc	r19, r1
    3e0e:	88 85       	ldd	r24, Y+8	; 0x08
    3e10:	8f 73       	andi	r24, 0x3F	; 63
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	a0 e0       	ldi	r26, 0x00	; 0
    3e16:	b0 e0       	ldi	r27, 0x00	; 0
    3e18:	dc 01       	movw	r26, r24
    3e1a:	99 27       	eor	r25, r25
    3e1c:	88 27       	eor	r24, r24
    3e1e:	01 96       	adiw	r24, 0x01	; 1
    3e20:	a1 1d       	adc	r26, r1
    3e22:	b1 1d       	adc	r27, r1
    3e24:	82 0f       	add	r24, r18
    3e26:	93 1f       	adc	r25, r19
    3e28:	a1 1d       	adc	r26, r1
    3e2a:	b1 1d       	adc	r27, r1
    3e2c:	07 2e       	mov	r0, r23
    3e2e:	7a e0       	ldi	r23, 0x0A	; 10
    3e30:	88 0f       	add	r24, r24
    3e32:	99 1f       	adc	r25, r25
    3e34:	aa 1f       	adc	r26, r26
    3e36:	bb 1f       	adc	r27, r27
    3e38:	7a 95       	dec	r23
    3e3a:	d1 f7       	brne	.-12     	; 0x3e30 <disk_ioctl+0xa4>
    3e3c:	70 2d       	mov	r23, r0
    3e3e:	f8 01       	movw	r30, r16
    3e40:	80 83       	st	Z, r24
    3e42:	91 83       	std	Z+1, r25	; 0x01
    3e44:	a2 83       	std	Z+2, r26	; 0x02
    3e46:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(LBA_t*)buff = cs << (n - 9);
				}
				res = RES_OK;
    3e48:	10 e0       	ldi	r17, 0x00	; 0
    3e4a:	46 c0       	rjmp	.+140    	; 0x3ed8 <disk_ioctl+0x14c>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(LBA_t*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(LBA_t*)buff = cs << (n - 9);
    3e4c:	89 85       	ldd	r24, Y+9	; 0x09
    3e4e:	82 95       	swap	r24
    3e50:	86 95       	lsr	r24
    3e52:	86 95       	lsr	r24
    3e54:	83 70       	andi	r24, 0x03	; 3
    3e56:	28 85       	ldd	r18, Y+8	; 0x08
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	f4 e0       	ldi	r31, 0x04	; 4
    3e5c:	2f 9f       	mul	r18, r31
    3e5e:	80 0d       	add	r24, r0
    3e60:	91 1d       	adc	r25, r1
    3e62:	11 24       	eor	r1, r1
    3e64:	9c 01       	movw	r18, r24
    3e66:	2f 5f       	subi	r18, 0xFF	; 255
    3e68:	3f 4f       	sbci	r19, 0xFF	; 255
    3e6a:	9f 81       	ldd	r25, Y+7	; 0x07
    3e6c:	93 70       	andi	r25, 0x03	; 3
    3e6e:	89 2f       	mov	r24, r25
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	98 2f       	mov	r25, r24
    3e74:	88 27       	eor	r24, r24
    3e76:	99 0f       	add	r25, r25
    3e78:	99 0f       	add	r25, r25
    3e7a:	82 0f       	add	r24, r18
    3e7c:	93 1f       	adc	r25, r19
    3e7e:	a0 e0       	ldi	r26, 0x00	; 0
    3e80:	b0 e0       	ldi	r27, 0x00	; 0
    3e82:	2e 81       	ldd	r18, Y+6	; 0x06
    3e84:	32 2f       	mov	r19, r18
    3e86:	3f 70       	andi	r19, 0x0F	; 15
    3e88:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e8a:	22 1f       	adc	r18, r18
    3e8c:	22 27       	eor	r18, r18
    3e8e:	22 1f       	adc	r18, r18
    3e90:	23 0f       	add	r18, r19
    3e92:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e94:	33 70       	andi	r19, 0x03	; 3
    3e96:	33 0f       	add	r19, r19
    3e98:	23 0f       	add	r18, r19
    3e9a:	27 50       	subi	r18, 0x07	; 7
    3e9c:	04 c0       	rjmp	.+8      	; 0x3ea6 <disk_ioctl+0x11a>
    3e9e:	88 0f       	add	r24, r24
    3ea0:	99 1f       	adc	r25, r25
    3ea2:	aa 1f       	adc	r26, r26
    3ea4:	bb 1f       	adc	r27, r27
    3ea6:	2a 95       	dec	r18
    3ea8:	d2 f7       	brpl	.-12     	; 0x3e9e <disk_ioctl+0x112>
    3eaa:	f8 01       	movw	r30, r16
    3eac:	80 83       	st	Z, r24
    3eae:	91 83       	std	Z+1, r25	; 0x01
    3eb0:	a2 83       	std	Z+2, r26	; 0x02
    3eb2:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    3eb4:	10 e0       	ldi	r17, 0x00	; 0
    3eb6:	10 c0       	rjmp	.+32     	; 0x3ed8 <disk_ioctl+0x14c>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
    3eb8:	80 e8       	ldi	r24, 0x80	; 128
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	a0 e0       	ldi	r26, 0x00	; 0
    3ebe:	b0 e0       	ldi	r27, 0x00	; 0
    3ec0:	fa 01       	movw	r30, r20
    3ec2:	80 83       	st	Z, r24
    3ec4:	91 83       	std	Z+1, r25	; 0x01
    3ec6:	a2 83       	std	Z+2, r26	; 0x02
    3ec8:	b3 83       	std	Z+3, r27	; 0x03
			res = RES_OK;
    3eca:	10 e0       	ldi	r17, 0x00	; 0
			break;
    3ecc:	05 c0       	rjmp	.+10     	; 0x3ed8 <disk_ioctl+0x14c>

		default:
			res = RES_PARERR;
    3ece:	14 e0       	ldi	r17, 0x04	; 4
    3ed0:	03 c0       	rjmp	.+6      	; 0x3ed8 <disk_ioctl+0x14c>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
    3ed2:	11 e0       	ldi	r17, 0x01	; 1
    3ed4:	01 c0       	rjmp	.+2      	; 0x3ed8 <disk_ioctl+0x14c>
    3ed6:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
	}

	deselect();
    3ed8:	0e 94 05 1c 	call	0x380a	; 0x380a <deselect>

	return res;
    3edc:	81 2f       	mov	r24, r17
    3ede:	03 c0       	rjmp	.+6      	; 0x3ee6 <disk_ioctl+0x15a>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    3ee0:	83 e0       	ldi	r24, 0x03	; 3
    3ee2:	01 c0       	rjmp	.+2      	; 0x3ee6 <disk_ioctl+0x15a>
    3ee4:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    3ee6:	60 96       	adiw	r28, 0x10	; 16
    3ee8:	0f b6       	in	r0, 0x3f	; 63
    3eea:	f8 94       	cli
    3eec:	de bf       	out	0x3e, r29	; 62
    3eee:	0f be       	out	0x3f, r0	; 63
    3ef0:	cd bf       	out	0x3d, r28	; 61
    3ef2:	df 91       	pop	r29
    3ef4:	cf 91       	pop	r28
    3ef6:	1f 91       	pop	r17
    3ef8:	0f 91       	pop	r16
    3efa:	08 95       	ret

00003efc <__udivmodsi4>:
    3efc:	a1 e2       	ldi	r26, 0x21	; 33
    3efe:	1a 2e       	mov	r1, r26
    3f00:	aa 1b       	sub	r26, r26
    3f02:	bb 1b       	sub	r27, r27
    3f04:	fd 01       	movw	r30, r26
    3f06:	0d c0       	rjmp	.+26     	; 0x3f22 <__udivmodsi4_ep>

00003f08 <__udivmodsi4_loop>:
    3f08:	aa 1f       	adc	r26, r26
    3f0a:	bb 1f       	adc	r27, r27
    3f0c:	ee 1f       	adc	r30, r30
    3f0e:	ff 1f       	adc	r31, r31
    3f10:	a2 17       	cp	r26, r18
    3f12:	b3 07       	cpc	r27, r19
    3f14:	e4 07       	cpc	r30, r20
    3f16:	f5 07       	cpc	r31, r21
    3f18:	20 f0       	brcs	.+8      	; 0x3f22 <__udivmodsi4_ep>
    3f1a:	a2 1b       	sub	r26, r18
    3f1c:	b3 0b       	sbc	r27, r19
    3f1e:	e4 0b       	sbc	r30, r20
    3f20:	f5 0b       	sbc	r31, r21

00003f22 <__udivmodsi4_ep>:
    3f22:	66 1f       	adc	r22, r22
    3f24:	77 1f       	adc	r23, r23
    3f26:	88 1f       	adc	r24, r24
    3f28:	99 1f       	adc	r25, r25
    3f2a:	1a 94       	dec	r1
    3f2c:	69 f7       	brne	.-38     	; 0x3f08 <__udivmodsi4_loop>
    3f2e:	60 95       	com	r22
    3f30:	70 95       	com	r23
    3f32:	80 95       	com	r24
    3f34:	90 95       	com	r25
    3f36:	9b 01       	movw	r18, r22
    3f38:	ac 01       	movw	r20, r24
    3f3a:	bd 01       	movw	r22, r26
    3f3c:	cf 01       	movw	r24, r30
    3f3e:	08 95       	ret

00003f40 <__umulhisi3>:
    3f40:	a2 9f       	mul	r26, r18
    3f42:	b0 01       	movw	r22, r0
    3f44:	b3 9f       	mul	r27, r19
    3f46:	c0 01       	movw	r24, r0
    3f48:	a3 9f       	mul	r26, r19
    3f4a:	70 0d       	add	r23, r0
    3f4c:	81 1d       	adc	r24, r1
    3f4e:	11 24       	eor	r1, r1
    3f50:	91 1d       	adc	r25, r1
    3f52:	b2 9f       	mul	r27, r18
    3f54:	70 0d       	add	r23, r0
    3f56:	81 1d       	adc	r24, r1
    3f58:	11 24       	eor	r1, r1
    3f5a:	91 1d       	adc	r25, r1
    3f5c:	08 95       	ret

00003f5e <__muluhisi3>:
    3f5e:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <__umulhisi3>
    3f62:	a5 9f       	mul	r26, r21
    3f64:	90 0d       	add	r25, r0
    3f66:	b4 9f       	mul	r27, r20
    3f68:	90 0d       	add	r25, r0
    3f6a:	a4 9f       	mul	r26, r20
    3f6c:	80 0d       	add	r24, r0
    3f6e:	91 1d       	adc	r25, r1
    3f70:	11 24       	eor	r1, r1
    3f72:	08 95       	ret

00003f74 <strcpy>:
    3f74:	fb 01       	movw	r30, r22
    3f76:	dc 01       	movw	r26, r24
    3f78:	01 90       	ld	r0, Z+
    3f7a:	0d 92       	st	X+, r0
    3f7c:	00 20       	and	r0, r0
    3f7e:	e1 f7       	brne	.-8      	; 0x3f78 <strcpy+0x4>
    3f80:	08 95       	ret

00003f82 <__itoa_ncheck>:
    3f82:	bb 27       	eor	r27, r27
    3f84:	4a 30       	cpi	r20, 0x0A	; 10
    3f86:	31 f4       	brne	.+12     	; 0x3f94 <__itoa_ncheck+0x12>
    3f88:	99 23       	and	r25, r25
    3f8a:	22 f4       	brpl	.+8      	; 0x3f94 <__itoa_ncheck+0x12>
    3f8c:	bd e2       	ldi	r27, 0x2D	; 45
    3f8e:	90 95       	com	r25
    3f90:	81 95       	neg	r24
    3f92:	9f 4f       	sbci	r25, 0xFF	; 255
    3f94:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__utoa_common>

00003f98 <__utoa_ncheck>:
    3f98:	bb 27       	eor	r27, r27

00003f9a <__utoa_common>:
    3f9a:	fb 01       	movw	r30, r22
    3f9c:	55 27       	eor	r21, r21
    3f9e:	aa 27       	eor	r26, r26
    3fa0:	88 0f       	add	r24, r24
    3fa2:	99 1f       	adc	r25, r25
    3fa4:	aa 1f       	adc	r26, r26
    3fa6:	a4 17       	cp	r26, r20
    3fa8:	10 f0       	brcs	.+4      	; 0x3fae <__utoa_common+0x14>
    3faa:	a4 1b       	sub	r26, r20
    3fac:	83 95       	inc	r24
    3fae:	50 51       	subi	r21, 0x10	; 16
    3fb0:	b9 f7       	brne	.-18     	; 0x3fa0 <__utoa_common+0x6>
    3fb2:	a0 5d       	subi	r26, 0xD0	; 208
    3fb4:	aa 33       	cpi	r26, 0x3A	; 58
    3fb6:	08 f0       	brcs	.+2      	; 0x3fba <__utoa_common+0x20>
    3fb8:	a9 5d       	subi	r26, 0xD9	; 217
    3fba:	a1 93       	st	Z+, r26
    3fbc:	00 97       	sbiw	r24, 0x00	; 0
    3fbe:	79 f7       	brne	.-34     	; 0x3f9e <__utoa_common+0x4>
    3fc0:	b1 11       	cpse	r27, r1
    3fc2:	b1 93       	st	Z+, r27
    3fc4:	11 92       	st	Z+, r1
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	0c 94 e6 1f 	jmp	0x3fcc	; 0x3fcc <strrev>

00003fcc <strrev>:
    3fcc:	dc 01       	movw	r26, r24
    3fce:	fc 01       	movw	r30, r24
    3fd0:	67 2f       	mov	r22, r23
    3fd2:	71 91       	ld	r23, Z+
    3fd4:	77 23       	and	r23, r23
    3fd6:	e1 f7       	brne	.-8      	; 0x3fd0 <strrev+0x4>
    3fd8:	32 97       	sbiw	r30, 0x02	; 2
    3fda:	04 c0       	rjmp	.+8      	; 0x3fe4 <strrev+0x18>
    3fdc:	7c 91       	ld	r23, X
    3fde:	6d 93       	st	X+, r22
    3fe0:	70 83       	st	Z, r23
    3fe2:	62 91       	ld	r22, -Z
    3fe4:	ae 17       	cp	r26, r30
    3fe6:	bf 07       	cpc	r27, r31
    3fe8:	c8 f3       	brcs	.-14     	; 0x3fdc <strrev+0x10>
    3fea:	08 95       	ret

00003fec <_exit>:
    3fec:	f8 94       	cli

00003fee <__stop_program>:
    3fee:	ff cf       	rjmp	.-2      	; 0x3fee <__stop_program>
