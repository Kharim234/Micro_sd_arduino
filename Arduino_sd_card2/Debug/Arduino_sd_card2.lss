
Arduino_sd_card2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  000013ba  0000144e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025f  00800186  00800186  000014d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000570f  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eee  00000000  00000000  00006edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002cb8  00000000  00000000  00007dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e30  00000000  00000000  0000aa84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b8c  00000000  00000000  0000b8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000742d  00000000  00000000  0000c440  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0001386d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea eb       	ldi	r30, 0xBA	; 186
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 38       	cpi	r26, 0x86	; 134
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a6 e8       	ldi	r26, 0x86	; 134
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 3e       	cpi	r26, 0xE5	; 229
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <main>
      9e:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ld_dword>:
			}
		}
	}

	return res;
}
      a6:	fc 01       	movw	r30, r24
      a8:	63 81       	ldd	r22, Z+3	; 0x03
      aa:	86 2f       	mov	r24, r22
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	ba 2f       	mov	r27, r26
      b4:	a9 2f       	mov	r26, r25
      b6:	98 2f       	mov	r25, r24
      b8:	88 27       	eor	r24, r24
      ba:	22 81       	ldd	r18, Z+2	; 0x02
      bc:	82 2b       	or	r24, r18
      be:	ba 2f       	mov	r27, r26
      c0:	a9 2f       	mov	r26, r25
      c2:	98 2f       	mov	r25, r24
      c4:	88 27       	eor	r24, r24
      c6:	21 81       	ldd	r18, Z+1	; 0x01
      c8:	82 2b       	or	r24, r18
      ca:	ba 2f       	mov	r27, r26
      cc:	a9 2f       	mov	r26, r25
      ce:	98 2f       	mov	r25, r24
      d0:	88 27       	eor	r24, r24
      d2:	20 81       	ld	r18, Z
      d4:	bc 01       	movw	r22, r24
      d6:	cd 01       	movw	r24, r26
      d8:	62 2b       	or	r22, r18
      da:	08 95       	ret

000000dc <mem_cmp>:
      dc:	dc 01       	movw	r26, r24
      de:	e6 2f       	mov	r30, r22
      e0:	f7 2f       	mov	r31, r23
      e2:	8d 91       	ld	r24, X+
      e4:	21 91       	ld	r18, Z+
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	82 1b       	sub	r24, r18
      ea:	91 09       	sbc	r25, r1
      ec:	41 50       	subi	r20, 0x01	; 1
      ee:	51 09       	sbc	r21, r1
      f0:	11 f0       	breq	.+4      	; 0xf6 <mem_cmp+0x1a>
      f2:	00 97       	sbiw	r24, 0x00	; 0
      f4:	b1 f3       	breq	.-20     	; 0xe2 <mem_cmp+0x6>
      f6:	08 95       	ret

000000f8 <get_ldnumber>:
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	ec 01       	movw	r28, r24
      fe:	a8 81       	ld	r26, Y
     100:	b9 81       	ldd	r27, Y+1	; 0x01
     102:	10 97       	sbiw	r26, 0x00	; 0
     104:	f1 f0       	breq	.+60     	; 0x142 <get_ldnumber+0x4a>
     106:	9d 01       	movw	r18, r26
     108:	2f 5f       	subi	r18, 0xFF	; 255
     10a:	3f 4f       	sbci	r19, 0xFF	; 255
     10c:	f9 01       	movw	r30, r18
     10e:	31 97       	sbiw	r30, 0x01	; 1
     110:	90 81       	ld	r25, Z
     112:	91 32       	cpi	r25, 0x21	; 33
     114:	18 f0       	brcs	.+6      	; 0x11c <get_ldnumber+0x24>
     116:	9a 33       	cpi	r25, 0x3A	; 58
     118:	b9 f7       	brne	.-18     	; 0x108 <get_ldnumber+0x10>
     11a:	02 c0       	rjmp	.+4      	; 0x120 <get_ldnumber+0x28>
     11c:	9a 33       	cpi	r25, 0x3A	; 58
     11e:	a1 f4       	brne	.+40     	; 0x148 <get_ldnumber+0x50>
     120:	8c 91       	ld	r24, X
     122:	90 ed       	ldi	r25, 0xD0	; 208
     124:	98 0f       	add	r25, r24
     126:	9a 30       	cpi	r25, 0x0A	; 10
     128:	90 f4       	brcc	.+36     	; 0x14e <get_ldnumber+0x56>
     12a:	12 96       	adiw	r26, 0x02	; 2
     12c:	2a 17       	cp	r18, r26
     12e:	3b 07       	cpc	r19, r27
     130:	89 f4       	brne	.+34     	; 0x154 <get_ldnumber+0x5c>
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	c0 97       	sbiw	r24, 0x30	; 48
     136:	18 16       	cp	r1, r24
     138:	19 06       	cpc	r1, r25
     13a:	7c f0       	brlt	.+30     	; 0x15a <get_ldnumber+0x62>
     13c:	39 83       	std	Y+1, r19	; 0x01
     13e:	28 83       	st	Y, r18
     140:	0e c0       	rjmp	.+28     	; 0x15e <get_ldnumber+0x66>
     142:	8f ef       	ldi	r24, 0xFF	; 255
     144:	9f ef       	ldi	r25, 0xFF	; 255
     146:	0b c0       	rjmp	.+22     	; 0x15e <get_ldnumber+0x66>
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	08 c0       	rjmp	.+16     	; 0x15e <get_ldnumber+0x66>
     14e:	8f ef       	ldi	r24, 0xFF	; 255
     150:	9f ef       	ldi	r25, 0xFF	; 255
     152:	05 c0       	rjmp	.+10     	; 0x15e <get_ldnumber+0x66>
     154:	8f ef       	ldi	r24, 0xFF	; 255
     156:	9f ef       	ldi	r25, 0xFF	; 255
     158:	02 c0       	rjmp	.+4      	; 0x15e <get_ldnumber+0x66>
     15a:	8f ef       	ldi	r24, 0xFF	; 255
     15c:	9f ef       	ldi	r25, 0xFF	; 255
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	08 95       	ret

00000164 <sync_window>:
     164:	8f 92       	push	r8
     166:	9f 92       	push	r9
     168:	af 92       	push	r10
     16a:	bf 92       	push	r11
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	fc 01       	movw	r30, r24
     17a:	23 81       	ldd	r18, Z+3	; 0x03
     17c:	22 23       	and	r18, r18
     17e:	d1 f1       	breq	.+116    	; 0x1f4 <sync_window+0x90>
     180:	ec 01       	movw	r28, r24
     182:	7c 01       	movw	r14, r24
     184:	ff e2       	ldi	r31, 0x2F	; 47
     186:	ef 0e       	add	r14, r31
     188:	f1 1c       	adc	r15, r1
     18a:	2b a5       	ldd	r18, Y+43	; 0x2b
     18c:	3c a5       	ldd	r19, Y+44	; 0x2c
     18e:	4d a5       	ldd	r20, Y+45	; 0x2d
     190:	5e a5       	ldd	r21, Y+46	; 0x2e
     192:	01 e0       	ldi	r16, 0x01	; 1
     194:	10 e0       	ldi	r17, 0x00	; 0
     196:	b7 01       	movw	r22, r14
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	0e 94 05 09 	call	0x120a	; 0x120a <disk_write>
     19e:	81 11       	cpse	r24, r1
     1a0:	2b c0       	rjmp	.+86     	; 0x1f8 <sync_window+0x94>
     1a2:	1b 82       	std	Y+3, r1	; 0x03
     1a4:	0b a5       	ldd	r16, Y+43	; 0x2b
     1a6:	1c a5       	ldd	r17, Y+44	; 0x2c
     1a8:	2d a5       	ldd	r18, Y+45	; 0x2d
     1aa:	3e a5       	ldd	r19, Y+46	; 0x2e
     1ac:	8f 89       	ldd	r24, Y+23	; 0x17
     1ae:	98 8d       	ldd	r25, Y+24	; 0x18
     1b0:	a9 8d       	ldd	r26, Y+25	; 0x19
     1b2:	ba 8d       	ldd	r27, Y+26	; 0x1a
     1b4:	8f 8c       	ldd	r8, Y+31	; 0x1f
     1b6:	98 a0       	ldd	r9, Y+32	; 0x20
     1b8:	a9 a0       	ldd	r10, Y+33	; 0x21
     1ba:	ba a0       	ldd	r11, Y+34	; 0x22
     1bc:	b9 01       	movw	r22, r18
     1be:	a8 01       	movw	r20, r16
     1c0:	48 19       	sub	r20, r8
     1c2:	59 09       	sbc	r21, r9
     1c4:	6a 09       	sbc	r22, r10
     1c6:	7b 09       	sbc	r23, r11
     1c8:	48 17       	cp	r20, r24
     1ca:	59 07       	cpc	r21, r25
     1cc:	6a 07       	cpc	r22, r26
     1ce:	7b 07       	cpc	r23, r27
     1d0:	a8 f4       	brcc	.+42     	; 0x1fc <sync_window+0x98>
     1d2:	6a 81       	ldd	r22, Y+2	; 0x02
     1d4:	62 30       	cpi	r22, 0x02	; 2
     1d6:	a1 f4       	brne	.+40     	; 0x200 <sync_window+0x9c>
     1d8:	a9 01       	movw	r20, r18
     1da:	98 01       	movw	r18, r16
     1dc:	28 0f       	add	r18, r24
     1de:	39 1f       	adc	r19, r25
     1e0:	4a 1f       	adc	r20, r26
     1e2:	5b 1f       	adc	r21, r27
     1e4:	01 e0       	ldi	r16, 0x01	; 1
     1e6:	10 e0       	ldi	r17, 0x00	; 0
     1e8:	b7 01       	movw	r22, r14
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	0e 94 05 09 	call	0x120a	; 0x120a <disk_write>
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	07 c0       	rjmp	.+14     	; 0x202 <sync_window+0x9e>
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	05 c0       	rjmp	.+10     	; 0x202 <sync_window+0x9e>
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	03 c0       	rjmp	.+6      	; 0x202 <sync_window+0x9e>
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	01 c0       	rjmp	.+2      	; 0x202 <sync_window+0x9e>
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	ff 90       	pop	r15
     20c:	ef 90       	pop	r14
     20e:	bf 90       	pop	r11
     210:	af 90       	pop	r10
     212:	9f 90       	pop	r9
     214:	8f 90       	pop	r8
     216:	08 95       	ret

00000218 <move_window>:
     218:	8f 92       	push	r8
     21a:	9f 92       	push	r9
     21c:	af 92       	push	r10
     21e:	bf 92       	push	r11
     220:	ff 92       	push	r15
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	ec 01       	movw	r28, r24
     22c:	4a 01       	movw	r8, r20
     22e:	5b 01       	movw	r10, r22
     230:	8b a5       	ldd	r24, Y+43	; 0x2b
     232:	9c a5       	ldd	r25, Y+44	; 0x2c
     234:	ad a5       	ldd	r26, Y+45	; 0x2d
     236:	be a5       	ldd	r27, Y+46	; 0x2e
     238:	84 17       	cp	r24, r20
     23a:	95 07       	cpc	r25, r21
     23c:	a6 07       	cpc	r26, r22
     23e:	b7 07       	cpc	r27, r23
     240:	e9 f0       	breq	.+58     	; 0x27c <move_window+0x64>
     242:	ce 01       	movw	r24, r28
     244:	0e 94 b2 00 	call	0x164	; 0x164 <sync_window>
     248:	f8 2e       	mov	r15, r24
     24a:	81 11       	cpse	r24, r1
     24c:	18 c0       	rjmp	.+48     	; 0x27e <move_window+0x66>
     24e:	01 e0       	ldi	r16, 0x01	; 1
     250:	10 e0       	ldi	r17, 0x00	; 0
     252:	a5 01       	movw	r20, r10
     254:	94 01       	movw	r18, r8
     256:	be 01       	movw	r22, r28
     258:	61 5d       	subi	r22, 0xD1	; 209
     25a:	7f 4f       	sbci	r23, 0xFF	; 255
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	0e 94 b5 08 	call	0x116a	; 0x116a <disk_read>
     262:	88 23       	and	r24, r24
     264:	31 f0       	breq	.+12     	; 0x272 <move_window+0x5a>
     266:	ff 24       	eor	r15, r15
     268:	f3 94       	inc	r15
     26a:	88 24       	eor	r8, r8
     26c:	8a 94       	dec	r8
     26e:	98 2c       	mov	r9, r8
     270:	54 01       	movw	r10, r8
     272:	8b a6       	std	Y+43, r8	; 0x2b
     274:	9c a6       	std	Y+44, r9	; 0x2c
     276:	ad a6       	std	Y+45, r10	; 0x2d
     278:	be a6       	std	Y+46, r11	; 0x2e
     27a:	01 c0       	rjmp	.+2      	; 0x27e <move_window+0x66>
     27c:	f1 2c       	mov	r15, r1
     27e:	8f 2d       	mov	r24, r15
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	bf 90       	pop	r11
     28c:	af 90       	pop	r10
     28e:	9f 90       	pop	r9
     290:	8f 90       	pop	r8
     292:	08 95       	ret

00000294 <check_fs>:
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
     29a:	1b 82       	std	Y+3, r1	; 0x03
     29c:	8f ef       	ldi	r24, 0xFF	; 255
     29e:	9f ef       	ldi	r25, 0xFF	; 255
     2a0:	dc 01       	movw	r26, r24
     2a2:	8b a7       	std	Y+43, r24	; 0x2b
     2a4:	9c a7       	std	Y+44, r25	; 0x2c
     2a6:	ad a7       	std	Y+45, r26	; 0x2d
     2a8:	be a7       	std	Y+46, r27	; 0x2e
     2aa:	ce 01       	movw	r24, r28
     2ac:	0e 94 0c 01 	call	0x218	; 0x218 <move_window>
     2b0:	81 11       	cpse	r24, r1
     2b2:	2c c0       	rjmp	.+88     	; 0x30c <check_fs+0x78>
     2b4:	fe 01       	movw	r30, r28
     2b6:	e2 5d       	subi	r30, 0xD2	; 210
     2b8:	fd 4f       	sbci	r31, 0xFD	; 253
     2ba:	80 81       	ld	r24, Z
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	98 2f       	mov	r25, r24
     2c0:	88 27       	eor	r24, r24
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	20 81       	ld	r18, Z
     2c6:	82 2b       	or	r24, r18
     2c8:	85 35       	cpi	r24, 0x55	; 85
     2ca:	9a 4a       	sbci	r25, 0xAA	; 170
     2cc:	11 f5       	brne	.+68     	; 0x312 <check_fs+0x7e>
     2ce:	8f a5       	ldd	r24, Y+47	; 0x2f
     2d0:	8b 3e       	cpi	r24, 0xEB	; 235
     2d2:	19 f0       	breq	.+6      	; 0x2da <check_fs+0x46>
     2d4:	88 5e       	subi	r24, 0xE8	; 232
     2d6:	82 30       	cpi	r24, 0x02	; 2
     2d8:	f8 f4       	brcc	.+62     	; 0x318 <check_fs+0x84>
     2da:	43 e0       	ldi	r20, 0x03	; 3
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	71 e0       	ldi	r23, 0x01	; 1
     2e2:	ce 01       	movw	r24, r28
     2e4:	8b 59       	subi	r24, 0x9B	; 155
     2e6:	9f 4f       	sbci	r25, 0xFF	; 255
     2e8:	0e 94 6e 00 	call	0xdc	; 0xdc <mem_cmp>
     2ec:	89 2b       	or	r24, r25
     2ee:	b9 f0       	breq	.+46     	; 0x31e <check_fs+0x8a>
     2f0:	45 e0       	ldi	r20, 0x05	; 5
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	65 e0       	ldi	r22, 0x05	; 5
     2f6:	71 e0       	ldi	r23, 0x01	; 1
     2f8:	ce 01       	movw	r24, r28
     2fa:	8f 57       	subi	r24, 0x7F	; 127
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	0e 94 6e 00 	call	0xdc	; 0xdc <mem_cmp>
     302:	89 2b       	or	r24, r25
     304:	79 f0       	breq	.+30     	; 0x324 <check_fs+0x90>
     306:	82 e0       	ldi	r24, 0x02	; 2
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e c0       	rjmp	.+28     	; 0x328 <check_fs+0x94>
     30c:	84 e0       	ldi	r24, 0x04	; 4
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0b c0       	rjmp	.+22     	; 0x328 <check_fs+0x94>
     312:	83 e0       	ldi	r24, 0x03	; 3
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	08 c0       	rjmp	.+16     	; 0x328 <check_fs+0x94>
     318:	82 e0       	ldi	r24, 0x02	; 2
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	05 c0       	rjmp	.+10     	; 0x328 <check_fs+0x94>
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	02 c0       	rjmp	.+4      	; 0x328 <check_fs+0x94>
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <mount_volume>:
     32e:	2f 92       	push	r2
     330:	3f 92       	push	r3
     332:	4f 92       	push	r4
     334:	5f 92       	push	r5
     336:	6f 92       	push	r6
     338:	7f 92       	push	r7
     33a:	8f 92       	push	r8
     33c:	9f 92       	push	r9
     33e:	af 92       	push	r10
     340:	bf 92       	push	r11
     342:	cf 92       	push	r12
     344:	df 92       	push	r13
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	6e 97       	sbiw	r28, 0x1e	; 30
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	6b 01       	movw	r12, r22
     364:	b4 2e       	mov	r11, r20
     366:	db 01       	movw	r26, r22
     368:	1d 92       	st	X+, r1
     36a:	1c 92       	st	X, r1
     36c:	0e 94 7c 00 	call	0xf8	; 0xf8 <get_ldnumber>
     370:	7c 01       	movw	r14, r24
     372:	99 23       	and	r25, r25
     374:	0c f4       	brge	.+2      	; 0x378 <mount_volume+0x4a>
     376:	6a c2       	rjmp	.+1236   	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     378:	fc 01       	movw	r30, r24
     37a:	ee 0f       	add	r30, r30
     37c:	ff 1f       	adc	r31, r31
     37e:	e8 57       	subi	r30, 0x78	; 120
     380:	fe 4f       	sbci	r31, 0xFE	; 254
     382:	00 81       	ld	r16, Z
     384:	11 81       	ldd	r17, Z+1	; 0x01
     386:	01 15       	cp	r16, r1
     388:	11 05       	cpc	r17, r1
     38a:	09 f4       	brne	.+2      	; 0x38e <mount_volume+0x60>
     38c:	61 c2       	rjmp	.+1218   	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     38e:	f6 01       	movw	r30, r12
     390:	11 83       	std	Z+1, r17	; 0x01
     392:	00 83       	st	Z, r16
     394:	fb 2d       	mov	r31, r11
     396:	fe 7f       	andi	r31, 0xFE	; 254
     398:	bf 2e       	mov	r11, r31
     39a:	d8 01       	movw	r26, r16
     39c:	8c 91       	ld	r24, X
     39e:	88 23       	and	r24, r24
     3a0:	69 f0       	breq	.+26     	; 0x3bc <mount_volume+0x8e>
     3a2:	11 96       	adiw	r26, 0x01	; 1
     3a4:	8c 91       	ld	r24, X
     3a6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <disk_status>
     3aa:	80 fd       	sbrc	r24, 0
     3ac:	07 c0       	rjmp	.+14     	; 0x3bc <mount_volume+0x8e>
     3ae:	bb 20       	and	r11, r11
     3b0:	09 f4       	brne	.+2      	; 0x3b4 <mount_volume+0x86>
     3b2:	50 c2       	rjmp	.+1184   	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     3b4:	82 ff       	sbrs	r24, 2
     3b6:	50 c2       	rjmp	.+1184   	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     3b8:	8a e0       	ldi	r24, 0x0A	; 10
     3ba:	f5 c2       	rjmp	.+1514   	; 0x9a6 <__stack+0xa7>
     3bc:	f8 01       	movw	r30, r16
     3be:	10 82       	st	Z, r1
     3c0:	e1 82       	std	Z+1, r14	; 0x01
     3c2:	8e 2d       	mov	r24, r14
     3c4:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <disk_initialize>
     3c8:	80 fd       	sbrc	r24, 0
     3ca:	48 c2       	rjmp	.+1168   	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     3cc:	bb 20       	and	r11, r11
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <mount_volume+0xa4>
     3d0:	6b c2       	rjmp	.+1238   	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
     3d2:	82 fd       	sbrc	r24, 2
     3d4:	45 c2       	rjmp	.+1162   	; 0x860 <__DATA_REGION_LENGTH__+0x60>
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	50 e0       	ldi	r21, 0x00	; 0
     3da:	ba 01       	movw	r22, r20
     3dc:	c8 01       	movw	r24, r16
     3de:	0e 94 4a 01 	call	0x294	; 0x294 <check_fs>
     3e2:	82 30       	cpi	r24, 0x02	; 2
     3e4:	91 05       	cpc	r25, r1
     3e6:	c9 f5       	brne	.+114    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     3e8:	48 01       	movw	r8, r16
     3ea:	fb e0       	ldi	r31, 0x0B	; 11
     3ec:	8f 1a       	sub	r8, r31
     3ee:	fe ef       	ldi	r31, 0xFE	; 254
     3f0:	9f 0a       	sbc	r9, r31
     3f2:	9e 01       	movw	r18, r28
     3f4:	2f 5f       	subi	r18, 0xFF	; 255
     3f6:	3f 4f       	sbci	r19, 0xFF	; 255
     3f8:	79 01       	movw	r14, r18
     3fa:	6e 01       	movw	r12, r28
     3fc:	31 e1       	ldi	r19, 0x11	; 17
     3fe:	c3 0e       	add	r12, r19
     400:	d1 1c       	adc	r13, r1
     402:	57 01       	movw	r10, r14
     404:	c4 01       	movw	r24, r8
     406:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
     40a:	d5 01       	movw	r26, r10
     40c:	6d 93       	st	X+, r22
     40e:	7d 93       	st	X+, r23
     410:	8d 93       	st	X+, r24
     412:	9d 93       	st	X+, r25
     414:	5d 01       	movw	r10, r26
     416:	b0 e1       	ldi	r27, 0x10	; 16
     418:	8b 0e       	add	r8, r27
     41a:	91 1c       	adc	r9, r1
     41c:	ac 14       	cp	r10, r12
     41e:	bd 04       	cpc	r11, r13
     420:	89 f7       	brne	.-30     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     422:	0f 2e       	mov	r0, r31
     424:	f3 e0       	ldi	r31, 0x03	; 3
     426:	af 2e       	mov	r10, r31
     428:	f0 2d       	mov	r31, r0
     42a:	b1 2c       	mov	r11, r1
     42c:	f7 01       	movw	r30, r14
     42e:	41 91       	ld	r20, Z+
     430:	51 91       	ld	r21, Z+
     432:	61 91       	ld	r22, Z+
     434:	71 91       	ld	r23, Z+
     436:	7f 01       	movw	r14, r30
     438:	41 15       	cp	r20, r1
     43a:	51 05       	cpc	r21, r1
     43c:	61 05       	cpc	r22, r1
     43e:	71 05       	cpc	r23, r1
     440:	39 f0       	breq	.+14     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     442:	c8 01       	movw	r24, r16
     444:	0e 94 4a 01 	call	0x294	; 0x294 <check_fs>
     448:	82 30       	cpi	r24, 0x02	; 2
     44a:	91 05       	cpc	r25, r1
     44c:	18 f4       	brcc	.+6      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     44e:	37 c2       	rjmp	.+1134   	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
     450:	8a 2d       	mov	r24, r10
     452:	9b 2d       	mov	r25, r11
     454:	ce 14       	cp	r12, r14
     456:	df 04       	cpc	r13, r15
     458:	49 f7       	brne	.-46     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     45a:	84 30       	cpi	r24, 0x04	; 4
     45c:	91 05       	cpc	r25, r1
     45e:	09 f4       	brne	.+2      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     460:	01 c2       	rjmp	.+1026   	; 0x864 <__DATA_REGION_LENGTH__+0x64>
     462:	02 97       	sbiw	r24, 0x02	; 2
     464:	08 f0       	brcs	.+2      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     466:	00 c2       	rjmp	.+1024   	; 0x868 <__DATA_REGION_LENGTH__+0x68>
     468:	d8 01       	movw	r26, r16
     46a:	db 96       	adiw	r26, 0x3b	; 59
     46c:	8c 91       	ld	r24, X
     46e:	db 97       	sbiw	r26, 0x3b	; 59
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	98 2f       	mov	r25, r24
     474:	88 27       	eor	r24, r24
     476:	da 96       	adiw	r26, 0x3a	; 58
     478:	2c 91       	ld	r18, X
     47a:	82 2b       	or	r24, r18
     47c:	81 15       	cp	r24, r1
     47e:	92 40       	sbci	r25, 0x02	; 2
     480:	09 f0       	breq	.+2      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
     482:	f4 c1       	rjmp	.+1000   	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
     484:	f8 01       	movw	r30, r16
     486:	ea 5b       	subi	r30, 0xBA	; 186
     488:	ff 4f       	sbci	r31, 0xFF	; 255
     48a:	80 80       	ld	r8, Z
     48c:	91 2c       	mov	r9, r1
     48e:	98 2c       	mov	r9, r8
     490:	88 24       	eor	r8, r8
     492:	31 97       	sbiw	r30, 0x01	; 1
     494:	80 81       	ld	r24, Z
     496:	88 2a       	or	r8, r24
     498:	94 01       	movw	r18, r8
     49a:	40 e0       	ldi	r20, 0x00	; 0
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	29 8b       	std	Y+17, r18	; 0x11
     4a0:	3a 8b       	std	Y+18, r19	; 0x12
     4a2:	4b 8b       	std	Y+19, r20	; 0x13
     4a4:	5c 8b       	std	Y+20, r21	; 0x14
     4a6:	23 2b       	or	r18, r19
     4a8:	24 2b       	or	r18, r20
     4aa:	25 2b       	or	r18, r21
     4ac:	49 f4       	brne	.+18     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
     4ae:	c8 01       	movw	r24, r16
     4b0:	8d 5a       	subi	r24, 0xAD	; 173
     4b2:	9f 4f       	sbci	r25, 0xFF	; 255
     4b4:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
     4b8:	69 8b       	std	Y+17, r22	; 0x11
     4ba:	7a 8b       	std	Y+18, r23	; 0x12
     4bc:	8b 8b       	std	Y+19, r24	; 0x13
     4be:	9c 8b       	std	Y+20, r25	; 0x14
     4c0:	d8 01       	movw	r26, r16
     4c2:	9b 96       	adiw	r26, 0x2b	; 43
     4c4:	8d 90       	ld	r8, X+
     4c6:	9d 90       	ld	r9, X+
     4c8:	ad 90       	ld	r10, X+
     4ca:	bc 90       	ld	r11, X
     4cc:	9e 97       	sbiw	r26, 0x2e	; 46
     4ce:	29 89       	ldd	r18, Y+17	; 0x11
     4d0:	3a 89       	ldd	r19, Y+18	; 0x12
     4d2:	4b 89       	ldd	r20, Y+19	; 0x13
     4d4:	5c 89       	ldd	r21, Y+20	; 0x14
     4d6:	57 96       	adiw	r26, 0x17	; 23
     4d8:	2d 93       	st	X+, r18
     4da:	3d 93       	st	X+, r19
     4dc:	4d 93       	st	X+, r20
     4de:	5c 93       	st	X, r21
     4e0:	5a 97       	sbiw	r26, 0x1a	; 26
     4e2:	df 96       	adiw	r26, 0x3f	; 63
     4e4:	7c 90       	ld	r7, X
     4e6:	df 97       	sbiw	r26, 0x3f	; 63
     4e8:	12 96       	adiw	r26, 0x02	; 2
     4ea:	7c 92       	st	X, r7
     4ec:	12 97       	sbiw	r26, 0x02	; 2
     4ee:	8f ef       	ldi	r24, 0xFF	; 255
     4f0:	87 0d       	add	r24, r7
     4f2:	82 30       	cpi	r24, 0x02	; 2
     4f4:	08 f0       	brcs	.+2      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
     4f6:	bc c1       	rjmp	.+888    	; 0x870 <__DATA_REGION_LENGTH__+0x70>
     4f8:	dc 96       	adiw	r26, 0x3c	; 60
     4fa:	3c 90       	ld	r3, X
     4fc:	dc 97       	sbiw	r26, 0x3c	; 60
     4fe:	83 2d       	mov	r24, r3
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	1a 96       	adiw	r26, 0x0a	; 10
     504:	9c 93       	st	X, r25
     506:	8e 93       	st	-X, r24
     508:	19 97       	sbiw	r26, 0x09	; 9
     50a:	00 97       	sbiw	r24, 0x00	; 0
     50c:	09 f4       	brne	.+2      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
     50e:	b2 c1       	rjmp	.+868    	; 0x874 <__DATA_REGION_LENGTH__+0x74>
     510:	9c 01       	movw	r18, r24
     512:	21 50       	subi	r18, 0x01	; 1
     514:	31 09       	sbc	r19, r1
     516:	82 23       	and	r24, r18
     518:	93 23       	and	r25, r19
     51a:	89 2b       	or	r24, r25
     51c:	09 f0       	breq	.+2      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
     51e:	ac c1       	rjmp	.+856    	; 0x878 <__DATA_REGION_LENGTH__+0x78>
     520:	f8 01       	movw	r30, r16
     522:	ef 5b       	subi	r30, 0xBF	; 191
     524:	ff 4f       	sbci	r31, 0xFF	; 255
     526:	80 81       	ld	r24, Z
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	98 2f       	mov	r25, r24
     52c:	88 27       	eor	r24, r24
     52e:	31 97       	sbiw	r30, 0x01	; 1
     530:	20 81       	ld	r18, Z
     532:	fc 01       	movw	r30, r24
     534:	e2 2b       	or	r30, r18
     536:	fe 8b       	std	Y+22, r31	; 0x16
     538:	ed 8b       	std	Y+21, r30	; 0x15
     53a:	18 96       	adiw	r26, 0x08	; 8
     53c:	fc 93       	st	X, r31
     53e:	ee 93       	st	-X, r30
     540:	17 97       	sbiw	r26, 0x07	; 7
     542:	cf 01       	movw	r24, r30
     544:	8f 70       	andi	r24, 0x0F	; 15
     546:	99 27       	eor	r25, r25
     548:	89 2b       	or	r24, r25
     54a:	09 f0       	breq	.+2      	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
     54c:	97 c1       	rjmp	.+814    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     54e:	f8 01       	movw	r30, r16
     550:	ed 5b       	subi	r30, 0xBD	; 189
     552:	ff 4f       	sbci	r31, 0xFF	; 255
     554:	c0 80       	ld	r12, Z
     556:	d1 2c       	mov	r13, r1
     558:	dc 2c       	mov	r13, r12
     55a:	cc 24       	eor	r12, r12
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	80 81       	ld	r24, Z
     560:	c8 2a       	or	r12, r24
     562:	e1 2c       	mov	r14, r1
     564:	f1 2c       	mov	r15, r1
     566:	c1 14       	cp	r12, r1
     568:	d1 04       	cpc	r13, r1
     56a:	e1 04       	cpc	r14, r1
     56c:	f1 04       	cpc	r15, r1
     56e:	39 f4       	brne	.+14     	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
     570:	c8 01       	movw	r24, r16
     572:	81 5b       	subi	r24, 0xB1	; 177
     574:	9f 4f       	sbci	r25, 0xFF	; 255
     576:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
     57a:	6b 01       	movw	r12, r22
     57c:	7c 01       	movw	r14, r24
     57e:	d8 01       	movw	r26, r16
     580:	de 96       	adiw	r26, 0x3e	; 62
     582:	ec 91       	ld	r30, X
     584:	de 97       	sbiw	r26, 0x3e	; 62
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	fe 2f       	mov	r31, r30
     58a:	ee 27       	eor	r30, r30
     58c:	dd 96       	adiw	r26, 0x3d	; 61
     58e:	8c 91       	ld	r24, X
     590:	e8 2b       	or	r30, r24
     592:	30 97       	sbiw	r30, 0x00	; 0
     594:	09 f4       	brne	.+2      	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
     596:	74 c1       	rjmp	.+744    	; 0x880 <__DATA_REGION_LENGTH__+0x80>
     598:	a7 2d       	mov	r26, r7
     59a:	b0 e0       	ldi	r27, 0x00	; 0
     59c:	29 89       	ldd	r18, Y+17	; 0x11
     59e:	3a 89       	ldd	r19, Y+18	; 0x12
     5a0:	4b 89       	ldd	r20, Y+19	; 0x13
     5a2:	5c 89       	ldd	r21, Y+20	; 0x14
     5a4:	0e 94 90 09 	call	0x1320	; 0x1320 <__muluhisi3>
     5a8:	6b 8f       	std	Y+27, r22	; 0x1b
     5aa:	7c 8f       	std	Y+28, r23	; 0x1c
     5ac:	8d 8f       	std	Y+29, r24	; 0x1d
     5ae:	9e 8f       	std	Y+30, r25	; 0x1e
     5b0:	9f 01       	movw	r18, r30
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	2f 8b       	std	Y+23, r18	; 0x17
     5b8:	38 8f       	std	Y+24, r19	; 0x18
     5ba:	49 8f       	std	Y+25, r20	; 0x19
     5bc:	5a 8f       	std	Y+26, r21	; 0x1a
     5be:	8d 89       	ldd	r24, Y+21	; 0x15
     5c0:	9e 89       	ldd	r25, Y+22	; 0x16
     5c2:	92 95       	swap	r25
     5c4:	82 95       	swap	r24
     5c6:	8f 70       	andi	r24, 0x0F	; 15
     5c8:	89 27       	eor	r24, r25
     5ca:	9f 70       	andi	r25, 0x0F	; 15
     5cc:	89 27       	eor	r24, r25
     5ce:	28 0f       	add	r18, r24
     5d0:	39 1f       	adc	r19, r25
     5d2:	41 1d       	adc	r20, r1
     5d4:	51 1d       	adc	r21, r1
     5d6:	4b 8c       	ldd	r4, Y+27	; 0x1b
     5d8:	5c 8c       	ldd	r5, Y+28	; 0x1c
     5da:	6d 8c       	ldd	r6, Y+29	; 0x1d
     5dc:	7e 8c       	ldd	r7, Y+30	; 0x1e
     5de:	42 0e       	add	r4, r18
     5e0:	53 1e       	adc	r5, r19
     5e2:	64 1e       	adc	r6, r20
     5e4:	75 1e       	adc	r7, r21
     5e6:	c4 14       	cp	r12, r4
     5e8:	d5 04       	cpc	r13, r5
     5ea:	e6 04       	cpc	r14, r6
     5ec:	f7 04       	cpc	r15, r7
     5ee:	08 f4       	brcc	.+2      	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
     5f0:	49 c1       	rjmp	.+658    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
     5f2:	c7 01       	movw	r24, r14
     5f4:	b6 01       	movw	r22, r12
     5f6:	64 19       	sub	r22, r4
     5f8:	75 09       	sbc	r23, r5
     5fa:	86 09       	sbc	r24, r6
     5fc:	97 09       	sbc	r25, r7
     5fe:	23 2d       	mov	r18, r3
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__udivmodsi4>
     60a:	da 01       	movw	r26, r20
     60c:	c9 01       	movw	r24, r18
     60e:	21 15       	cp	r18, r1
     610:	31 05       	cpc	r19, r1
     612:	41 05       	cpc	r20, r1
     614:	51 05       	cpc	r21, r1
     616:	09 f4       	brne	.+2      	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
     618:	37 c1       	rjmp	.+622    	; 0x888 <__DATA_REGION_LENGTH__+0x88>
     61a:	26 3f       	cpi	r18, 0xF6	; 246
     61c:	6f ef       	ldi	r22, 0xFF	; 255
     61e:	36 07       	cpc	r19, r22
     620:	46 07       	cpc	r20, r22
     622:	6f e0       	ldi	r22, 0x0F	; 15
     624:	56 07       	cpc	r21, r22
     626:	30 f4       	brcc	.+12     	; 0x634 <__EEPROM_REGION_LENGTH__+0x234>
     628:	0f 2e       	mov	r0, r31
     62a:	f3 e0       	ldi	r31, 0x03	; 3
     62c:	2f 2e       	mov	r2, r31
     62e:	31 2c       	mov	r3, r1
     630:	f0 2d       	mov	r31, r0
     632:	02 c0       	rjmp	.+4      	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
     634:	21 2c       	mov	r2, r1
     636:	31 2c       	mov	r3, r1
     638:	86 3f       	cpi	r24, 0xF6	; 246
     63a:	ef ef       	ldi	r30, 0xFF	; 255
     63c:	9e 07       	cpc	r25, r30
     63e:	a1 05       	cpc	r26, r1
     640:	b1 05       	cpc	r27, r1
     642:	20 f4       	brcc	.+8      	; 0x64c <__EEPROM_REGION_LENGTH__+0x24c>
     644:	68 94       	set
     646:	22 24       	eor	r2, r2
     648:	21 f8       	bld	r2, 1
     64a:	31 2c       	mov	r3, r1
     64c:	86 3f       	cpi	r24, 0xF6	; 246
     64e:	9f 40       	sbci	r25, 0x0F	; 15
     650:	a1 05       	cpc	r26, r1
     652:	b1 05       	cpc	r27, r1
     654:	08 f4       	brcc	.+2      	; 0x658 <__EEPROM_REGION_LENGTH__+0x258>
     656:	7a c1       	rjmp	.+756    	; 0x94c <__stack+0x4d>
     658:	21 14       	cp	r2, r1
     65a:	31 04       	cpc	r3, r1
     65c:	09 f4       	brne	.+2      	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
     65e:	16 c1       	rjmp	.+556    	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
     660:	69 01       	movw	r12, r18
     662:	7a 01       	movw	r14, r20
     664:	62 e0       	ldi	r22, 0x02	; 2
     666:	c6 0e       	add	r12, r22
     668:	d1 1c       	adc	r13, r1
     66a:	e1 1c       	adc	r14, r1
     66c:	f1 1c       	adc	r15, r1
     66e:	d8 01       	movw	r26, r16
     670:	53 96       	adiw	r26, 0x13	; 19
     672:	cd 92       	st	X+, r12
     674:	dd 92       	st	X+, r13
     676:	ed 92       	st	X+, r14
     678:	fc 92       	st	X, r15
     67a:	56 97       	sbiw	r26, 0x16	; 22
     67c:	f8 01       	movw	r30, r16
     67e:	83 8e       	std	Z+27, r8	; 0x1b
     680:	94 8e       	std	Z+28, r9	; 0x1c
     682:	a5 8e       	std	Z+29, r10	; 0x1d
     684:	b6 8e       	std	Z+30, r11	; 0x1e
     686:	8f 89       	ldd	r24, Y+23	; 0x17
     688:	98 8d       	ldd	r25, Y+24	; 0x18
     68a:	a9 8d       	ldd	r26, Y+25	; 0x19
     68c:	ba 8d       	ldd	r27, Y+26	; 0x1a
     68e:	88 0d       	add	r24, r8
     690:	99 1d       	adc	r25, r9
     692:	aa 1d       	adc	r26, r10
     694:	bb 1d       	adc	r27, r11
     696:	87 8f       	std	Z+31, r24	; 0x1f
     698:	90 a3       	std	Z+32, r25	; 0x20
     69a:	a1 a3       	std	Z+33, r26	; 0x21
     69c:	b2 a3       	std	Z+34, r27	; 0x22
     69e:	b5 01       	movw	r22, r10
     6a0:	a4 01       	movw	r20, r8
     6a2:	44 0d       	add	r20, r4
     6a4:	55 1d       	adc	r21, r5
     6a6:	66 1d       	adc	r22, r6
     6a8:	77 1d       	adc	r23, r7
     6aa:	47 a3       	std	Z+39, r20	; 0x27
     6ac:	50 a7       	std	Z+40, r21	; 0x28
     6ae:	61 a7       	std	Z+41, r22	; 0x29
     6b0:	72 a7       	std	Z+42, r23	; 0x2a
     6b2:	f3 e0       	ldi	r31, 0x03	; 3
     6b4:	2f 16       	cp	r2, r31
     6b6:	31 04       	cpc	r3, r1
     6b8:	09 f0       	breq	.+2      	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
     6ba:	40 c0       	rjmp	.+128    	; 0x73c <__EEPROM_REGION_LENGTH__+0x33c>
     6bc:	f8 01       	movw	r30, r16
     6be:	e6 5a       	subi	r30, 0xA6	; 166
     6c0:	ff 4f       	sbci	r31, 0xFF	; 255
     6c2:	80 81       	ld	r24, Z
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	98 2f       	mov	r25, r24
     6c8:	88 27       	eor	r24, r24
     6ca:	31 97       	sbiw	r30, 0x01	; 1
     6cc:	20 81       	ld	r18, Z
     6ce:	82 2b       	or	r24, r18
     6d0:	89 2b       	or	r24, r25
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <__EEPROM_REGION_LENGTH__+0x2d6>
     6d4:	dd c0       	rjmp	.+442    	; 0x890 <__DATA_REGION_LENGTH__+0x90>
     6d6:	2d 89       	ldd	r18, Y+21	; 0x15
     6d8:	3e 89       	ldd	r19, Y+22	; 0x16
     6da:	23 2b       	or	r18, r19
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <__EEPROM_REGION_LENGTH__+0x2e0>
     6de:	da c0       	rjmp	.+436    	; 0x894 <__DATA_REGION_LENGTH__+0x94>
     6e0:	c8 01       	movw	r24, r16
     6e2:	85 5a       	subi	r24, 0xA5	; 165
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
     6ea:	d8 01       	movw	r26, r16
     6ec:	93 96       	adiw	r26, 0x23	; 35
     6ee:	6d 93       	st	X+, r22
     6f0:	7d 93       	st	X+, r23
     6f2:	8d 93       	st	X+, r24
     6f4:	9c 93       	st	X, r25
     6f6:	96 97       	sbiw	r26, 0x26	; 38
     6f8:	cc 0c       	add	r12, r12
     6fa:	dd 1c       	adc	r13, r13
     6fc:	ee 1c       	adc	r14, r14
     6fe:	ff 1c       	adc	r15, r15
     700:	cc 0c       	add	r12, r12
     702:	dd 1c       	adc	r13, r13
     704:	ee 1c       	adc	r14, r14
     706:	ff 1c       	adc	r15, r15
     708:	bf ef       	ldi	r27, 0xFF	; 255
     70a:	cb 0e       	add	r12, r27
     70c:	b1 e0       	ldi	r27, 0x01	; 1
     70e:	db 1e       	adc	r13, r27
     710:	e1 1c       	adc	r14, r1
     712:	f1 1c       	adc	r15, r1
     714:	0b 2e       	mov	r0, r27
     716:	b9 e0       	ldi	r27, 0x09	; 9
     718:	f6 94       	lsr	r15
     71a:	e7 94       	ror	r14
     71c:	d7 94       	ror	r13
     71e:	c7 94       	ror	r12
     720:	ba 95       	dec	r27
     722:	d1 f7       	brne	.-12     	; 0x718 <__EEPROM_REGION_LENGTH__+0x318>
     724:	b0 2d       	mov	r27, r0
     726:	29 89       	ldd	r18, Y+17	; 0x11
     728:	3a 89       	ldd	r19, Y+18	; 0x12
     72a:	4b 89       	ldd	r20, Y+19	; 0x13
     72c:	5c 89       	ldd	r21, Y+20	; 0x14
     72e:	2c 15       	cp	r18, r12
     730:	3d 05       	cpc	r19, r13
     732:	4e 05       	cpc	r20, r14
     734:	5f 05       	cpc	r21, r15
     736:	08 f4       	brcc	.+2      	; 0x73a <__EEPROM_REGION_LENGTH__+0x33a>
     738:	af c0       	rjmp	.+350    	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     73a:	ed c0       	rjmp	.+474    	; 0x916 <__stack+0x17>
     73c:	4d 89       	ldd	r20, Y+21	; 0x15
     73e:	5e 89       	ldd	r21, Y+22	; 0x16
     740:	45 2b       	or	r20, r21
     742:	09 f4       	brne	.+2      	; 0x746 <__EEPROM_REGION_LENGTH__+0x346>
     744:	ab c0       	rjmp	.+342    	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
     746:	4b 8c       	ldd	r4, Y+27	; 0x1b
     748:	5c 8c       	ldd	r5, Y+28	; 0x1c
     74a:	6d 8c       	ldd	r6, Y+29	; 0x1d
     74c:	7e 8c       	ldd	r7, Y+30	; 0x1e
     74e:	48 0e       	add	r4, r24
     750:	59 1e       	adc	r5, r25
     752:	6a 1e       	adc	r6, r26
     754:	7b 1e       	adc	r7, r27
     756:	d8 01       	movw	r26, r16
     758:	93 96       	adiw	r26, 0x23	; 35
     75a:	4d 92       	st	X+, r4
     75c:	5d 92       	st	X+, r5
     75e:	6d 92       	st	X+, r6
     760:	7c 92       	st	X, r7
     762:	96 97       	sbiw	r26, 0x26	; 38
     764:	b2 e0       	ldi	r27, 0x02	; 2
     766:	2b 16       	cp	r2, r27
     768:	31 04       	cpc	r3, r1
     76a:	29 f4       	brne	.+10     	; 0x776 <__EEPROM_REGION_LENGTH__+0x376>
     76c:	cc 0c       	add	r12, r12
     76e:	dd 1c       	adc	r13, r13
     770:	ee 1c       	adc	r14, r14
     772:	ff 1c       	adc	r15, r15
     774:	b7 c0       	rjmp	.+366    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
     776:	a3 e0       	ldi	r26, 0x03	; 3
     778:	b0 e0       	ldi	r27, 0x00	; 0
     77a:	a7 01       	movw	r20, r14
     77c:	96 01       	movw	r18, r12
     77e:	0e 94 90 09 	call	0x1320	; 0x1320 <__muluhisi3>
     782:	dc 01       	movw	r26, r24
     784:	cb 01       	movw	r24, r22
     786:	b6 95       	lsr	r27
     788:	a7 95       	ror	r26
     78a:	97 95       	ror	r25
     78c:	87 95       	ror	r24
     78e:	e1 e0       	ldi	r30, 0x01	; 1
     790:	ce 22       	and	r12, r30
     792:	dd 24       	eor	r13, r13
     794:	ee 24       	eor	r14, r14
     796:	ff 24       	eor	r15, r15
     798:	c8 0e       	add	r12, r24
     79a:	d9 1e       	adc	r13, r25
     79c:	ea 1e       	adc	r14, r26
     79e:	fb 1e       	adc	r15, r27
     7a0:	a1 c0       	rjmp	.+322    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
     7a2:	b5 01       	movw	r22, r10
     7a4:	a4 01       	movw	r20, r8
     7a6:	4f 5f       	subi	r20, 0xFF	; 255
     7a8:	5f 4f       	sbci	r21, 0xFF	; 255
     7aa:	6f 4f       	sbci	r22, 0xFF	; 255
     7ac:	7f 4f       	sbci	r23, 0xFF	; 255
     7ae:	c8 01       	movw	r24, r16
     7b0:	0e 94 0c 01 	call	0x218	; 0x218 <move_window>
     7b4:	81 11       	cpse	r24, r1
     7b6:	39 c0       	rjmp	.+114    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     7b8:	d8 01       	movw	r26, r16
     7ba:	14 96       	adiw	r26, 0x04	; 4
     7bc:	1c 92       	st	X, r1
     7be:	f8 01       	movw	r30, r16
     7c0:	e2 5d       	subi	r30, 0xD2	; 210
     7c2:	fd 4f       	sbci	r31, 0xFD	; 253
     7c4:	80 81       	ld	r24, Z
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	98 2f       	mov	r25, r24
     7ca:	88 27       	eor	r24, r24
     7cc:	31 97       	sbiw	r30, 0x01	; 1
     7ce:	20 81       	ld	r18, Z
     7d0:	82 2b       	or	r24, r18
     7d2:	85 35       	cpi	r24, 0x55	; 85
     7d4:	9a 4a       	sbci	r25, 0xAA	; 170
     7d6:	49 f5       	brne	.+82     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     7d8:	c8 01       	movw	r24, r16
     7da:	8f 96       	adiw	r24, 0x2f	; 47
     7dc:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
     7e0:	62 35       	cpi	r22, 0x52	; 82
     7e2:	72 45       	sbci	r23, 0x52	; 82
     7e4:	81 46       	sbci	r24, 0x61	; 97
     7e6:	91 44       	sbci	r25, 0x41	; 65
     7e8:	01 f5       	brne	.+64     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     7ea:	c8 01       	movw	r24, r16
     7ec:	8d 5e       	subi	r24, 0xED	; 237
     7ee:	9d 4f       	sbci	r25, 0xFD	; 253
     7f0:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
     7f4:	62 37       	cpi	r22, 0x72	; 114
     7f6:	72 47       	sbci	r23, 0x72	; 114
     7f8:	81 44       	sbci	r24, 0x41	; 65
     7fa:	91 46       	sbci	r25, 0x61	; 97
     7fc:	b1 f4       	brne	.+44     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     7fe:	c8 01       	movw	r24, r16
     800:	89 5e       	subi	r24, 0xE9	; 233
     802:	9d 4f       	sbci	r25, 0xFD	; 253
     804:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
     808:	d8 01       	movw	r26, r16
     80a:	1f 96       	adiw	r26, 0x0f	; 15
     80c:	6d 93       	st	X+, r22
     80e:	7d 93       	st	X+, r23
     810:	8d 93       	st	X+, r24
     812:	9c 93       	st	X, r25
     814:	52 97       	sbiw	r26, 0x12	; 18
     816:	c8 01       	movw	r24, r16
     818:	85 5e       	subi	r24, 0xE5	; 229
     81a:	9d 4f       	sbci	r25, 0xFD	; 253
     81c:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
     820:	f8 01       	movw	r30, r16
     822:	63 87       	std	Z+11, r22	; 0x0b
     824:	74 87       	std	Z+12, r23	; 0x0c
     826:	85 87       	std	Z+13, r24	; 0x0d
     828:	96 87       	std	Z+14, r25	; 0x0e
     82a:	d8 01       	movw	r26, r16
     82c:	2c 92       	st	X, r2
     82e:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
     832:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <__data_end+0x1>
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <__data_end+0x1>
     83c:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
     840:	16 96       	adiw	r26, 0x06	; 6
     842:	9c 93       	st	X, r25
     844:	8e 93       	st	-X, r24
     846:	15 97       	sbiw	r26, 0x05	; 5
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	ad c0       	rjmp	.+346    	; 0x9a6 <__stack+0xa7>
     84c:	8b e0       	ldi	r24, 0x0B	; 11
     84e:	ab c0       	rjmp	.+342    	; 0x9a6 <__stack+0xa7>
     850:	8c e0       	ldi	r24, 0x0C	; 12
     852:	a9 c0       	rjmp	.+338    	; 0x9a6 <__stack+0xa7>
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	a7 c0       	rjmp	.+334    	; 0x9a6 <__stack+0xa7>
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	a5 c0       	rjmp	.+330    	; 0x9a6 <__stack+0xa7>
     85c:	83 e0       	ldi	r24, 0x03	; 3
     85e:	a3 c0       	rjmp	.+326    	; 0x9a6 <__stack+0xa7>
     860:	8a e0       	ldi	r24, 0x0A	; 10
     862:	a1 c0       	rjmp	.+322    	; 0x9a6 <__stack+0xa7>
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	9f c0       	rjmp	.+318    	; 0x9a6 <__stack+0xa7>
     868:	8d e0       	ldi	r24, 0x0D	; 13
     86a:	9d c0       	rjmp	.+314    	; 0x9a6 <__stack+0xa7>
     86c:	8d e0       	ldi	r24, 0x0D	; 13
     86e:	9b c0       	rjmp	.+310    	; 0x9a6 <__stack+0xa7>
     870:	8d e0       	ldi	r24, 0x0D	; 13
     872:	99 c0       	rjmp	.+306    	; 0x9a6 <__stack+0xa7>
     874:	8d e0       	ldi	r24, 0x0D	; 13
     876:	97 c0       	rjmp	.+302    	; 0x9a6 <__stack+0xa7>
     878:	8d e0       	ldi	r24, 0x0D	; 13
     87a:	95 c0       	rjmp	.+298    	; 0x9a6 <__stack+0xa7>
     87c:	8d e0       	ldi	r24, 0x0D	; 13
     87e:	93 c0       	rjmp	.+294    	; 0x9a6 <__stack+0xa7>
     880:	8d e0       	ldi	r24, 0x0D	; 13
     882:	91 c0       	rjmp	.+290    	; 0x9a6 <__stack+0xa7>
     884:	8d e0       	ldi	r24, 0x0D	; 13
     886:	8f c0       	rjmp	.+286    	; 0x9a6 <__stack+0xa7>
     888:	8d e0       	ldi	r24, 0x0D	; 13
     88a:	8d c0       	rjmp	.+282    	; 0x9a6 <__stack+0xa7>
     88c:	8d e0       	ldi	r24, 0x0D	; 13
     88e:	8b c0       	rjmp	.+278    	; 0x9a6 <__stack+0xa7>
     890:	8d e0       	ldi	r24, 0x0D	; 13
     892:	89 c0       	rjmp	.+274    	; 0x9a6 <__stack+0xa7>
     894:	8d e0       	ldi	r24, 0x0D	; 13
     896:	87 c0       	rjmp	.+270    	; 0x9a6 <__stack+0xa7>
     898:	8d e0       	ldi	r24, 0x0D	; 13
     89a:	85 c0       	rjmp	.+266    	; 0x9a6 <__stack+0xa7>
     89c:	8d e0       	ldi	r24, 0x0D	; 13
     89e:	83 c0       	rjmp	.+262    	; 0x9a6 <__stack+0xa7>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	81 c0       	rjmp	.+258    	; 0x9a6 <__stack+0xa7>
     8a4:	8d e0       	ldi	r24, 0x0D	; 13
     8a6:	7f c0       	rjmp	.+254    	; 0x9a6 <__stack+0xa7>
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	ba 01       	movw	r22, r20
     8ae:	c8 01       	movw	r24, r16
     8b0:	0e 94 4a 01 	call	0x294	; 0x294 <check_fs>
     8b4:	82 30       	cpi	r24, 0x02	; 2
     8b6:	91 05       	cpc	r25, r1
     8b8:	09 f0       	breq	.+2      	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
     8ba:	cf cd       	rjmp	.-1122   	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     8bc:	95 cd       	rjmp	.-1238   	; 0x3e8 <mount_volume+0xba>
     8be:	04 97       	sbiw	r24, 0x04	; 4
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
     8c2:	d2 cd       	rjmp	.-1116   	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     8c4:	ed cf       	rjmp	.-38     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	9f ef       	ldi	r25, 0xFF	; 255
     8ca:	dc 01       	movw	r26, r24
     8cc:	f8 01       	movw	r30, r16
     8ce:	87 87       	std	Z+15, r24	; 0x0f
     8d0:	90 8b       	std	Z+16, r25	; 0x10
     8d2:	a1 8b       	std	Z+17, r26	; 0x11
     8d4:	b2 8b       	std	Z+18, r27	; 0x12
     8d6:	83 87       	std	Z+11, r24	; 0x0b
     8d8:	94 87       	std	Z+12, r25	; 0x0c
     8da:	a5 87       	std	Z+13, r26	; 0x0d
     8dc:	b6 87       	std	Z+14, r27	; 0x0e
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	84 83       	std	Z+4, r24	; 0x04
     8e2:	a3 cf       	rjmp	.-186    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     8e4:	ff ef       	ldi	r31, 0xFF	; 255
     8e6:	cf 0e       	add	r12, r31
     8e8:	f1 e0       	ldi	r31, 0x01	; 1
     8ea:	df 1e       	adc	r13, r31
     8ec:	e1 1c       	adc	r14, r1
     8ee:	f1 1c       	adc	r15, r1
     8f0:	0b 2e       	mov	r0, r27
     8f2:	b9 e0       	ldi	r27, 0x09	; 9
     8f4:	f6 94       	lsr	r15
     8f6:	e7 94       	ror	r14
     8f8:	d7 94       	ror	r13
     8fa:	c7 94       	ror	r12
     8fc:	ba 95       	dec	r27
     8fe:	d1 f7       	brne	.-12     	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
     900:	b0 2d       	mov	r27, r0
     902:	29 89       	ldd	r18, Y+17	; 0x11
     904:	3a 89       	ldd	r19, Y+18	; 0x12
     906:	4b 89       	ldd	r20, Y+19	; 0x13
     908:	5c 89       	ldd	r21, Y+20	; 0x14
     90a:	2c 15       	cp	r18, r12
     90c:	3d 05       	cpc	r19, r13
     90e:	4e 05       	cpc	r20, r14
     910:	5f 05       	cpc	r21, r15
     912:	40 f2       	brcs	.-112    	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
     914:	d8 cf       	rjmp	.-80     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	9f ef       	ldi	r25, 0xFF	; 255
     91a:	dc 01       	movw	r26, r24
     91c:	f8 01       	movw	r30, r16
     91e:	87 87       	std	Z+15, r24	; 0x0f
     920:	90 8b       	std	Z+16, r25	; 0x10
     922:	a1 8b       	std	Z+17, r26	; 0x11
     924:	b2 8b       	std	Z+18, r27	; 0x12
     926:	83 87       	std	Z+11, r24	; 0x0b
     928:	94 87       	std	Z+12, r25	; 0x0c
     92a:	a5 87       	std	Z+13, r26	; 0x0d
     92c:	b6 87       	std	Z+14, r27	; 0x0e
     92e:	80 e8       	ldi	r24, 0x80	; 128
     930:	84 83       	std	Z+4, r24	; 0x04
     932:	e0 5a       	subi	r30, 0xA0	; 160
     934:	ff 4f       	sbci	r31, 0xFF	; 255
     936:	80 81       	ld	r24, Z
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	98 2f       	mov	r25, r24
     93c:	88 27       	eor	r24, r24
     93e:	31 97       	sbiw	r30, 0x01	; 1
     940:	20 81       	ld	r18, Z
     942:	82 2b       	or	r24, r18
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	09 f0       	breq	.+2      	; 0x94a <__stack+0x4b>
     948:	70 cf       	rjmp	.-288    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     94a:	2b cf       	rjmp	.-426    	; 0x7a2 <__EEPROM_REGION_LENGTH__+0x3a2>
     94c:	69 01       	movw	r12, r18
     94e:	7a 01       	movw	r14, r20
     950:	f2 e0       	ldi	r31, 0x02	; 2
     952:	cf 0e       	add	r12, r31
     954:	d1 1c       	adc	r13, r1
     956:	e1 1c       	adc	r14, r1
     958:	f1 1c       	adc	r15, r1
     95a:	d8 01       	movw	r26, r16
     95c:	53 96       	adiw	r26, 0x13	; 19
     95e:	cd 92       	st	X+, r12
     960:	dd 92       	st	X+, r13
     962:	ed 92       	st	X+, r14
     964:	fc 92       	st	X, r15
     966:	56 97       	sbiw	r26, 0x16	; 22
     968:	f8 01       	movw	r30, r16
     96a:	83 8e       	std	Z+27, r8	; 0x1b
     96c:	94 8e       	std	Z+28, r9	; 0x1c
     96e:	a5 8e       	std	Z+29, r10	; 0x1d
     970:	b6 8e       	std	Z+30, r11	; 0x1e
     972:	8f 89       	ldd	r24, Y+23	; 0x17
     974:	98 8d       	ldd	r25, Y+24	; 0x18
     976:	a9 8d       	ldd	r26, Y+25	; 0x19
     978:	ba 8d       	ldd	r27, Y+26	; 0x1a
     97a:	88 0d       	add	r24, r8
     97c:	99 1d       	adc	r25, r9
     97e:	aa 1d       	adc	r26, r10
     980:	bb 1d       	adc	r27, r11
     982:	87 8f       	std	Z+31, r24	; 0x1f
     984:	90 a3       	std	Z+32, r25	; 0x20
     986:	a1 a3       	std	Z+33, r26	; 0x21
     988:	b2 a3       	std	Z+34, r27	; 0x22
     98a:	b5 01       	movw	r22, r10
     98c:	a4 01       	movw	r20, r8
     98e:	44 0d       	add	r20, r4
     990:	55 1d       	adc	r21, r5
     992:	66 1d       	adc	r22, r6
     994:	77 1d       	adc	r23, r7
     996:	47 a3       	std	Z+39, r20	; 0x27
     998:	50 a7       	std	Z+40, r21	; 0x28
     99a:	61 a7       	std	Z+41, r22	; 0x29
     99c:	72 a7       	std	Z+42, r23	; 0x2a
     99e:	22 24       	eor	r2, r2
     9a0:	23 94       	inc	r2
     9a2:	31 2c       	mov	r3, r1
     9a4:	cb ce       	rjmp	.-618    	; 0x73c <__EEPROM_REGION_LENGTH__+0x33c>
     9a6:	6e 96       	adiw	r28, 0x1e	; 30
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	de bf       	out	0x3e, r29	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	df 90       	pop	r13
     9c0:	cf 90       	pop	r12
     9c2:	bf 90       	pop	r11
     9c4:	af 90       	pop	r10
     9c6:	9f 90       	pop	r9
     9c8:	8f 90       	pop	r8
     9ca:	7f 90       	pop	r7
     9cc:	6f 90       	pop	r6
     9ce:	5f 90       	pop	r5
     9d0:	4f 90       	pop	r4
     9d2:	3f 90       	pop	r3
     9d4:	2f 90       	pop	r2
     9d6:	08 95       	ret

000009d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <f_mount+0x8>
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <f_mount+0xa>
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <f_mount+0xc>
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	9c 83       	std	Y+4, r25	; 0x04
     9ea:	8b 83       	std	Y+3, r24	; 0x03
     9ec:	7e 83       	std	Y+6, r23	; 0x06
     9ee:	6d 83       	std	Y+5, r22	; 0x05
     9f0:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
     9f2:	7a 83       	std	Y+2, r23	; 0x02
     9f4:	69 83       	std	Y+1, r22	; 0x01


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
     9f6:	ce 01       	movw	r24, r28
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	0e 94 7c 00 	call	0xf8	; 0xf8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
     9fe:	99 23       	and	r25, r25
     a00:	24 f1       	brlt	.+72     	; 0xa4a <f_mount+0x72>
	cfs = FatFs[vol];					/* Pointer to fs object */
     a02:	fc 01       	movw	r30, r24
     a04:	ee 0f       	add	r30, r30
     a06:	ff 1f       	adc	r31, r31
     a08:	e8 57       	subi	r30, 0x78	; 120
     a0a:	fe 4f       	sbci	r31, 0xFE	; 254
     a0c:	01 90       	ld	r0, Z+
     a0e:	f0 81       	ld	r31, Z
     a10:	e0 2d       	mov	r30, r0

	if (cfs) {
     a12:	30 97       	sbiw	r30, 0x00	; 0
     a14:	09 f0       	breq	.+2      	; 0xa18 <f_mount+0x40>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
     a16:	10 82       	st	Z, r1
	}

	if (fs) {
     a18:	eb 81       	ldd	r30, Y+3	; 0x03
     a1a:	fc 81       	ldd	r31, Y+4	; 0x04
     a1c:	30 97       	sbiw	r30, 0x00	; 0
     a1e:	09 f0       	breq	.+2      	; 0xa22 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
     a20:	10 82       	st	Z, r1
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	fc 01       	movw	r30, r24
     a28:	e8 57       	subi	r30, 0x78	; 120
     a2a:	fe 4f       	sbci	r31, 0xFE	; 254
     a2c:	8b 81       	ldd	r24, Y+3	; 0x03
     a2e:	9c 81       	ldd	r25, Y+4	; 0x04
     a30:	91 83       	std	Z+1, r25	; 0x01
     a32:	80 83       	st	Z, r24

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
     a34:	11 23       	and	r17, r17
     a36:	59 f0       	breq	.+22     	; 0xa4e <f_mount+0x76>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	be 01       	movw	r22, r28
     a3c:	6d 5f       	subi	r22, 0xFD	; 253
     a3e:	7f 4f       	sbci	r23, 0xFF	; 255
     a40:	ce 01       	movw	r24, r28
     a42:	05 96       	adiw	r24, 0x05	; 5
     a44:	0e 94 97 01 	call	0x32e	; 0x32e <mount_volume>
	LEAVE_FF(fs, res);
     a48:	03 c0       	rjmp	.+6      	; 0xa50 <f_mount+0x78>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
     a4a:	8b e0       	ldi	r24, 0x0B	; 11
     a4c:	01 c0       	rjmp	.+2      	; 0xa50 <f_mount+0x78>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
     a4e:	80 e0       	ldi	r24, 0x00	; 0

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
     a50:	26 96       	adiw	r28, 0x06	; 6
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	08 95       	ret

00000a64 <USART_Init>:
	//test++;
	char b[ 32 ];
	itoa( result, b, 10 );
	//itoa( test, b, 10 );
	uart_puts_rn(b);
}
     a64:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     a68:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     a6c:	e0 ec       	ldi	r30, 0xC0	; 192
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	82 60       	ori	r24, 0x02	; 2
     a74:	80 83       	st	Z, r24
     a76:	88 e1       	ldi	r24, 0x18	; 24
     a78:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     a7c:	86 e0       	ldi	r24, 0x06	; 6
     a7e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     a82:	08 95       	ret

00000a84 <USART_Transmit>:
     a84:	e0 ec       	ldi	r30, 0xC0	; 192
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	90 81       	ld	r25, Z
     a8a:	95 ff       	sbrs	r25, 5
     a8c:	fd cf       	rjmp	.-6      	; 0xa88 <USART_Transmit+0x4>
     a8e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     a92:	08 95       	ret

00000a94 <uart_puts>:
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
     a9a:	88 81       	ld	r24, Y
     a9c:	88 23       	and	r24, r24
     a9e:	31 f0       	breq	.+12     	; 0xaac <uart_puts+0x18>
     aa0:	21 96       	adiw	r28, 0x01	; 1
     aa2:	0e 94 42 05 	call	0xa84	; 0xa84 <USART_Transmit>
     aa6:	89 91       	ld	r24, Y+
     aa8:	81 11       	cpse	r24, r1
     aaa:	fb cf       	rjmp	.-10     	; 0xaa2 <uart_puts+0xe>
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <uart_puts_rn>:
     ab2:	0e 94 4a 05 	call	0xa94	; 0xa94 <uart_puts>
     ab6:	8a e1       	ldi	r24, 0x1A	; 26
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	0e 94 4a 05 	call	0xa94	; 0xa94 <uart_puts>
     abe:	08 95       	ret

00000ac0 <init_timer>:
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	84 bd       	out	0x24, r24	; 36
     ac4:	95 e0       	ldi	r25, 0x05	; 5
     ac6:	95 bd       	out	0x25, r25	; 37
     ac8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     acc:	8c e7       	ldi	r24, 0x7C	; 124
     ace:	87 bd       	out	0x27, r24	; 39
     ad0:	78 94       	sei
     ad2:	08 95       	ret

00000ad4 <adc_init>:
     ad4:	88 ec       	ldi	r24, 0xC8	; 200
     ad6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     ada:	87 e8       	ldi	r24, 0x87	; 135
     adc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     ae0:	08 95       	ret

00000ae2 <start_conversion_asynchro>:

void start_conversion_asynchro (void){
	//uint16_t result;
	ADCSRA |= (1<<ADIE);
     ae2:	ea e7       	ldi	r30, 0x7A	; 122
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	88 60       	ori	r24, 0x08	; 8
     aea:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     aec:	80 81       	ld	r24, Z
     aee:	80 64       	ori	r24, 0x40	; 64
     af0:	80 83       	st	Z, r24
     af2:	08 95       	ret

00000af4 <__vector_21>:
}



ISR(ADC_vect)
{
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	8f 93       	push	r24
     b00:	9f 93       	push	r25
}
uint16_t conversion_result (void){
	uint16_t conv_result;
	
	//conv_result = (ADCH << 8) | (ADCL);
	conv_result = ADCW;
     b02:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     b06:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	return conv_result - 337;
     b0a:	81 55       	subi	r24, 0x51	; 81
     b0c:	91 40       	sbci	r25, 0x01	; 1


ISR(ADC_vect)
{
	
	adc_result = conversion_result();
     b0e:	90 93 c0 03 	sts	0x03C0, r25	; 0x8003c0 <adc_result+0x1>
     b12:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <adc_result>
		
	//ADCSRA |= (1<<ADIF);
	flag = 1;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <flag>
		

	
}
     b1c:	9f 91       	pop	r25
     b1e:	8f 91       	pop	r24
     b20:	0f 90       	pop	r0
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	0f 90       	pop	r0
     b26:	1f 90       	pop	r1
     b28:	18 95       	reti

00000b2a <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
     b2a:	1f 92       	push	r1
     b2c:	0f 92       	push	r0
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	0f 92       	push	r0
     b32:	11 24       	eor	r1, r1
     b34:	2f 93       	push	r18
     b36:	3f 93       	push	r19
     b38:	4f 93       	push	r20
     b3a:	5f 93       	push	r21
     b3c:	6f 93       	push	r22
     b3e:	7f 93       	push	r23
     b40:	8f 93       	push	r24
     b42:	9f 93       	push	r25
     b44:	af 93       	push	r26
     b46:	bf 93       	push	r27
     b48:	ef 93       	push	r30
     b4a:	ff 93       	push	r31
	// user code here
	licznik++;
     b4c:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <licznik>
     b50:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <licznik+0x1>
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	90 93 c2 03 	sts	0x03C2, r25	; 0x8003c2 <licznik+0x1>
     b5a:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <licznik>
	licznik_32bit++;
     b5e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <licznik_32bit>
     b62:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <licznik_32bit+0x1>
     b66:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <licznik_32bit+0x2>
     b6a:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <licznik_32bit+0x3>
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	a1 1d       	adc	r26, r1
     b72:	b1 1d       	adc	r27, r1
     b74:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <licznik_32bit>
     b78:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <licznik_32bit+0x1>
     b7c:	a0 93 8d 01 	sts	0x018D, r26	; 0x80018d <licznik_32bit+0x2>
     b80:	b0 93 8e 01 	sts	0x018E, r27	; 0x80018e <licznik_32bit+0x3>
	if(licznik >= 125){ //dopelnienie do 1sec
     b84:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <licznik>
     b88:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <licznik+0x1>
     b8c:	8d 37       	cpi	r24, 0x7D	; 125
     b8e:	91 05       	cpc	r25, r1
     b90:	30 f0       	brcs	.+12     	; 0xb9e <__vector_14+0x74>
		//uart_puts("IT works");
		licznik = 0;
     b92:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <licznik+0x1>
     b96:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <licznik>
		start_conversion_asynchro();
     b9a:	0e 94 71 05 	call	0xae2	; 0xae2 <start_conversion_asynchro>
		//start_conversion_synchro();
	}
	
}
     b9e:	ff 91       	pop	r31
     ba0:	ef 91       	pop	r30
     ba2:	bf 91       	pop	r27
     ba4:	af 91       	pop	r26
     ba6:	9f 91       	pop	r25
     ba8:	8f 91       	pop	r24
     baa:	7f 91       	pop	r23
     bac:	6f 91       	pop	r22
     bae:	5f 91       	pop	r21
     bb0:	4f 91       	pop	r20
     bb2:	3f 91       	pop	r19
     bb4:	2f 91       	pop	r18
     bb6:	0f 90       	pop	r0
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	0f 90       	pop	r0
     bbc:	1f 90       	pop	r1
     bbe:	18 95       	reti

00000bc0 <main>:

int main (void) // clock 16 Mhz
{
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	c0 5a       	subi	r28, 0xA0	; 160
     bca:	d1 09       	sbc	r29, r1
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	cd bf       	out	0x3d, r28	; 61
}

void USART_Init_Baud_Rate (unsigned  long Baud_rate){
	unsigned int UBRR;
	UBRR =  ((F_CPU / 8UL) /  Baud_rate ) - 1UL;
	USART_Init(UBRR);
     bd6:	83 e3       	ldi	r24, 0x33	; 51
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 32 05 	call	0xa64	; 0xa64 <USART_Init>
	//CLKPR  = 1<<CLKPS0;
	USART_Init_Baud_Rate( 38400 ); // do not work at very high baud rate
	//USART_Init(1); //Use this when you want to get very very high baud rate
	
	
	uart_puts_rn("Arduino Booted");
     bde:	89 e4       	ldi	r24, 0x49	; 73
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	0e 94 59 05 	call	0xab2	; 0xab2 <uart_puts_rn>
	adc_init();
     be6:	0e 94 6a 05 	call	0xad4	; 0xad4 <adc_init>
// 	while(1){
// 		_delay_ms(500);
// 		start_conversion_synchro();
// 	}
	
init_timer();
     bea:	0e 94 60 05 	call	0xac0	; 0xac0 <init_timer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bee:	2f ef       	ldi	r18, 0xFF	; 255
     bf0:	89 e6       	ldi	r24, 0x69	; 105
     bf2:	98 e1       	ldi	r25, 0x18	; 24
     bf4:	21 50       	subi	r18, 0x01	; 1
     bf6:	80 40       	sbci	r24, 0x00	; 0
     bf8:	90 40       	sbci	r25, 0x00	; 0
     bfa:	e1 f7       	brne	.-8      	; 0xbf4 <main+0x34>
     bfc:	00 c0       	rjmp	.+0      	; 0xbfe <main+0x3e>
     bfe:	00 00       	nop
	//SET_LED_ON();
	_delay_ms(500);
	//SET_LED_OFF();

	FRESULT fr;
	f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	6c e1       	ldi	r22, 0x1C	; 28
     c04:	71 e0       	ldi	r23, 0x01	; 1
     c06:	80 e9       	ldi	r24, 0x90	; 144
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <f_mount>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
     c0e:	8e 01       	movw	r16, r28
     c10:	0f 59       	subi	r16, 0x9F	; 159
     c12:	1f 4f       	sbci	r17, 0xFF	; 255

// 	for (;;) {
// 
// 	}
	while(1){
		if(flag){
     c14:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <flag>
     c18:	88 23       	and	r24, r24
     c1a:	e1 f3       	breq	.-8      	; 0xc14 <main+0x54>
				flag = 0;
     c1c:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <flag>
				char adc_result_string[ 32 ];
				char licznik_32bit_string[ 32 ];
				char string_size[ 32 ];
				utoa( adc_result, adc_result_string, 10 );
     c20:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <adc_result>
     c24:	90 91 c0 03 	lds	r25, 0x03C0	; 0x8003c0 <adc_result+0x1>
     c28:	4a e0       	ldi	r20, 0x0A	; 10
     c2a:	be 01       	movw	r22, r28
     c2c:	6f 57       	subi	r22, 0x7F	; 127
     c2e:	7f 4f       	sbci	r23, 0xFF	; 255
     c30:	0e 94 b1 09 	call	0x1362	; 0x1362 <__utoa_ncheck>
				utoa( licznik_32bit, licznik_32bit_string, 10 );
     c34:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <licznik_32bit>
     c38:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <licznik_32bit+0x1>
     c3c:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <licznik_32bit+0x2>
     c40:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <licznik_32bit+0x3>
     c44:	4a e0       	ldi	r20, 0x0A	; 10
     c46:	b8 01       	movw	r22, r16
     c48:	0e 94 b1 09 	call	0x1362	; 0x1362 <__utoa_ncheck>
				UINT string_size_int = strlen(licznik_32bit_string);
     c4c:	f8 01       	movw	r30, r16
     c4e:	01 90       	ld	r0, Z+
     c50:	00 20       	and	r0, r0
     c52:	e9 f7       	brne	.-6      	; 0xc4e <main+0x8e>
     c54:	cf 01       	movw	r24, r30
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	4a e0       	ldi	r20, 0x0A	; 10
     c5a:	be 01       	movw	r22, r28
     c5c:	6f 5b       	subi	r22, 0xBF	; 191
     c5e:	7f 4f       	sbci	r23, 0xFF	; 255
     c60:	80 1b       	sub	r24, r16
     c62:	91 0b       	sbc	r25, r17
     c64:	0e 94 b1 09 	call	0x1362	; 0x1362 <__utoa_ncheck>
				utoa( string_size_int, string_size, 10 );
				
				uart_puts("String size: ");
     c68:	88 e5       	ldi	r24, 0x58	; 88
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	0e 94 4a 05 	call	0xa94	; 0xa94 <uart_puts>
				uart_puts(string_size);
     c70:	ce 01       	movw	r24, r28
     c72:	8f 5b       	subi	r24, 0xBF	; 191
     c74:	9f 4f       	sbci	r25, 0xFF	; 255
     c76:	0e 94 4a 05 	call	0xa94	; 0xa94 <uart_puts>
				uart_puts(" Licznik_32bit: ");
     c7a:	86 e6       	ldi	r24, 0x66	; 102
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	0e 94 4a 05 	call	0xa94	; 0xa94 <uart_puts>
				uart_puts(licznik_32bit_string);
     c82:	c8 01       	movw	r24, r16
     c84:	0e 94 4a 05 	call	0xa94	; 0xa94 <uart_puts>
				uart_puts(" ADC asynchro ");
     c88:	87 e7       	ldi	r24, 0x77	; 119
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 4a 05 	call	0xa94	; 0xa94 <uart_puts>
				uart_puts_rn(adc_result_string);
     c90:	ce 01       	movw	r24, r28
     c92:	8f 57       	subi	r24, 0x7F	; 127
     c94:	9f 4f       	sbci	r25, 0xFF	; 255
     c96:	0e 94 59 05 	call	0xab2	; 0xab2 <uart_puts_rn>
				char string_to_sd[64];
				string_to_sd[0]= '\0';
				
				strcpy(string_to_sd, "String size: ");
     c9a:	8e e0       	ldi	r24, 0x0E	; 14
     c9c:	e8 e5       	ldi	r30, 0x58	; 88
     c9e:	f1 e0       	ldi	r31, 0x01	; 1
     ca0:	de 01       	movw	r26, r28
     ca2:	11 96       	adiw	r26, 0x01	; 1
     ca4:	01 90       	ld	r0, Z+
     ca6:	0d 92       	st	X+, r0
     ca8:	8a 95       	dec	r24
     caa:	e1 f7       	brne	.-8      	; 0xca4 <main+0xe4>
				char *p = string_to_sd + strlen("String size: ");
				strcpy(p, licznik_32bit_string);
     cac:	b8 01       	movw	r22, r16
     cae:	ce 01       	movw	r24, r28
     cb0:	0e 96       	adiw	r24, 0x0e	; 14
     cb2:	0e 94 aa 09 	call	0x1354	; 0x1354 <strcpy>
				uart_puts_rn(string_to_sd);
     cb6:	ce 01       	movw	r24, r28
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	0e 94 59 05 	call	0xab2	; 0xab2 <uart_puts_rn>
     cbe:	aa cf       	rjmp	.-172    	; 0xc14 <main+0x54>

00000cc0 <dly_us>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cc0:	25 e0       	ldi	r18, 0x05	; 5
     cc2:	2a 95       	dec	r18
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <dly_us+0x2>
     cc6:	00 00       	nop
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif*/
_delay_us(1);
	} while (--n);
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	d1 f7       	brne	.-12     	; 0xcc0 <dly_us>
}
     ccc:	08 95       	ret

00000cce <SPI_MasterInit>:
#define DD_SCK PB5
#define DD_MISO PB4
#define DD_CS PB2

void SPI_MasterInit(void){
	CS_INIT();
     cce:	22 9a       	sbi	0x04, 2	; 4
	DDR_SPI &= ~(( 1<<DD_MISO ) );
     cd0:	24 98       	cbi	0x04, 4	; 4
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)| ( 1<<DD_CS ); /* Set MOSI and SCK output, all others input */
     cd2:	84 b1       	in	r24, 0x04	; 4
     cd4:	8c 62       	ori	r24, 0x2C	; 44
     cd6:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR);//|(1<<SPI2X); /* Enable SPI, Master, set clock rate fck/16 */
     cd8:	80 e5       	ldi	r24, 0x50	; 80
     cda:	8c bd       	out	0x2c, r24	; 44
     cdc:	08 95       	ret

00000cde <SPI_MasterTransmit>:
	
	}
	
BYTE SPI_MasterTransmit(BYTE cData){/* Start transmission */
	BYTE received_data;
	SPDR = cData;/* Wait for transmission complete */
     cde:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
     ce0:	0d b4       	in	r0, 0x2d	; 45
     ce2:	07 fe       	sbrs	r0, 7
     ce4:	fd cf       	rjmp	.-6      	; 0xce0 <SPI_MasterTransmit+0x2>
	received_data = SPDR;
     ce6:	8e b5       	in	r24, 0x2e	; 46
	return received_data;
	}
     ce8:	08 95       	ret

00000cea <rcvr_mmc>:
static
void rcvr_mmc (
	BYTE *buff,	/* Pointer to read buffer */
	UINT bc		/* Number of bytes to receive */
)
{
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	eb 01       	movw	r28, r22
     cf4:	8c 01       	movw	r16, r24
// 		r <<= 1; if (DO) r++;	/* bit1 */
// 		CK_H(); CK_L();
// 		r <<= 1; if (DO) r++;	/* bit0 */
// 		CK_H(); CK_L();
// 		*buff++ = r;			/* Store a received byte */
		*buff++ = SPI_MasterTransmit(255);
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	0e 94 6f 06 	call	0xcde	; 0xcde <SPI_MasterTransmit>
     cfc:	f8 01       	movw	r30, r16
     cfe:	81 93       	st	Z+, r24
     d00:	8f 01       	movw	r16, r30
	} while (--bc);
     d02:	21 97       	sbiw	r28, 0x01	; 1
     d04:	c1 f7       	brne	.-16     	; 0xcf6 <rcvr_mmc+0xc>
}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	08 95       	ret

00000d10 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	1f 92       	push	r1
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
     d1e:	08 e8       	ldi	r16, 0x88	; 136
     d20:	13 e1       	ldi	r17, 0x13	; 19
		rcvr_mmc(&d, 1);
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	ce 01       	movw	r24, r28
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	0e 94 75 06 	call	0xcea	; 0xcea <rcvr_mmc>
		if (d == 0xFF) break;
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	8f 3f       	cpi	r24, 0xFF	; 255
     d32:	39 f0       	breq	.+14     	; 0xd42 <wait_ready+0x32>
		dly_us(100);
     d34:	84 e6       	ldi	r24, 0x64	; 100
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 60 06 	call	0xcc0	; 0xcc0 <dly_us>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
     d3c:	01 50       	subi	r16, 0x01	; 1
     d3e:	11 09       	sbc	r17, r1
     d40:	81 f7       	brne	.-32     	; 0xd22 <wait_ready+0x12>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	01 2b       	or	r16, r17
     d48:	11 f4       	brne	.+4      	; 0xd4e <wait_ready+0x3e>
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
}
     d4e:	0f 90       	pop	r0
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	08 95       	ret

00000d5a <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	1f 92       	push	r1
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();				/* Set CS# high */
     d64:	2a 9a       	sbi	0x05, 2	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	0e 94 75 06 	call	0xcea	; 0xcea <rcvr_mmc>
}
     d72:	0f 90       	pop	r0
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	1f 92       	push	r1
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();				/* Set CS# low */
     d88:	2a 98       	cbi	0x05, 2	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	ce 01       	movw	r24, r28
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	0e 94 75 06 	call	0xcea	; 0xcea <rcvr_mmc>
	if (wait_ready()) return 1;	/* Wait for card ready */
     d96:	0e 94 88 06 	call	0xd10	; 0xd10 <wait_ready>
     d9a:	8c 01       	movw	r16, r24
     d9c:	89 2b       	or	r24, r25
     d9e:	19 f4       	brne	.+6      	; 0xda6 <select+0x2c>
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
			//return 1;
	deselect();
     da0:	0e 94 ad 06 	call	0xd5a	; 0xd5a <deselect>
	return 0;			/* Failed */
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <select+0x30>
{
	BYTE d;

	CS_L();				/* Set CS# low */
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
	if (wait_ready()) return 1;	/* Wait for card ready */
     da6:	01 e0       	ldi	r16, 0x01	; 1
     da8:	10 e0       	ldi	r17, 0x00	; 0
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
			//return 1;
	deselect();
	return 0;			/* Failed */
}
     daa:	c8 01       	movw	r24, r16
     dac:	0f 90       	pop	r0
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	08 95       	ret

00000db8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
     db8:	cf 92       	push	r12
     dba:	df 92       	push	r13
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	00 d0       	rcall	.+0      	; 0xdca <rcvr_datablock+0x12>
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	7c 01       	movw	r14, r24
     dd0:	6b 01       	movw	r12, r22
     dd2:	08 ee       	ldi	r16, 0xE8	; 232
     dd4:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	ce 01       	movw	r24, r28
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	0e 94 75 06 	call	0xcea	; 0xcea <rcvr_mmc>
		if (d[0] != 0xFF) break;
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	8f 3f       	cpi	r24, 0xFF	; 255
     de6:	39 f4       	brne	.+14     	; 0xdf6 <rcvr_datablock+0x3e>
		dly_us(100);
     de8:	84 e6       	ldi	r24, 0x64	; 100
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 60 06 	call	0xcc0	; 0xcc0 <dly_us>
     df0:	01 50       	subi	r16, 0x01	; 1
     df2:	11 09       	sbc	r17, r1
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
     df4:	81 f7       	brne	.-32     	; 0xdd6 <rcvr_datablock+0x1e>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	8e 3f       	cpi	r24, 0xFE	; 254
     dfa:	69 f4       	brne	.+26     	; 0xe16 <rcvr_datablock+0x5e>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
     dfc:	b6 01       	movw	r22, r12
     dfe:	c7 01       	movw	r24, r14
     e00:	0e 94 75 06 	call	0xcea	; 0xcea <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
     e04:	62 e0       	ldi	r22, 0x02	; 2
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	ce 01       	movw	r24, r28
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	0e 94 75 06 	call	0xcea	; 0xcea <rcvr_mmc>

	return 1;						/* Return with success */
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <rcvr_datablock+0x62>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	df 90       	pop	r13
     e2c:	cf 90       	pop	r12
     e2e:	08 95       	ret

00000e30 <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	eb 01       	movw	r28, r22
     e3a:	8c 01       	movw	r16, r24


	do {
		d = *buff++;	/* Get a byte to be sent */
		
		SPI_MasterTransmit(d);
     e3c:	f8 01       	movw	r30, r16
     e3e:	81 91       	ld	r24, Z+
     e40:	8f 01       	movw	r16, r30
     e42:	0e 94 6f 06 	call	0xcde	; 0xcde <SPI_MasterTransmit>
		//CK_H(); CK_L();
	//	if (d & 0x01) DI_H(); else { DI_L();	/* bit0 */
			//PORTB |= (1<<5);
		//}
		//CK_H(); CK_L();
	} while (--bc);
     e46:	21 97       	sbiw	r28, 0x01	; 1
     e48:	c9 f7       	brne	.-14     	; 0xe3c <xmit_mmc+0xc>
}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	08 95       	ret

00000e54 <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     e54:	df 92       	push	r13
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	27 97       	sbiw	r28, 0x07	; 7
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	18 2f       	mov	r17, r24
     e74:	04 2f       	mov	r16, r20
     e76:	f5 2e       	mov	r15, r21
     e78:	e6 2e       	mov	r14, r22
     e7a:	d7 2e       	mov	r13, r23
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     e7c:	88 23       	and	r24, r24
     e7e:	54 f4       	brge	.+20     	; 0xe94 <send_cmd+0x40>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	ba 01       	movw	r22, r20
     e86:	87 e3       	ldi	r24, 0x37	; 55
     e88:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_cmd>
		if (n > 1) return n;
     e8c:	82 30       	cpi	r24, 0x02	; 2
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <send_cmd+0x3e>
     e90:	57 c0       	rjmp	.+174    	; 0xf40 <send_cmd+0xec>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     e92:	1f 77       	andi	r17, 0x7F	; 127
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     e94:	1c 30       	cpi	r17, 0x0C	; 12
     e96:	29 f1       	breq	.+74     	; 0xee2 <send_cmd+0x8e>
		deselect();
     e98:	0e 94 ad 06 	call	0xd5a	; 0xd5a <deselect>
		if (!select()) return 0xFF;
     e9c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <select>
     ea0:	89 2b       	or	r24, r25
     ea2:	e9 f0       	breq	.+58     	; 0xede <send_cmd+0x8a>
	}
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
     ea4:	81 2f       	mov	r24, r17
     ea6:	80 64       	ori	r24, 0x40	; 64
     ea8:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
     eaa:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
     eac:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
     eae:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
     eb0:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
     eb2:	11 23       	and	r17, r17
     eb4:	e1 f1       	breq	.+120    	; 0xf2e <send_cmd+0xda>
     eb6:	38 c0       	rjmp	.+112    	; 0xf28 <send_cmd+0xd4>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
	xmit_mmc(buf, 6);

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	0e 94 75 06 	call	0xcea	; 0xcea <rcvr_mmc>
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     ec4:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	ce 01       	movw	r24, r28
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	0e 94 75 06 	call	0xcea	; 0xcea <rcvr_mmc>
	while ((d & 0x80) && --n);
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	a4 f5       	brge	.+104    	; 0xf40 <send_cmd+0xec>
     ed8:	11 50       	subi	r17, 0x01	; 1
     eda:	a9 f7       	brne	.-22     	; 0xec6 <send_cmd+0x72>
     edc:	31 c0       	rjmp	.+98     	; 0xf40 <send_cmd+0xec>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	2f c0       	rjmp	.+94     	; 0xf40 <send_cmd+0xec>
	}
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
     ee2:	8c e4       	ldi	r24, 0x4C	; 76
     ee4:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
     ee6:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
     ee8:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
     eea:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
     eec:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
     ef2:	66 e0       	ldi	r22, 0x06	; 6
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	ce 01       	movw	r24, r28
     ef8:	02 96       	adiw	r24, 0x02	; 2
     efa:	0e 94 18 07 	call	0xe30	; 0xe30 <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
     efe:	1c 30       	cpi	r17, 0x0C	; 12
     f00:	09 f7       	brne	.-62     	; 0xec4 <send_cmd+0x70>
     f02:	da cf       	rjmp	.-76     	; 0xeb8 <send_cmd+0x64>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
     f04:	87 e8       	ldi	r24, 0x87	; 135
     f06:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
     f08:	66 e0       	ldi	r22, 0x06	; 6
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	ce 01       	movw	r24, r28
     f0e:	02 96       	adiw	r24, 0x02	; 2
     f10:	0e 94 18 07 	call	0xe30	; 0xe30 <xmit_mmc>
     f14:	d7 cf       	rjmp	.-82     	; 0xec4 <send_cmd+0x70>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
     f1a:	66 e0       	ldi	r22, 0x06	; 6
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	ce 01       	movw	r24, r28
     f20:	02 96       	adiw	r24, 0x02	; 2
     f22:	0e 94 18 07 	call	0xe30	; 0xe30 <xmit_mmc>
     f26:	ce cf       	rjmp	.-100    	; 0xec4 <send_cmd+0x70>
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
     f28:	18 30       	cpi	r17, 0x08	; 8
     f2a:	61 f3       	breq	.-40     	; 0xf04 <send_cmd+0xb0>
     f2c:	f4 cf       	rjmp	.-24     	; 0xf16 <send_cmd+0xc2>
	buf[5] = n;
     f2e:	85 e9       	ldi	r24, 0x95	; 149
     f30:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
     f32:	66 e0       	ldi	r22, 0x06	; 6
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	ce 01       	movw	r24, r28
     f38:	02 96       	adiw	r24, 0x02	; 2
     f3a:	0e 94 18 07 	call	0xe30	; 0xe30 <xmit_mmc>
     f3e:	c2 cf       	rjmp	.-124    	; 0xec4 <send_cmd+0x70>
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
     f40:	27 96       	adiw	r28, 0x07	; 7
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	ff 90       	pop	r15
     f56:	ef 90       	pop	r14
     f58:	df 90       	pop	r13
     f5a:	08 95       	ret

00000f5c <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	00 d0       	rcall	.+0      	; 0xf68 <xmit_datablock+0xc>
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	7c 01       	movw	r14, r24
     f6e:	16 2f       	mov	r17, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
     f70:	0e 94 88 06 	call	0xd10	; 0xd10 <wait_ready>
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	31 f1       	breq	.+76     	; 0xfc4 <xmit_datablock+0x68>

	d[0] = token;
     f78:	19 83       	std	Y+1, r17	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
     f7a:	61 e0       	ldi	r22, 0x01	; 1
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	ce 01       	movw	r24, r28
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	0e 94 18 07 	call	0xe30	; 0xe30 <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
     f86:	1d 3f       	cpi	r17, 0xFD	; 253
     f88:	d9 f0       	breq	.+54     	; 0xfc0 <xmit_datablock+0x64>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	72 e0       	ldi	r23, 0x02	; 2
     f8e:	c7 01       	movw	r24, r14
     f90:	0e 94 18 07 	call	0xe30	; 0xe30 <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
     f94:	62 e0       	ldi	r22, 0x02	; 2
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	ce 01       	movw	r24, r28
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	0e 94 75 06 	call	0xcea	; 0xcea <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
     fa0:	61 e0       	ldi	r22, 0x01	; 1
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	ce 01       	movw	r24, r28
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	0e 94 75 06 	call	0xcea	; 0xcea <rcvr_mmc>
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	8f 71       	andi	r24, 0x1F	; 31
     fb0:	31 e0       	ldi	r19, 0x01	; 1
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	85 30       	cpi	r24, 0x05	; 5
     fb6:	09 f0       	breq	.+2      	; 0xfba <xmit_datablock+0x5e>
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	83 2f       	mov	r24, r19
     fbc:	92 2f       	mov	r25, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <xmit_datablock+0x68>
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
}
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	08 95       	ret

00000fd4 <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     fd4:	81 11       	cpse	r24, r1
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <disk_status+0xa>

	return Stat;
     fd8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     fdc:	08 95       	ret

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     fde:	81 e0       	ldi	r24, 0x01	; 1

	return Stat;
}
     fe0:	08 95       	ret

00000fe2 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	00 d0       	rcall	.+0      	; 0xff0 <disk_initialize+0xe>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <disk_initialize+0x10>
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
     ff6:	81 11       	cpse	r24, r1
     ff8:	ac c0       	rjmp	.+344    	; 0x1152 <disk_initialize+0x170>

	dly_us(10000);			/* 10ms */
     ffa:	80 e1       	ldi	r24, 0x10	; 16
     ffc:	97 e2       	ldi	r25, 0x27	; 39
     ffe:	0e 94 60 06 	call	0xcc0	; 0xcc0 <dly_us>
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
    1002:	22 9a       	sbi	0x04, 2	; 4
    1004:	2a 9a       	sbi	0x05, 2	; 5
	//CK_INIT(); //CK_L();		/* Initialize port pin tied to SCLK */
	//DI_INIT();				/* Initialize port pin tied to DI */
	//DO_INIT();				/* Initialize port pin tied to DO */
	SPI_MasterInit();
    1006:	0e 94 67 06 	call	0xcce	; 0xcce <SPI_MasterInit>
    100a:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	ce 01       	movw	r24, r28
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	0e 94 75 06 	call	0xcea	; 0xcea <rcvr_mmc>
    1018:	11 50       	subi	r17, 0x01	; 1
    101a:	c1 f7       	brne	.-16     	; 0x100c <disk_initialize+0x2a>
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	ba 01       	movw	r22, r20
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_cmd>
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	09 f0       	breq	.+2      	; 0x102e <disk_initialize+0x4c>
    102c:	77 c0       	rjmp	.+238    	; 0x111c <disk_initialize+0x13a>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    102e:	4a ea       	ldi	r20, 0xAA	; 170
    1030:	51 e0       	ldi	r21, 0x01	; 1
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	88 e0       	ldi	r24, 0x08	; 8
    1038:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_cmd>
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	d1 f5       	brne	.+116    	; 0x10b4 <disk_initialize+0xd2>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    1040:	64 e0       	ldi	r22, 0x04	; 4
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	ce 01       	movw	r24, r28
    1046:	01 96       	adiw	r24, 0x01	; 1
    1048:	0e 94 75 06 	call	0xcea	; 0xcea <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	09 f0       	breq	.+2      	; 0x1054 <disk_initialize+0x72>
    1052:	66 c0       	rjmp	.+204    	; 0x1120 <disk_initialize+0x13e>
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	8a 3a       	cpi	r24, 0xAA	; 170
    1058:	09 f0       	breq	.+2      	; 0x105c <disk_initialize+0x7a>
    105a:	64 c0       	rjmp	.+200    	; 0x1124 <disk_initialize+0x142>
    105c:	08 ee       	ldi	r16, 0xE8	; 232
    105e:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    1060:	40 e0       	ldi	r20, 0x00	; 0
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e4       	ldi	r23, 0x40	; 64
    1068:	89 ea       	ldi	r24, 0xA9	; 169
    106a:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_cmd>
    106e:	88 23       	and	r24, r24
    1070:	49 f0       	breq	.+18     	; 0x1084 <disk_initialize+0xa2>
					dly_us(1000);
    1072:	88 ee       	ldi	r24, 0xE8	; 232
    1074:	93 e0       	ldi	r25, 0x03	; 3
    1076:	0e 94 60 06 	call	0xcc0	; 0xcc0 <dly_us>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    107a:	01 50       	subi	r16, 0x01	; 1
    107c:	11 09       	sbc	r17, r1
    107e:	81 f7       	brne	.-32     	; 0x1060 <disk_initialize+0x7e>
	//DO_INIT();				/* Initialize port pin tied to DO */
	SPI_MasterInit();
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	ty = 0;
    1080:	f1 2c       	mov	r15, r1
    1082:	5c c0       	rjmp	.+184    	; 0x113c <disk_initialize+0x15a>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    1084:	01 2b       	or	r16, r17
    1086:	09 f4       	brne	.+2      	; 0x108a <disk_initialize+0xa8>
    1088:	4f c0       	rjmp	.+158    	; 0x1128 <disk_initialize+0x146>
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	ba 01       	movw	r22, r20
    1090:	8a e3       	ldi	r24, 0x3A	; 58
    1092:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_cmd>
    1096:	81 11       	cpse	r24, r1
    1098:	49 c0       	rjmp	.+146    	; 0x112c <disk_initialize+0x14a>
					rcvr_mmc(buf, 4);
    109a:	64 e0       	ldi	r22, 0x04	; 4
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	ce 01       	movw	r24, r28
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	0e 94 75 06 	call	0xcea	; 0xcea <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	86 fd       	sbrc	r24, 6
    10aa:	42 c0       	rjmp	.+132    	; 0x1130 <disk_initialize+0x14e>
    10ac:	68 94       	set
    10ae:	ff 24       	eor	r15, r15
    10b0:	f2 f8       	bld	r15, 2
    10b2:	44 c0       	rjmp	.+136    	; 0x113c <disk_initialize+0x15a>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	ba 01       	movw	r22, r20
    10ba:	89 ea       	ldi	r24, 0xA9	; 169
    10bc:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_cmd>
    10c0:	82 30       	cpi	r24, 0x02	; 2
    10c2:	28 f0       	brcs	.+10     	; 0x10ce <disk_initialize+0xec>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    10c4:	ee 24       	eor	r14, r14
    10c6:	e3 94       	inc	r14
    10c8:	ff 24       	eor	r15, r15
    10ca:	f3 94       	inc	r15
    10cc:	07 c0       	rjmp	.+14     	; 0x10dc <disk_initialize+0xfa>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    10ce:	0f 2e       	mov	r0, r31
    10d0:	f9 ea       	ldi	r31, 0xA9	; 169
    10d2:	ef 2e       	mov	r14, r31
    10d4:	f0 2d       	mov	r31, r0
    10d6:	68 94       	set
    10d8:	ff 24       	eor	r15, r15
    10da:	f1 f8       	bld	r15, 1
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    10dc:	08 ee       	ldi	r16, 0xE8	; 232
    10de:	13 e0       	ldi	r17, 0x03	; 3
				if (send_cmd(cmd, 0) == 0) break;
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	ba 01       	movw	r22, r20
    10e6:	8e 2d       	mov	r24, r14
    10e8:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_cmd>
    10ec:	88 23       	and	r24, r24
    10ee:	49 f0       	breq	.+18     	; 0x1102 <disk_initialize+0x120>
				dly_us(1000);
    10f0:	88 ee       	ldi	r24, 0xE8	; 232
    10f2:	93 e0       	ldi	r25, 0x03	; 3
    10f4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <dly_us>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    10f8:	01 50       	subi	r16, 0x01	; 1
    10fa:	11 09       	sbc	r17, r1
    10fc:	89 f7       	brne	.-30     	; 0x10e0 <disk_initialize+0xfe>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    10fe:	f1 2c       	mov	r15, r1
    1100:	1d c0       	rjmp	.+58     	; 0x113c <disk_initialize+0x15a>
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    1102:	01 2b       	or	r16, r17
    1104:	d1 f0       	breq	.+52     	; 0x113a <disk_initialize+0x158>
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	52 e0       	ldi	r21, 0x02	; 2
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	80 e1       	ldi	r24, 0x10	; 16
    1110:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_cmd>
    1114:	88 23       	and	r24, r24
    1116:	91 f0       	breq	.+36     	; 0x113c <disk_initialize+0x15a>
				ty = 0;
    1118:	f1 2c       	mov	r15, r1
    111a:	10 c0       	rjmp	.+32     	; 0x113c <disk_initialize+0x15a>
	//DO_INIT();				/* Initialize port pin tied to DO */
	SPI_MasterInit();
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	ty = 0;
    111c:	f1 2c       	mov	r15, r1
    111e:	0e c0       	rjmp	.+28     	; 0x113c <disk_initialize+0x15a>
    1120:	f1 2c       	mov	r15, r1
    1122:	0c c0       	rjmp	.+24     	; 0x113c <disk_initialize+0x15a>
    1124:	f1 2c       	mov	r15, r1
    1126:	0a c0       	rjmp	.+20     	; 0x113c <disk_initialize+0x15a>
    1128:	f1 2c       	mov	r15, r1
    112a:	08 c0       	rjmp	.+16     	; 0x113c <disk_initialize+0x15a>
    112c:	f1 2c       	mov	r15, r1
    112e:	06 c0       	rjmp	.+12     	; 0x113c <disk_initialize+0x15a>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
					rcvr_mmc(buf, 4);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    1130:	0f 2e       	mov	r0, r31
    1132:	fc e0       	ldi	r31, 0x0C	; 12
    1134:	ff 2e       	mov	r15, r31
    1136:	f0 2d       	mov	r31, r0
    1138:	01 c0       	rjmp	.+2      	; 0x113c <disk_initialize+0x15a>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    113a:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
    113c:	f0 92 8f 01 	sts	0x018F, r15	; 0x80018f <CardType>
	s = ty ? 0 : STA_NOINIT;
    1140:	11 e0       	ldi	r17, 0x01	; 1
    1142:	f1 10       	cpse	r15, r1
    1144:	10 e0       	ldi	r17, 0x00	; 0
	Stat = s;
    1146:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <__DATA_REGION_ORIGIN__>

	deselect();
    114a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <deselect>

	return s;
    114e:	81 2f       	mov	r24, r17
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <disk_initialize+0x172>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    1152:	83 e0       	ldi	r24, 0x03	; 3
	Stat = s;

	deselect();

	return s;
}
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	08 95       	ret

0000116a <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	eb 01       	movw	r28, r22

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    1176:	81 11       	cpse	r24, r1
    1178:	3f c0       	rjmp	.+126    	; 0x11f8 <disk_read+0x8e>
{
	BYTE cmd;
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    117a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    117e:	80 fd       	sbrc	r24, 0
    1180:	3d c0       	rjmp	.+122    	; 0x11fc <disk_read+0x92>
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    1182:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <CardType>
    1186:	83 fd       	sbrc	r24, 3
    1188:	09 c0       	rjmp	.+18     	; 0x119c <disk_read+0x32>
    118a:	01 2e       	mov	r0, r17
    118c:	19 e0       	ldi	r17, 0x09	; 9
    118e:	22 0f       	add	r18, r18
    1190:	33 1f       	adc	r19, r19
    1192:	44 1f       	adc	r20, r20
    1194:	55 1f       	adc	r21, r21
    1196:	1a 95       	dec	r17
    1198:	d1 f7       	brne	.-12     	; 0x118e <disk_read+0x24>
    119a:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    119c:	02 30       	cpi	r16, 0x02	; 2
    119e:	11 05       	cpc	r17, r1
    11a0:	28 f4       	brcc	.+10     	; 0x11ac <disk_read+0x42>
    11a2:	0f 2e       	mov	r0, r31
    11a4:	f1 e1       	ldi	r31, 0x11	; 17
    11a6:	ff 2e       	mov	r15, r31
    11a8:	f0 2d       	mov	r31, r0
    11aa:	04 c0       	rjmp	.+8      	; 0x11b4 <disk_read+0x4a>
    11ac:	0f 2e       	mov	r0, r31
    11ae:	f2 e1       	ldi	r31, 0x12	; 18
    11b0:	ff 2e       	mov	r15, r31
    11b2:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sect) == 0) {
    11b4:	ba 01       	movw	r22, r20
    11b6:	a9 01       	movw	r20, r18
    11b8:	8f 2d       	mov	r24, r15
    11ba:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_cmd>
    11be:	81 11       	cpse	r24, r1
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <disk_read+0x80>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	72 e0       	ldi	r23, 0x02	; 2
    11c6:	ce 01       	movw	r24, r28
    11c8:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <rcvr_datablock>
    11cc:	89 2b       	or	r24, r25
    11ce:	21 f0       	breq	.+8      	; 0x11d8 <disk_read+0x6e>
			buff += 512;
    11d0:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    11d2:	01 50       	subi	r16, 0x01	; 1
    11d4:	11 09       	sbc	r17, r1
    11d6:	a9 f7       	brne	.-22     	; 0x11c2 <disk_read+0x58>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    11d8:	82 e1       	ldi	r24, 0x12	; 18
    11da:	f8 12       	cpse	r15, r24
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <disk_read+0x80>
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	ba 01       	movw	r22, r20
    11e4:	8c e0       	ldi	r24, 0x0C	; 12
    11e6:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_cmd>
	}
	deselect();
    11ea:	0e 94 ad 06 	call	0xd5a	; 0xd5a <deselect>

	return count ? RES_ERROR : RES_OK;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	01 2b       	or	r16, r17
    11f2:	29 f4       	brne	.+10     	; 0x11fe <disk_read+0x94>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <disk_read+0x94>
{
	BYTE cmd;
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <disk_read+0x94>
    11fc:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	08 95       	ret

0000120a <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    120a:	cf 92       	push	r12
    120c:	df 92       	push	r13
    120e:	ef 92       	push	r14
    1210:	ff 92       	push	r15
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	eb 01       	movw	r28, r22
    121c:	69 01       	movw	r12, r18
    121e:	7a 01       	movw	r14, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    1220:	81 11       	cpse	r24, r1
    1222:	50 c0       	rjmp	.+160    	; 0x12c4 <disk_write+0xba>
)
{
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    1224:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1228:	80 fd       	sbrc	r24, 0
    122a:	4e c0       	rjmp	.+156    	; 0x12c8 <disk_write+0xbe>
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    122c:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <CardType>
    1230:	83 fd       	sbrc	r24, 3
    1232:	09 c0       	rjmp	.+18     	; 0x1246 <disk_write+0x3c>
    1234:	0b 2e       	mov	r0, r27
    1236:	b9 e0       	ldi	r27, 0x09	; 9
    1238:	cc 0c       	add	r12, r12
    123a:	dd 1c       	adc	r13, r13
    123c:	ee 1c       	adc	r14, r14
    123e:	ff 1c       	adc	r15, r15
    1240:	ba 95       	dec	r27
    1242:	d1 f7       	brne	.-12     	; 0x1238 <disk_write+0x2e>
    1244:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    1246:	01 30       	cpi	r16, 0x01	; 1
    1248:	11 05       	cpc	r17, r1
    124a:	99 f4       	brne	.+38     	; 0x1272 <disk_write+0x68>
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
    124c:	b7 01       	movw	r22, r14
    124e:	a6 01       	movw	r20, r12
    1250:	88 e1       	ldi	r24, 0x18	; 24
    1252:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_cmd>
    1256:	81 11       	cpse	r24, r1
    1258:	2e c0       	rjmp	.+92     	; 0x12b6 <disk_write+0xac>
			&& xmit_datablock(buff, 0xFE))
    125a:	6e ef       	ldi	r22, 0xFE	; 254
    125c:	ce 01       	movw	r24, r28
    125e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <xmit_datablock>
    1262:	31 e0       	ldi	r19, 0x01	; 1
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	89 2b       	or	r24, r25
    1268:	09 f0       	breq	.+2      	; 0x126c <disk_write+0x62>
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	03 2f       	mov	r16, r19
    126e:	12 2f       	mov	r17, r18
    1270:	22 c0       	rjmp	.+68     	; 0x12b6 <disk_write+0xac>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    1272:	86 70       	andi	r24, 0x06	; 6
    1274:	31 f0       	breq	.+12     	; 0x1282 <disk_write+0x78>
    1276:	a8 01       	movw	r20, r16
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	87 e9       	ldi	r24, 0x97	; 151
    127e:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_cmd>
		if (send_cmd(CMD25, sect) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    1282:	b7 01       	movw	r22, r14
    1284:	a6 01       	movw	r20, r12
    1286:	89 e1       	ldi	r24, 0x19	; 25
    1288:	0e 94 2a 07 	call	0xe54	; 0xe54 <send_cmd>
    128c:	81 11       	cpse	r24, r1
    128e:	13 c0       	rjmp	.+38     	; 0x12b6 <disk_write+0xac>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    1290:	6c ef       	ldi	r22, 0xFC	; 252
    1292:	ce 01       	movw	r24, r28
    1294:	0e 94 ae 07 	call	0xf5c	; 0xf5c <xmit_datablock>
    1298:	89 2b       	or	r24, r25
    129a:	21 f0       	breq	.+8      	; 0x12a4 <disk_write+0x9a>
				buff += 512;
    129c:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    129e:	01 50       	subi	r16, 0x01	; 1
    12a0:	11 09       	sbc	r17, r1
    12a2:	b1 f7       	brne	.-20     	; 0x1290 <disk_write+0x86>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    12a4:	6d ef       	ldi	r22, 0xFD	; 253
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 ae 07 	call	0xf5c	; 0xf5c <xmit_datablock>
    12ae:	89 2b       	or	r24, r25
    12b0:	11 f4       	brne	.+4      	; 0x12b6 <disk_write+0xac>
				count = 1;
    12b2:	01 e0       	ldi	r16, 0x01	; 1
    12b4:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    12b6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <deselect>

	return count ? RES_ERROR : RES_OK;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	01 2b       	or	r16, r17
    12be:	29 f4       	brne	.+10     	; 0x12ca <disk_write+0xc0>
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	03 c0       	rjmp	.+6      	; 0x12ca <disk_write+0xc0>
)
{
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    12c4:	83 e0       	ldi	r24, 0x03	; 3
    12c6:	01 c0       	rjmp	.+2      	; 0x12ca <disk_write+0xc0>
    12c8:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	df 90       	pop	r13
    12d8:	cf 90       	pop	r12
    12da:	08 95       	ret

000012dc <__udivmodsi4>:
    12dc:	a1 e2       	ldi	r26, 0x21	; 33
    12de:	1a 2e       	mov	r1, r26
    12e0:	aa 1b       	sub	r26, r26
    12e2:	bb 1b       	sub	r27, r27
    12e4:	fd 01       	movw	r30, r26
    12e6:	0d c0       	rjmp	.+26     	; 0x1302 <__udivmodsi4_ep>

000012e8 <__udivmodsi4_loop>:
    12e8:	aa 1f       	adc	r26, r26
    12ea:	bb 1f       	adc	r27, r27
    12ec:	ee 1f       	adc	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	a2 17       	cp	r26, r18
    12f2:	b3 07       	cpc	r27, r19
    12f4:	e4 07       	cpc	r30, r20
    12f6:	f5 07       	cpc	r31, r21
    12f8:	20 f0       	brcs	.+8      	; 0x1302 <__udivmodsi4_ep>
    12fa:	a2 1b       	sub	r26, r18
    12fc:	b3 0b       	sbc	r27, r19
    12fe:	e4 0b       	sbc	r30, r20
    1300:	f5 0b       	sbc	r31, r21

00001302 <__udivmodsi4_ep>:
    1302:	66 1f       	adc	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	88 1f       	adc	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	1a 94       	dec	r1
    130c:	69 f7       	brne	.-38     	; 0x12e8 <__udivmodsi4_loop>
    130e:	60 95       	com	r22
    1310:	70 95       	com	r23
    1312:	80 95       	com	r24
    1314:	90 95       	com	r25
    1316:	9b 01       	movw	r18, r22
    1318:	ac 01       	movw	r20, r24
    131a:	bd 01       	movw	r22, r26
    131c:	cf 01       	movw	r24, r30
    131e:	08 95       	ret

00001320 <__muluhisi3>:
    1320:	0e 94 9b 09 	call	0x1336	; 0x1336 <__umulhisi3>
    1324:	a5 9f       	mul	r26, r21
    1326:	90 0d       	add	r25, r0
    1328:	b4 9f       	mul	r27, r20
    132a:	90 0d       	add	r25, r0
    132c:	a4 9f       	mul	r26, r20
    132e:	80 0d       	add	r24, r0
    1330:	91 1d       	adc	r25, r1
    1332:	11 24       	eor	r1, r1
    1334:	08 95       	ret

00001336 <__umulhisi3>:
    1336:	a2 9f       	mul	r26, r18
    1338:	b0 01       	movw	r22, r0
    133a:	b3 9f       	mul	r27, r19
    133c:	c0 01       	movw	r24, r0
    133e:	a3 9f       	mul	r26, r19
    1340:	70 0d       	add	r23, r0
    1342:	81 1d       	adc	r24, r1
    1344:	11 24       	eor	r1, r1
    1346:	91 1d       	adc	r25, r1
    1348:	b2 9f       	mul	r27, r18
    134a:	70 0d       	add	r23, r0
    134c:	81 1d       	adc	r24, r1
    134e:	11 24       	eor	r1, r1
    1350:	91 1d       	adc	r25, r1
    1352:	08 95       	ret

00001354 <strcpy>:
    1354:	fb 01       	movw	r30, r22
    1356:	dc 01       	movw	r26, r24
    1358:	01 90       	ld	r0, Z+
    135a:	0d 92       	st	X+, r0
    135c:	00 20       	and	r0, r0
    135e:	e1 f7       	brne	.-8      	; 0x1358 <strcpy+0x4>
    1360:	08 95       	ret

00001362 <__utoa_ncheck>:
    1362:	bb 27       	eor	r27, r27

00001364 <__utoa_common>:
    1364:	fb 01       	movw	r30, r22
    1366:	55 27       	eor	r21, r21
    1368:	aa 27       	eor	r26, r26
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	aa 1f       	adc	r26, r26
    1370:	a4 17       	cp	r26, r20
    1372:	10 f0       	brcs	.+4      	; 0x1378 <__utoa_common+0x14>
    1374:	a4 1b       	sub	r26, r20
    1376:	83 95       	inc	r24
    1378:	50 51       	subi	r21, 0x10	; 16
    137a:	b9 f7       	brne	.-18     	; 0x136a <__utoa_common+0x6>
    137c:	a0 5d       	subi	r26, 0xD0	; 208
    137e:	aa 33       	cpi	r26, 0x3A	; 58
    1380:	08 f0       	brcs	.+2      	; 0x1384 <__utoa_common+0x20>
    1382:	a9 5d       	subi	r26, 0xD9	; 217
    1384:	a1 93       	st	Z+, r26
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	79 f7       	brne	.-34     	; 0x1368 <__utoa_common+0x4>
    138a:	b1 11       	cpse	r27, r1
    138c:	b1 93       	st	Z+, r27
    138e:	11 92       	st	Z+, r1
    1390:	cb 01       	movw	r24, r22
    1392:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <strrev>

00001396 <strrev>:
    1396:	dc 01       	movw	r26, r24
    1398:	fc 01       	movw	r30, r24
    139a:	67 2f       	mov	r22, r23
    139c:	71 91       	ld	r23, Z+
    139e:	77 23       	and	r23, r23
    13a0:	e1 f7       	brne	.-8      	; 0x139a <strrev+0x4>
    13a2:	32 97       	sbiw	r30, 0x02	; 2
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <strrev+0x18>
    13a6:	7c 91       	ld	r23, X
    13a8:	6d 93       	st	X+, r22
    13aa:	70 83       	st	Z, r23
    13ac:	62 91       	ld	r22, -Z
    13ae:	ae 17       	cp	r26, r30
    13b0:	bf 07       	cpc	r27, r31
    13b2:	c8 f3       	brcs	.-14     	; 0x13a6 <strrev+0x10>
    13b4:	08 95       	ret

000013b6 <_exit>:
    13b6:	f8 94       	cli

000013b8 <__stop_program>:
    13b8:	ff cf       	rjmp	.-2      	; 0x13b8 <__stop_program>
