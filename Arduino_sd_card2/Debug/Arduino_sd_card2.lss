
Arduino_sd_card2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018c  00800100  00003818  000038ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003818  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035f  0080028c  0080028c  00003a38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003a38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00003aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005d16  00000000  00000000  00003d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f15  00000000  00000000  00009a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002dee  00000000  00000000  0000a973  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e60  00000000  00000000  0000d764  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c2d  00000000  00000000  0000e5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007600  00000000  00000000  0000f1f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a0  00000000  00000000  000167f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e1       	ldi	r30, 0x18	; 24
      7c:	f8 e3       	ldi	r31, 0x38	; 56
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 38       	cpi	r26, 0x8C	; 140
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	ac e8       	ldi	r26, 0x8C	; 140
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 3e       	cpi	r26, 0xEB	; 235
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <main>
      9e:	0c 94 0a 1c 	jmp	0x3814	; 0x3814 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ld_dword>:

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
}
      a6:	fc 01       	movw	r30, r24
      a8:	63 81       	ldd	r22, Z+3	; 0x03
      aa:	86 2f       	mov	r24, r22
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	ba 2f       	mov	r27, r26
      b4:	a9 2f       	mov	r26, r25
      b6:	98 2f       	mov	r25, r24
      b8:	88 27       	eor	r24, r24
      ba:	22 81       	ldd	r18, Z+2	; 0x02
      bc:	82 2b       	or	r24, r18
      be:	ba 2f       	mov	r27, r26
      c0:	a9 2f       	mov	r26, r25
      c2:	98 2f       	mov	r25, r24
      c4:	88 27       	eor	r24, r24
      c6:	21 81       	ldd	r18, Z+1	; 0x01
      c8:	82 2b       	or	r24, r18
      ca:	ba 2f       	mov	r27, r26
      cc:	a9 2f       	mov	r26, r25
      ce:	98 2f       	mov	r25, r24
      d0:	88 27       	eor	r24, r24
      d2:	20 81       	ld	r18, Z
      d4:	bc 01       	movw	r22, r24
      d6:	cd 01       	movw	r24, r26
      d8:	62 2b       	or	r22, r18
      da:	08 95       	ret

000000dc <mem_cpy>:
      dc:	41 15       	cp	r20, r1
      de:	51 05       	cpc	r21, r1
      e0:	51 f0       	breq	.+20     	; 0xf6 <mem_cpy+0x1a>
      e2:	a6 2f       	mov	r26, r22
      e4:	b7 2f       	mov	r27, r23
      e6:	fc 01       	movw	r30, r24
      e8:	48 0f       	add	r20, r24
      ea:	59 1f       	adc	r21, r25
      ec:	9d 91       	ld	r25, X+
      ee:	91 93       	st	Z+, r25
      f0:	e4 17       	cp	r30, r20
      f2:	f5 07       	cpc	r31, r21
      f4:	d9 f7       	brne	.-10     	; 0xec <mem_cpy+0x10>
      f6:	08 95       	ret

000000f8 <mem_cmp>:
      f8:	dc 01       	movw	r26, r24
      fa:	e6 2f       	mov	r30, r22
      fc:	f7 2f       	mov	r31, r23
      fe:	8d 91       	ld	r24, X+
     100:	21 91       	ld	r18, Z+
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	82 1b       	sub	r24, r18
     106:	91 09       	sbc	r25, r1
     108:	41 50       	subi	r20, 0x01	; 1
     10a:	51 09       	sbc	r21, r1
     10c:	11 f0       	breq	.+4      	; 0x112 <mem_cmp+0x1a>
     10e:	00 97       	sbiw	r24, 0x00	; 0
     110:	b1 f3       	breq	.-20     	; 0xfe <mem_cmp+0x6>
     112:	08 95       	ret

00000114 <clst2sect>:
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	fc 01       	movw	r30, r24
     11a:	9a 01       	movw	r18, r20
     11c:	ab 01       	movw	r20, r22
     11e:	22 50       	subi	r18, 0x02	; 2
     120:	31 09       	sbc	r19, r1
     122:	41 09       	sbc	r20, r1
     124:	51 09       	sbc	r21, r1
     126:	83 89       	ldd	r24, Z+19	; 0x13
     128:	94 89       	ldd	r25, Z+20	; 0x14
     12a:	a5 89       	ldd	r26, Z+21	; 0x15
     12c:	b6 89       	ldd	r27, Z+22	; 0x16
     12e:	02 97       	sbiw	r24, 0x02	; 2
     130:	a1 09       	sbc	r26, r1
     132:	b1 09       	sbc	r27, r1
     134:	28 17       	cp	r18, r24
     136:	39 07       	cpc	r19, r25
     138:	4a 07       	cpc	r20, r26
     13a:	5b 07       	cpc	r21, r27
     13c:	68 f4       	brcc	.+26     	; 0x158 <clst2sect+0x44>
     13e:	a1 85       	ldd	r26, Z+9	; 0x09
     140:	b2 85       	ldd	r27, Z+10	; 0x0a
     142:	0e 94 b4 1b 	call	0x3768	; 0x3768 <__muluhisi3>
     146:	07 a1       	ldd	r16, Z+39	; 0x27
     148:	10 a5       	ldd	r17, Z+40	; 0x28
     14a:	21 a5       	ldd	r18, Z+41	; 0x29
     14c:	32 a5       	ldd	r19, Z+42	; 0x2a
     14e:	60 0f       	add	r22, r16
     150:	71 1f       	adc	r23, r17
     152:	82 1f       	adc	r24, r18
     154:	93 1f       	adc	r25, r19
     156:	03 c0       	rjmp	.+6      	; 0x15e <clst2sect+0x4a>
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	70 e0       	ldi	r23, 0x00	; 0
     15c:	cb 01       	movw	r24, r22
     15e:	1f 91       	pop	r17
     160:	0f 91       	pop	r16
     162:	08 95       	ret

00000164 <get_ldnumber>:
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	ec 01       	movw	r28, r24
     16a:	a8 81       	ld	r26, Y
     16c:	b9 81       	ldd	r27, Y+1	; 0x01
     16e:	10 97       	sbiw	r26, 0x00	; 0
     170:	f1 f0       	breq	.+60     	; 0x1ae <get_ldnumber+0x4a>
     172:	9d 01       	movw	r18, r26
     174:	2f 5f       	subi	r18, 0xFF	; 255
     176:	3f 4f       	sbci	r19, 0xFF	; 255
     178:	f9 01       	movw	r30, r18
     17a:	31 97       	sbiw	r30, 0x01	; 1
     17c:	90 81       	ld	r25, Z
     17e:	91 32       	cpi	r25, 0x21	; 33
     180:	18 f0       	brcs	.+6      	; 0x188 <get_ldnumber+0x24>
     182:	9a 33       	cpi	r25, 0x3A	; 58
     184:	b9 f7       	brne	.-18     	; 0x174 <get_ldnumber+0x10>
     186:	02 c0       	rjmp	.+4      	; 0x18c <get_ldnumber+0x28>
     188:	9a 33       	cpi	r25, 0x3A	; 58
     18a:	a1 f4       	brne	.+40     	; 0x1b4 <get_ldnumber+0x50>
     18c:	8c 91       	ld	r24, X
     18e:	90 ed       	ldi	r25, 0xD0	; 208
     190:	98 0f       	add	r25, r24
     192:	9a 30       	cpi	r25, 0x0A	; 10
     194:	90 f4       	brcc	.+36     	; 0x1ba <get_ldnumber+0x56>
     196:	12 96       	adiw	r26, 0x02	; 2
     198:	2a 17       	cp	r18, r26
     19a:	3b 07       	cpc	r19, r27
     19c:	89 f4       	brne	.+34     	; 0x1c0 <get_ldnumber+0x5c>
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	c0 97       	sbiw	r24, 0x30	; 48
     1a2:	18 16       	cp	r1, r24
     1a4:	19 06       	cpc	r1, r25
     1a6:	7c f0       	brlt	.+30     	; 0x1c6 <get_ldnumber+0x62>
     1a8:	39 83       	std	Y+1, r19	; 0x01
     1aa:	28 83       	st	Y, r18
     1ac:	0e c0       	rjmp	.+28     	; 0x1ca <get_ldnumber+0x66>
     1ae:	8f ef       	ldi	r24, 0xFF	; 255
     1b0:	9f ef       	ldi	r25, 0xFF	; 255
     1b2:	0b c0       	rjmp	.+22     	; 0x1ca <get_ldnumber+0x66>
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	08 c0       	rjmp	.+16     	; 0x1ca <get_ldnumber+0x66>
     1ba:	8f ef       	ldi	r24, 0xFF	; 255
     1bc:	9f ef       	ldi	r25, 0xFF	; 255
     1be:	05 c0       	rjmp	.+10     	; 0x1ca <get_ldnumber+0x66>
     1c0:	8f ef       	ldi	r24, 0xFF	; 255
     1c2:	9f ef       	ldi	r25, 0xFF	; 255
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <get_ldnumber+0x66>
     1c6:	8f ef       	ldi	r24, 0xFF	; 255
     1c8:	9f ef       	ldi	r25, 0xFF	; 255
     1ca:	df 91       	pop	r29
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <validate>:
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	ec 01       	movw	r28, r24
     1da:	8b 01       	movw	r16, r22
     1dc:	89 2b       	or	r24, r25
     1de:	e1 f0       	breq	.+56     	; 0x218 <validate+0x48>
     1e0:	e8 81       	ld	r30, Y
     1e2:	f9 81       	ldd	r31, Y+1	; 0x01
     1e4:	30 97       	sbiw	r30, 0x00	; 0
     1e6:	c1 f0       	breq	.+48     	; 0x218 <validate+0x48>
     1e8:	80 81       	ld	r24, Z
     1ea:	88 23       	and	r24, r24
     1ec:	a9 f0       	breq	.+42     	; 0x218 <validate+0x48>
     1ee:	2a 81       	ldd	r18, Y+2	; 0x02
     1f0:	3b 81       	ldd	r19, Y+3	; 0x03
     1f2:	85 81       	ldd	r24, Z+5	; 0x05
     1f4:	96 81       	ldd	r25, Z+6	; 0x06
     1f6:	28 17       	cp	r18, r24
     1f8:	39 07       	cpc	r19, r25
     1fa:	71 f4       	brne	.+28     	; 0x218 <validate+0x48>
     1fc:	81 81       	ldd	r24, Z+1	; 0x01
     1fe:	0e 94 56 19 	call	0x32ac	; 0x32ac <disk_status>
     202:	80 fd       	sbrc	r24, 0
     204:	09 c0       	rjmp	.+18     	; 0x218 <validate+0x48>
     206:	04 c0       	rjmp	.+8      	; 0x210 <validate+0x40>
     208:	f8 01       	movw	r30, r16
     20a:	31 83       	std	Z+1, r19	; 0x01
     20c:	20 83       	st	Z, r18
     20e:	08 c0       	rjmp	.+16     	; 0x220 <validate+0x50>
     210:	28 81       	ld	r18, Y
     212:	39 81       	ldd	r19, Y+1	; 0x01
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	f8 cf       	rjmp	.-16     	; 0x208 <validate+0x38>
     218:	89 e0       	ldi	r24, 0x09	; 9
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	f4 cf       	rjmp	.-24     	; 0x208 <validate+0x38>
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	08 95       	ret

0000022a <sync_window>:
     22a:	8f 92       	push	r8
     22c:	9f 92       	push	r9
     22e:	af 92       	push	r10
     230:	bf 92       	push	r11
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	fc 01       	movw	r30, r24
     240:	23 81       	ldd	r18, Z+3	; 0x03
     242:	22 23       	and	r18, r18
     244:	d1 f1       	breq	.+116    	; 0x2ba <sync_window+0x90>
     246:	ec 01       	movw	r28, r24
     248:	7c 01       	movw	r14, r24
     24a:	ff e2       	ldi	r31, 0x2F	; 47
     24c:	ef 0e       	add	r14, r31
     24e:	f1 1c       	adc	r15, r1
     250:	2b a5       	ldd	r18, Y+43	; 0x2b
     252:	3c a5       	ldd	r19, Y+44	; 0x2c
     254:	4d a5       	ldd	r20, Y+45	; 0x2d
     256:	5e a5       	ldd	r21, Y+46	; 0x2e
     258:	01 e0       	ldi	r16, 0x01	; 1
     25a:	10 e0       	ldi	r17, 0x00	; 0
     25c:	b7 01       	movw	r22, r14
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <disk_write>
     264:	81 11       	cpse	r24, r1
     266:	2b c0       	rjmp	.+86     	; 0x2be <sync_window+0x94>
     268:	1b 82       	std	Y+3, r1	; 0x03
     26a:	0b a5       	ldd	r16, Y+43	; 0x2b
     26c:	1c a5       	ldd	r17, Y+44	; 0x2c
     26e:	2d a5       	ldd	r18, Y+45	; 0x2d
     270:	3e a5       	ldd	r19, Y+46	; 0x2e
     272:	8f 89       	ldd	r24, Y+23	; 0x17
     274:	98 8d       	ldd	r25, Y+24	; 0x18
     276:	a9 8d       	ldd	r26, Y+25	; 0x19
     278:	ba 8d       	ldd	r27, Y+26	; 0x1a
     27a:	8f 8c       	ldd	r8, Y+31	; 0x1f
     27c:	98 a0       	ldd	r9, Y+32	; 0x20
     27e:	a9 a0       	ldd	r10, Y+33	; 0x21
     280:	ba a0       	ldd	r11, Y+34	; 0x22
     282:	b9 01       	movw	r22, r18
     284:	a8 01       	movw	r20, r16
     286:	48 19       	sub	r20, r8
     288:	59 09       	sbc	r21, r9
     28a:	6a 09       	sbc	r22, r10
     28c:	7b 09       	sbc	r23, r11
     28e:	48 17       	cp	r20, r24
     290:	59 07       	cpc	r21, r25
     292:	6a 07       	cpc	r22, r26
     294:	7b 07       	cpc	r23, r27
     296:	a8 f4       	brcc	.+42     	; 0x2c2 <sync_window+0x98>
     298:	6a 81       	ldd	r22, Y+2	; 0x02
     29a:	62 30       	cpi	r22, 0x02	; 2
     29c:	a1 f4       	brne	.+40     	; 0x2c6 <sync_window+0x9c>
     29e:	a9 01       	movw	r20, r18
     2a0:	98 01       	movw	r18, r16
     2a2:	28 0f       	add	r18, r24
     2a4:	39 1f       	adc	r19, r25
     2a6:	4a 1f       	adc	r20, r26
     2a8:	5b 1f       	adc	r21, r27
     2aa:	01 e0       	ldi	r16, 0x01	; 1
     2ac:	10 e0       	ldi	r17, 0x00	; 0
     2ae:	b7 01       	movw	r22, r14
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <disk_write>
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <sync_window+0x9e>
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <sync_window+0x9e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <sync_window+0x9e>
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <sync_window+0x9e>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	ff 90       	pop	r15
     2d2:	ef 90       	pop	r14
     2d4:	bf 90       	pop	r11
     2d6:	af 90       	pop	r10
     2d8:	9f 90       	pop	r9
     2da:	8f 90       	pop	r8
     2dc:	08 95       	ret

000002de <move_window>:
     2de:	8f 92       	push	r8
     2e0:	9f 92       	push	r9
     2e2:	af 92       	push	r10
     2e4:	bf 92       	push	r11
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	ec 01       	movw	r28, r24
     2f2:	4a 01       	movw	r8, r20
     2f4:	5b 01       	movw	r10, r22
     2f6:	8b a5       	ldd	r24, Y+43	; 0x2b
     2f8:	9c a5       	ldd	r25, Y+44	; 0x2c
     2fa:	ad a5       	ldd	r26, Y+45	; 0x2d
     2fc:	be a5       	ldd	r27, Y+46	; 0x2e
     2fe:	84 17       	cp	r24, r20
     300:	95 07       	cpc	r25, r21
     302:	a6 07       	cpc	r26, r22
     304:	b7 07       	cpc	r27, r23
     306:	e9 f0       	breq	.+58     	; 0x342 <move_window+0x64>
     308:	ce 01       	movw	r24, r28
     30a:	0e 94 15 01 	call	0x22a	; 0x22a <sync_window>
     30e:	f8 2e       	mov	r15, r24
     310:	81 11       	cpse	r24, r1
     312:	18 c0       	rjmp	.+48     	; 0x344 <move_window+0x66>
     314:	01 e0       	ldi	r16, 0x01	; 1
     316:	10 e0       	ldi	r17, 0x00	; 0
     318:	a5 01       	movw	r20, r10
     31a:	94 01       	movw	r18, r8
     31c:	be 01       	movw	r22, r28
     31e:	61 5d       	subi	r22, 0xD1	; 209
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	0e 94 21 1a 	call	0x3442	; 0x3442 <disk_read>
     328:	88 23       	and	r24, r24
     32a:	31 f0       	breq	.+12     	; 0x338 <move_window+0x5a>
     32c:	ff 24       	eor	r15, r15
     32e:	f3 94       	inc	r15
     330:	88 24       	eor	r8, r8
     332:	8a 94       	dec	r8
     334:	98 2c       	mov	r9, r8
     336:	54 01       	movw	r10, r8
     338:	8b a6       	std	Y+43, r8	; 0x2b
     33a:	9c a6       	std	Y+44, r9	; 0x2c
     33c:	ad a6       	std	Y+45, r10	; 0x2d
     33e:	be a6       	std	Y+46, r11	; 0x2e
     340:	01 c0       	rjmp	.+2      	; 0x344 <move_window+0x66>
     342:	f1 2c       	mov	r15, r1
     344:	8f 2d       	mov	r24, r15
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	1f 91       	pop	r17
     34c:	0f 91       	pop	r16
     34e:	ff 90       	pop	r15
     350:	bf 90       	pop	r11
     352:	af 90       	pop	r10
     354:	9f 90       	pop	r9
     356:	8f 90       	pop	r8
     358:	08 95       	ret

0000035a <dir_clear>:
     35a:	8f 92       	push	r8
     35c:	9f 92       	push	r9
     35e:	af 92       	push	r10
     360:	bf 92       	push	r11
     362:	cf 92       	push	r12
     364:	df 92       	push	r13
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	7c 01       	movw	r14, r24
     374:	4a 01       	movw	r8, r20
     376:	5b 01       	movw	r10, r22
     378:	0e 94 15 01 	call	0x22a	; 0x22a <sync_window>
     37c:	81 11       	cpse	r24, r1
     37e:	42 c0       	rjmp	.+132    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     380:	b5 01       	movw	r22, r10
     382:	a4 01       	movw	r20, r8
     384:	c7 01       	movw	r24, r14
     386:	0e 94 8a 00 	call	0x114	; 0x114 <clst2sect>
     38a:	4b 01       	movw	r8, r22
     38c:	5c 01       	movw	r10, r24
     38e:	f7 01       	movw	r30, r14
     390:	63 a7       	std	Z+43, r22	; 0x2b
     392:	74 a7       	std	Z+44, r23	; 0x2c
     394:	85 a7       	std	Z+45, r24	; 0x2d
     396:	96 a7       	std	Z+46, r25	; 0x2e
     398:	67 01       	movw	r12, r14
     39a:	ff e2       	ldi	r31, 0x2F	; 47
     39c:	cf 0e       	add	r12, r31
     39e:	d1 1c       	adc	r13, r1
     3a0:	f6 01       	movw	r30, r12
     3a2:	c7 01       	movw	r24, r14
     3a4:	81 5d       	subi	r24, 0xD1	; 209
     3a6:	9d 4f       	sbci	r25, 0xFD	; 253
     3a8:	11 92       	st	Z+, r1
     3aa:	e8 17       	cp	r30, r24
     3ac:	f9 07       	cpc	r31, r25
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <dir_clear+0x4e>
     3b0:	f7 01       	movw	r30, r14
     3b2:	81 85       	ldd	r24, Z+9	; 0x09
     3b4:	92 85       	ldd	r25, Z+10	; 0x0a
     3b6:	89 2b       	or	r24, r25
     3b8:	59 f4       	brne	.+22     	; 0x3d0 <dir_clear+0x76>
     3ba:	c0 e0       	ldi	r28, 0x00	; 0
     3bc:	d0 e0       	ldi	r29, 0x00	; 0
     3be:	19 c0       	rjmp	.+50     	; 0x3f2 <dir_clear+0x98>
     3c0:	21 96       	adiw	r28, 0x01	; 1
     3c2:	f7 01       	movw	r30, r14
     3c4:	81 85       	ldd	r24, Z+9	; 0x09
     3c6:	92 85       	ldd	r25, Z+10	; 0x0a
     3c8:	c8 17       	cp	r28, r24
     3ca:	d9 07       	cpc	r29, r25
     3cc:	18 f0       	brcs	.+6      	; 0x3d4 <dir_clear+0x7a>
     3ce:	11 c0       	rjmp	.+34     	; 0x3f2 <dir_clear+0x98>
     3d0:	c0 e0       	ldi	r28, 0x00	; 0
     3d2:	d0 e0       	ldi	r29, 0x00	; 0
     3d4:	01 e0       	ldi	r16, 0x01	; 1
     3d6:	10 e0       	ldi	r17, 0x00	; 0
     3d8:	a5 01       	movw	r20, r10
     3da:	94 01       	movw	r18, r8
     3dc:	2c 0f       	add	r18, r28
     3de:	3d 1f       	adc	r19, r29
     3e0:	41 1d       	adc	r20, r1
     3e2:	51 1d       	adc	r21, r1
     3e4:	b6 01       	movw	r22, r12
     3e6:	f7 01       	movw	r30, r14
     3e8:	81 81       	ldd	r24, Z+1	; 0x01
     3ea:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <disk_write>
     3ee:	88 23       	and	r24, r24
     3f0:	39 f3       	breq	.-50     	; 0x3c0 <dir_clear+0x66>
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	f7 01       	movw	r30, r14
     3f6:	21 85       	ldd	r18, Z+9	; 0x09
     3f8:	32 85       	ldd	r19, Z+10	; 0x0a
     3fa:	2c 17       	cp	r18, r28
     3fc:	3d 07       	cpc	r19, r29
     3fe:	19 f4       	brne	.+6      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	01 c0       	rjmp	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	bf 90       	pop	r11
     418:	af 90       	pop	r10
     41a:	9f 90       	pop	r9
     41c:	8f 90       	pop	r8
     41e:	08 95       	ret

00000420 <sync_fs>:
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	ec 01       	movw	r28, r24
     42a:	0e 94 15 01 	call	0x22a	; 0x22a <sync_window>
     42e:	98 2f       	mov	r25, r24
     430:	81 11       	cpse	r24, r1
     432:	61 c0       	rjmp	.+194    	; 0x4f6 <sync_fs+0xd6>
     434:	88 81       	ld	r24, Y
     436:	83 30       	cpi	r24, 0x03	; 3
     438:	09 f0       	breq	.+2      	; 0x43c <sync_fs+0x1c>
     43a:	53 c0       	rjmp	.+166    	; 0x4e2 <sync_fs+0xc2>
     43c:	8c 81       	ldd	r24, Y+4	; 0x04
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	09 f0       	breq	.+2      	; 0x444 <sync_fs+0x24>
     442:	4f c0       	rjmp	.+158    	; 0x4e2 <sync_fs+0xc2>
     444:	be 01       	movw	r22, r28
     446:	61 5d       	subi	r22, 0xD1	; 209
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	fb 01       	movw	r30, r22
     44c:	ce 01       	movw	r24, r28
     44e:	81 5d       	subi	r24, 0xD1	; 209
     450:	9d 4f       	sbci	r25, 0xFD	; 253
     452:	11 92       	st	Z+, r1
     454:	e8 17       	cp	r30, r24
     456:	f9 07       	cpc	r31, r25
     458:	e1 f7       	brne	.-8      	; 0x452 <sync_fs+0x32>
     45a:	85 e5       	ldi	r24, 0x55	; 85
     45c:	fe 01       	movw	r30, r28
     45e:	e3 5d       	subi	r30, 0xD3	; 211
     460:	fd 4f       	sbci	r31, 0xFD	; 253
     462:	80 83       	st	Z, r24
     464:	8a ea       	ldi	r24, 0xAA	; 170
     466:	31 96       	adiw	r30, 0x01	; 1
     468:	80 83       	st	Z, r24
     46a:	82 e5       	ldi	r24, 0x52	; 82
     46c:	8f a7       	std	Y+47, r24	; 0x2f
     46e:	88 ab       	std	Y+48, r24	; 0x30
     470:	81 e6       	ldi	r24, 0x61	; 97
     472:	89 ab       	std	Y+49, r24	; 0x31
     474:	91 e4       	ldi	r25, 0x41	; 65
     476:	9a ab       	std	Y+50, r25	; 0x32
     478:	22 e7       	ldi	r18, 0x72	; 114
     47a:	7b 97       	sbiw	r30, 0x1b	; 27
     47c:	20 83       	st	Z, r18
     47e:	31 96       	adiw	r30, 0x01	; 1
     480:	20 83       	st	Z, r18
     482:	31 96       	adiw	r30, 0x01	; 1
     484:	90 83       	st	Z, r25
     486:	31 96       	adiw	r30, 0x01	; 1
     488:	80 83       	st	Z, r24
     48a:	3f 85       	ldd	r19, Y+15	; 0x0f
     48c:	28 89       	ldd	r18, Y+16	; 0x10
     48e:	99 89       	ldd	r25, Y+17	; 0x11
     490:	8a 89       	ldd	r24, Y+18	; 0x12
     492:	31 96       	adiw	r30, 0x01	; 1
     494:	30 83       	st	Z, r19
     496:	31 96       	adiw	r30, 0x01	; 1
     498:	20 83       	st	Z, r18
     49a:	31 96       	adiw	r30, 0x01	; 1
     49c:	90 83       	st	Z, r25
     49e:	31 96       	adiw	r30, 0x01	; 1
     4a0:	80 83       	st	Z, r24
     4a2:	3b 85       	ldd	r19, Y+11	; 0x0b
     4a4:	2c 85       	ldd	r18, Y+12	; 0x0c
     4a6:	9d 85       	ldd	r25, Y+13	; 0x0d
     4a8:	8e 85       	ldd	r24, Y+14	; 0x0e
     4aa:	31 96       	adiw	r30, 0x01	; 1
     4ac:	30 83       	st	Z, r19
     4ae:	31 96       	adiw	r30, 0x01	; 1
     4b0:	20 83       	st	Z, r18
     4b2:	31 96       	adiw	r30, 0x01	; 1
     4b4:	90 83       	st	Z, r25
     4b6:	31 96       	adiw	r30, 0x01	; 1
     4b8:	80 83       	st	Z, r24
     4ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4be:	ad 8d       	ldd	r26, Y+29	; 0x1d
     4c0:	be 8d       	ldd	r27, Y+30	; 0x1e
     4c2:	9c 01       	movw	r18, r24
     4c4:	ad 01       	movw	r20, r26
     4c6:	2f 5f       	subi	r18, 0xFF	; 255
     4c8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ca:	4f 4f       	sbci	r20, 0xFF	; 255
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	2b a7       	std	Y+43, r18	; 0x2b
     4d0:	3c a7       	std	Y+44, r19	; 0x2c
     4d2:	4d a7       	std	Y+45, r20	; 0x2d
     4d4:	5e a7       	std	Y+46, r21	; 0x2e
     4d6:	01 e0       	ldi	r16, 0x01	; 1
     4d8:	10 e0       	ldi	r17, 0x00	; 0
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <disk_write>
     4e0:	1c 82       	std	Y+4, r1	; 0x04
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <disk_ioctl>
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	81 11       	cpse	r24, r1
     4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <sync_fs+0xd6>
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	89 2f       	mov	r24, r25
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	08 95       	ret

00000502 <put_fat>:
     502:	2f 92       	push	r2
     504:	3f 92       	push	r3
     506:	4f 92       	push	r4
     508:	5f 92       	push	r5
     50a:	6f 92       	push	r6
     50c:	7f 92       	push	r7
     50e:	8f 92       	push	r8
     510:	9f 92       	push	r9
     512:	af 92       	push	r10
     514:	bf 92       	push	r11
     516:	cf 92       	push	r12
     518:	df 92       	push	r13
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	42 30       	cpi	r20, 0x02	; 2
     528:	51 05       	cpc	r21, r1
     52a:	61 05       	cpc	r22, r1
     52c:	71 05       	cpc	r23, r1
     52e:	08 f4       	brcc	.+2      	; 0x532 <put_fat+0x30>
     530:	d2 c0       	rjmp	.+420    	; 0x6d6 <put_fat+0x1d4>
     532:	fc 01       	movw	r30, r24
     534:	c3 88       	ldd	r12, Z+19	; 0x13
     536:	d4 88       	ldd	r13, Z+20	; 0x14
     538:	e5 88       	ldd	r14, Z+21	; 0x15
     53a:	f6 88       	ldd	r15, Z+22	; 0x16
     53c:	4c 15       	cp	r20, r12
     53e:	5d 05       	cpc	r21, r13
     540:	6e 05       	cpc	r22, r14
     542:	7f 05       	cpc	r23, r15
     544:	08 f0       	brcs	.+2      	; 0x548 <put_fat+0x46>
     546:	c9 c0       	rjmp	.+402    	; 0x6da <put_fat+0x1d8>
     548:	28 01       	movw	r4, r16
     54a:	39 01       	movw	r6, r18
     54c:	6a 01       	movw	r12, r20
     54e:	7b 01       	movw	r14, r22
     550:	ec 01       	movw	r28, r24
     552:	80 81       	ld	r24, Z
     554:	82 30       	cpi	r24, 0x02	; 2
     556:	09 f4       	brne	.+2      	; 0x55a <put_fat+0x58>
     558:	64 c0       	rjmp	.+200    	; 0x622 <put_fat+0x120>
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	09 f4       	brne	.+2      	; 0x560 <put_fat+0x5e>
     55e:	82 c0       	rjmp	.+260    	; 0x664 <put_fat+0x162>
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	09 f0       	breq	.+2      	; 0x566 <put_fat+0x64>
     564:	bc c0       	rjmp	.+376    	; 0x6de <put_fat+0x1dc>
     566:	5a 01       	movw	r10, r20
     568:	b6 94       	lsr	r11
     56a:	a7 94       	ror	r10
     56c:	a4 0e       	add	r10, r20
     56e:	b5 1e       	adc	r11, r21
     570:	c5 01       	movw	r24, r10
     572:	89 2f       	mov	r24, r25
     574:	99 27       	eor	r25, r25
     576:	86 95       	lsr	r24
     578:	47 8d       	ldd	r20, Z+31	; 0x1f
     57a:	50 a1       	ldd	r21, Z+32	; 0x20
     57c:	61 a1       	ldd	r22, Z+33	; 0x21
     57e:	72 a1       	ldd	r23, Z+34	; 0x22
     580:	48 0f       	add	r20, r24
     582:	59 1f       	adc	r21, r25
     584:	61 1d       	adc	r22, r1
     586:	71 1d       	adc	r23, r1
     588:	cf 01       	movw	r24, r30
     58a:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
     58e:	18 2f       	mov	r17, r24
     590:	81 11       	cpse	r24, r1
     592:	c5 c0       	rjmp	.+394    	; 0x71e <put_fat+0x21c>
     594:	1e 01       	movw	r2, r28
     596:	ff e2       	ldi	r31, 0x2F	; 47
     598:	2f 0e       	add	r2, r31
     59a:	31 1c       	adc	r3, r1
     59c:	45 01       	movw	r8, r10
     59e:	2f ef       	ldi	r18, 0xFF	; 255
     5a0:	82 1a       	sub	r8, r18
     5a2:	92 0a       	sbc	r9, r18
     5a4:	31 e0       	ldi	r19, 0x01	; 1
     5a6:	b3 22       	and	r11, r19
     5a8:	f1 01       	movw	r30, r2
     5aa:	ea 0d       	add	r30, r10
     5ac:	fb 1d       	adc	r31, r11
     5ae:	c0 fe       	sbrs	r12, 0
     5b0:	1e c0       	rjmp	.+60     	; 0x5ee <put_fat+0xec>
     5b2:	80 81       	ld	r24, Z
     5b4:	28 2f       	mov	r18, r24
     5b6:	2f 70       	andi	r18, 0x0F	; 15
     5b8:	30 e1       	ldi	r19, 0x10	; 16
     5ba:	43 9e       	mul	r4, r19
     5bc:	c0 01       	movw	r24, r0
     5be:	11 24       	eor	r1, r1
     5c0:	82 2b       	or	r24, r18
     5c2:	80 83       	st	Z, r24
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	8b 83       	std	Y+3, r24	; 0x03
     5c8:	4f 8d       	ldd	r20, Y+31	; 0x1f
     5ca:	58 a1       	ldd	r21, Y+32	; 0x20
     5cc:	69 a1       	ldd	r22, Y+33	; 0x21
     5ce:	7a a1       	ldd	r23, Y+34	; 0x22
     5d0:	c4 01       	movw	r24, r8
     5d2:	89 2f       	mov	r24, r25
     5d4:	99 27       	eor	r25, r25
     5d6:	86 95       	lsr	r24
     5d8:	48 0f       	add	r20, r24
     5da:	59 1f       	adc	r21, r25
     5dc:	61 1d       	adc	r22, r1
     5de:	71 1d       	adc	r23, r1
     5e0:	ce 01       	movw	r24, r28
     5e2:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
     5e6:	88 23       	and	r24, r24
     5e8:	09 f4       	brne	.+2      	; 0x5ec <put_fat+0xea>
     5ea:	7f c0       	rjmp	.+254    	; 0x6ea <put_fat+0x1e8>
     5ec:	7a c0       	rjmp	.+244    	; 0x6e2 <put_fat+0x1e0>
     5ee:	40 82       	st	Z, r4
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	8b 83       	std	Y+3, r24	; 0x03
     5f4:	4f 8d       	ldd	r20, Y+31	; 0x1f
     5f6:	58 a1       	ldd	r21, Y+32	; 0x20
     5f8:	69 a1       	ldd	r22, Y+33	; 0x21
     5fa:	7a a1       	ldd	r23, Y+34	; 0x22
     5fc:	c4 01       	movw	r24, r8
     5fe:	89 2f       	mov	r24, r25
     600:	99 27       	eor	r25, r25
     602:	86 95       	lsr	r24
     604:	48 0f       	add	r20, r24
     606:	59 1f       	adc	r21, r25
     608:	61 1d       	adc	r22, r1
     60a:	71 1d       	adc	r23, r1
     60c:	ce 01       	movw	r24, r28
     60e:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
     612:	88 23       	and	r24, r24
     614:	09 f4       	brne	.+2      	; 0x618 <put_fat+0x116>
     616:	77 c0       	rjmp	.+238    	; 0x706 <put_fat+0x204>
     618:	66 c0       	rjmp	.+204    	; 0x6e6 <put_fat+0x1e4>
     61a:	40 82       	st	Z, r4
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	8b 83       	std	Y+3, r24	; 0x03
     620:	7e c0       	rjmp	.+252    	; 0x71e <put_fat+0x21c>
     622:	45 2f       	mov	r20, r21
     624:	56 2f       	mov	r21, r22
     626:	67 2f       	mov	r22, r23
     628:	77 27       	eor	r23, r23
     62a:	87 8d       	ldd	r24, Z+31	; 0x1f
     62c:	90 a1       	ldd	r25, Z+32	; 0x20
     62e:	a1 a1       	ldd	r26, Z+33	; 0x21
     630:	b2 a1       	ldd	r27, Z+34	; 0x22
     632:	48 0f       	add	r20, r24
     634:	59 1f       	adc	r21, r25
     636:	6a 1f       	adc	r22, r26
     638:	7b 1f       	adc	r23, r27
     63a:	cf 01       	movw	r24, r30
     63c:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
     640:	18 2f       	mov	r17, r24
     642:	81 11       	cpse	r24, r1
     644:	6c c0       	rjmp	.+216    	; 0x71e <put_fat+0x21c>
     646:	fe 01       	movw	r30, r28
     648:	bf 96       	adiw	r30, 0x2f	; 47
     64a:	cc 0c       	add	r12, r12
     64c:	dd 1c       	adc	r13, r13
     64e:	e8 94       	clt
     650:	c0 f8       	bld	r12, 0
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	d8 22       	and	r13, r24
     656:	ec 0d       	add	r30, r12
     658:	fd 1d       	adc	r31, r13
     65a:	40 82       	st	Z, r4
     65c:	51 82       	std	Z+1, r5	; 0x01
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	8b 83       	std	Y+3, r24	; 0x03
     662:	5d c0       	rjmp	.+186    	; 0x71e <put_fat+0x21c>
     664:	87 8d       	ldd	r24, Z+31	; 0x1f
     666:	90 a1       	ldd	r25, Z+32	; 0x20
     668:	a1 a1       	ldd	r26, Z+33	; 0x21
     66a:	b2 a1       	ldd	r27, Z+34	; 0x22
     66c:	68 94       	set
     66e:	16 f8       	bld	r1, 6
     670:	76 95       	lsr	r23
     672:	67 95       	ror	r22
     674:	57 95       	ror	r21
     676:	47 95       	ror	r20
     678:	16 94       	lsr	r1
     67a:	d1 f7       	brne	.-12     	; 0x670 <put_fat+0x16e>
     67c:	48 0f       	add	r20, r24
     67e:	59 1f       	adc	r21, r25
     680:	6a 1f       	adc	r22, r26
     682:	7b 1f       	adc	r23, r27
     684:	cf 01       	movw	r24, r30
     686:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
     68a:	18 2f       	mov	r17, r24
     68c:	81 11       	cpse	r24, r1
     68e:	47 c0       	rjmp	.+142    	; 0x71e <put_fat+0x21c>
     690:	ef e0       	ldi	r30, 0x0F	; 15
     692:	7e 22       	and	r7, r30
     694:	ce 01       	movw	r24, r28
     696:	8f 96       	adiw	r24, 0x2f	; 47
     698:	cc 0c       	add	r12, r12
     69a:	dd 1c       	adc	r13, r13
     69c:	cc 0c       	add	r12, r12
     69e:	dd 1c       	adc	r13, r13
     6a0:	fc ef       	ldi	r31, 0xFC	; 252
     6a2:	cf 22       	and	r12, r31
     6a4:	f1 e0       	ldi	r31, 0x01	; 1
     6a6:	df 22       	and	r13, r31
     6a8:	c8 0e       	add	r12, r24
     6aa:	d9 1e       	adc	r13, r25
     6ac:	c6 01       	movw	r24, r12
     6ae:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	88 27       	eor	r24, r24
     6b8:	99 27       	eor	r25, r25
     6ba:	aa 27       	eor	r26, r26
     6bc:	b0 7f       	andi	r27, 0xF0	; 240
     6be:	48 2a       	or	r4, r24
     6c0:	59 2a       	or	r5, r25
     6c2:	6a 2a       	or	r6, r26
     6c4:	7b 2a       	or	r7, r27
     6c6:	f6 01       	movw	r30, r12
     6c8:	40 82       	st	Z, r4
     6ca:	51 82       	std	Z+1, r5	; 0x01
     6cc:	62 82       	std	Z+2, r6	; 0x02
     6ce:	73 82       	std	Z+3, r7	; 0x03
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	8b 83       	std	Y+3, r24	; 0x03
     6d4:	24 c0       	rjmp	.+72     	; 0x71e <put_fat+0x21c>
     6d6:	12 e0       	ldi	r17, 0x02	; 2
     6d8:	22 c0       	rjmp	.+68     	; 0x71e <put_fat+0x21c>
     6da:	12 e0       	ldi	r17, 0x02	; 2
     6dc:	20 c0       	rjmp	.+64     	; 0x71e <put_fat+0x21c>
     6de:	12 e0       	ldi	r17, 0x02	; 2
     6e0:	1e c0       	rjmp	.+60     	; 0x71e <put_fat+0x21c>
     6e2:	18 2f       	mov	r17, r24
     6e4:	1c c0       	rjmp	.+56     	; 0x71e <put_fat+0x21c>
     6e6:	18 2f       	mov	r17, r24
     6e8:	1a c0       	rjmp	.+52     	; 0x71e <put_fat+0x21c>
     6ea:	f1 e0       	ldi	r31, 0x01	; 1
     6ec:	9f 22       	and	r9, r31
     6ee:	f1 01       	movw	r30, r2
     6f0:	e8 0d       	add	r30, r8
     6f2:	f9 1d       	adc	r31, r9
     6f4:	68 94       	set
     6f6:	13 f8       	bld	r1, 3
     6f8:	76 94       	lsr	r7
     6fa:	67 94       	ror	r6
     6fc:	57 94       	ror	r5
     6fe:	47 94       	ror	r4
     700:	16 94       	lsr	r1
     702:	d1 f7       	brne	.-12     	; 0x6f8 <put_fat+0x1f6>
     704:	8a cf       	rjmp	.-236    	; 0x61a <put_fat+0x118>
     706:	21 e0       	ldi	r18, 0x01	; 1
     708:	92 22       	and	r9, r18
     70a:	f1 01       	movw	r30, r2
     70c:	e8 0d       	add	r30, r8
     70e:	f9 1d       	adc	r31, r9
     710:	90 81       	ld	r25, Z
     712:	90 7f       	andi	r25, 0xF0	; 240
     714:	85 2d       	mov	r24, r5
     716:	8f 70       	andi	r24, 0x0F	; 15
     718:	49 2e       	mov	r4, r25
     71a:	48 2a       	or	r4, r24
     71c:	7e cf       	rjmp	.-260    	; 0x61a <put_fat+0x118>
     71e:	81 2f       	mov	r24, r17
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	cf 90       	pop	r12
     730:	bf 90       	pop	r11
     732:	af 90       	pop	r10
     734:	9f 90       	pop	r9
     736:	8f 90       	pop	r8
     738:	7f 90       	pop	r7
     73a:	6f 90       	pop	r6
     73c:	5f 90       	pop	r5
     73e:	4f 90       	pop	r4
     740:	3f 90       	pop	r3
     742:	2f 90       	pop	r2
     744:	08 95       	ret

00000746 <st_clust>:
     746:	fb 01       	movw	r30, r22
     748:	22 8f       	std	Z+26, r18	; 0x1a
     74a:	33 8f       	std	Z+27, r19	; 0x1b
     74c:	dc 01       	movw	r26, r24
     74e:	8c 91       	ld	r24, X
     750:	83 30       	cpi	r24, 0x03	; 3
     752:	29 f4       	brne	.+10     	; 0x75e <st_clust+0x18>
     754:	ca 01       	movw	r24, r20
     756:	aa 27       	eor	r26, r26
     758:	bb 27       	eor	r27, r27
     75a:	84 8b       	std	Z+20, r24	; 0x14
     75c:	95 8b       	std	Z+21, r25	; 0x15
     75e:	08 95       	ret

00000760 <get_fat>:
     760:	af 92       	push	r10
     762:	bf 92       	push	r11
     764:	cf 92       	push	r12
     766:	df 92       	push	r13
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	42 30       	cpi	r20, 0x02	; 2
     776:	51 05       	cpc	r21, r1
     778:	61 05       	cpc	r22, r1
     77a:	71 05       	cpc	r23, r1
     77c:	08 f4       	brcc	.+2      	; 0x780 <get_fat+0x20>
     77e:	a6 c0       	rjmp	.+332    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
     780:	fc 01       	movw	r30, r24
     782:	c0 81       	ld	r28, Z
     784:	d1 81       	ldd	r29, Z+1	; 0x01
     786:	8b 89       	ldd	r24, Y+19	; 0x13
     788:	9c 89       	ldd	r25, Y+20	; 0x14
     78a:	ad 89       	ldd	r26, Y+21	; 0x15
     78c:	be 89       	ldd	r27, Y+22	; 0x16
     78e:	48 17       	cp	r20, r24
     790:	59 07       	cpc	r21, r25
     792:	6a 07       	cpc	r22, r26
     794:	7b 07       	cpc	r23, r27
     796:	08 f0       	brcs	.+2      	; 0x79a <get_fat+0x3a>
     798:	9e c0       	rjmp	.+316    	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
     79a:	6a 01       	movw	r12, r20
     79c:	7b 01       	movw	r14, r22
     79e:	88 81       	ld	r24, Y
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <get_fat+0x46>
     7a4:	4d c0       	rjmp	.+154    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     7a6:	83 30       	cpi	r24, 0x03	; 3
     7a8:	09 f4       	brne	.+2      	; 0x7ac <get_fat+0x4c>
     7aa:	6c c0       	rjmp	.+216    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
     7ac:	81 30       	cpi	r24, 0x01	; 1
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <get_fat+0x52>
     7b0:	97 c0       	rjmp	.+302    	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
     7b2:	8a 01       	movw	r16, r20
     7b4:	16 95       	lsr	r17
     7b6:	07 95       	ror	r16
     7b8:	04 0f       	add	r16, r20
     7ba:	15 1f       	adc	r17, r21
     7bc:	c8 01       	movw	r24, r16
     7be:	89 2f       	mov	r24, r25
     7c0:	99 27       	eor	r25, r25
     7c2:	86 95       	lsr	r24
     7c4:	4f 8d       	ldd	r20, Y+31	; 0x1f
     7c6:	58 a1       	ldd	r21, Y+32	; 0x20
     7c8:	69 a1       	ldd	r22, Y+33	; 0x21
     7ca:	7a a1       	ldd	r23, Y+34	; 0x22
     7cc:	48 0f       	add	r20, r24
     7ce:	59 1f       	adc	r21, r25
     7d0:	61 1d       	adc	r22, r1
     7d2:	71 1d       	adc	r23, r1
     7d4:	ce 01       	movw	r24, r28
     7d6:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
     7da:	81 11       	cpse	r24, r1
     7dc:	86 c0       	rjmp	.+268    	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
     7de:	58 01       	movw	r10, r16
     7e0:	ff ef       	ldi	r31, 0xFF	; 255
     7e2:	af 1a       	sub	r10, r31
     7e4:	bf 0a       	sbc	r11, r31
     7e6:	11 70       	andi	r17, 0x01	; 1
     7e8:	fe 01       	movw	r30, r28
     7ea:	e0 0f       	add	r30, r16
     7ec:	f1 1f       	adc	r31, r17
     7ee:	17 a5       	ldd	r17, Z+47	; 0x2f
     7f0:	c5 01       	movw	r24, r10
     7f2:	89 2f       	mov	r24, r25
     7f4:	99 27       	eor	r25, r25
     7f6:	86 95       	lsr	r24
     7f8:	4f 8d       	ldd	r20, Y+31	; 0x1f
     7fa:	58 a1       	ldd	r21, Y+32	; 0x20
     7fc:	69 a1       	ldd	r22, Y+33	; 0x21
     7fe:	7a a1       	ldd	r23, Y+34	; 0x22
     800:	48 0f       	add	r20, r24
     802:	59 1f       	adc	r21, r25
     804:	61 1d       	adc	r22, r1
     806:	71 1d       	adc	r23, r1
     808:	ce 01       	movw	r24, r28
     80a:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
     80e:	81 11       	cpse	r24, r1
     810:	70 c0       	rjmp	.+224    	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	b8 22       	and	r11, r24
     816:	ca 0d       	add	r28, r10
     818:	db 1d       	adc	r29, r11
     81a:	8f a5       	ldd	r24, Y+47	; 0x2f
     81c:	61 2f       	mov	r22, r17
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	78 2b       	or	r23, r24
     822:	c0 fe       	sbrs	r12, 0
     824:	09 c0       	rjmp	.+18     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     826:	72 95       	swap	r23
     828:	62 95       	swap	r22
     82a:	6f 70       	andi	r22, 0x0F	; 15
     82c:	67 27       	eor	r22, r23
     82e:	7f 70       	andi	r23, 0x0F	; 15
     830:	67 27       	eor	r22, r23
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	68 c0       	rjmp	.+208    	; 0x908 <__stack+0x9>
     838:	7f 70       	andi	r23, 0x0F	; 15
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	64 c0       	rjmp	.+200    	; 0x908 <__stack+0x9>
     840:	45 2f       	mov	r20, r21
     842:	56 2f       	mov	r21, r22
     844:	67 2f       	mov	r22, r23
     846:	77 27       	eor	r23, r23
     848:	8f 8d       	ldd	r24, Y+31	; 0x1f
     84a:	98 a1       	ldd	r25, Y+32	; 0x20
     84c:	a9 a1       	ldd	r26, Y+33	; 0x21
     84e:	ba a1       	ldd	r27, Y+34	; 0x22
     850:	48 0f       	add	r20, r24
     852:	59 1f       	adc	r21, r25
     854:	6a 1f       	adc	r22, r26
     856:	7b 1f       	adc	r23, r27
     858:	ce 01       	movw	r24, r28
     85a:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
     85e:	81 11       	cpse	r24, r1
     860:	4c c0       	rjmp	.+152    	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
     862:	af 96       	adiw	r28, 0x2f	; 47
     864:	a6 01       	movw	r20, r12
     866:	44 0f       	add	r20, r20
     868:	55 1f       	adc	r21, r21
     86a:	4e 7f       	andi	r20, 0xFE	; 254
     86c:	51 70       	andi	r21, 0x01	; 1
     86e:	c4 0f       	add	r28, r20
     870:	d5 1f       	adc	r29, r21
     872:	69 81       	ldd	r22, Y+1	; 0x01
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	76 2f       	mov	r23, r22
     878:	66 27       	eor	r22, r22
     87a:	88 81       	ld	r24, Y
     87c:	68 2b       	or	r22, r24
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	42 c0       	rjmp	.+132    	; 0x908 <__stack+0x9>
     884:	8f 8d       	ldd	r24, Y+31	; 0x1f
     886:	98 a1       	ldd	r25, Y+32	; 0x20
     888:	a9 a1       	ldd	r26, Y+33	; 0x21
     88a:	ba a1       	ldd	r27, Y+34	; 0x22
     88c:	68 94       	set
     88e:	16 f8       	bld	r1, 6
     890:	76 95       	lsr	r23
     892:	67 95       	ror	r22
     894:	57 95       	ror	r21
     896:	47 95       	ror	r20
     898:	16 94       	lsr	r1
     89a:	d1 f7       	brne	.-12     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
     89c:	48 0f       	add	r20, r24
     89e:	59 1f       	adc	r21, r25
     8a0:	6a 1f       	adc	r22, r26
     8a2:	7b 1f       	adc	r23, r27
     8a4:	ce 01       	movw	r24, r28
     8a6:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
     8aa:	81 11       	cpse	r24, r1
     8ac:	2a c0       	rjmp	.+84     	; 0x902 <__stack+0x3>
     8ae:	af 96       	adiw	r28, 0x2f	; 47
     8b0:	a6 01       	movw	r20, r12
     8b2:	44 0f       	add	r20, r20
     8b4:	55 1f       	adc	r21, r21
     8b6:	44 0f       	add	r20, r20
     8b8:	55 1f       	adc	r21, r21
     8ba:	ca 01       	movw	r24, r20
     8bc:	8c 7f       	andi	r24, 0xFC	; 252
     8be:	91 70       	andi	r25, 0x01	; 1
     8c0:	8c 0f       	add	r24, r28
     8c2:	9d 1f       	adc	r25, r29
     8c4:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
     8c8:	9f 70       	andi	r25, 0x0F	; 15
     8ca:	1e c0       	rjmp	.+60     	; 0x908 <__stack+0x9>
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	19 c0       	rjmp	.+50     	; 0x908 <__stack+0x9>
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	14 c0       	rjmp	.+40     	; 0x908 <__stack+0x9>
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0f c0       	rjmp	.+30     	; 0x908 <__stack+0x9>
     8ea:	6f ef       	ldi	r22, 0xFF	; 255
     8ec:	7f ef       	ldi	r23, 0xFF	; 255
     8ee:	cb 01       	movw	r24, r22
     8f0:	0b c0       	rjmp	.+22     	; 0x908 <__stack+0x9>
     8f2:	6f ef       	ldi	r22, 0xFF	; 255
     8f4:	7f ef       	ldi	r23, 0xFF	; 255
     8f6:	cb 01       	movw	r24, r22
     8f8:	07 c0       	rjmp	.+14     	; 0x908 <__stack+0x9>
     8fa:	6f ef       	ldi	r22, 0xFF	; 255
     8fc:	7f ef       	ldi	r23, 0xFF	; 255
     8fe:	cb 01       	movw	r24, r22
     900:	03 c0       	rjmp	.+6      	; 0x908 <__stack+0x9>
     902:	6f ef       	ldi	r22, 0xFF	; 255
     904:	7f ef       	ldi	r23, 0xFF	; 255
     906:	cb 01       	movw	r24, r22
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	df 90       	pop	r13
     916:	cf 90       	pop	r12
     918:	bf 90       	pop	r11
     91a:	af 90       	pop	r10
     91c:	08 95       	ret

0000091e <dir_sdi>:
     91e:	4f 92       	push	r4
     920:	5f 92       	push	r5
     922:	6f 92       	push	r6
     924:	7f 92       	push	r7
     926:	8f 92       	push	r8
     928:	9f 92       	push	r9
     92a:	af 92       	push	r10
     92c:	bf 92       	push	r11
     92e:	cf 92       	push	r12
     930:	df 92       	push	r13
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	ec 01       	movw	r28, r24
     940:	6a 01       	movw	r12, r20
     942:	7b 01       	movw	r14, r22
     944:	41 15       	cp	r20, r1
     946:	51 05       	cpc	r21, r1
     948:	80 e2       	ldi	r24, 0x20	; 32
     94a:	68 07       	cpc	r22, r24
     94c:	71 05       	cpc	r23, r1
     94e:	08 f0       	brcs	.+2      	; 0x952 <dir_sdi+0x34>
     950:	b3 c0       	rjmp	.+358    	; 0xab8 <dir_sdi+0x19a>
     952:	db 01       	movw	r26, r22
     954:	ca 01       	movw	r24, r20
     956:	8f 71       	andi	r24, 0x1F	; 31
     958:	99 27       	eor	r25, r25
     95a:	aa 27       	eor	r26, r26
     95c:	bb 27       	eor	r27, r27
     95e:	89 2b       	or	r24, r25
     960:	8a 2b       	or	r24, r26
     962:	8b 2b       	or	r24, r27
     964:	09 f0       	breq	.+2      	; 0x968 <dir_sdi+0x4a>
     966:	aa c0       	rjmp	.+340    	; 0xabc <dir_sdi+0x19e>
     968:	08 81       	ld	r16, Y
     96a:	19 81       	ldd	r17, Y+1	; 0x01
     96c:	4e 87       	std	Y+14, r20	; 0x0e
     96e:	5f 87       	std	Y+15, r21	; 0x0f
     970:	68 8b       	std	Y+16, r22	; 0x10
     972:	79 8b       	std	Y+17, r23	; 0x11
     974:	8e 80       	ldd	r8, Y+6	; 0x06
     976:	9f 80       	ldd	r9, Y+7	; 0x07
     978:	a8 84       	ldd	r10, Y+8	; 0x08
     97a:	b9 84       	ldd	r11, Y+9	; 0x09
     97c:	81 14       	cp	r8, r1
     97e:	91 04       	cpc	r9, r1
     980:	a1 04       	cpc	r10, r1
     982:	b1 04       	cpc	r11, r1
     984:	61 f5       	brne	.+88     	; 0x9de <dir_sdi+0xc0>
     986:	f8 01       	movw	r30, r16
     988:	80 81       	ld	r24, Z
     98a:	83 30       	cpi	r24, 0x03	; 3
     98c:	40 f0       	brcs	.+16     	; 0x99e <dir_sdi+0x80>
     98e:	83 a1       	ldd	r24, Z+35	; 0x23
     990:	94 a1       	ldd	r25, Z+36	; 0x24
     992:	a5 a1       	ldd	r26, Z+37	; 0x25
     994:	b6 a1       	ldd	r27, Z+38	; 0x26
     996:	00 97       	sbiw	r24, 0x00	; 0
     998:	a1 05       	cpc	r26, r1
     99a:	b1 05       	cpc	r27, r1
     99c:	f1 f4       	brne	.+60     	; 0x9da <dir_sdi+0xbc>
     99e:	f8 01       	movw	r30, r16
     9a0:	87 81       	ldd	r24, Z+7	; 0x07
     9a2:	90 85       	ldd	r25, Z+8	; 0x08
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	b7 01       	movw	r22, r14
     9aa:	a6 01       	movw	r20, r12
     9ac:	68 94       	set
     9ae:	14 f8       	bld	r1, 4
     9b0:	76 95       	lsr	r23
     9b2:	67 95       	ror	r22
     9b4:	57 95       	ror	r21
     9b6:	47 95       	ror	r20
     9b8:	16 94       	lsr	r1
     9ba:	d1 f7       	brne	.-12     	; 0x9b0 <dir_sdi+0x92>
     9bc:	48 17       	cp	r20, r24
     9be:	59 07       	cpc	r21, r25
     9c0:	6a 07       	cpc	r22, r26
     9c2:	7b 07       	cpc	r23, r27
     9c4:	08 f0       	brcs	.+2      	; 0x9c8 <dir_sdi+0xaa>
     9c6:	7c c0       	rjmp	.+248    	; 0xac0 <dir_sdi+0x1a2>
     9c8:	83 a1       	ldd	r24, Z+35	; 0x23
     9ca:	94 a1       	ldd	r25, Z+36	; 0x24
     9cc:	a5 a1       	ldd	r26, Z+37	; 0x25
     9ce:	b6 a1       	ldd	r27, Z+38	; 0x26
     9d0:	8e 8b       	std	Y+22, r24	; 0x16
     9d2:	9f 8b       	std	Y+23, r25	; 0x17
     9d4:	a8 8f       	std	Y+24, r26	; 0x18
     9d6:	b9 8f       	std	Y+25, r27	; 0x19
     9d8:	46 c0       	rjmp	.+140    	; 0xa66 <dir_sdi+0x148>
     9da:	4c 01       	movw	r8, r24
     9dc:	5d 01       	movw	r10, r26
     9de:	f8 01       	movw	r30, r16
     9e0:	41 84       	ldd	r4, Z+9	; 0x09
     9e2:	52 84       	ldd	r5, Z+10	; 0x0a
     9e4:	61 2c       	mov	r6, r1
     9e6:	71 2c       	mov	r7, r1
     9e8:	03 2e       	mov	r0, r19
     9ea:	39 e0       	ldi	r19, 0x09	; 9
     9ec:	44 0c       	add	r4, r4
     9ee:	55 1c       	adc	r5, r5
     9f0:	66 1c       	adc	r6, r6
     9f2:	77 1c       	adc	r7, r7
     9f4:	3a 95       	dec	r19
     9f6:	d1 f7       	brne	.-12     	; 0x9ec <dir_sdi+0xce>
     9f8:	30 2d       	mov	r19, r0
     9fa:	c4 14       	cp	r12, r4
     9fc:	d5 04       	cpc	r13, r5
     9fe:	e6 04       	cpc	r14, r6
     a00:	f7 04       	cpc	r15, r7
     a02:	40 f1       	brcs	.+80     	; 0xa54 <dir_sdi+0x136>
     a04:	b5 01       	movw	r22, r10
     a06:	a4 01       	movw	r20, r8
     a08:	ce 01       	movw	r24, r28
     a0a:	0e 94 b0 03 	call	0x760	; 0x760 <get_fat>
     a0e:	4b 01       	movw	r8, r22
     a10:	5c 01       	movw	r10, r24
     a12:	6f 3f       	cpi	r22, 0xFF	; 255
     a14:	7f 4f       	sbci	r23, 0xFF	; 255
     a16:	8f 4f       	sbci	r24, 0xFF	; 255
     a18:	9f 4f       	sbci	r25, 0xFF	; 255
     a1a:	09 f4       	brne	.+2      	; 0xa1e <dir_sdi+0x100>
     a1c:	53 c0       	rjmp	.+166    	; 0xac4 <dir_sdi+0x1a6>
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	88 16       	cp	r8, r24
     a22:	91 04       	cpc	r9, r1
     a24:	a1 04       	cpc	r10, r1
     a26:	b1 04       	cpc	r11, r1
     a28:	08 f4       	brcc	.+2      	; 0xa2c <dir_sdi+0x10e>
     a2a:	4e c0       	rjmp	.+156    	; 0xac8 <dir_sdi+0x1aa>
     a2c:	f8 01       	movw	r30, r16
     a2e:	83 89       	ldd	r24, Z+19	; 0x13
     a30:	94 89       	ldd	r25, Z+20	; 0x14
     a32:	a5 89       	ldd	r26, Z+21	; 0x15
     a34:	b6 89       	ldd	r27, Z+22	; 0x16
     a36:	88 16       	cp	r8, r24
     a38:	99 06       	cpc	r9, r25
     a3a:	aa 06       	cpc	r10, r26
     a3c:	bb 06       	cpc	r11, r27
     a3e:	08 f0       	brcs	.+2      	; 0xa42 <dir_sdi+0x124>
     a40:	45 c0       	rjmp	.+138    	; 0xacc <dir_sdi+0x1ae>
     a42:	c4 18       	sub	r12, r4
     a44:	d5 08       	sbc	r13, r5
     a46:	e6 08       	sbc	r14, r6
     a48:	f7 08       	sbc	r15, r7
     a4a:	c4 14       	cp	r12, r4
     a4c:	d5 04       	cpc	r13, r5
     a4e:	e6 04       	cpc	r14, r6
     a50:	f7 04       	cpc	r15, r7
     a52:	c0 f6       	brcc	.-80     	; 0xa04 <dir_sdi+0xe6>
     a54:	b5 01       	movw	r22, r10
     a56:	a4 01       	movw	r20, r8
     a58:	c8 01       	movw	r24, r16
     a5a:	0e 94 8a 00 	call	0x114	; 0x114 <clst2sect>
     a5e:	6e 8b       	std	Y+22, r22	; 0x16
     a60:	7f 8b       	std	Y+23, r23	; 0x17
     a62:	88 8f       	std	Y+24, r24	; 0x18
     a64:	99 8f       	std	Y+25, r25	; 0x19
     a66:	8a 8a       	std	Y+18, r8	; 0x12
     a68:	9b 8a       	std	Y+19, r9	; 0x13
     a6a:	ac 8a       	std	Y+20, r10	; 0x14
     a6c:	bd 8a       	std	Y+21, r11	; 0x15
     a6e:	8e 89       	ldd	r24, Y+22	; 0x16
     a70:	9f 89       	ldd	r25, Y+23	; 0x17
     a72:	a8 8d       	ldd	r26, Y+24	; 0x18
     a74:	b9 8d       	ldd	r27, Y+25	; 0x19
     a76:	00 97       	sbiw	r24, 0x00	; 0
     a78:	a1 05       	cpc	r26, r1
     a7a:	b1 05       	cpc	r27, r1
     a7c:	49 f1       	breq	.+82     	; 0xad0 <dir_sdi+0x1b2>
     a7e:	b7 01       	movw	r22, r14
     a80:	a6 01       	movw	r20, r12
     a82:	03 2e       	mov	r0, r19
     a84:	39 e0       	ldi	r19, 0x09	; 9
     a86:	76 95       	lsr	r23
     a88:	67 95       	ror	r22
     a8a:	57 95       	ror	r21
     a8c:	47 95       	ror	r20
     a8e:	3a 95       	dec	r19
     a90:	d1 f7       	brne	.-12     	; 0xa86 <dir_sdi+0x168>
     a92:	30 2d       	mov	r19, r0
     a94:	84 0f       	add	r24, r20
     a96:	95 1f       	adc	r25, r21
     a98:	a6 1f       	adc	r26, r22
     a9a:	b7 1f       	adc	r27, r23
     a9c:	8e 8b       	std	Y+22, r24	; 0x16
     a9e:	9f 8b       	std	Y+23, r25	; 0x17
     aa0:	a8 8f       	std	Y+24, r26	; 0x18
     aa2:	b9 8f       	std	Y+25, r27	; 0x19
     aa4:	01 5d       	subi	r16, 0xD1	; 209
     aa6:	1f 4f       	sbci	r17, 0xFF	; 255
     aa8:	f1 e0       	ldi	r31, 0x01	; 1
     aaa:	df 22       	and	r13, r31
     aac:	c0 0e       	add	r12, r16
     aae:	d1 1e       	adc	r13, r17
     ab0:	db 8e       	std	Y+27, r13	; 0x1b
     ab2:	ca 8e       	std	Y+26, r12	; 0x1a
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	0d c0       	rjmp	.+26     	; 0xad2 <dir_sdi+0x1b4>
     ab8:	82 e0       	ldi	r24, 0x02	; 2
     aba:	0b c0       	rjmp	.+22     	; 0xad2 <dir_sdi+0x1b4>
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	09 c0       	rjmp	.+18     	; 0xad2 <dir_sdi+0x1b4>
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	07 c0       	rjmp	.+14     	; 0xad2 <dir_sdi+0x1b4>
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	05 c0       	rjmp	.+10     	; 0xad2 <dir_sdi+0x1b4>
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	03 c0       	rjmp	.+6      	; 0xad2 <dir_sdi+0x1b4>
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <dir_sdi+0x1b4>
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	df 90       	pop	r13
     ae0:	cf 90       	pop	r12
     ae2:	bf 90       	pop	r11
     ae4:	af 90       	pop	r10
     ae6:	9f 90       	pop	r9
     ae8:	8f 90       	pop	r8
     aea:	7f 90       	pop	r7
     aec:	6f 90       	pop	r6
     aee:	5f 90       	pop	r5
     af0:	4f 90       	pop	r4
     af2:	08 95       	ret

00000af4 <create_chain>:
     af4:	4f 92       	push	r4
     af6:	5f 92       	push	r5
     af8:	6f 92       	push	r6
     afa:	7f 92       	push	r7
     afc:	8f 92       	push	r8
     afe:	9f 92       	push	r9
     b00:	af 92       	push	r10
     b02:	bf 92       	push	r11
     b04:	cf 92       	push	r12
     b06:	df 92       	push	r13
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	8c 01       	movw	r16, r24
     b16:	2a 01       	movw	r4, r20
     b18:	3b 01       	movw	r6, r22
     b1a:	fc 01       	movw	r30, r24
     b1c:	c0 81       	ld	r28, Z
     b1e:	d1 81       	ldd	r29, Z+1	; 0x01
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	c9 f4       	brne	.+50     	; 0xb5c <create_chain+0x68>
     b2a:	8b 84       	ldd	r8, Y+11	; 0x0b
     b2c:	9c 84       	ldd	r9, Y+12	; 0x0c
     b2e:	ad 84       	ldd	r10, Y+13	; 0x0d
     b30:	be 84       	ldd	r11, Y+14	; 0x0e
     b32:	81 14       	cp	r8, r1
     b34:	91 04       	cpc	r9, r1
     b36:	a1 04       	cpc	r10, r1
     b38:	b1 04       	cpc	r11, r1
     b3a:	09 f4       	brne	.+2      	; 0xb3e <create_chain+0x4a>
     b3c:	22 c1       	rjmp	.+580    	; 0xd82 <create_chain+0x28e>
     b3e:	8b 89       	ldd	r24, Y+19	; 0x13
     b40:	9c 89       	ldd	r25, Y+20	; 0x14
     b42:	ad 89       	ldd	r26, Y+21	; 0x15
     b44:	be 89       	ldd	r27, Y+22	; 0x16
     b46:	88 16       	cp	r8, r24
     b48:	99 06       	cpc	r9, r25
     b4a:	aa 06       	cpc	r10, r26
     b4c:	bb 06       	cpc	r11, r27
     b4e:	08 f4       	brcc	.+2      	; 0xb52 <create_chain+0x5e>
     b50:	1c c1       	rjmp	.+568    	; 0xd8a <create_chain+0x296>
     b52:	81 2c       	mov	r8, r1
     b54:	91 2c       	mov	r9, r1
     b56:	54 01       	movw	r10, r8
     b58:	83 94       	inc	r8
     b5a:	17 c1       	rjmp	.+558    	; 0xd8a <create_chain+0x296>
     b5c:	0e 94 b0 03 	call	0x760	; 0x760 <get_fat>
     b60:	62 30       	cpi	r22, 0x02	; 2
     b62:	71 05       	cpc	r23, r1
     b64:	81 05       	cpc	r24, r1
     b66:	91 05       	cpc	r25, r1
     b68:	08 f4       	brcc	.+2      	; 0xb6c <create_chain+0x78>
     b6a:	d3 c0       	rjmp	.+422    	; 0xd12 <create_chain+0x21e>
     b6c:	6f 3f       	cpi	r22, 0xFF	; 255
     b6e:	ff ef       	ldi	r31, 0xFF	; 255
     b70:	7f 07       	cpc	r23, r31
     b72:	8f 07       	cpc	r24, r31
     b74:	9f 07       	cpc	r25, r31
     b76:	09 f4       	brne	.+2      	; 0xb7a <create_chain+0x86>
     b78:	d1 c0       	rjmp	.+418    	; 0xd1c <create_chain+0x228>
     b7a:	cb 88       	ldd	r12, Y+19	; 0x13
     b7c:	dc 88       	ldd	r13, Y+20	; 0x14
     b7e:	ed 88       	ldd	r14, Y+21	; 0x15
     b80:	fe 88       	ldd	r15, Y+22	; 0x16
     b82:	6c 15       	cp	r22, r12
     b84:	7d 05       	cpc	r23, r13
     b86:	8e 05       	cpc	r24, r14
     b88:	9f 05       	cpc	r25, r15
     b8a:	08 f0       	brcs	.+2      	; 0xb8e <create_chain+0x9a>
     b8c:	e9 c0       	rjmp	.+466    	; 0xd60 <create_chain+0x26c>
     b8e:	07 c1       	rjmp	.+526    	; 0xd9e <create_chain+0x2aa>
     b90:	73 01       	movw	r14, r6
     b92:	62 01       	movw	r12, r4
     b94:	2f ef       	ldi	r18, 0xFF	; 255
     b96:	c2 1a       	sub	r12, r18
     b98:	d2 0a       	sbc	r13, r18
     b9a:	e2 0a       	sbc	r14, r18
     b9c:	f2 0a       	sbc	r15, r18
     b9e:	8b 89       	ldd	r24, Y+19	; 0x13
     ba0:	9c 89       	ldd	r25, Y+20	; 0x14
     ba2:	ad 89       	ldd	r26, Y+21	; 0x15
     ba4:	be 89       	ldd	r27, Y+22	; 0x16
     ba6:	c8 16       	cp	r12, r24
     ba8:	d9 06       	cpc	r13, r25
     baa:	ea 06       	cpc	r14, r26
     bac:	fb 06       	cpc	r15, r27
     bae:	28 f0       	brcs	.+10     	; 0xbba <create_chain+0xc6>
     bb0:	c1 2c       	mov	r12, r1
     bb2:	d1 2c       	mov	r13, r1
     bb4:	76 01       	movw	r14, r12
     bb6:	68 94       	set
     bb8:	c1 f8       	bld	r12, 1
     bba:	b7 01       	movw	r22, r14
     bbc:	a6 01       	movw	r20, r12
     bbe:	c8 01       	movw	r24, r16
     bc0:	0e 94 b0 03 	call	0x760	; 0x760 <get_fat>
     bc4:	61 30       	cpi	r22, 0x01	; 1
     bc6:	71 05       	cpc	r23, r1
     bc8:	81 05       	cpc	r24, r1
     bca:	91 05       	cpc	r25, r1
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <create_chain+0xdc>
     bce:	aa c0       	rjmp	.+340    	; 0xd24 <create_chain+0x230>
     bd0:	6f 3f       	cpi	r22, 0xFF	; 255
     bd2:	ef ef       	ldi	r30, 0xFF	; 255
     bd4:	7e 07       	cpc	r23, r30
     bd6:	8e 07       	cpc	r24, r30
     bd8:	9e 07       	cpc	r25, r30
     bda:	09 f4       	brne	.+2      	; 0xbde <create_chain+0xea>
     bdc:	a8 c0       	rjmp	.+336    	; 0xd2e <create_chain+0x23a>
     bde:	67 2b       	or	r22, r23
     be0:	68 2b       	or	r22, r24
     be2:	69 2b       	or	r22, r25
     be4:	b1 f0       	breq	.+44     	; 0xc12 <create_chain+0x11e>
     be6:	8b 84       	ldd	r8, Y+11	; 0x0b
     be8:	9c 84       	ldd	r9, Y+12	; 0x0c
     bea:	ad 84       	ldd	r10, Y+13	; 0x0d
     bec:	be 84       	ldd	r11, Y+14	; 0x0e
     bee:	f2 e0       	ldi	r31, 0x02	; 2
     bf0:	8f 16       	cp	r8, r31
     bf2:	91 04       	cpc	r9, r1
     bf4:	a1 04       	cpc	r10, r1
     bf6:	b1 04       	cpc	r11, r1
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <create_chain+0x108>
     bfa:	bd c0       	rjmp	.+378    	; 0xd76 <create_chain+0x282>
     bfc:	8b 89       	ldd	r24, Y+19	; 0x13
     bfe:	9c 89       	ldd	r25, Y+20	; 0x14
     c00:	ad 89       	ldd	r26, Y+21	; 0x15
     c02:	be 89       	ldd	r27, Y+22	; 0x16
     c04:	88 16       	cp	r8, r24
     c06:	99 06       	cpc	r9, r25
     c08:	aa 06       	cpc	r10, r26
     c0a:	bb 06       	cpc	r11, r27
     c0c:	08 f0       	brcs	.+2      	; 0xc10 <create_chain+0x11c>
     c0e:	b6 c0       	rjmp	.+364    	; 0xd7c <create_chain+0x288>
     c10:	07 c0       	rjmp	.+14     	; 0xc20 <create_chain+0x12c>
     c12:	c1 14       	cp	r12, r1
     c14:	d1 04       	cpc	r13, r1
     c16:	e1 04       	cpc	r14, r1
     c18:	f1 04       	cpc	r15, r1
     c1a:	d1 f5       	brne	.+116    	; 0xc90 <create_chain+0x19c>
     c1c:	53 01       	movw	r10, r6
     c1e:	42 01       	movw	r8, r4
     c20:	75 01       	movw	r14, r10
     c22:	64 01       	movw	r12, r8
     c24:	2f ef       	ldi	r18, 0xFF	; 255
     c26:	c2 1a       	sub	r12, r18
     c28:	d2 0a       	sbc	r13, r18
     c2a:	e2 0a       	sbc	r14, r18
     c2c:	f2 0a       	sbc	r15, r18
     c2e:	8b 89       	ldd	r24, Y+19	; 0x13
     c30:	9c 89       	ldd	r25, Y+20	; 0x14
     c32:	ad 89       	ldd	r26, Y+21	; 0x15
     c34:	be 89       	ldd	r27, Y+22	; 0x16
     c36:	c8 16       	cp	r12, r24
     c38:	d9 06       	cpc	r13, r25
     c3a:	ea 06       	cpc	r14, r26
     c3c:	fb 06       	cpc	r15, r27
     c3e:	60 f0       	brcs	.+24     	; 0xc58 <create_chain+0x164>
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	88 16       	cp	r8, r24
     c44:	91 04       	cpc	r9, r1
     c46:	a1 04       	cpc	r10, r1
     c48:	b1 04       	cpc	r11, r1
     c4a:	08 f4       	brcc	.+2      	; 0xc4e <create_chain+0x15a>
     c4c:	74 c0       	rjmp	.+232    	; 0xd36 <create_chain+0x242>
     c4e:	c1 2c       	mov	r12, r1
     c50:	d1 2c       	mov	r13, r1
     c52:	76 01       	movw	r14, r12
     c54:	68 94       	set
     c56:	c1 f8       	bld	r12, 1
     c58:	b7 01       	movw	r22, r14
     c5a:	a6 01       	movw	r20, r12
     c5c:	c8 01       	movw	r24, r16
     c5e:	0e 94 b0 03 	call	0x760	; 0x760 <get_fat>
     c62:	61 15       	cp	r22, r1
     c64:	71 05       	cpc	r23, r1
     c66:	81 05       	cpc	r24, r1
     c68:	91 05       	cpc	r25, r1
     c6a:	91 f0       	breq	.+36     	; 0xc90 <create_chain+0x19c>
     c6c:	61 30       	cpi	r22, 0x01	; 1
     c6e:	71 05       	cpc	r23, r1
     c70:	81 05       	cpc	r24, r1
     c72:	91 05       	cpc	r25, r1
     c74:	09 f4       	brne	.+2      	; 0xc78 <create_chain+0x184>
     c76:	63 c0       	rjmp	.+198    	; 0xd3e <create_chain+0x24a>
     c78:	6f 3f       	cpi	r22, 0xFF	; 255
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
     c7c:	8f 4f       	sbci	r24, 0xFF	; 255
     c7e:	9f 4f       	sbci	r25, 0xFF	; 255
     c80:	09 f4       	brne	.+2      	; 0xc84 <create_chain+0x190>
     c82:	62 c0       	rjmp	.+196    	; 0xd48 <create_chain+0x254>
     c84:	c8 14       	cp	r12, r8
     c86:	d9 04       	cpc	r13, r9
     c88:	ea 04       	cpc	r14, r10
     c8a:	fb 04       	cpc	r15, r11
     c8c:	59 f6       	brne	.-106    	; 0xc24 <create_chain+0x130>
     c8e:	60 c0       	rjmp	.+192    	; 0xd50 <create_chain+0x25c>
     c90:	0f ef       	ldi	r16, 0xFF	; 255
     c92:	1f ef       	ldi	r17, 0xFF	; 255
     c94:	98 01       	movw	r18, r16
     c96:	b7 01       	movw	r22, r14
     c98:	a6 01       	movw	r20, r12
     c9a:	ce 01       	movw	r24, r28
     c9c:	0e 94 81 02 	call	0x502	; 0x502 <put_fat>
     ca0:	81 11       	cpse	r24, r1
     ca2:	30 c0       	rjmp	.+96     	; 0xd04 <create_chain+0x210>
     ca4:	41 14       	cp	r4, r1
     ca6:	51 04       	cpc	r5, r1
     ca8:	61 04       	cpc	r6, r1
     caa:	71 04       	cpc	r7, r1
     cac:	49 f0       	breq	.+18     	; 0xcc0 <create_chain+0x1cc>
     cae:	97 01       	movw	r18, r14
     cb0:	86 01       	movw	r16, r12
     cb2:	b3 01       	movw	r22, r6
     cb4:	a2 01       	movw	r20, r4
     cb6:	ce 01       	movw	r24, r28
     cb8:	0e 94 81 02 	call	0x502	; 0x502 <put_fat>
     cbc:	81 11       	cpse	r24, r1
     cbe:	22 c0       	rjmp	.+68     	; 0xd04 <create_chain+0x210>
     cc0:	cb 86       	std	Y+11, r12	; 0x0b
     cc2:	dc 86       	std	Y+12, r13	; 0x0c
     cc4:	ed 86       	std	Y+13, r14	; 0x0d
     cc6:	fe 86       	std	Y+14, r15	; 0x0e
     cc8:	4f 85       	ldd	r20, Y+15	; 0x0f
     cca:	58 89       	ldd	r21, Y+16	; 0x10
     ccc:	69 89       	ldd	r22, Y+17	; 0x11
     cce:	7a 89       	ldd	r23, Y+18	; 0x12
     cd0:	8b 89       	ldd	r24, Y+19	; 0x13
     cd2:	9c 89       	ldd	r25, Y+20	; 0x14
     cd4:	ad 89       	ldd	r26, Y+21	; 0x15
     cd6:	be 89       	ldd	r27, Y+22	; 0x16
     cd8:	02 97       	sbiw	r24, 0x02	; 2
     cda:	a1 09       	sbc	r26, r1
     cdc:	b1 09       	sbc	r27, r1
     cde:	84 17       	cp	r24, r20
     ce0:	95 07       	cpc	r25, r21
     ce2:	a6 07       	cpc	r26, r22
     ce4:	b7 07       	cpc	r27, r23
     ce6:	40 f0       	brcs	.+16     	; 0xcf8 <create_chain+0x204>
     ce8:	41 50       	subi	r20, 0x01	; 1
     cea:	51 09       	sbc	r21, r1
     cec:	61 09       	sbc	r22, r1
     cee:	71 09       	sbc	r23, r1
     cf0:	4f 87       	std	Y+15, r20	; 0x0f
     cf2:	58 8b       	std	Y+16, r21	; 0x10
     cf4:	69 8b       	std	Y+17, r22	; 0x11
     cf6:	7a 8b       	std	Y+18, r23	; 0x12
     cf8:	8c 81       	ldd	r24, Y+4	; 0x04
     cfa:	81 60       	ori	r24, 0x01	; 1
     cfc:	8c 83       	std	Y+4, r24	; 0x04
     cfe:	c7 01       	movw	r24, r14
     d00:	b6 01       	movw	r22, r12
     d02:	4d c0       	rjmp	.+154    	; 0xd9e <create_chain+0x2aa>
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	41 f1       	breq	.+80     	; 0xd58 <create_chain+0x264>
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	46 c0       	rjmp	.+140    	; 0xd9e <create_chain+0x2aa>
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	41 c0       	rjmp	.+130    	; 0xd9e <create_chain+0x2aa>
     d1c:	6f ef       	ldi	r22, 0xFF	; 255
     d1e:	7f ef       	ldi	r23, 0xFF	; 255
     d20:	cb 01       	movw	r24, r22
     d22:	3d c0       	rjmp	.+122    	; 0xd9e <create_chain+0x2aa>
     d24:	61 e0       	ldi	r22, 0x01	; 1
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	38 c0       	rjmp	.+112    	; 0xd9e <create_chain+0x2aa>
     d2e:	6f ef       	ldi	r22, 0xFF	; 255
     d30:	7f ef       	ldi	r23, 0xFF	; 255
     d32:	cb 01       	movw	r24, r22
     d34:	34 c0       	rjmp	.+104    	; 0xd9e <create_chain+0x2aa>
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	cb 01       	movw	r24, r22
     d3c:	30 c0       	rjmp	.+96     	; 0xd9e <create_chain+0x2aa>
     d3e:	61 e0       	ldi	r22, 0x01	; 1
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	2b c0       	rjmp	.+86     	; 0xd9e <create_chain+0x2aa>
     d48:	6f ef       	ldi	r22, 0xFF	; 255
     d4a:	7f ef       	ldi	r23, 0xFF	; 255
     d4c:	cb 01       	movw	r24, r22
     d4e:	27 c0       	rjmp	.+78     	; 0xd9e <create_chain+0x2aa>
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	cb 01       	movw	r24, r22
     d56:	23 c0       	rjmp	.+70     	; 0xd9e <create_chain+0x2aa>
     d58:	6f ef       	ldi	r22, 0xFF	; 255
     d5a:	7f ef       	ldi	r23, 0xFF	; 255
     d5c:	cb 01       	movw	r24, r22
     d5e:	1f c0       	rjmp	.+62     	; 0xd9e <create_chain+0x2aa>
     d60:	6f 85       	ldd	r22, Y+15	; 0x0f
     d62:	78 89       	ldd	r23, Y+16	; 0x10
     d64:	89 89       	ldd	r24, Y+17	; 0x11
     d66:	9a 89       	ldd	r25, Y+18	; 0x12
     d68:	61 15       	cp	r22, r1
     d6a:	71 05       	cpc	r23, r1
     d6c:	81 05       	cpc	r24, r1
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f0       	breq	.+2      	; 0xd74 <create_chain+0x280>
     d72:	0e cf       	rjmp	.-484    	; 0xb90 <create_chain+0x9c>
     d74:	14 c0       	rjmp	.+40     	; 0xd9e <create_chain+0x2aa>
     d76:	53 01       	movw	r10, r6
     d78:	42 01       	movw	r8, r4
     d7a:	52 cf       	rjmp	.-348    	; 0xc20 <create_chain+0x12c>
     d7c:	53 01       	movw	r10, r6
     d7e:	42 01       	movw	r8, r4
     d80:	4f cf       	rjmp	.-354    	; 0xc20 <create_chain+0x12c>
     d82:	81 2c       	mov	r8, r1
     d84:	91 2c       	mov	r9, r1
     d86:	54 01       	movw	r10, r8
     d88:	83 94       	inc	r8
     d8a:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8c:	78 89       	ldd	r23, Y+16	; 0x10
     d8e:	89 89       	ldd	r24, Y+17	; 0x11
     d90:	9a 89       	ldd	r25, Y+18	; 0x12
     d92:	61 15       	cp	r22, r1
     d94:	71 05       	cpc	r23, r1
     d96:	81 05       	cpc	r24, r1
     d98:	91 05       	cpc	r25, r1
     d9a:	09 f0       	breq	.+2      	; 0xd9e <create_chain+0x2aa>
     d9c:	41 cf       	rjmp	.-382    	; 0xc20 <create_chain+0x12c>
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	cf 90       	pop	r12
     dae:	bf 90       	pop	r11
     db0:	af 90       	pop	r10
     db2:	9f 90       	pop	r9
     db4:	8f 90       	pop	r8
     db6:	7f 90       	pop	r7
     db8:	6f 90       	pop	r6
     dba:	5f 90       	pop	r5
     dbc:	4f 90       	pop	r4
     dbe:	08 95       	ret

00000dc0 <remove_chain>:
     dc0:	4f 92       	push	r4
     dc2:	5f 92       	push	r5
     dc4:	6f 92       	push	r6
     dc6:	7f 92       	push	r7
     dc8:	af 92       	push	r10
     dca:	bf 92       	push	r11
     dcc:	cf 92       	push	r12
     dce:	df 92       	push	r13
     dd0:	ef 92       	push	r14
     dd2:	ff 92       	push	r15
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	5c 01       	movw	r10, r24
     dde:	6a 01       	movw	r12, r20
     de0:	7b 01       	movw	r14, r22
     de2:	b9 01       	movw	r22, r18
     de4:	a8 01       	movw	r20, r16
     de6:	22 e0       	ldi	r18, 0x02	; 2
     de8:	c2 16       	cp	r12, r18
     dea:	d1 04       	cpc	r13, r1
     dec:	e1 04       	cpc	r14, r1
     dee:	f1 04       	cpc	r15, r1
     df0:	08 f4       	brcc	.+2      	; 0xdf4 <remove_chain+0x34>
     df2:	63 c0       	rjmp	.+198    	; 0xeba <remove_chain+0xfa>
     df4:	fc 01       	movw	r30, r24
     df6:	c0 81       	ld	r28, Z
     df8:	d1 81       	ldd	r29, Z+1	; 0x01
     dfa:	8b 89       	ldd	r24, Y+19	; 0x13
     dfc:	9c 89       	ldd	r25, Y+20	; 0x14
     dfe:	ad 89       	ldd	r26, Y+21	; 0x15
     e00:	be 89       	ldd	r27, Y+22	; 0x16
     e02:	c8 16       	cp	r12, r24
     e04:	d9 06       	cpc	r13, r25
     e06:	ea 06       	cpc	r14, r26
     e08:	fb 06       	cpc	r15, r27
     e0a:	08 f0       	brcs	.+2      	; 0xe0e <remove_chain+0x4e>
     e0c:	58 c0       	rjmp	.+176    	; 0xebe <remove_chain+0xfe>
     e0e:	41 15       	cp	r20, r1
     e10:	51 05       	cpc	r21, r1
     e12:	61 05       	cpc	r22, r1
     e14:	71 05       	cpc	r23, r1
     e16:	41 f0       	breq	.+16     	; 0xe28 <remove_chain+0x68>
     e18:	0f ef       	ldi	r16, 0xFF	; 255
     e1a:	1f ef       	ldi	r17, 0xFF	; 255
     e1c:	98 01       	movw	r18, r16
     e1e:	ce 01       	movw	r24, r28
     e20:	0e 94 81 02 	call	0x502	; 0x502 <put_fat>
     e24:	81 11       	cpse	r24, r1
     e26:	52 c0       	rjmp	.+164    	; 0xecc <remove_chain+0x10c>
     e28:	b7 01       	movw	r22, r14
     e2a:	a6 01       	movw	r20, r12
     e2c:	c5 01       	movw	r24, r10
     e2e:	0e 94 b0 03 	call	0x760	; 0x760 <get_fat>
     e32:	2b 01       	movw	r4, r22
     e34:	3c 01       	movw	r6, r24
     e36:	61 15       	cp	r22, r1
     e38:	71 05       	cpc	r23, r1
     e3a:	81 05       	cpc	r24, r1
     e3c:	91 05       	cpc	r25, r1
     e3e:	09 f4       	brne	.+2      	; 0xe42 <remove_chain+0x82>
     e40:	40 c0       	rjmp	.+128    	; 0xec2 <remove_chain+0x102>
     e42:	61 30       	cpi	r22, 0x01	; 1
     e44:	71 05       	cpc	r23, r1
     e46:	81 05       	cpc	r24, r1
     e48:	91 05       	cpc	r25, r1
     e4a:	e9 f1       	breq	.+122    	; 0xec6 <remove_chain+0x106>
     e4c:	6f 3f       	cpi	r22, 0xFF	; 255
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	8f 4f       	sbci	r24, 0xFF	; 255
     e52:	9f 4f       	sbci	r25, 0xFF	; 255
     e54:	d1 f1       	breq	.+116    	; 0xeca <remove_chain+0x10a>
     e56:	00 e0       	ldi	r16, 0x00	; 0
     e58:	10 e0       	ldi	r17, 0x00	; 0
     e5a:	98 01       	movw	r18, r16
     e5c:	b7 01       	movw	r22, r14
     e5e:	a6 01       	movw	r20, r12
     e60:	ce 01       	movw	r24, r28
     e62:	0e 94 81 02 	call	0x502	; 0x502 <put_fat>
     e66:	81 11       	cpse	r24, r1
     e68:	31 c0       	rjmp	.+98     	; 0xecc <remove_chain+0x10c>
     e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6c:	98 89       	ldd	r25, Y+16	; 0x10
     e6e:	a9 89       	ldd	r26, Y+17	; 0x11
     e70:	ba 89       	ldd	r27, Y+18	; 0x12
     e72:	4b 89       	ldd	r20, Y+19	; 0x13
     e74:	5c 89       	ldd	r21, Y+20	; 0x14
     e76:	6d 89       	ldd	r22, Y+21	; 0x15
     e78:	7e 89       	ldd	r23, Y+22	; 0x16
     e7a:	6a 01       	movw	r12, r20
     e7c:	7b 01       	movw	r14, r22
     e7e:	e2 e0       	ldi	r30, 0x02	; 2
     e80:	ce 1a       	sub	r12, r30
     e82:	d1 08       	sbc	r13, r1
     e84:	e1 08       	sbc	r14, r1
     e86:	f1 08       	sbc	r15, r1
     e88:	8c 15       	cp	r24, r12
     e8a:	9d 05       	cpc	r25, r13
     e8c:	ae 05       	cpc	r26, r14
     e8e:	bf 05       	cpc	r27, r15
     e90:	50 f4       	brcc	.+20     	; 0xea6 <remove_chain+0xe6>
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	a1 1d       	adc	r26, r1
     e96:	b1 1d       	adc	r27, r1
     e98:	8f 87       	std	Y+15, r24	; 0x0f
     e9a:	98 8b       	std	Y+16, r25	; 0x10
     e9c:	a9 8b       	std	Y+17, r26	; 0x11
     e9e:	ba 8b       	std	Y+18, r27	; 0x12
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	81 60       	ori	r24, 0x01	; 1
     ea4:	8c 83       	std	Y+4, r24	; 0x04
     ea6:	73 01       	movw	r14, r6
     ea8:	62 01       	movw	r12, r4
     eaa:	44 16       	cp	r4, r20
     eac:	55 06       	cpc	r5, r21
     eae:	66 06       	cpc	r6, r22
     eb0:	77 06       	cpc	r7, r23
     eb2:	08 f4       	brcc	.+2      	; 0xeb6 <remove_chain+0xf6>
     eb4:	b9 cf       	rjmp	.-142    	; 0xe28 <remove_chain+0x68>
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	09 c0       	rjmp	.+18     	; 0xecc <remove_chain+0x10c>
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	07 c0       	rjmp	.+14     	; 0xecc <remove_chain+0x10c>
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	05 c0       	rjmp	.+10     	; 0xecc <remove_chain+0x10c>
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	03 c0       	rjmp	.+6      	; 0xecc <remove_chain+0x10c>
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <remove_chain+0x10c>
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
     edc:	bf 90       	pop	r11
     ede:	af 90       	pop	r10
     ee0:	7f 90       	pop	r7
     ee2:	6f 90       	pop	r6
     ee4:	5f 90       	pop	r5
     ee6:	4f 90       	pop	r4
     ee8:	08 95       	ret

00000eea <dir_next>:
     eea:	4f 92       	push	r4
     eec:	5f 92       	push	r5
     eee:	6f 92       	push	r6
     ef0:	7f 92       	push	r7
     ef2:	af 92       	push	r10
     ef4:	bf 92       	push	r11
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	8b 01       	movw	r16, r22
     f08:	fc 01       	movw	r30, r24
     f0a:	c6 84       	ldd	r12, Z+14	; 0x0e
     f0c:	d7 84       	ldd	r13, Z+15	; 0x0f
     f0e:	e0 88       	ldd	r14, Z+16	; 0x10
     f10:	f1 88       	ldd	r15, Z+17	; 0x11
     f12:	f0 e2       	ldi	r31, 0x20	; 32
     f14:	cf 0e       	add	r12, r31
     f16:	d1 1c       	adc	r13, r1
     f18:	e1 1c       	adc	r14, r1
     f1a:	f1 1c       	adc	r15, r1
     f1c:	c1 14       	cp	r12, r1
     f1e:	d1 04       	cpc	r13, r1
     f20:	20 e2       	ldi	r18, 0x20	; 32
     f22:	e2 06       	cpc	r14, r18
     f24:	f1 04       	cpc	r15, r1
     f26:	38 f0       	brcs	.+14     	; 0xf36 <dir_next+0x4c>
     f28:	fc 01       	movw	r30, r24
     f2a:	16 8a       	std	Z+22, r1	; 0x16
     f2c:	17 8a       	std	Z+23, r1	; 0x17
     f2e:	10 8e       	std	Z+24, r1	; 0x18
     f30:	11 8e       	std	Z+25, r1	; 0x19
     f32:	84 e0       	ldi	r24, 0x04	; 4
     f34:	ca c0       	rjmp	.+404    	; 0x10ca <dir_next+0x1e0>
     f36:	fc 01       	movw	r30, r24
     f38:	46 89       	ldd	r20, Z+22	; 0x16
     f3a:	57 89       	ldd	r21, Z+23	; 0x17
     f3c:	60 8d       	ldd	r22, Z+24	; 0x18
     f3e:	71 8d       	ldd	r23, Z+25	; 0x19
     f40:	41 15       	cp	r20, r1
     f42:	51 05       	cpc	r21, r1
     f44:	61 05       	cpc	r22, r1
     f46:	71 05       	cpc	r23, r1
     f48:	09 f4       	brne	.+2      	; 0xf4c <dir_next+0x62>
     f4a:	b2 c0       	rjmp	.+356    	; 0x10b0 <dir_next+0x1c6>
     f4c:	ec 01       	movw	r28, r24
     f4e:	a0 80       	ld	r10, Z
     f50:	b1 80       	ldd	r11, Z+1	; 0x01
     f52:	d7 01       	movw	r26, r14
     f54:	c6 01       	movw	r24, r12
     f56:	91 70       	andi	r25, 0x01	; 1
     f58:	aa 27       	eor	r26, r26
     f5a:	bb 27       	eor	r27, r27
     f5c:	89 2b       	or	r24, r25
     f5e:	8a 2b       	or	r24, r26
     f60:	8b 2b       	or	r24, r27
     f62:	09 f0       	breq	.+2      	; 0xf66 <dir_next+0x7c>
     f64:	96 c0       	rjmp	.+300    	; 0x1092 <dir_next+0x1a8>
     f66:	4f 5f       	subi	r20, 0xFF	; 255
     f68:	5f 4f       	sbci	r21, 0xFF	; 255
     f6a:	6f 4f       	sbci	r22, 0xFF	; 255
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	46 8b       	std	Z+22, r20	; 0x16
     f70:	57 8b       	std	Z+23, r21	; 0x17
     f72:	60 8f       	std	Z+24, r22	; 0x18
     f74:	71 8f       	std	Z+25, r23	; 0x19
     f76:	42 89       	ldd	r20, Z+18	; 0x12
     f78:	53 89       	ldd	r21, Z+19	; 0x13
     f7a:	64 89       	ldd	r22, Z+20	; 0x14
     f7c:	75 89       	ldd	r23, Z+21	; 0x15
     f7e:	41 15       	cp	r20, r1
     f80:	51 05       	cpc	r21, r1
     f82:	61 05       	cpc	r22, r1
     f84:	71 05       	cpc	r23, r1
     f86:	d9 f4       	brne	.+54     	; 0xfbe <dir_next+0xd4>
     f88:	f5 01       	movw	r30, r10
     f8a:	87 81       	ldd	r24, Z+7	; 0x07
     f8c:	90 85       	ldd	r25, Z+8	; 0x08
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	b7 01       	movw	r22, r14
     f94:	a6 01       	movw	r20, r12
     f96:	68 94       	set
     f98:	14 f8       	bld	r1, 4
     f9a:	76 95       	lsr	r23
     f9c:	67 95       	ror	r22
     f9e:	57 95       	ror	r21
     fa0:	47 95       	ror	r20
     fa2:	16 94       	lsr	r1
     fa4:	d1 f7       	brne	.-12     	; 0xf9a <dir_next+0xb0>
     fa6:	48 17       	cp	r20, r24
     fa8:	59 07       	cpc	r21, r25
     faa:	6a 07       	cpc	r22, r26
     fac:	7b 07       	cpc	r23, r27
     fae:	08 f4       	brcc	.+2      	; 0xfb2 <dir_next+0xc8>
     fb0:	70 c0       	rjmp	.+224    	; 0x1092 <dir_next+0x1a8>
     fb2:	1e 8a       	std	Y+22, r1	; 0x16
     fb4:	1f 8a       	std	Y+23, r1	; 0x17
     fb6:	18 8e       	std	Y+24, r1	; 0x18
     fb8:	19 8e       	std	Y+25, r1	; 0x19
     fba:	84 e0       	ldi	r24, 0x04	; 4
     fbc:	86 c0       	rjmp	.+268    	; 0x10ca <dir_next+0x1e0>
     fbe:	f5 01       	movw	r30, r10
     fc0:	81 85       	ldd	r24, Z+9	; 0x09
     fc2:	92 85       	ldd	r25, Z+10	; 0x0a
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	a0 e0       	ldi	r26, 0x00	; 0
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	26 01       	movw	r4, r12
     fcc:	37 01       	movw	r6, r14
     fce:	03 2e       	mov	r0, r19
     fd0:	39 e0       	ldi	r19, 0x09	; 9
     fd2:	76 94       	lsr	r7
     fd4:	67 94       	ror	r6
     fd6:	57 94       	ror	r5
     fd8:	47 94       	ror	r4
     fda:	3a 95       	dec	r19
     fdc:	d1 f7       	brne	.-12     	; 0xfd2 <dir_next+0xe8>
     fde:	30 2d       	mov	r19, r0
     fe0:	84 21       	and	r24, r4
     fe2:	95 21       	and	r25, r5
     fe4:	a6 21       	and	r26, r6
     fe6:	b7 21       	and	r27, r7
     fe8:	89 2b       	or	r24, r25
     fea:	8a 2b       	or	r24, r26
     fec:	8b 2b       	or	r24, r27
     fee:	09 f0       	breq	.+2      	; 0xff2 <dir_next+0x108>
     ff0:	50 c0       	rjmp	.+160    	; 0x1092 <dir_next+0x1a8>
     ff2:	ce 01       	movw	r24, r28
     ff4:	0e 94 b0 03 	call	0x760	; 0x760 <get_fat>
     ff8:	2b 01       	movw	r4, r22
     ffa:	3c 01       	movw	r6, r24
     ffc:	62 30       	cpi	r22, 0x02	; 2
     ffe:	71 05       	cpc	r23, r1
    1000:	81 05       	cpc	r24, r1
    1002:	91 05       	cpc	r25, r1
    1004:	08 f4       	brcc	.+2      	; 0x1008 <dir_next+0x11e>
    1006:	56 c0       	rjmp	.+172    	; 0x10b4 <dir_next+0x1ca>
    1008:	6f 3f       	cpi	r22, 0xFF	; 255
    100a:	7f 4f       	sbci	r23, 0xFF	; 255
    100c:	8f 4f       	sbci	r24, 0xFF	; 255
    100e:	9f 4f       	sbci	r25, 0xFF	; 255
    1010:	09 f4       	brne	.+2      	; 0x1014 <dir_next+0x12a>
    1012:	52 c0       	rjmp	.+164    	; 0x10b8 <dir_next+0x1ce>
    1014:	f5 01       	movw	r30, r10
    1016:	83 89       	ldd	r24, Z+19	; 0x13
    1018:	94 89       	ldd	r25, Z+20	; 0x14
    101a:	a5 89       	ldd	r26, Z+21	; 0x15
    101c:	b6 89       	ldd	r27, Z+22	; 0x16
    101e:	48 16       	cp	r4, r24
    1020:	59 06       	cpc	r5, r25
    1022:	6a 06       	cpc	r6, r26
    1024:	7b 06       	cpc	r7, r27
    1026:	40 f1       	brcs	.+80     	; 0x1078 <dir_next+0x18e>
    1028:	01 2b       	or	r16, r17
    102a:	31 f4       	brne	.+12     	; 0x1038 <dir_next+0x14e>
    102c:	1e 8a       	std	Y+22, r1	; 0x16
    102e:	1f 8a       	std	Y+23, r1	; 0x17
    1030:	18 8e       	std	Y+24, r1	; 0x18
    1032:	19 8e       	std	Y+25, r1	; 0x19
    1034:	84 e0       	ldi	r24, 0x04	; 4
    1036:	49 c0       	rjmp	.+146    	; 0x10ca <dir_next+0x1e0>
    1038:	4a 89       	ldd	r20, Y+18	; 0x12
    103a:	5b 89       	ldd	r21, Y+19	; 0x13
    103c:	6c 89       	ldd	r22, Y+20	; 0x14
    103e:	7d 89       	ldd	r23, Y+21	; 0x15
    1040:	ce 01       	movw	r24, r28
    1042:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <create_chain>
    1046:	2b 01       	movw	r4, r22
    1048:	3c 01       	movw	r6, r24
    104a:	61 15       	cp	r22, r1
    104c:	71 05       	cpc	r23, r1
    104e:	81 05       	cpc	r24, r1
    1050:	91 05       	cpc	r25, r1
    1052:	a1 f1       	breq	.+104    	; 0x10bc <dir_next+0x1d2>
    1054:	61 30       	cpi	r22, 0x01	; 1
    1056:	71 05       	cpc	r23, r1
    1058:	81 05       	cpc	r24, r1
    105a:	91 05       	cpc	r25, r1
    105c:	89 f1       	breq	.+98     	; 0x10c0 <dir_next+0x1d6>
    105e:	6f 3f       	cpi	r22, 0xFF	; 255
    1060:	2f ef       	ldi	r18, 0xFF	; 255
    1062:	72 07       	cpc	r23, r18
    1064:	82 07       	cpc	r24, r18
    1066:	92 07       	cpc	r25, r18
    1068:	69 f1       	breq	.+90     	; 0x10c4 <dir_next+0x1da>
    106a:	ab 01       	movw	r20, r22
    106c:	bc 01       	movw	r22, r24
    106e:	c5 01       	movw	r24, r10
    1070:	0e 94 ad 01 	call	0x35a	; 0x35a <dir_clear>
    1074:	81 11       	cpse	r24, r1
    1076:	28 c0       	rjmp	.+80     	; 0x10c8 <dir_next+0x1de>
    1078:	4a 8a       	std	Y+18, r4	; 0x12
    107a:	5b 8a       	std	Y+19, r5	; 0x13
    107c:	6c 8a       	std	Y+20, r6	; 0x14
    107e:	7d 8a       	std	Y+21, r7	; 0x15
    1080:	b3 01       	movw	r22, r6
    1082:	a2 01       	movw	r20, r4
    1084:	c5 01       	movw	r24, r10
    1086:	0e 94 8a 00 	call	0x114	; 0x114 <clst2sect>
    108a:	6e 8b       	std	Y+22, r22	; 0x16
    108c:	7f 8b       	std	Y+23, r23	; 0x17
    108e:	88 8f       	std	Y+24, r24	; 0x18
    1090:	99 8f       	std	Y+25, r25	; 0x19
    1092:	ce 86       	std	Y+14, r12	; 0x0e
    1094:	df 86       	std	Y+15, r13	; 0x0f
    1096:	e8 8a       	std	Y+16, r14	; 0x10
    1098:	f9 8a       	std	Y+17, r15	; 0x11
    109a:	8f e2       	ldi	r24, 0x2F	; 47
    109c:	a8 0e       	add	r10, r24
    109e:	b1 1c       	adc	r11, r1
    10a0:	e1 e0       	ldi	r30, 0x01	; 1
    10a2:	de 22       	and	r13, r30
    10a4:	ca 0c       	add	r12, r10
    10a6:	db 1c       	adc	r13, r11
    10a8:	db 8e       	std	Y+27, r13	; 0x1b
    10aa:	ca 8e       	std	Y+26, r12	; 0x1a
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	0d c0       	rjmp	.+26     	; 0x10ca <dir_next+0x1e0>
    10b0:	84 e0       	ldi	r24, 0x04	; 4
    10b2:	0b c0       	rjmp	.+22     	; 0x10ca <dir_next+0x1e0>
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	09 c0       	rjmp	.+18     	; 0x10ca <dir_next+0x1e0>
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	07 c0       	rjmp	.+14     	; 0x10ca <dir_next+0x1e0>
    10bc:	87 e0       	ldi	r24, 0x07	; 7
    10be:	05 c0       	rjmp	.+10     	; 0x10ca <dir_next+0x1e0>
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	03 c0       	rjmp	.+6      	; 0x10ca <dir_next+0x1e0>
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <dir_next+0x1e0>
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	df 90       	pop	r13
    10d8:	cf 90       	pop	r12
    10da:	bf 90       	pop	r11
    10dc:	af 90       	pop	r10
    10de:	7f 90       	pop	r7
    10e0:	6f 90       	pop	r6
    10e2:	5f 90       	pop	r5
    10e4:	4f 90       	pop	r4
    10e6:	08 95       	ret

000010e8 <dir_register>:
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	8c 01       	movw	r16, r24
    10f4:	dc 01       	movw	r26, r24
    10f6:	ed 90       	ld	r14, X+
    10f8:	fc 90       	ld	r15, X
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	ba 01       	movw	r22, r20
    1100:	0e 94 8f 04 	call	0x91e	; 0x91e <dir_sdi>
    1104:	c8 2f       	mov	r28, r24
    1106:	81 11       	cpse	r24, r1
    1108:	1d c0       	rjmp	.+58     	; 0x1144 <dir_register+0x5c>
    110a:	f8 01       	movw	r30, r16
    110c:	46 89       	ldd	r20, Z+22	; 0x16
    110e:	57 89       	ldd	r21, Z+23	; 0x17
    1110:	60 8d       	ldd	r22, Z+24	; 0x18
    1112:	71 8d       	ldd	r23, Z+25	; 0x19
    1114:	c7 01       	movw	r24, r14
    1116:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
    111a:	c8 2f       	mov	r28, r24
    111c:	81 11       	cpse	r24, r1
    111e:	12 c0       	rjmp	.+36     	; 0x1144 <dir_register+0x5c>
    1120:	d8 01       	movw	r26, r16
    1122:	5a 96       	adiw	r26, 0x1a	; 26
    1124:	ed 91       	ld	r30, X+
    1126:	fc 91       	ld	r31, X
    1128:	5b 97       	sbiw	r26, 0x1b	; 27
    112a:	80 81       	ld	r24, Z
    112c:	85 3e       	cpi	r24, 0xE5	; 229
    112e:	71 f0       	breq	.+28     	; 0x114c <dir_register+0x64>
    1130:	88 23       	and	r24, r24
    1132:	61 f0       	breq	.+24     	; 0x114c <dir_register+0x64>
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	c8 01       	movw	r24, r16
    113a:	0e 94 75 07 	call	0xeea	; 0xeea <dir_next>
    113e:	c8 2f       	mov	r28, r24
    1140:	88 23       	and	r24, r24
    1142:	19 f3       	breq	.-58     	; 0x110a <dir_register+0x22>
    1144:	c4 30       	cpi	r28, 0x04	; 4
    1146:	39 f1       	breq	.+78     	; 0x1196 <dir_register+0xae>
    1148:	c1 11       	cpse	r28, r1
    114a:	26 c0       	rjmp	.+76     	; 0x1198 <dir_register+0xb0>
    114c:	f8 01       	movw	r30, r16
    114e:	46 89       	ldd	r20, Z+22	; 0x16
    1150:	57 89       	ldd	r21, Z+23	; 0x17
    1152:	60 8d       	ldd	r22, Z+24	; 0x18
    1154:	71 8d       	ldd	r23, Z+25	; 0x19
    1156:	c7 01       	movw	r24, r14
    1158:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
    115c:	c8 2f       	mov	r28, r24
    115e:	81 11       	cpse	r24, r1
    1160:	1b c0       	rjmp	.+54     	; 0x1198 <dir_register+0xb0>
    1162:	d8 01       	movw	r26, r16
    1164:	5a 96       	adiw	r26, 0x1a	; 26
    1166:	ed 91       	ld	r30, X+
    1168:	fc 91       	ld	r31, X
    116a:	5b 97       	sbiw	r26, 0x1b	; 27
    116c:	cf 01       	movw	r24, r30
    116e:	80 96       	adiw	r24, 0x20	; 32
    1170:	11 92       	st	Z+, r1
    1172:	e8 17       	cp	r30, r24
    1174:	f9 07       	cpc	r31, r25
    1176:	e1 f7       	brne	.-8      	; 0x1170 <dir_register+0x88>
    1178:	b8 01       	movw	r22, r16
    117a:	64 5e       	subi	r22, 0xE4	; 228
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	4b e0       	ldi	r20, 0x0B	; 11
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	f8 01       	movw	r30, r16
    1184:	82 8d       	ldd	r24, Z+26	; 0x1a
    1186:	93 8d       	ldd	r25, Z+27	; 0x1b
    1188:	0e 94 6e 00 	call	0xdc	; 0xdc <mem_cpy>
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	d7 01       	movw	r26, r14
    1190:	13 96       	adiw	r26, 0x03	; 3
    1192:	8c 93       	st	X, r24
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <dir_register+0xb0>
    1196:	c7 e0       	ldi	r28, 0x07	; 7
    1198:	8c 2f       	mov	r24, r28
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	ff 90       	pop	r15
    11a2:	ef 90       	pop	r14
    11a4:	08 95       	ret

000011a6 <check_fs>:
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	ec 01       	movw	r28, r24
    11ac:	1b 82       	std	Y+3, r1	; 0x03
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	9f ef       	ldi	r25, 0xFF	; 255
    11b2:	dc 01       	movw	r26, r24
    11b4:	8b a7       	std	Y+43, r24	; 0x2b
    11b6:	9c a7       	std	Y+44, r25	; 0x2c
    11b8:	ad a7       	std	Y+45, r26	; 0x2d
    11ba:	be a7       	std	Y+46, r27	; 0x2e
    11bc:	ce 01       	movw	r24, r28
    11be:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
    11c2:	81 11       	cpse	r24, r1
    11c4:	2c c0       	rjmp	.+88     	; 0x121e <check_fs+0x78>
    11c6:	fe 01       	movw	r30, r28
    11c8:	e2 5d       	subi	r30, 0xD2	; 210
    11ca:	fd 4f       	sbci	r31, 0xFD	; 253
    11cc:	80 81       	ld	r24, Z
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	98 2f       	mov	r25, r24
    11d2:	88 27       	eor	r24, r24
    11d4:	31 97       	sbiw	r30, 0x01	; 1
    11d6:	20 81       	ld	r18, Z
    11d8:	82 2b       	or	r24, r18
    11da:	85 35       	cpi	r24, 0x55	; 85
    11dc:	9a 4a       	sbci	r25, 0xAA	; 170
    11de:	11 f5       	brne	.+68     	; 0x1224 <check_fs+0x7e>
    11e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    11e2:	8b 3e       	cpi	r24, 0xEB	; 235
    11e4:	19 f0       	breq	.+6      	; 0x11ec <check_fs+0x46>
    11e6:	88 5e       	subi	r24, 0xE8	; 232
    11e8:	82 30       	cpi	r24, 0x02	; 2
    11ea:	f8 f4       	brcc	.+62     	; 0x122a <check_fs+0x84>
    11ec:	43 e0       	ldi	r20, 0x03	; 3
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	61 e0       	ldi	r22, 0x01	; 1
    11f2:	71 e0       	ldi	r23, 0x01	; 1
    11f4:	ce 01       	movw	r24, r28
    11f6:	8b 59       	subi	r24, 0x9B	; 155
    11f8:	9f 4f       	sbci	r25, 0xFF	; 255
    11fa:	0e 94 7c 00 	call	0xf8	; 0xf8 <mem_cmp>
    11fe:	89 2b       	or	r24, r25
    1200:	b9 f0       	breq	.+46     	; 0x1230 <check_fs+0x8a>
    1202:	45 e0       	ldi	r20, 0x05	; 5
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	65 e0       	ldi	r22, 0x05	; 5
    1208:	71 e0       	ldi	r23, 0x01	; 1
    120a:	ce 01       	movw	r24, r28
    120c:	8f 57       	subi	r24, 0x7F	; 127
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	0e 94 7c 00 	call	0xf8	; 0xf8 <mem_cmp>
    1214:	89 2b       	or	r24, r25
    1216:	79 f0       	breq	.+30     	; 0x1236 <check_fs+0x90>
    1218:	82 e0       	ldi	r24, 0x02	; 2
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e c0       	rjmp	.+28     	; 0x123a <check_fs+0x94>
    121e:	84 e0       	ldi	r24, 0x04	; 4
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0b c0       	rjmp	.+22     	; 0x123a <check_fs+0x94>
    1224:	83 e0       	ldi	r24, 0x03	; 3
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	08 c0       	rjmp	.+16     	; 0x123a <check_fs+0x94>
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	05 c0       	rjmp	.+10     	; 0x123a <check_fs+0x94>
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 c0       	rjmp	.+4      	; 0x123a <check_fs+0x94>
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <mount_volume>:
    1240:	2f 92       	push	r2
    1242:	3f 92       	push	r3
    1244:	4f 92       	push	r4
    1246:	5f 92       	push	r5
    1248:	6f 92       	push	r6
    124a:	7f 92       	push	r7
    124c:	8f 92       	push	r8
    124e:	9f 92       	push	r9
    1250:	af 92       	push	r10
    1252:	bf 92       	push	r11
    1254:	cf 92       	push	r12
    1256:	df 92       	push	r13
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	6e 97       	sbiw	r28, 0x1e	; 30
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	6b 01       	movw	r12, r22
    1276:	b4 2e       	mov	r11, r20
    1278:	db 01       	movw	r26, r22
    127a:	1d 92       	st	X+, r1
    127c:	1c 92       	st	X, r1
    127e:	0e 94 b2 00 	call	0x164	; 0x164 <get_ldnumber>
    1282:	7c 01       	movw	r14, r24
    1284:	99 23       	and	r25, r25
    1286:	0c f4       	brge	.+2      	; 0x128a <mount_volume+0x4a>
    1288:	6a c2       	rjmp	.+1236   	; 0x175e <mount_volume+0x51e>
    128a:	fc 01       	movw	r30, r24
    128c:	ee 0f       	add	r30, r30
    128e:	ff 1f       	adc	r31, r31
    1290:	e2 57       	subi	r30, 0x72	; 114
    1292:	fd 4f       	sbci	r31, 0xFD	; 253
    1294:	00 81       	ld	r16, Z
    1296:	11 81       	ldd	r17, Z+1	; 0x01
    1298:	01 15       	cp	r16, r1
    129a:	11 05       	cpc	r17, r1
    129c:	09 f4       	brne	.+2      	; 0x12a0 <mount_volume+0x60>
    129e:	61 c2       	rjmp	.+1218   	; 0x1762 <mount_volume+0x522>
    12a0:	f6 01       	movw	r30, r12
    12a2:	11 83       	std	Z+1, r17	; 0x01
    12a4:	00 83       	st	Z, r16
    12a6:	fb 2d       	mov	r31, r11
    12a8:	fe 7f       	andi	r31, 0xFE	; 254
    12aa:	bf 2e       	mov	r11, r31
    12ac:	d8 01       	movw	r26, r16
    12ae:	8c 91       	ld	r24, X
    12b0:	88 23       	and	r24, r24
    12b2:	69 f0       	breq	.+26     	; 0x12ce <mount_volume+0x8e>
    12b4:	11 96       	adiw	r26, 0x01	; 1
    12b6:	8c 91       	ld	r24, X
    12b8:	0e 94 56 19 	call	0x32ac	; 0x32ac <disk_status>
    12bc:	80 fd       	sbrc	r24, 0
    12be:	07 c0       	rjmp	.+14     	; 0x12ce <mount_volume+0x8e>
    12c0:	bb 20       	and	r11, r11
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <mount_volume+0x86>
    12c4:	50 c2       	rjmp	.+1184   	; 0x1766 <mount_volume+0x526>
    12c6:	82 ff       	sbrs	r24, 2
    12c8:	50 c2       	rjmp	.+1184   	; 0x176a <mount_volume+0x52a>
    12ca:	8a e0       	ldi	r24, 0x0A	; 10
    12cc:	f5 c2       	rjmp	.+1514   	; 0x18b8 <mount_volume+0x678>
    12ce:	f8 01       	movw	r30, r16
    12d0:	10 82       	st	Z, r1
    12d2:	e1 82       	std	Z+1, r14	; 0x01
    12d4:	8e 2d       	mov	r24, r14
    12d6:	0e 94 5d 19 	call	0x32ba	; 0x32ba <disk_initialize>
    12da:	80 fd       	sbrc	r24, 0
    12dc:	48 c2       	rjmp	.+1168   	; 0x176e <mount_volume+0x52e>
    12de:	bb 20       	and	r11, r11
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <mount_volume+0xa4>
    12e2:	6b c2       	rjmp	.+1238   	; 0x17ba <mount_volume+0x57a>
    12e4:	82 fd       	sbrc	r24, 2
    12e6:	45 c2       	rjmp	.+1162   	; 0x1772 <mount_volume+0x532>
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	ba 01       	movw	r22, r20
    12ee:	c8 01       	movw	r24, r16
    12f0:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <check_fs>
    12f4:	82 30       	cpi	r24, 0x02	; 2
    12f6:	91 05       	cpc	r25, r1
    12f8:	c9 f5       	brne	.+114    	; 0x136c <mount_volume+0x12c>
    12fa:	48 01       	movw	r8, r16
    12fc:	fb e0       	ldi	r31, 0x0B	; 11
    12fe:	8f 1a       	sub	r8, r31
    1300:	fe ef       	ldi	r31, 0xFE	; 254
    1302:	9f 0a       	sbc	r9, r31
    1304:	9e 01       	movw	r18, r28
    1306:	2f 5f       	subi	r18, 0xFF	; 255
    1308:	3f 4f       	sbci	r19, 0xFF	; 255
    130a:	79 01       	movw	r14, r18
    130c:	6e 01       	movw	r12, r28
    130e:	31 e1       	ldi	r19, 0x11	; 17
    1310:	c3 0e       	add	r12, r19
    1312:	d1 1c       	adc	r13, r1
    1314:	57 01       	movw	r10, r14
    1316:	c4 01       	movw	r24, r8
    1318:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    131c:	d5 01       	movw	r26, r10
    131e:	6d 93       	st	X+, r22
    1320:	7d 93       	st	X+, r23
    1322:	8d 93       	st	X+, r24
    1324:	9d 93       	st	X+, r25
    1326:	5d 01       	movw	r10, r26
    1328:	b0 e1       	ldi	r27, 0x10	; 16
    132a:	8b 0e       	add	r8, r27
    132c:	91 1c       	adc	r9, r1
    132e:	ac 14       	cp	r10, r12
    1330:	bd 04       	cpc	r11, r13
    1332:	89 f7       	brne	.-30     	; 0x1316 <mount_volume+0xd6>
    1334:	0f 2e       	mov	r0, r31
    1336:	f3 e0       	ldi	r31, 0x03	; 3
    1338:	af 2e       	mov	r10, r31
    133a:	f0 2d       	mov	r31, r0
    133c:	b1 2c       	mov	r11, r1
    133e:	f7 01       	movw	r30, r14
    1340:	41 91       	ld	r20, Z+
    1342:	51 91       	ld	r21, Z+
    1344:	61 91       	ld	r22, Z+
    1346:	71 91       	ld	r23, Z+
    1348:	7f 01       	movw	r14, r30
    134a:	41 15       	cp	r20, r1
    134c:	51 05       	cpc	r21, r1
    134e:	61 05       	cpc	r22, r1
    1350:	71 05       	cpc	r23, r1
    1352:	39 f0       	breq	.+14     	; 0x1362 <mount_volume+0x122>
    1354:	c8 01       	movw	r24, r16
    1356:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <check_fs>
    135a:	82 30       	cpi	r24, 0x02	; 2
    135c:	91 05       	cpc	r25, r1
    135e:	18 f4       	brcc	.+6      	; 0x1366 <mount_volume+0x126>
    1360:	37 c2       	rjmp	.+1134   	; 0x17d0 <mount_volume+0x590>
    1362:	8a 2d       	mov	r24, r10
    1364:	9b 2d       	mov	r25, r11
    1366:	ce 14       	cp	r12, r14
    1368:	df 04       	cpc	r13, r15
    136a:	49 f7       	brne	.-46     	; 0x133e <mount_volume+0xfe>
    136c:	84 30       	cpi	r24, 0x04	; 4
    136e:	91 05       	cpc	r25, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <mount_volume+0x134>
    1372:	01 c2       	rjmp	.+1026   	; 0x1776 <mount_volume+0x536>
    1374:	02 97       	sbiw	r24, 0x02	; 2
    1376:	08 f0       	brcs	.+2      	; 0x137a <mount_volume+0x13a>
    1378:	00 c2       	rjmp	.+1024   	; 0x177a <mount_volume+0x53a>
    137a:	d8 01       	movw	r26, r16
    137c:	db 96       	adiw	r26, 0x3b	; 59
    137e:	8c 91       	ld	r24, X
    1380:	db 97       	sbiw	r26, 0x3b	; 59
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	98 2f       	mov	r25, r24
    1386:	88 27       	eor	r24, r24
    1388:	da 96       	adiw	r26, 0x3a	; 58
    138a:	2c 91       	ld	r18, X
    138c:	82 2b       	or	r24, r18
    138e:	81 15       	cp	r24, r1
    1390:	92 40       	sbci	r25, 0x02	; 2
    1392:	09 f0       	breq	.+2      	; 0x1396 <mount_volume+0x156>
    1394:	f4 c1       	rjmp	.+1000   	; 0x177e <mount_volume+0x53e>
    1396:	f8 01       	movw	r30, r16
    1398:	ea 5b       	subi	r30, 0xBA	; 186
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	80 80       	ld	r8, Z
    139e:	91 2c       	mov	r9, r1
    13a0:	98 2c       	mov	r9, r8
    13a2:	88 24       	eor	r8, r8
    13a4:	31 97       	sbiw	r30, 0x01	; 1
    13a6:	80 81       	ld	r24, Z
    13a8:	88 2a       	or	r8, r24
    13aa:	94 01       	movw	r18, r8
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	29 8b       	std	Y+17, r18	; 0x11
    13b2:	3a 8b       	std	Y+18, r19	; 0x12
    13b4:	4b 8b       	std	Y+19, r20	; 0x13
    13b6:	5c 8b       	std	Y+20, r21	; 0x14
    13b8:	23 2b       	or	r18, r19
    13ba:	24 2b       	or	r18, r20
    13bc:	25 2b       	or	r18, r21
    13be:	49 f4       	brne	.+18     	; 0x13d2 <mount_volume+0x192>
    13c0:	c8 01       	movw	r24, r16
    13c2:	8d 5a       	subi	r24, 0xAD	; 173
    13c4:	9f 4f       	sbci	r25, 0xFF	; 255
    13c6:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    13ca:	69 8b       	std	Y+17, r22	; 0x11
    13cc:	7a 8b       	std	Y+18, r23	; 0x12
    13ce:	8b 8b       	std	Y+19, r24	; 0x13
    13d0:	9c 8b       	std	Y+20, r25	; 0x14
    13d2:	d8 01       	movw	r26, r16
    13d4:	9b 96       	adiw	r26, 0x2b	; 43
    13d6:	8d 90       	ld	r8, X+
    13d8:	9d 90       	ld	r9, X+
    13da:	ad 90       	ld	r10, X+
    13dc:	bc 90       	ld	r11, X
    13de:	9e 97       	sbiw	r26, 0x2e	; 46
    13e0:	29 89       	ldd	r18, Y+17	; 0x11
    13e2:	3a 89       	ldd	r19, Y+18	; 0x12
    13e4:	4b 89       	ldd	r20, Y+19	; 0x13
    13e6:	5c 89       	ldd	r21, Y+20	; 0x14
    13e8:	57 96       	adiw	r26, 0x17	; 23
    13ea:	2d 93       	st	X+, r18
    13ec:	3d 93       	st	X+, r19
    13ee:	4d 93       	st	X+, r20
    13f0:	5c 93       	st	X, r21
    13f2:	5a 97       	sbiw	r26, 0x1a	; 26
    13f4:	df 96       	adiw	r26, 0x3f	; 63
    13f6:	7c 90       	ld	r7, X
    13f8:	df 97       	sbiw	r26, 0x3f	; 63
    13fa:	12 96       	adiw	r26, 0x02	; 2
    13fc:	7c 92       	st	X, r7
    13fe:	12 97       	sbiw	r26, 0x02	; 2
    1400:	8f ef       	ldi	r24, 0xFF	; 255
    1402:	87 0d       	add	r24, r7
    1404:	82 30       	cpi	r24, 0x02	; 2
    1406:	08 f0       	brcs	.+2      	; 0x140a <mount_volume+0x1ca>
    1408:	bc c1       	rjmp	.+888    	; 0x1782 <mount_volume+0x542>
    140a:	dc 96       	adiw	r26, 0x3c	; 60
    140c:	3c 90       	ld	r3, X
    140e:	dc 97       	sbiw	r26, 0x3c	; 60
    1410:	83 2d       	mov	r24, r3
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	1a 96       	adiw	r26, 0x0a	; 10
    1416:	9c 93       	st	X, r25
    1418:	8e 93       	st	-X, r24
    141a:	19 97       	sbiw	r26, 0x09	; 9
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	09 f4       	brne	.+2      	; 0x1422 <mount_volume+0x1e2>
    1420:	b2 c1       	rjmp	.+868    	; 0x1786 <mount_volume+0x546>
    1422:	9c 01       	movw	r18, r24
    1424:	21 50       	subi	r18, 0x01	; 1
    1426:	31 09       	sbc	r19, r1
    1428:	82 23       	and	r24, r18
    142a:	93 23       	and	r25, r19
    142c:	89 2b       	or	r24, r25
    142e:	09 f0       	breq	.+2      	; 0x1432 <mount_volume+0x1f2>
    1430:	ac c1       	rjmp	.+856    	; 0x178a <mount_volume+0x54a>
    1432:	f8 01       	movw	r30, r16
    1434:	ef 5b       	subi	r30, 0xBF	; 191
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	80 81       	ld	r24, Z
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	98 2f       	mov	r25, r24
    143e:	88 27       	eor	r24, r24
    1440:	31 97       	sbiw	r30, 0x01	; 1
    1442:	20 81       	ld	r18, Z
    1444:	fc 01       	movw	r30, r24
    1446:	e2 2b       	or	r30, r18
    1448:	fe 8b       	std	Y+22, r31	; 0x16
    144a:	ed 8b       	std	Y+21, r30	; 0x15
    144c:	18 96       	adiw	r26, 0x08	; 8
    144e:	fc 93       	st	X, r31
    1450:	ee 93       	st	-X, r30
    1452:	17 97       	sbiw	r26, 0x07	; 7
    1454:	cf 01       	movw	r24, r30
    1456:	8f 70       	andi	r24, 0x0F	; 15
    1458:	99 27       	eor	r25, r25
    145a:	89 2b       	or	r24, r25
    145c:	09 f0       	breq	.+2      	; 0x1460 <mount_volume+0x220>
    145e:	97 c1       	rjmp	.+814    	; 0x178e <mount_volume+0x54e>
    1460:	f8 01       	movw	r30, r16
    1462:	ed 5b       	subi	r30, 0xBD	; 189
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	c0 80       	ld	r12, Z
    1468:	d1 2c       	mov	r13, r1
    146a:	dc 2c       	mov	r13, r12
    146c:	cc 24       	eor	r12, r12
    146e:	31 97       	sbiw	r30, 0x01	; 1
    1470:	80 81       	ld	r24, Z
    1472:	c8 2a       	or	r12, r24
    1474:	e1 2c       	mov	r14, r1
    1476:	f1 2c       	mov	r15, r1
    1478:	c1 14       	cp	r12, r1
    147a:	d1 04       	cpc	r13, r1
    147c:	e1 04       	cpc	r14, r1
    147e:	f1 04       	cpc	r15, r1
    1480:	39 f4       	brne	.+14     	; 0x1490 <mount_volume+0x250>
    1482:	c8 01       	movw	r24, r16
    1484:	81 5b       	subi	r24, 0xB1	; 177
    1486:	9f 4f       	sbci	r25, 0xFF	; 255
    1488:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    148c:	6b 01       	movw	r12, r22
    148e:	7c 01       	movw	r14, r24
    1490:	d8 01       	movw	r26, r16
    1492:	de 96       	adiw	r26, 0x3e	; 62
    1494:	ec 91       	ld	r30, X
    1496:	de 97       	sbiw	r26, 0x3e	; 62
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	fe 2f       	mov	r31, r30
    149c:	ee 27       	eor	r30, r30
    149e:	dd 96       	adiw	r26, 0x3d	; 61
    14a0:	8c 91       	ld	r24, X
    14a2:	e8 2b       	or	r30, r24
    14a4:	30 97       	sbiw	r30, 0x00	; 0
    14a6:	09 f4       	brne	.+2      	; 0x14aa <mount_volume+0x26a>
    14a8:	74 c1       	rjmp	.+744    	; 0x1792 <mount_volume+0x552>
    14aa:	a7 2d       	mov	r26, r7
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	29 89       	ldd	r18, Y+17	; 0x11
    14b0:	3a 89       	ldd	r19, Y+18	; 0x12
    14b2:	4b 89       	ldd	r20, Y+19	; 0x13
    14b4:	5c 89       	ldd	r21, Y+20	; 0x14
    14b6:	0e 94 b4 1b 	call	0x3768	; 0x3768 <__muluhisi3>
    14ba:	6b 8f       	std	Y+27, r22	; 0x1b
    14bc:	7c 8f       	std	Y+28, r23	; 0x1c
    14be:	8d 8f       	std	Y+29, r24	; 0x1d
    14c0:	9e 8f       	std	Y+30, r25	; 0x1e
    14c2:	9f 01       	movw	r18, r30
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	2f 8b       	std	Y+23, r18	; 0x17
    14ca:	38 8f       	std	Y+24, r19	; 0x18
    14cc:	49 8f       	std	Y+25, r20	; 0x19
    14ce:	5a 8f       	std	Y+26, r21	; 0x1a
    14d0:	8d 89       	ldd	r24, Y+21	; 0x15
    14d2:	9e 89       	ldd	r25, Y+22	; 0x16
    14d4:	92 95       	swap	r25
    14d6:	82 95       	swap	r24
    14d8:	8f 70       	andi	r24, 0x0F	; 15
    14da:	89 27       	eor	r24, r25
    14dc:	9f 70       	andi	r25, 0x0F	; 15
    14de:	89 27       	eor	r24, r25
    14e0:	28 0f       	add	r18, r24
    14e2:	39 1f       	adc	r19, r25
    14e4:	41 1d       	adc	r20, r1
    14e6:	51 1d       	adc	r21, r1
    14e8:	4b 8c       	ldd	r4, Y+27	; 0x1b
    14ea:	5c 8c       	ldd	r5, Y+28	; 0x1c
    14ec:	6d 8c       	ldd	r6, Y+29	; 0x1d
    14ee:	7e 8c       	ldd	r7, Y+30	; 0x1e
    14f0:	42 0e       	add	r4, r18
    14f2:	53 1e       	adc	r5, r19
    14f4:	64 1e       	adc	r6, r20
    14f6:	75 1e       	adc	r7, r21
    14f8:	c4 14       	cp	r12, r4
    14fa:	d5 04       	cpc	r13, r5
    14fc:	e6 04       	cpc	r14, r6
    14fe:	f7 04       	cpc	r15, r7
    1500:	08 f4       	brcc	.+2      	; 0x1504 <mount_volume+0x2c4>
    1502:	49 c1       	rjmp	.+658    	; 0x1796 <mount_volume+0x556>
    1504:	c7 01       	movw	r24, r14
    1506:	b6 01       	movw	r22, r12
    1508:	64 19       	sub	r22, r4
    150a:	75 09       	sbc	r23, r5
    150c:	86 09       	sbc	r24, r6
    150e:	97 09       	sbc	r25, r7
    1510:	23 2d       	mov	r18, r3
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e0       	ldi	r20, 0x00	; 0
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	0e 94 92 1b 	call	0x3724	; 0x3724 <__udivmodsi4>
    151c:	da 01       	movw	r26, r20
    151e:	c9 01       	movw	r24, r18
    1520:	21 15       	cp	r18, r1
    1522:	31 05       	cpc	r19, r1
    1524:	41 05       	cpc	r20, r1
    1526:	51 05       	cpc	r21, r1
    1528:	09 f4       	brne	.+2      	; 0x152c <mount_volume+0x2ec>
    152a:	37 c1       	rjmp	.+622    	; 0x179a <mount_volume+0x55a>
    152c:	26 3f       	cpi	r18, 0xF6	; 246
    152e:	6f ef       	ldi	r22, 0xFF	; 255
    1530:	36 07       	cpc	r19, r22
    1532:	46 07       	cpc	r20, r22
    1534:	6f e0       	ldi	r22, 0x0F	; 15
    1536:	56 07       	cpc	r21, r22
    1538:	30 f4       	brcc	.+12     	; 0x1546 <mount_volume+0x306>
    153a:	0f 2e       	mov	r0, r31
    153c:	f3 e0       	ldi	r31, 0x03	; 3
    153e:	2f 2e       	mov	r2, r31
    1540:	31 2c       	mov	r3, r1
    1542:	f0 2d       	mov	r31, r0
    1544:	02 c0       	rjmp	.+4      	; 0x154a <mount_volume+0x30a>
    1546:	21 2c       	mov	r2, r1
    1548:	31 2c       	mov	r3, r1
    154a:	86 3f       	cpi	r24, 0xF6	; 246
    154c:	ef ef       	ldi	r30, 0xFF	; 255
    154e:	9e 07       	cpc	r25, r30
    1550:	a1 05       	cpc	r26, r1
    1552:	b1 05       	cpc	r27, r1
    1554:	20 f4       	brcc	.+8      	; 0x155e <mount_volume+0x31e>
    1556:	68 94       	set
    1558:	22 24       	eor	r2, r2
    155a:	21 f8       	bld	r2, 1
    155c:	31 2c       	mov	r3, r1
    155e:	86 3f       	cpi	r24, 0xF6	; 246
    1560:	9f 40       	sbci	r25, 0x0F	; 15
    1562:	a1 05       	cpc	r26, r1
    1564:	b1 05       	cpc	r27, r1
    1566:	08 f4       	brcc	.+2      	; 0x156a <mount_volume+0x32a>
    1568:	7a c1       	rjmp	.+756    	; 0x185e <mount_volume+0x61e>
    156a:	21 14       	cp	r2, r1
    156c:	31 04       	cpc	r3, r1
    156e:	09 f4       	brne	.+2      	; 0x1572 <mount_volume+0x332>
    1570:	16 c1       	rjmp	.+556    	; 0x179e <mount_volume+0x55e>
    1572:	69 01       	movw	r12, r18
    1574:	7a 01       	movw	r14, r20
    1576:	62 e0       	ldi	r22, 0x02	; 2
    1578:	c6 0e       	add	r12, r22
    157a:	d1 1c       	adc	r13, r1
    157c:	e1 1c       	adc	r14, r1
    157e:	f1 1c       	adc	r15, r1
    1580:	d8 01       	movw	r26, r16
    1582:	53 96       	adiw	r26, 0x13	; 19
    1584:	cd 92       	st	X+, r12
    1586:	dd 92       	st	X+, r13
    1588:	ed 92       	st	X+, r14
    158a:	fc 92       	st	X, r15
    158c:	56 97       	sbiw	r26, 0x16	; 22
    158e:	f8 01       	movw	r30, r16
    1590:	83 8e       	std	Z+27, r8	; 0x1b
    1592:	94 8e       	std	Z+28, r9	; 0x1c
    1594:	a5 8e       	std	Z+29, r10	; 0x1d
    1596:	b6 8e       	std	Z+30, r11	; 0x1e
    1598:	8f 89       	ldd	r24, Y+23	; 0x17
    159a:	98 8d       	ldd	r25, Y+24	; 0x18
    159c:	a9 8d       	ldd	r26, Y+25	; 0x19
    159e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    15a0:	88 0d       	add	r24, r8
    15a2:	99 1d       	adc	r25, r9
    15a4:	aa 1d       	adc	r26, r10
    15a6:	bb 1d       	adc	r27, r11
    15a8:	87 8f       	std	Z+31, r24	; 0x1f
    15aa:	90 a3       	std	Z+32, r25	; 0x20
    15ac:	a1 a3       	std	Z+33, r26	; 0x21
    15ae:	b2 a3       	std	Z+34, r27	; 0x22
    15b0:	b5 01       	movw	r22, r10
    15b2:	a4 01       	movw	r20, r8
    15b4:	44 0d       	add	r20, r4
    15b6:	55 1d       	adc	r21, r5
    15b8:	66 1d       	adc	r22, r6
    15ba:	77 1d       	adc	r23, r7
    15bc:	47 a3       	std	Z+39, r20	; 0x27
    15be:	50 a7       	std	Z+40, r21	; 0x28
    15c0:	61 a7       	std	Z+41, r22	; 0x29
    15c2:	72 a7       	std	Z+42, r23	; 0x2a
    15c4:	f3 e0       	ldi	r31, 0x03	; 3
    15c6:	2f 16       	cp	r2, r31
    15c8:	31 04       	cpc	r3, r1
    15ca:	09 f0       	breq	.+2      	; 0x15ce <mount_volume+0x38e>
    15cc:	40 c0       	rjmp	.+128    	; 0x164e <mount_volume+0x40e>
    15ce:	f8 01       	movw	r30, r16
    15d0:	e6 5a       	subi	r30, 0xA6	; 166
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 81       	ld	r24, Z
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	98 2f       	mov	r25, r24
    15da:	88 27       	eor	r24, r24
    15dc:	31 97       	sbiw	r30, 0x01	; 1
    15de:	20 81       	ld	r18, Z
    15e0:	82 2b       	or	r24, r18
    15e2:	89 2b       	or	r24, r25
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <mount_volume+0x3a8>
    15e6:	dd c0       	rjmp	.+442    	; 0x17a2 <mount_volume+0x562>
    15e8:	2d 89       	ldd	r18, Y+21	; 0x15
    15ea:	3e 89       	ldd	r19, Y+22	; 0x16
    15ec:	23 2b       	or	r18, r19
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <mount_volume+0x3b2>
    15f0:	da c0       	rjmp	.+436    	; 0x17a6 <mount_volume+0x566>
    15f2:	c8 01       	movw	r24, r16
    15f4:	85 5a       	subi	r24, 0xA5	; 165
    15f6:	9f 4f       	sbci	r25, 0xFF	; 255
    15f8:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    15fc:	d8 01       	movw	r26, r16
    15fe:	93 96       	adiw	r26, 0x23	; 35
    1600:	6d 93       	st	X+, r22
    1602:	7d 93       	st	X+, r23
    1604:	8d 93       	st	X+, r24
    1606:	9c 93       	st	X, r25
    1608:	96 97       	sbiw	r26, 0x26	; 38
    160a:	cc 0c       	add	r12, r12
    160c:	dd 1c       	adc	r13, r13
    160e:	ee 1c       	adc	r14, r14
    1610:	ff 1c       	adc	r15, r15
    1612:	cc 0c       	add	r12, r12
    1614:	dd 1c       	adc	r13, r13
    1616:	ee 1c       	adc	r14, r14
    1618:	ff 1c       	adc	r15, r15
    161a:	bf ef       	ldi	r27, 0xFF	; 255
    161c:	cb 0e       	add	r12, r27
    161e:	b1 e0       	ldi	r27, 0x01	; 1
    1620:	db 1e       	adc	r13, r27
    1622:	e1 1c       	adc	r14, r1
    1624:	f1 1c       	adc	r15, r1
    1626:	0b 2e       	mov	r0, r27
    1628:	b9 e0       	ldi	r27, 0x09	; 9
    162a:	f6 94       	lsr	r15
    162c:	e7 94       	ror	r14
    162e:	d7 94       	ror	r13
    1630:	c7 94       	ror	r12
    1632:	ba 95       	dec	r27
    1634:	d1 f7       	brne	.-12     	; 0x162a <mount_volume+0x3ea>
    1636:	b0 2d       	mov	r27, r0
    1638:	29 89       	ldd	r18, Y+17	; 0x11
    163a:	3a 89       	ldd	r19, Y+18	; 0x12
    163c:	4b 89       	ldd	r20, Y+19	; 0x13
    163e:	5c 89       	ldd	r21, Y+20	; 0x14
    1640:	2c 15       	cp	r18, r12
    1642:	3d 05       	cpc	r19, r13
    1644:	4e 05       	cpc	r20, r14
    1646:	5f 05       	cpc	r21, r15
    1648:	08 f4       	brcc	.+2      	; 0x164c <mount_volume+0x40c>
    164a:	af c0       	rjmp	.+350    	; 0x17aa <mount_volume+0x56a>
    164c:	ed c0       	rjmp	.+474    	; 0x1828 <mount_volume+0x5e8>
    164e:	4d 89       	ldd	r20, Y+21	; 0x15
    1650:	5e 89       	ldd	r21, Y+22	; 0x16
    1652:	45 2b       	or	r20, r21
    1654:	09 f4       	brne	.+2      	; 0x1658 <mount_volume+0x418>
    1656:	ab c0       	rjmp	.+342    	; 0x17ae <mount_volume+0x56e>
    1658:	4b 8c       	ldd	r4, Y+27	; 0x1b
    165a:	5c 8c       	ldd	r5, Y+28	; 0x1c
    165c:	6d 8c       	ldd	r6, Y+29	; 0x1d
    165e:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1660:	48 0e       	add	r4, r24
    1662:	59 1e       	adc	r5, r25
    1664:	6a 1e       	adc	r6, r26
    1666:	7b 1e       	adc	r7, r27
    1668:	d8 01       	movw	r26, r16
    166a:	93 96       	adiw	r26, 0x23	; 35
    166c:	4d 92       	st	X+, r4
    166e:	5d 92       	st	X+, r5
    1670:	6d 92       	st	X+, r6
    1672:	7c 92       	st	X, r7
    1674:	96 97       	sbiw	r26, 0x26	; 38
    1676:	b2 e0       	ldi	r27, 0x02	; 2
    1678:	2b 16       	cp	r2, r27
    167a:	31 04       	cpc	r3, r1
    167c:	29 f4       	brne	.+10     	; 0x1688 <mount_volume+0x448>
    167e:	cc 0c       	add	r12, r12
    1680:	dd 1c       	adc	r13, r13
    1682:	ee 1c       	adc	r14, r14
    1684:	ff 1c       	adc	r15, r15
    1686:	b7 c0       	rjmp	.+366    	; 0x17f6 <mount_volume+0x5b6>
    1688:	a3 e0       	ldi	r26, 0x03	; 3
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	a7 01       	movw	r20, r14
    168e:	96 01       	movw	r18, r12
    1690:	0e 94 b4 1b 	call	0x3768	; 0x3768 <__muluhisi3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	b6 95       	lsr	r27
    169a:	a7 95       	ror	r26
    169c:	97 95       	ror	r25
    169e:	87 95       	ror	r24
    16a0:	e1 e0       	ldi	r30, 0x01	; 1
    16a2:	ce 22       	and	r12, r30
    16a4:	dd 24       	eor	r13, r13
    16a6:	ee 24       	eor	r14, r14
    16a8:	ff 24       	eor	r15, r15
    16aa:	c8 0e       	add	r12, r24
    16ac:	d9 1e       	adc	r13, r25
    16ae:	ea 1e       	adc	r14, r26
    16b0:	fb 1e       	adc	r15, r27
    16b2:	a1 c0       	rjmp	.+322    	; 0x17f6 <mount_volume+0x5b6>
    16b4:	b5 01       	movw	r22, r10
    16b6:	a4 01       	movw	r20, r8
    16b8:	4f 5f       	subi	r20, 0xFF	; 255
    16ba:	5f 4f       	sbci	r21, 0xFF	; 255
    16bc:	6f 4f       	sbci	r22, 0xFF	; 255
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	c8 01       	movw	r24, r16
    16c2:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
    16c6:	81 11       	cpse	r24, r1
    16c8:	39 c0       	rjmp	.+114    	; 0x173c <mount_volume+0x4fc>
    16ca:	d8 01       	movw	r26, r16
    16cc:	14 96       	adiw	r26, 0x04	; 4
    16ce:	1c 92       	st	X, r1
    16d0:	f8 01       	movw	r30, r16
    16d2:	e2 5d       	subi	r30, 0xD2	; 210
    16d4:	fd 4f       	sbci	r31, 0xFD	; 253
    16d6:	80 81       	ld	r24, Z
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	98 2f       	mov	r25, r24
    16dc:	88 27       	eor	r24, r24
    16de:	31 97       	sbiw	r30, 0x01	; 1
    16e0:	20 81       	ld	r18, Z
    16e2:	82 2b       	or	r24, r18
    16e4:	85 35       	cpi	r24, 0x55	; 85
    16e6:	9a 4a       	sbci	r25, 0xAA	; 170
    16e8:	49 f5       	brne	.+82     	; 0x173c <mount_volume+0x4fc>
    16ea:	c8 01       	movw	r24, r16
    16ec:	8f 96       	adiw	r24, 0x2f	; 47
    16ee:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    16f2:	62 35       	cpi	r22, 0x52	; 82
    16f4:	72 45       	sbci	r23, 0x52	; 82
    16f6:	81 46       	sbci	r24, 0x61	; 97
    16f8:	91 44       	sbci	r25, 0x41	; 65
    16fa:	01 f5       	brne	.+64     	; 0x173c <mount_volume+0x4fc>
    16fc:	c8 01       	movw	r24, r16
    16fe:	8d 5e       	subi	r24, 0xED	; 237
    1700:	9d 4f       	sbci	r25, 0xFD	; 253
    1702:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    1706:	62 37       	cpi	r22, 0x72	; 114
    1708:	72 47       	sbci	r23, 0x72	; 114
    170a:	81 44       	sbci	r24, 0x41	; 65
    170c:	91 46       	sbci	r25, 0x61	; 97
    170e:	b1 f4       	brne	.+44     	; 0x173c <mount_volume+0x4fc>
    1710:	c8 01       	movw	r24, r16
    1712:	89 5e       	subi	r24, 0xE9	; 233
    1714:	9d 4f       	sbci	r25, 0xFD	; 253
    1716:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    171a:	d8 01       	movw	r26, r16
    171c:	1f 96       	adiw	r26, 0x0f	; 15
    171e:	6d 93       	st	X+, r22
    1720:	7d 93       	st	X+, r23
    1722:	8d 93       	st	X+, r24
    1724:	9c 93       	st	X, r25
    1726:	52 97       	sbiw	r26, 0x12	; 18
    1728:	c8 01       	movw	r24, r16
    172a:	85 5e       	subi	r24, 0xE5	; 229
    172c:	9d 4f       	sbci	r25, 0xFD	; 253
    172e:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    1732:	f8 01       	movw	r30, r16
    1734:	63 87       	std	Z+11, r22	; 0x0b
    1736:	74 87       	std	Z+12, r23	; 0x0c
    1738:	85 87       	std	Z+13, r24	; 0x0d
    173a:	96 87       	std	Z+14, r25	; 0x0e
    173c:	d8 01       	movw	r26, r16
    173e:	2c 92       	st	X, r2
    1740:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <__data_end>
    1744:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <__data_end+0x1>
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <__data_end+0x1>
    174e:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <__data_end>
    1752:	16 96       	adiw	r26, 0x06	; 6
    1754:	9c 93       	st	X, r25
    1756:	8e 93       	st	-X, r24
    1758:	15 97       	sbiw	r26, 0x05	; 5
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	ad c0       	rjmp	.+346    	; 0x18b8 <mount_volume+0x678>
    175e:	8b e0       	ldi	r24, 0x0B	; 11
    1760:	ab c0       	rjmp	.+342    	; 0x18b8 <mount_volume+0x678>
    1762:	8c e0       	ldi	r24, 0x0C	; 12
    1764:	a9 c0       	rjmp	.+338    	; 0x18b8 <mount_volume+0x678>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	a7 c0       	rjmp	.+334    	; 0x18b8 <mount_volume+0x678>
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	a5 c0       	rjmp	.+330    	; 0x18b8 <mount_volume+0x678>
    176e:	83 e0       	ldi	r24, 0x03	; 3
    1770:	a3 c0       	rjmp	.+326    	; 0x18b8 <mount_volume+0x678>
    1772:	8a e0       	ldi	r24, 0x0A	; 10
    1774:	a1 c0       	rjmp	.+322    	; 0x18b8 <mount_volume+0x678>
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	9f c0       	rjmp	.+318    	; 0x18b8 <mount_volume+0x678>
    177a:	8d e0       	ldi	r24, 0x0D	; 13
    177c:	9d c0       	rjmp	.+314    	; 0x18b8 <mount_volume+0x678>
    177e:	8d e0       	ldi	r24, 0x0D	; 13
    1780:	9b c0       	rjmp	.+310    	; 0x18b8 <mount_volume+0x678>
    1782:	8d e0       	ldi	r24, 0x0D	; 13
    1784:	99 c0       	rjmp	.+306    	; 0x18b8 <mount_volume+0x678>
    1786:	8d e0       	ldi	r24, 0x0D	; 13
    1788:	97 c0       	rjmp	.+302    	; 0x18b8 <mount_volume+0x678>
    178a:	8d e0       	ldi	r24, 0x0D	; 13
    178c:	95 c0       	rjmp	.+298    	; 0x18b8 <mount_volume+0x678>
    178e:	8d e0       	ldi	r24, 0x0D	; 13
    1790:	93 c0       	rjmp	.+294    	; 0x18b8 <mount_volume+0x678>
    1792:	8d e0       	ldi	r24, 0x0D	; 13
    1794:	91 c0       	rjmp	.+290    	; 0x18b8 <mount_volume+0x678>
    1796:	8d e0       	ldi	r24, 0x0D	; 13
    1798:	8f c0       	rjmp	.+286    	; 0x18b8 <mount_volume+0x678>
    179a:	8d e0       	ldi	r24, 0x0D	; 13
    179c:	8d c0       	rjmp	.+282    	; 0x18b8 <mount_volume+0x678>
    179e:	8d e0       	ldi	r24, 0x0D	; 13
    17a0:	8b c0       	rjmp	.+278    	; 0x18b8 <mount_volume+0x678>
    17a2:	8d e0       	ldi	r24, 0x0D	; 13
    17a4:	89 c0       	rjmp	.+274    	; 0x18b8 <mount_volume+0x678>
    17a6:	8d e0       	ldi	r24, 0x0D	; 13
    17a8:	87 c0       	rjmp	.+270    	; 0x18b8 <mount_volume+0x678>
    17aa:	8d e0       	ldi	r24, 0x0D	; 13
    17ac:	85 c0       	rjmp	.+266    	; 0x18b8 <mount_volume+0x678>
    17ae:	8d e0       	ldi	r24, 0x0D	; 13
    17b0:	83 c0       	rjmp	.+262    	; 0x18b8 <mount_volume+0x678>
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	81 c0       	rjmp	.+258    	; 0x18b8 <mount_volume+0x678>
    17b6:	8d e0       	ldi	r24, 0x0D	; 13
    17b8:	7f c0       	rjmp	.+254    	; 0x18b8 <mount_volume+0x678>
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	ba 01       	movw	r22, r20
    17c0:	c8 01       	movw	r24, r16
    17c2:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <check_fs>
    17c6:	82 30       	cpi	r24, 0x02	; 2
    17c8:	91 05       	cpc	r25, r1
    17ca:	09 f0       	breq	.+2      	; 0x17ce <mount_volume+0x58e>
    17cc:	cf cd       	rjmp	.-1122   	; 0x136c <mount_volume+0x12c>
    17ce:	95 cd       	rjmp	.-1238   	; 0x12fa <mount_volume+0xba>
    17d0:	04 97       	sbiw	r24, 0x04	; 4
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <mount_volume+0x596>
    17d4:	d2 cd       	rjmp	.-1116   	; 0x137a <mount_volume+0x13a>
    17d6:	ed cf       	rjmp	.-38     	; 0x17b2 <mount_volume+0x572>
    17d8:	8f ef       	ldi	r24, 0xFF	; 255
    17da:	9f ef       	ldi	r25, 0xFF	; 255
    17dc:	dc 01       	movw	r26, r24
    17de:	f8 01       	movw	r30, r16
    17e0:	87 87       	std	Z+15, r24	; 0x0f
    17e2:	90 8b       	std	Z+16, r25	; 0x10
    17e4:	a1 8b       	std	Z+17, r26	; 0x11
    17e6:	b2 8b       	std	Z+18, r27	; 0x12
    17e8:	83 87       	std	Z+11, r24	; 0x0b
    17ea:	94 87       	std	Z+12, r25	; 0x0c
    17ec:	a5 87       	std	Z+13, r26	; 0x0d
    17ee:	b6 87       	std	Z+14, r27	; 0x0e
    17f0:	80 e8       	ldi	r24, 0x80	; 128
    17f2:	84 83       	std	Z+4, r24	; 0x04
    17f4:	a3 cf       	rjmp	.-186    	; 0x173c <mount_volume+0x4fc>
    17f6:	ff ef       	ldi	r31, 0xFF	; 255
    17f8:	cf 0e       	add	r12, r31
    17fa:	f1 e0       	ldi	r31, 0x01	; 1
    17fc:	df 1e       	adc	r13, r31
    17fe:	e1 1c       	adc	r14, r1
    1800:	f1 1c       	adc	r15, r1
    1802:	0b 2e       	mov	r0, r27
    1804:	b9 e0       	ldi	r27, 0x09	; 9
    1806:	f6 94       	lsr	r15
    1808:	e7 94       	ror	r14
    180a:	d7 94       	ror	r13
    180c:	c7 94       	ror	r12
    180e:	ba 95       	dec	r27
    1810:	d1 f7       	brne	.-12     	; 0x1806 <mount_volume+0x5c6>
    1812:	b0 2d       	mov	r27, r0
    1814:	29 89       	ldd	r18, Y+17	; 0x11
    1816:	3a 89       	ldd	r19, Y+18	; 0x12
    1818:	4b 89       	ldd	r20, Y+19	; 0x13
    181a:	5c 89       	ldd	r21, Y+20	; 0x14
    181c:	2c 15       	cp	r18, r12
    181e:	3d 05       	cpc	r19, r13
    1820:	4e 05       	cpc	r20, r14
    1822:	5f 05       	cpc	r21, r15
    1824:	40 f2       	brcs	.-112    	; 0x17b6 <mount_volume+0x576>
    1826:	d8 cf       	rjmp	.-80     	; 0x17d8 <mount_volume+0x598>
    1828:	8f ef       	ldi	r24, 0xFF	; 255
    182a:	9f ef       	ldi	r25, 0xFF	; 255
    182c:	dc 01       	movw	r26, r24
    182e:	f8 01       	movw	r30, r16
    1830:	87 87       	std	Z+15, r24	; 0x0f
    1832:	90 8b       	std	Z+16, r25	; 0x10
    1834:	a1 8b       	std	Z+17, r26	; 0x11
    1836:	b2 8b       	std	Z+18, r27	; 0x12
    1838:	83 87       	std	Z+11, r24	; 0x0b
    183a:	94 87       	std	Z+12, r25	; 0x0c
    183c:	a5 87       	std	Z+13, r26	; 0x0d
    183e:	b6 87       	std	Z+14, r27	; 0x0e
    1840:	80 e8       	ldi	r24, 0x80	; 128
    1842:	84 83       	std	Z+4, r24	; 0x04
    1844:	e0 5a       	subi	r30, 0xA0	; 160
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	80 81       	ld	r24, Z
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	98 2f       	mov	r25, r24
    184e:	88 27       	eor	r24, r24
    1850:	31 97       	sbiw	r30, 0x01	; 1
    1852:	20 81       	ld	r18, Z
    1854:	82 2b       	or	r24, r18
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	09 f0       	breq	.+2      	; 0x185c <mount_volume+0x61c>
    185a:	70 cf       	rjmp	.-288    	; 0x173c <mount_volume+0x4fc>
    185c:	2b cf       	rjmp	.-426    	; 0x16b4 <mount_volume+0x474>
    185e:	69 01       	movw	r12, r18
    1860:	7a 01       	movw	r14, r20
    1862:	f2 e0       	ldi	r31, 0x02	; 2
    1864:	cf 0e       	add	r12, r31
    1866:	d1 1c       	adc	r13, r1
    1868:	e1 1c       	adc	r14, r1
    186a:	f1 1c       	adc	r15, r1
    186c:	d8 01       	movw	r26, r16
    186e:	53 96       	adiw	r26, 0x13	; 19
    1870:	cd 92       	st	X+, r12
    1872:	dd 92       	st	X+, r13
    1874:	ed 92       	st	X+, r14
    1876:	fc 92       	st	X, r15
    1878:	56 97       	sbiw	r26, 0x16	; 22
    187a:	f8 01       	movw	r30, r16
    187c:	83 8e       	std	Z+27, r8	; 0x1b
    187e:	94 8e       	std	Z+28, r9	; 0x1c
    1880:	a5 8e       	std	Z+29, r10	; 0x1d
    1882:	b6 8e       	std	Z+30, r11	; 0x1e
    1884:	8f 89       	ldd	r24, Y+23	; 0x17
    1886:	98 8d       	ldd	r25, Y+24	; 0x18
    1888:	a9 8d       	ldd	r26, Y+25	; 0x19
    188a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    188c:	88 0d       	add	r24, r8
    188e:	99 1d       	adc	r25, r9
    1890:	aa 1d       	adc	r26, r10
    1892:	bb 1d       	adc	r27, r11
    1894:	87 8f       	std	Z+31, r24	; 0x1f
    1896:	90 a3       	std	Z+32, r25	; 0x20
    1898:	a1 a3       	std	Z+33, r26	; 0x21
    189a:	b2 a3       	std	Z+34, r27	; 0x22
    189c:	b5 01       	movw	r22, r10
    189e:	a4 01       	movw	r20, r8
    18a0:	44 0d       	add	r20, r4
    18a2:	55 1d       	adc	r21, r5
    18a4:	66 1d       	adc	r22, r6
    18a6:	77 1d       	adc	r23, r7
    18a8:	47 a3       	std	Z+39, r20	; 0x27
    18aa:	50 a7       	std	Z+40, r21	; 0x28
    18ac:	61 a7       	std	Z+41, r22	; 0x29
    18ae:	72 a7       	std	Z+42, r23	; 0x2a
    18b0:	22 24       	eor	r2, r2
    18b2:	23 94       	inc	r2
    18b4:	31 2c       	mov	r3, r1
    18b6:	cb ce       	rjmp	.-618    	; 0x164e <mount_volume+0x40e>
    18b8:	6e 96       	adiw	r28, 0x1e	; 30
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	ef 90       	pop	r14
    18d0:	df 90       	pop	r13
    18d2:	cf 90       	pop	r12
    18d4:	bf 90       	pop	r11
    18d6:	af 90       	pop	r10
    18d8:	9f 90       	pop	r9
    18da:	8f 90       	pop	r8
    18dc:	7f 90       	pop	r7
    18de:	6f 90       	pop	r6
    18e0:	5f 90       	pop	r5
    18e2:	4f 90       	pop	r4
    18e4:	3f 90       	pop	r3
    18e6:	2f 90       	pop	r2
    18e8:	08 95       	ret

000018ea <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
    18ea:	0f 93       	push	r16
    18ec:	1f 93       	push	r17
    18ee:	dc 01       	movw	r26, r24
    18f0:	fb 01       	movw	r30, r22
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    18f2:	93 8d       	ldd	r25, Z+27	; 0x1b
    18f4:	69 2f       	mov	r22, r25
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	76 2f       	mov	r23, r22
    18fa:	66 27       	eor	r22, r22
	const BYTE* dir		/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    18fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    18fe:	68 2b       	or	r22, r24
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
    1904:	2c 91       	ld	r18, X
    1906:	23 30       	cpi	r18, 0x03	; 3
    1908:	79 f4       	brne	.+30     	; 0x1928 <ld_clust+0x3e>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    190a:	05 89       	ldd	r16, Z+21	; 0x15
    190c:	10 e0       	ldi	r17, 0x00	; 0
    190e:	10 2f       	mov	r17, r16
    1910:	00 27       	eor	r16, r16
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    1912:	24 89       	ldd	r18, Z+20	; 0x14
    1914:	02 2b       	or	r16, r18
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	98 01       	movw	r18, r16
    191c:	11 27       	eor	r17, r17
    191e:	00 27       	eor	r16, r16
    1920:	60 2b       	or	r22, r16
    1922:	71 2b       	or	r23, r17
    1924:	82 2b       	or	r24, r18
    1926:	93 2b       	or	r25, r19
	}

	return cl;
}
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	08 95       	ret

0000192e <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
    192e:	2f 92       	push	r2
    1930:	3f 92       	push	r3
    1932:	4f 92       	push	r4
    1934:	5f 92       	push	r5
    1936:	6f 92       	push	r6
    1938:	7f 92       	push	r7
    193a:	8f 92       	push	r8
    193c:	9f 92       	push	r9
    193e:	af 92       	push	r10
    1940:	bf 92       	push	r11
    1942:	cf 92       	push	r12
    1944:	df 92       	push	r13
    1946:	ef 92       	push	r14
    1948:	ff 92       	push	r15
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	2a 97       	sbiw	r28, 0x0a	; 10
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
    1962:	dc 01       	movw	r26, r24
    1964:	0d 90       	ld	r0, X+
    1966:	bc 91       	ld	r27, X
    1968:	a0 2d       	mov	r26, r0
    196a:	ba 83       	std	Y+2, r27	; 0x02
    196c:	a9 83       	std	Y+1, r26	; 0x01
    196e:	e6 2f       	mov	r30, r22
    1970:	f7 2f       	mov	r31, r23
    1972:	9a 87       	std	Y+10, r25	; 0x0a
    1974:	89 87       	std	Y+9, r24	; 0x09
    1976:	1f 01       	movw	r2, r30
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
    1978:	81 91       	ld	r24, Z+
    197a:	8f 32       	cpi	r24, 0x2F	; 47
    197c:	e1 f3       	breq	.-8      	; 0x1976 <follow_path+0x48>
    197e:	8c 35       	cpi	r24, 0x5C	; 92
    1980:	d1 f3       	breq	.-12     	; 0x1976 <follow_path+0x48>
    1982:	e9 85       	ldd	r30, Y+9	; 0x09
    1984:	fa 85       	ldd	r31, Y+10	; 0x0a
		dp->obj.sclust = 0;					/* Start from root directory */
    1986:	df 01       	movw	r26, r30
    1988:	16 82       	std	Z+6, r1	; 0x06
    198a:	17 82       	std	Z+7, r1	; 0x07
    198c:	10 86       	std	Z+8, r1	; 0x08
    198e:	11 86       	std	Z+9, r1	; 0x09
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    1990:	f1 01       	movw	r30, r2
    1992:	80 81       	ld	r24, Z
    1994:	80 32       	cpi	r24, 0x20	; 32
    1996:	60 f4       	brcc	.+24     	; 0x19b0 <follow_path+0x82>
		dp->fn[NSFLAG] = NS_NONAME;
    1998:	80 e8       	ldi	r24, 0x80	; 128
    199a:	97 96       	adiw	r26, 0x27	; 39
    199c:	8c 93       	st	X, r24
    199e:	97 97       	sbiw	r26, 0x27	; 39
		res = dir_sdi(dp, 0);
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	ba 01       	movw	r22, r20
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 8f 04 	call	0x91e	; 0x91e <dir_sdi>
    19ac:	88 2e       	mov	r8, r24
    19ae:	23 c1       	rjmp	.+582    	; 0x1bf6 <follow_path+0x2c8>
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
    19b0:	69 84       	ldd	r6, Y+9	; 0x09
    19b2:	7a 84       	ldd	r7, Y+10	; 0x0a
    19b4:	fc e1       	ldi	r31, 0x1C	; 28
    19b6:	6f 0e       	add	r6, r31
    19b8:	71 1c       	adc	r7, r1
    19ba:	e9 84       	ldd	r14, Y+9	; 0x09
    19bc:	fa 84       	ldd	r15, Y+10	; 0x0a
    19be:	87 e2       	ldi	r24, 0x27	; 39
    19c0:	e8 0e       	add	r14, r24
    19c2:	f1 1c       	adc	r15, r1
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    19c4:	10 e2       	ldi	r17, 0x20	; 32
	} while (--cnt);
    19c6:	b1 2c       	mov	r11, r1
    19c8:	68 94       	set
    19ca:	55 24       	eor	r5, r5
    19cc:	53 f8       	bld	r5, 3
    19ce:	41 2c       	mov	r4, r1
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
			i = 8; ni = 11;				/* Enter file extension field */
    19d0:	0f 2e       	mov	r0, r31
    19d2:	fb e0       	ldi	r31, 0x0B	; 11
    19d4:	af 2e       	mov	r10, r31
    19d6:	f0 2d       	mov	r31, r0
    19d8:	91 2c       	mov	r9, r1
    19da:	5d 82       	std	Y+5, r5	; 0x05
    19dc:	4e 82       	std	Y+6, r4	; 0x06
    19de:	af 82       	std	Y+7, r10	; 0x07
    19e0:	98 86       	std	Y+8, r9	; 0x08
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    19e2:	a9 81       	ldd	r26, Y+1	; 0x01
    19e4:	ba 81       	ldd	r27, Y+2	; 0x02
    19e6:	9f 96       	adiw	r26, 0x2f	; 47
    19e8:	bc 83       	std	Y+4, r27	; 0x04
    19ea:	ab 83       	std	Y+3, r26	; 0x03
    19ec:	f3 01       	movw	r30, r6
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    19ee:	11 93       	st	Z+, r17
	} while (--cnt);
    19f0:	ee 15       	cp	r30, r14
    19f2:	ff 05       	cpc	r31, r15
    19f4:	e1 f7       	brne	.-8      	; 0x19ee <follow_path+0xc0>
    19f6:	f1 01       	movw	r30, r2
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	7b 2d       	mov	r23, r11
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	c5 2c       	mov	r12, r5
    1a02:	d4 2c       	mov	r13, r4
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
    1a04:	2f 5f       	subi	r18, 0xFF	; 255
    1a06:	3f 4f       	sbci	r19, 0xFF	; 255
    1a08:	01 91       	ld	r16, Z+
		if (c <= ' ') break; 			/* Break if end of the path name */
    1a0a:	01 32       	cpi	r16, 0x21	; 33
    1a0c:	b0 f1       	brcs	.+108    	; 0x1a7a <follow_path+0x14c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
    1a0e:	0f 32       	cpi	r16, 0x2F	; 47
    1a10:	11 f0       	breq	.+4      	; 0x1a16 <follow_path+0xe8>
    1a12:	0c 35       	cpi	r16, 0x5C	; 92
    1a14:	61 f4       	brne	.+24     	; 0x1a2e <follow_path+0x100>
    1a16:	f1 01       	movw	r30, r2
    1a18:	e2 0f       	add	r30, r18
    1a1a:	f3 1f       	adc	r31, r19
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <follow_path+0xf4>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
    1a1e:	2f 5f       	subi	r18, 0xFF	; 255
    1a20:	3f 4f       	sbci	r19, 0xFF	; 255
    1a22:	81 91       	ld	r24, Z+
    1a24:	8f 32       	cpi	r24, 0x2F	; 47
    1a26:	d9 f3       	breq	.-10     	; 0x1a1e <follow_path+0xf0>
    1a28:	8c 35       	cpi	r24, 0x5C	; 92
    1a2a:	c9 f3       	breq	.-14     	; 0x1a1e <follow_path+0xf0>
    1a2c:	26 c0       	rjmp	.+76     	; 0x1a7a <follow_path+0x14c>
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
    1a2e:	0e 32       	cpi	r16, 0x2E	; 46
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <follow_path+0x106>
    1a32:	d8 c0       	rjmp	.+432    	; 0x1be4 <follow_path+0x2b6>
    1a34:	6c 15       	cp	r22, r12
    1a36:	7d 05       	cpc	r23, r13
    1a38:	08 f0       	brcs	.+2      	; 0x1a3c <follow_path+0x10e>
    1a3a:	9a c0       	rjmp	.+308    	; 0x1b70 <follow_path+0x242>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
    1a3c:	00 23       	and	r16, r16
    1a3e:	0c f0       	brlt	.+2      	; 0x1a42 <follow_path+0x114>
    1a40:	b4 c0       	rjmp	.+360    	; 0x1baa <follow_path+0x27c>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
    1a42:	0f 77       	andi	r16, 0x7F	; 127
    1a44:	a0 2f       	mov	r26, r16
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	a6 5e       	subi	r26, 0xE6	; 230
    1a4a:	be 4f       	sbci	r27, 0xFE	; 254
    1a4c:	0c 91       	ld	r16, X
    1a4e:	ad c0       	rjmp	.+346    	; 0x1baa <follow_path+0x27c>


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
    1a50:	8d 91       	ld	r24, X+
    1a52:	88 23       	and	r24, r24
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <follow_path+0x12a>
    1a56:	b1 c0       	rjmp	.+354    	; 0x1bba <follow_path+0x28c>
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	48 17       	cp	r20, r24
    1a5c:	59 07       	cpc	r21, r25
    1a5e:	c1 f7       	brne	.-16     	; 0x1a50 <follow_path+0x122>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    1a60:	0f 2e       	mov	r0, r31
    1a62:	f6 e0       	ldi	r31, 0x06	; 6
    1a64:	8f 2e       	mov	r8, r31
    1a66:	f0 2d       	mov	r31, r0
    1a68:	c6 c0       	rjmp	.+396    	; 0x1bf6 <follow_path+0x2c8>
			if (IsLower(c)) c -= 0x20;	/* To upper */
    1a6a:	00 52       	subi	r16, 0x20	; 32
			sfn[i++] = c;
    1a6c:	d3 01       	movw	r26, r6
    1a6e:	a6 0f       	add	r26, r22
    1a70:	b7 1f       	adc	r27, r23
    1a72:	0c 93       	st	X, r16
    1a74:	6f 5f       	subi	r22, 0xFF	; 255
    1a76:	7f 4f       	sbci	r23, 0xFF	; 255
    1a78:	c5 cf       	rjmp	.-118    	; 0x1a04 <follow_path+0xd6>
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
    1a7a:	22 0e       	add	r2, r18
    1a7c:	33 1e       	adc	r3, r19
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    1a7e:	67 2b       	or	r22, r23
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <follow_path+0x156>
    1a82:	7b c0       	rjmp	.+246    	; 0x1b7a <follow_path+0x24c>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    1a84:	a9 85       	ldd	r26, Y+9	; 0x09
    1a86:	ba 85       	ldd	r27, Y+10	; 0x0a
    1a88:	5c 96       	adiw	r26, 0x1c	; 28
    1a8a:	8c 91       	ld	r24, X
    1a8c:	5c 97       	sbiw	r26, 0x1c	; 28
    1a8e:	85 3e       	cpi	r24, 0xE5	; 229
    1a90:	19 f4       	brne	.+6      	; 0x1a98 <follow_path+0x16a>
    1a92:	e5 e0       	ldi	r30, 0x05	; 5
    1a94:	5c 96       	adiw	r26, 0x1c	; 28
    1a96:	ec 93       	st	X, r30
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    1a98:	01 32       	cpi	r16, 0x21	; 33
    1a9a:	10 f0       	brcs	.+4      	; 0x1aa0 <follow_path+0x172>
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	01 c0       	rjmp	.+2      	; 0x1aa2 <follow_path+0x174>
    1aa0:	84 e0       	ldi	r24, 0x04	; 4
    1aa2:	a9 85       	ldd	r26, Y+9	; 0x09
    1aa4:	ba 85       	ldd	r27, Y+10	; 0x0a
    1aa6:	97 96       	adiw	r26, 0x27	; 39
    1aa8:	8c 93       	st	X, r24
    1aaa:	97 97       	sbiw	r26, 0x27	; 39
static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    1aac:	cd 90       	ld	r12, X+
    1aae:	dc 90       	ld	r13, X
    1ab0:	11 97       	sbiw	r26, 0x01	; 1
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    1ab2:	40 e0       	ldi	r20, 0x00	; 0
    1ab4:	50 e0       	ldi	r21, 0x00	; 0
    1ab6:	ba 01       	movw	r22, r20
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 8f 04 	call	0x91e	; 0x91e <dir_sdi>
    1abe:	88 2e       	mov	r8, r24
	if (res != FR_OK) return res;
    1ac0:	81 11       	cpse	r24, r1
    1ac2:	81 c0       	rjmp	.+258    	; 0x1bc6 <follow_path+0x298>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
    1ac4:	a9 85       	ldd	r26, Y+9	; 0x09
    1ac6:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ac8:	56 96       	adiw	r26, 0x16	; 22
    1aca:	4d 91       	ld	r20, X+
    1acc:	5d 91       	ld	r21, X+
    1ace:	6d 91       	ld	r22, X+
    1ad0:	7c 91       	ld	r23, X
    1ad2:	59 97       	sbiw	r26, 0x19	; 25
    1ad4:	c6 01       	movw	r24, r12
    1ad6:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
    1ada:	88 2e       	mov	r8, r24
		if (res != FR_OK) break;
    1adc:	81 11       	cpse	r24, r1
    1ade:	74 c0       	rjmp	.+232    	; 0x1bc8 <follow_path+0x29a>
		c = dp->dir[DIR_Name];
    1ae0:	a9 85       	ldd	r26, Y+9	; 0x09
    1ae2:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ae4:	5a 96       	adiw	r26, 0x1a	; 26
    1ae6:	ed 91       	ld	r30, X+
    1ae8:	fc 91       	ld	r31, X
    1aea:	5b 97       	sbiw	r26, 0x1b	; 27
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1aec:	80 81       	ld	r24, Z
    1aee:	88 23       	and	r24, r24
    1af0:	d9 f0       	breq	.+54     	; 0x1b28 <follow_path+0x1fa>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    1af2:	03 85       	ldd	r16, Z+11	; 0x0b
    1af4:	80 2f       	mov	r24, r16
    1af6:	8f 73       	andi	r24, 0x3F	; 63
    1af8:	14 96       	adiw	r26, 0x04	; 4
    1afa:	8c 93       	st	X, r24
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    1afc:	83 85       	ldd	r24, Z+11	; 0x0b
    1afe:	83 fd       	sbrc	r24, 3
    1b00:	09 c0       	rjmp	.+18     	; 0x1b14 <follow_path+0x1e6>
    1b02:	4a 2d       	mov	r20, r10
    1b04:	59 2d       	mov	r21, r9
    1b06:	b3 01       	movw	r22, r6
    1b08:	cf 01       	movw	r24, r30
    1b0a:	0e 94 7c 00 	call	0xf8	; 0xf8 <mem_cmp>
    1b0e:	89 2b       	or	r24, r25
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <follow_path+0x1e6>
    1b12:	62 c0       	rjmp	.+196    	; 0x1bd8 <follow_path+0x2aa>
#endif
		res = dir_next(dp, 0);	/* Next entry */
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	7b 2d       	mov	r23, r11
    1b18:	89 85       	ldd	r24, Y+9	; 0x09
    1b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1c:	0e 94 75 07 	call	0xeea	; 0xeea <dir_next>
    1b20:	88 2e       	mov	r8, r24
	} while (res == FR_OK);
    1b22:	88 23       	and	r24, r24
    1b24:	79 f2       	breq	.-98     	; 0x1ac4 <follow_path+0x196>
    1b26:	50 c0       	rjmp	.+160    	; 0x1bc8 <follow_path+0x29a>
    1b28:	89 85       	ldd	r24, Y+9	; 0x09
    1b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2c:	dc 01       	movw	r26, r24
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    1b2e:	97 96       	adiw	r26, 0x27	; 39
    1b30:	8c 91       	ld	r24, X
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    1b32:	82 fd       	sbrc	r24, 2
    1b34:	27 c0       	rjmp	.+78     	; 0x1b84 <follow_path+0x256>
    1b36:	0f 2e       	mov	r0, r31
    1b38:	f5 e0       	ldi	r31, 0x05	; 5
    1b3a:	8f 2e       	mov	r8, r31
    1b3c:	f0 2d       	mov	r31, r0
    1b3e:	5b c0       	rjmp	.+182    	; 0x1bf6 <follow_path+0x2c8>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
    1b40:	04 ff       	sbrs	r16, 4
    1b42:	24 c0       	rjmp	.+72     	; 0x1b8c <follow_path+0x25e>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    1b44:	e9 85       	ldd	r30, Y+9	; 0x09
    1b46:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b48:	66 85       	ldd	r22, Z+14	; 0x0e
    1b4a:	77 85       	ldd	r23, Z+15	; 0x0f
    1b4c:	71 70       	andi	r23, 0x01	; 1
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	9c 81       	ldd	r25, Y+4	; 0x04
    1b52:	68 0f       	add	r22, r24
    1b54:	79 1f       	adc	r23, r25
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <ld_clust>
    1b5e:	a9 85       	ldd	r26, Y+9	; 0x09
    1b60:	ba 85       	ldd	r27, Y+10	; 0x0a
    1b62:	16 96       	adiw	r26, 0x06	; 6
    1b64:	6d 93       	st	X+, r22
    1b66:	7d 93       	st	X+, r23
    1b68:	8d 93       	st	X+, r24
    1b6a:	9c 93       	st	X, r25
    1b6c:	19 97       	sbiw	r26, 0x09	; 9
			}
		}
    1b6e:	3e cf       	rjmp	.-388    	; 0x19ec <follow_path+0xbe>
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
    1b70:	0f 2e       	mov	r0, r31
    1b72:	f6 e0       	ldi	r31, 0x06	; 6
    1b74:	8f 2e       	mov	r8, r31
    1b76:	f0 2d       	mov	r31, r0
    1b78:	3e c0       	rjmp	.+124    	; 0x1bf6 <follow_path+0x2c8>
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    1b7a:	0f 2e       	mov	r0, r31
    1b7c:	f6 e0       	ldi	r31, 0x06	; 6
    1b7e:	8f 2e       	mov	r8, r31
    1b80:	f0 2d       	mov	r31, r0
    1b82:	39 c0       	rjmp	.+114    	; 0x1bf6 <follow_path+0x2c8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
    1b84:	68 94       	set
    1b86:	88 24       	eor	r8, r8
    1b88:	82 f8       	bld	r8, 2
    1b8a:	35 c0       	rjmp	.+106    	; 0x1bf6 <follow_path+0x2c8>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    1b8c:	0f 2e       	mov	r0, r31
    1b8e:	f5 e0       	ldi	r31, 0x05	; 5
    1b90:	8f 2e       	mov	r8, r31
    1b92:	f0 2d       	mov	r31, r0
    1b94:	30 c0       	rjmp	.+96     	; 0x1bf6 <follow_path+0x2c8>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    1b96:	0f 2e       	mov	r0, r31
    1b98:	f6 e0       	ldi	r31, 0x06	; 6
    1b9a:	8f 2e       	mov	r8, r31
    1b9c:	f0 2d       	mov	r31, r0
    1b9e:	2b c0       	rjmp	.+86     	; 0x1bf6 <follow_path+0x2c8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    1ba0:	0f 2e       	mov	r0, r31
    1ba2:	f6 e0       	ldi	r31, 0x06	; 6
    1ba4:	8f 2e       	mov	r8, r31
    1ba6:	f0 2d       	mov	r31, r0
    1ba8:	26 c0       	rjmp	.+76     	; 0x1bf6 <follow_path+0x2c8>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    1baa:	40 2f       	mov	r20, r16
    1bac:	50 e0       	ldi	r21, 0x00	; 0


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
    1bae:	42 32       	cpi	r20, 0x22	; 34
    1bb0:	51 05       	cpc	r21, r1
    1bb2:	89 f3       	breq	.-30     	; 0x1b96 <follow_path+0x268>
    1bb4:	ac e0       	ldi	r26, 0x0C	; 12
    1bb6:	b1 e0       	ldi	r27, 0x01	; 1
    1bb8:	4b cf       	rjmp	.-362    	; 0x1a50 <follow_path+0x122>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
    1bba:	8f e9       	ldi	r24, 0x9F	; 159
    1bbc:	80 0f       	add	r24, r16
    1bbe:	8a 31       	cpi	r24, 0x1A	; 26
    1bc0:	08 f4       	brcc	.+2      	; 0x1bc4 <follow_path+0x296>
    1bc2:	53 cf       	rjmp	.-346    	; 0x1a6a <follow_path+0x13c>
    1bc4:	53 cf       	rjmp	.-346    	; 0x1a6c <follow_path+0x13e>
    1bc6:	00 c0       	rjmp	.+0      	; 0x1bc8 <follow_path+0x29a>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    1bc8:	a9 85       	ldd	r26, Y+9	; 0x09
    1bca:	ba 85       	ldd	r27, Y+10	; 0x0a
    1bcc:	97 96       	adiw	r26, 0x27	; 39
    1bce:	8c 91       	ld	r24, X
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    1bd0:	b4 e0       	ldi	r27, 0x04	; 4
    1bd2:	8b 12       	cpse	r8, r27
    1bd4:	10 c0       	rjmp	.+32     	; 0x1bf6 <follow_path+0x2c8>
    1bd6:	ad cf       	rjmp	.-166    	; 0x1b32 <follow_path+0x204>
    1bd8:	e9 85       	ldd	r30, Y+9	; 0x09
    1bda:	fa 85       	ldd	r31, Y+10	; 0x0a
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    1bdc:	87 a1       	ldd	r24, Z+39	; 0x27
    1bde:	82 ff       	sbrs	r24, 2
    1be0:	af cf       	rjmp	.-162    	; 0x1b40 <follow_path+0x212>
    1be2:	09 c0       	rjmp	.+18     	; 0x1bf6 <follow_path+0x2c8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    1be4:	8b e0       	ldi	r24, 0x0B	; 11
    1be6:	c8 16       	cp	r12, r24
    1be8:	d1 04       	cpc	r13, r1
    1bea:	d1 f2       	breq	.-76     	; 0x1ba0 <follow_path+0x272>
			i = 8; ni = 11;				/* Enter file extension field */
    1bec:	6d 81       	ldd	r22, Y+5	; 0x05
    1bee:	7e 81       	ldd	r23, Y+6	; 0x06
    1bf0:	cf 80       	ldd	r12, Y+7	; 0x07
    1bf2:	d8 84       	ldd	r13, Y+8	; 0x08
    1bf4:	07 cf       	rjmp	.-498    	; 0x1a04 <follow_path+0xd6>
			}
		}
	}

	return res;
}
    1bf6:	88 2d       	mov	r24, r8
    1bf8:	2a 96       	adiw	r28, 0x0a	; 10
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	ff 90       	pop	r15
    1c0e:	ef 90       	pop	r14
    1c10:	df 90       	pop	r13
    1c12:	cf 90       	pop	r12
    1c14:	bf 90       	pop	r11
    1c16:	af 90       	pop	r10
    1c18:	9f 90       	pop	r9
    1c1a:	8f 90       	pop	r8
    1c1c:	7f 90       	pop	r7
    1c1e:	6f 90       	pop	r6
    1c20:	5f 90       	pop	r5
    1c22:	4f 90       	pop	r4
    1c24:	3f 90       	pop	r3
    1c26:	2f 90       	pop	r2
    1c28:	08 95       	ret

00001c2a <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    1c2a:	1f 93       	push	r17
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <f_mount+0x8>
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <f_mount+0xa>
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <f_mount+0xc>
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	9c 83       	std	Y+4, r25	; 0x04
    1c3c:	8b 83       	std	Y+3, r24	; 0x03
    1c3e:	7e 83       	std	Y+6, r23	; 0x06
    1c40:	6d 83       	std	Y+5, r22	; 0x05
    1c42:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    1c44:	7a 83       	std	Y+2, r23	; 0x02
    1c46:	69 83       	std	Y+1, r22	; 0x01


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
    1c48:	ce 01       	movw	r24, r28
    1c4a:	01 96       	adiw	r24, 0x01	; 1
    1c4c:	0e 94 b2 00 	call	0x164	; 0x164 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    1c50:	99 23       	and	r25, r25
    1c52:	24 f1       	brlt	.+72     	; 0x1c9c <f_mount+0x72>
	cfs = FatFs[vol];					/* Pointer to fs object */
    1c54:	fc 01       	movw	r30, r24
    1c56:	ee 0f       	add	r30, r30
    1c58:	ff 1f       	adc	r31, r31
    1c5a:	e2 57       	subi	r30, 0x72	; 114
    1c5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c5e:	01 90       	ld	r0, Z+
    1c60:	f0 81       	ld	r31, Z
    1c62:	e0 2d       	mov	r30, r0

	if (cfs) {
    1c64:	30 97       	sbiw	r30, 0x00	; 0
    1c66:	09 f0       	breq	.+2      	; 0x1c6a <f_mount+0x40>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    1c68:	10 82       	st	Z, r1
	}

	if (fs) {
    1c6a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c6c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c6e:	30 97       	sbiw	r30, 0x00	; 0
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
    1c72:	10 82       	st	Z, r1
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1c74:	88 0f       	add	r24, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	fc 01       	movw	r30, r24
    1c7a:	e2 57       	subi	r30, 0x72	; 114
    1c7c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	80 83       	st	Z, r24

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    1c86:	11 23       	and	r17, r17
    1c88:	59 f0       	breq	.+22     	; 0x1ca0 <f_mount+0x76>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	be 01       	movw	r22, r28
    1c8e:	6d 5f       	subi	r22, 0xFD	; 253
    1c90:	7f 4f       	sbci	r23, 0xFF	; 255
    1c92:	ce 01       	movw	r24, r28
    1c94:	05 96       	adiw	r24, 0x05	; 5
    1c96:	0e 94 20 09 	call	0x1240	; 0x1240 <mount_volume>
	LEAVE_FF(fs, res);
    1c9a:	03 c0       	rjmp	.+6      	; 0x1ca2 <f_mount+0x78>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    1c9c:	8b e0       	ldi	r24, 0x0B	; 11
    1c9e:	01 c0       	rjmp	.+2      	; 0x1ca2 <f_mount+0x78>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    1ca0:	80 e0       	ldi	r24, 0x00	; 0

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    1ca2:	26 96       	adiw	r28, 0x06	; 6
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	1f 91       	pop	r17
    1cb4:	08 95       	ret

00001cb6 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1cb6:	2f 92       	push	r2
    1cb8:	3f 92       	push	r3
    1cba:	4f 92       	push	r4
    1cbc:	5f 92       	push	r5
    1cbe:	6f 92       	push	r6
    1cc0:	7f 92       	push	r7
    1cc2:	8f 92       	push	r8
    1cc4:	9f 92       	push	r9
    1cc6:	af 92       	push	r10
    1cc8:	bf 92       	push	r11
    1cca:	cf 92       	push	r12
    1ccc:	df 92       	push	r13
    1cce:	ef 92       	push	r14
    1cd0:	ff 92       	push	r15
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	ac 97       	sbiw	r28, 0x2c	; 44
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	7c a7       	std	Y+44, r23	; 0x2c
    1cec:	6b a7       	std	Y+43, r22	; 0x2b
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <f_open+0x3e>
    1cf2:	1d c1       	rjmp	.+570    	; 0x1f2e <f_open+0x278>
    1cf4:	14 2f       	mov	r17, r20
    1cf6:	1c 01       	movw	r2, r24

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
    1cf8:	84 2f       	mov	r24, r20
    1cfa:	8f 73       	andi	r24, 0x3F	; 63
    1cfc:	d8 2e       	mov	r13, r24
	res = mount_volume(&path, &fs, mode);
    1cfe:	48 2f       	mov	r20, r24
    1d00:	be 01       	movw	r22, r28
    1d02:	67 5d       	subi	r22, 0xD7	; 215
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255
    1d06:	ce 01       	movw	r24, r28
    1d08:	8b 96       	adiw	r24, 0x2b	; 43
    1d0a:	0e 94 20 09 	call	0x1240	; 0x1240 <mount_volume>
	if (res == FR_OK) {
    1d0e:	81 11       	cpse	r24, r1
    1d10:	0a c1       	rjmp	.+532    	; 0x1f26 <f_open+0x270>
		dj.obj.fs = fs;
    1d12:	89 a5       	ldd	r24, Y+41	; 0x29
    1d14:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    1d1a:	6b a5       	ldd	r22, Y+43	; 0x2b
    1d1c:	7c a5       	ldd	r23, Y+44	; 0x2c
    1d1e:	ce 01       	movw	r24, r28
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	0e 94 97 0c 	call	0x192e	; 0x192e <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
    1d26:	81 11       	cpse	r24, r1
    1d28:	04 c1       	rjmp	.+520    	; 0x1f32 <f_open+0x27c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    1d2a:	88 a5       	ldd	r24, Y+40	; 0x28
    1d2c:	88 23       	and	r24, r24
    1d2e:	0c f0       	brlt	.+2      	; 0x1d32 <f_open+0x7c>
    1d30:	09 c1       	rjmp	.+530    	; 0x1f44 <f_open+0x28e>
    1d32:	03 c1       	rjmp	.+518    	; 0x1f3a <f_open+0x284>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
			if (res != FR_OK) {					/* No file, create new */
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
    1d34:	84 30       	cpi	r24, 0x04	; 4
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <f_open+0x84>
    1d38:	2c c1       	rjmp	.+600    	; 0x1f92 <f_open+0x2dc>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	01 96       	adiw	r24, 0x01	; 1
    1d3e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <dir_register>
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1d42:	9d 2d       	mov	r25, r13
    1d44:	98 60       	ori	r25, 0x08	; 8
    1d46:	d9 2e       	mov	r13, r25
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    1d48:	88 23       	and	r24, r24
    1d4a:	39 f0       	breq	.+14     	; 0x1d5a <f_open+0xa4>
    1d4c:	ec c0       	rjmp	.+472    	; 0x1f26 <f_open+0x270>
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    1d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d50:	81 71       	andi	r24, 0x11	; 17
    1d52:	09 f0       	breq	.+2      	; 0x1d56 <f_open+0xa0>
    1d54:	45 c1       	rjmp	.+650    	; 0x1fe0 <f_open+0x32a>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    1d56:	12 fd       	sbrc	r17, 2
    1d58:	45 c1       	rjmp	.+650    	; 0x1fe4 <f_open+0x32e>
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    1d5a:	d3 fe       	sbrs	r13, 3
    1d5c:	58 c0       	rjmp	.+176    	; 0x1e0e <f_open+0x158>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
    1d5e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1d60:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1d62:	a9 a4       	ldd	r10, Y+41	; 0x29
    1d64:	ba a4       	ldd	r11, Y+42	; 0x2a
    1d66:	b8 01       	movw	r22, r16
    1d68:	c5 01       	movw	r24, r10
    1d6a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <ld_clust>
    1d6e:	2b 01       	movw	r4, r22
    1d70:	3c 01       	movw	r6, r24
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1d72:	f8 01       	movw	r30, r16
    1d74:	16 86       	std	Z+14, r1	; 0x0e
	*ptr++ = (BYTE)val; val >>= 8;
    1d76:	17 86       	std	Z+15, r1	; 0x0f
	*ptr++ = (BYTE)val; val >>= 8;
    1d78:	81 e2       	ldi	r24, 0x21	; 33
    1d7a:	80 8b       	std	Z+16, r24	; 0x10
	*ptr++ = (BYTE)val;
    1d7c:	8e e4       	ldi	r24, 0x4E	; 78
    1d7e:	81 8b       	std	Z+17, r24	; 0x11
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    1d80:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1d82:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1d84:	80 e2       	ldi	r24, 0x20	; 32
    1d86:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    1d88:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1d8a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	a9 01       	movw	r20, r18
    1d92:	c5 01       	movw	r24, r10
    1d94:	0e 94 a3 03 	call	0x746	; 0x746 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
    1d98:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1d9a:	fc 8d       	ldd	r31, Y+28	; 0x1c
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1d9c:	14 8e       	std	Z+28, r1	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    1d9e:	15 8e       	std	Z+29, r1	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    1da0:	16 8e       	std	Z+30, r1	; 0x1e
	*ptr++ = (BYTE)val;
    1da2:	17 8e       	std	Z+31, r1	; 0x1f
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
					fs->wflag = 1;
    1da4:	e9 a5       	ldd	r30, Y+41	; 0x29
    1da6:	fa a5       	ldd	r31, Y+42	; 0x2a
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	83 83       	std	Z+3, r24	; 0x03
					if (cl != 0) {						/* Remove the cluster chain if exist */
    1dac:	41 14       	cp	r4, r1
    1dae:	51 04       	cpc	r5, r1
    1db0:	61 04       	cpc	r6, r1
    1db2:	71 04       	cpc	r7, r1
    1db4:	49 f1       	breq	.+82     	; 0x1e08 <f_open+0x152>
						sc = fs->winsect;
    1db6:	83 a4       	ldd	r8, Z+43	; 0x2b
    1db8:	94 a4       	ldd	r9, Z+44	; 0x2c
    1dba:	a5 a4       	ldd	r10, Z+45	; 0x2d
    1dbc:	b6 a4       	ldd	r11, Z+46	; 0x2e
						res = remove_chain(&dj.obj, cl, 0);
    1dbe:	00 e0       	ldi	r16, 0x00	; 0
    1dc0:	10 e0       	ldi	r17, 0x00	; 0
    1dc2:	98 01       	movw	r18, r16
    1dc4:	b3 01       	movw	r22, r6
    1dc6:	a2 01       	movw	r20, r4
    1dc8:	ce 01       	movw	r24, r28
    1dca:	01 96       	adiw	r24, 0x01	; 1
    1dcc:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <remove_chain>
						if (res == FR_OK) {
    1dd0:	81 11       	cpse	r24, r1
    1dd2:	a9 c0       	rjmp	.+338    	; 0x1f26 <f_open+0x270>
							res = move_window(fs, sc);
    1dd4:	b5 01       	movw	r22, r10
    1dd6:	a4 01       	movw	r20, r8
    1dd8:	89 a5       	ldd	r24, Y+41	; 0x29
    1dda:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ddc:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    1de0:	e9 a5       	ldd	r30, Y+41	; 0x29
    1de2:	fa a5       	ldd	r31, Y+42	; 0x2a
    1de4:	91 e0       	ldi	r25, 0x01	; 1
    1de6:	49 1a       	sub	r4, r25
    1de8:	51 08       	sbc	r5, r1
    1dea:	61 08       	sbc	r6, r1
    1dec:	71 08       	sbc	r7, r1
    1dee:	43 86       	std	Z+11, r4	; 0x0b
    1df0:	54 86       	std	Z+12, r5	; 0x0c
    1df2:	65 86       	std	Z+13, r6	; 0x0d
    1df4:	76 86       	std	Z+14, r7	; 0x0e
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
    1df6:	88 23       	and	r24, r24
    1df8:	39 f0       	breq	.+14     	; 0x1e08 <f_open+0x152>
    1dfa:	95 c0       	rjmp	.+298    	; 0x1f26 <f_open+0x270>
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
    1dfc:	11 ff       	sbrs	r17, 1
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <f_open+0x14e>
    1e00:	80 fd       	sbrc	r24, 0
    1e02:	f2 c0       	rjmp	.+484    	; 0x1fe8 <f_open+0x332>
					}
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    1e04:	13 ff       	sbrs	r17, 3
    1e06:	03 c0       	rjmp	.+6      	; 0x1e0e <f_open+0x158>
    1e08:	ed 2d       	mov	r30, r13
    1e0a:	e0 64       	ori	r30, 0x40	; 64
    1e0c:	de 2e       	mov	r13, r30
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    1e0e:	e9 a5       	ldd	r30, Y+41	; 0x29
    1e10:	fa a5       	ldd	r31, Y+42	; 0x2a
    1e12:	83 a5       	ldd	r24, Z+43	; 0x2b
    1e14:	94 a5       	ldd	r25, Z+44	; 0x2c
    1e16:	a5 a5       	ldd	r26, Z+45	; 0x2d
    1e18:	b6 a5       	ldd	r27, Z+46	; 0x2e
    1e1a:	f1 01       	movw	r30, r2
    1e1c:	84 8f       	std	Z+28, r24	; 0x1c
    1e1e:	95 8f       	std	Z+29, r25	; 0x1d
    1e20:	a6 8f       	std	Z+30, r26	; 0x1e
    1e22:	b7 8f       	std	Z+31, r27	; 0x1f
			fp->dir_ptr = dj.dir;
    1e24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e28:	91 a3       	std	Z+33, r25	; 0x21
    1e2a:	80 a3       	std	Z+32, r24	; 0x20
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
    1e2c:	ab 8c       	ldd	r10, Y+27	; 0x1b
    1e2e:	bc 8c       	ldd	r11, Y+28	; 0x1c
    1e30:	09 a5       	ldd	r16, Y+41	; 0x29
    1e32:	1a a5       	ldd	r17, Y+42	; 0x2a
    1e34:	b5 01       	movw	r22, r10
    1e36:	c8 01       	movw	r24, r16
    1e38:	0e 94 75 0c 	call	0x18ea	; 0x18ea <ld_clust>
    1e3c:	2b 01       	movw	r4, r22
    1e3e:	3c 01       	movw	r6, r24
    1e40:	f1 01       	movw	r30, r2
    1e42:	66 83       	std	Z+6, r22	; 0x06
    1e44:	77 83       	std	Z+7, r23	; 0x07
    1e46:	80 87       	std	Z+8, r24	; 0x08
    1e48:	91 87       	std	Z+9, r25	; 0x09
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    1e4a:	c5 01       	movw	r24, r10
    1e4c:	4c 96       	adiw	r24, 0x1c	; 28
    1e4e:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    1e52:	4b 01       	movw	r8, r22
    1e54:	5c 01       	movw	r10, r24
    1e56:	f1 01       	movw	r30, r2
    1e58:	62 87       	std	Z+10, r22	; 0x0a
    1e5a:	73 87       	std	Z+11, r23	; 0x0b
    1e5c:	84 87       	std	Z+12, r24	; 0x0c
    1e5e:	95 87       	std	Z+13, r25	; 0x0d
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
    1e60:	11 83       	std	Z+1, r17	; 0x01
    1e62:	00 83       	st	Z, r16
			fp->obj.id = fs->id;
    1e64:	f8 01       	movw	r30, r16
    1e66:	85 81       	ldd	r24, Z+5	; 0x05
    1e68:	96 81       	ldd	r25, Z+6	; 0x06
    1e6a:	f1 01       	movw	r30, r2
    1e6c:	93 83       	std	Z+3, r25	; 0x03
    1e6e:	82 83       	std	Z+2, r24	; 0x02
			fp->flag = mode;		/* Set file access mode */
    1e70:	d6 86       	std	Z+14, r13	; 0x0e
			fp->err = 0;			/* Clear error flag */
    1e72:	17 86       	std	Z+15, r1	; 0x0f
			fp->sect = 0;			/* Invalidate current data sector */
    1e74:	10 8e       	std	Z+24, r1	; 0x18
    1e76:	11 8e       	std	Z+25, r1	; 0x19
    1e78:	12 8e       	std	Z+26, r1	; 0x1a
    1e7a:	13 8e       	std	Z+27, r1	; 0x1b
			fp->fptr = 0;			/* Set file pointer top of the file */
    1e7c:	10 8a       	std	Z+16, r1	; 0x10
    1e7e:	11 8a       	std	Z+17, r1	; 0x11
    1e80:	12 8a       	std	Z+18, r1	; 0x12
    1e82:	13 8a       	std	Z+19, r1	; 0x13
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    1e84:	d5 fe       	sbrs	r13, 5
    1e86:	82 c0       	rjmp	.+260    	; 0x1f8c <f_open+0x2d6>
    1e88:	81 14       	cp	r8, r1
    1e8a:	91 04       	cpc	r9, r1
    1e8c:	a1 04       	cpc	r10, r1
    1e8e:	b1 04       	cpc	r11, r1
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <f_open+0x1de>
    1e92:	7c c0       	rjmp	.+248    	; 0x1f8c <f_open+0x2d6>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    1e94:	80 8a       	std	Z+16, r8	; 0x10
    1e96:	91 8a       	std	Z+17, r9	; 0x11
    1e98:	a2 8a       	std	Z+18, r10	; 0x12
    1e9a:	b3 8a       	std	Z+19, r11	; 0x13
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	81 85       	ldd	r24, Z+9	; 0x09
    1ea0:	92 85       	ldd	r25, Z+10	; 0x0a
    1ea2:	a0 e0       	ldi	r26, 0x00	; 0
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	6c 01       	movw	r12, r24
    1ea8:	7d 01       	movw	r14, r26
    1eaa:	0b 2e       	mov	r0, r27
    1eac:	b9 e0       	ldi	r27, 0x09	; 9
    1eae:	cc 0c       	add	r12, r12
    1eb0:	dd 1c       	adc	r13, r13
    1eb2:	ee 1c       	adc	r14, r14
    1eb4:	ff 1c       	adc	r15, r15
    1eb6:	ba 95       	dec	r27
    1eb8:	d1 f7       	brne	.-12     	; 0x1eae <f_open+0x1f8>
    1eba:	b0 2d       	mov	r27, r0
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    1ebc:	c8 14       	cp	r12, r8
    1ebe:	d9 04       	cpc	r13, r9
    1ec0:	ea 04       	cpc	r14, r10
    1ec2:	fb 04       	cpc	r15, r11
    1ec4:	08 f0       	brcs	.+2      	; 0x1ec8 <f_open+0x212>
    1ec6:	50 c0       	rjmp	.+160    	; 0x1f68 <f_open+0x2b2>
					clst = get_fat(&fp->obj, clst);
    1ec8:	b3 01       	movw	r22, r6
    1eca:	a2 01       	movw	r20, r4
    1ecc:	c1 01       	movw	r24, r2
    1ece:	0e 94 b0 03 	call	0x760	; 0x760 <get_fat>
    1ed2:	2b 01       	movw	r4, r22
    1ed4:	3c 01       	movw	r6, r24
					if (clst <= 1) res = FR_INT_ERR;
    1ed6:	62 30       	cpi	r22, 0x02	; 2
    1ed8:	71 05       	cpc	r23, r1
    1eda:	81 05       	cpc	r24, r1
    1edc:	91 05       	cpc	r25, r1
    1ede:	08 f0       	brcs	.+2      	; 0x1ee2 <f_open+0x22c>
    1ee0:	78 c0       	rjmp	.+240    	; 0x1fd2 <f_open+0x31c>
    1ee2:	66 c0       	rjmp	.+204    	; 0x1fb0 <f_open+0x2fa>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					sc = clst2sect(fs, clst);
    1ee4:	b3 01       	movw	r22, r6
    1ee6:	a2 01       	movw	r20, r4
    1ee8:	89 a5       	ldd	r24, Y+41	; 0x29
    1eea:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eec:	0e 94 8a 00 	call	0x114	; 0x114 <clst2sect>
					if (sc == 0) {
    1ef0:	61 15       	cp	r22, r1
    1ef2:	71 05       	cpc	r23, r1
    1ef4:	81 05       	cpc	r24, r1
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <f_open+0x246>
    1efa:	46 c0       	rjmp	.+140    	; 0x1f88 <f_open+0x2d2>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    1efc:	07 2e       	mov	r0, r23
    1efe:	79 e0       	ldi	r23, 0x09	; 9
    1f00:	b6 94       	lsr	r11
    1f02:	a7 94       	ror	r10
    1f04:	97 94       	ror	r9
    1f06:	87 94       	ror	r8
    1f08:	7a 95       	dec	r23
    1f0a:	d1 f7       	brne	.-12     	; 0x1f00 <f_open+0x24a>
    1f0c:	70 2d       	mov	r23, r0
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	88 0d       	add	r24, r8
    1f14:	99 1d       	adc	r25, r9
    1f16:	aa 1d       	adc	r26, r10
    1f18:	bb 1d       	adc	r27, r11
    1f1a:	f1 01       	movw	r30, r2
    1f1c:	80 8f       	std	Z+24, r24	; 0x18
    1f1e:	91 8f       	std	Z+25, r25	; 0x19
    1f20:	a2 8f       	std	Z+26, r26	; 0x1a
    1f22:	b3 8f       	std	Z+27, r27	; 0x1b
    1f24:	33 c0       	rjmp	.+102    	; 0x1f8c <f_open+0x2d6>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    1f26:	f1 01       	movw	r30, r2
    1f28:	11 82       	std	Z+1, r1	; 0x01
    1f2a:	10 82       	st	Z, r1
    1f2c:	61 c0       	rjmp	.+194    	; 0x1ff0 <f_open+0x33a>
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    1f2e:	89 e0       	ldi	r24, 0x09	; 9
    1f30:	5f c0       	rjmp	.+190    	; 0x1ff0 <f_open+0x33a>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1f32:	41 2f       	mov	r20, r17
    1f34:	4c 71       	andi	r20, 0x1C	; 28
    1f36:	59 f0       	breq	.+22     	; 0x1f4e <f_open+0x298>
    1f38:	fd ce       	rjmp	.-518    	; 0x1d34 <f_open+0x7e>
    1f3a:	41 2f       	mov	r20, r17
    1f3c:	4c 71       	andi	r20, 0x1C	; 28
    1f3e:	41 f5       	brne	.+80     	; 0x1f90 <f_open+0x2da>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
				res = FR_INVALID_NAME;
    1f40:	86 e0       	ldi	r24, 0x06	; 6
    1f42:	05 c0       	rjmp	.+10     	; 0x1f4e <f_open+0x298>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1f44:	81 2f       	mov	r24, r17
    1f46:	8c 71       	andi	r24, 0x1C	; 28
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <f_open+0x296>
    1f4a:	01 cf       	rjmp	.-510    	; 0x1d4e <f_open+0x98>
    1f4c:	26 c0       	rjmp	.+76     	; 0x1f9a <f_open+0x2e4>
				}
			}
		}
#endif

		if (res == FR_OK) {
    1f4e:	81 11       	cpse	r24, r1
    1f50:	ea cf       	rjmp	.-44     	; 0x1f26 <f_open+0x270>
    1f52:	6c cf       	rjmp	.-296    	; 0x1e2c <f_open+0x176>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
    1f54:	8f ef       	ldi	r24, 0xFF	; 255
    1f56:	9f ef       	ldi	r25, 0xFF	; 255
    1f58:	dc 01       	movw	r26, r24
    1f5a:	f1 01       	movw	r30, r2
    1f5c:	84 8b       	std	Z+20, r24	; 0x14
    1f5e:	95 8b       	std	Z+21, r25	; 0x15
    1f60:	a6 8b       	std	Z+22, r26	; 0x16
    1f62:	b7 8b       	std	Z+23, r27	; 0x17
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	df cf       	rjmp	.-66     	; 0x1f26 <f_open+0x270>
				}
				fp->clust = clst;
    1f68:	f1 01       	movw	r30, r2
    1f6a:	44 8a       	std	Z+20, r4	; 0x14
    1f6c:	55 8a       	std	Z+21, r5	; 0x15
    1f6e:	66 8a       	std	Z+22, r6	; 0x16
    1f70:	77 8a       	std	Z+23, r7	; 0x17
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    1f72:	d5 01       	movw	r26, r10
    1f74:	c4 01       	movw	r24, r8
    1f76:	91 70       	andi	r25, 0x01	; 1
    1f78:	aa 27       	eor	r26, r26
    1f7a:	bb 27       	eor	r27, r27
    1f7c:	89 2b       	or	r24, r25
    1f7e:	8a 2b       	or	r24, r26
    1f80:	8b 2b       	or	r24, r27
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <f_open+0x2d0>
    1f84:	af cf       	rjmp	.-162    	; 0x1ee4 <f_open+0x22e>
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <f_open+0x2d6>
					sc = clst2sect(fs, clst);
					if (sc == 0) {
						res = FR_INT_ERR;
    1f88:	82 e0       	ldi	r24, 0x02	; 2
    1f8a:	cd cf       	rjmp	.-102    	; 0x1f26 <f_open+0x270>
		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	30 c0       	rjmp	.+96     	; 0x1ff0 <f_open+0x33a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
				res = FR_INVALID_NAME;
    1f90:	86 e0       	ldi	r24, 0x06	; 6
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1f92:	fd 2d       	mov	r31, r13
    1f94:	f8 60       	ori	r31, 0x08	; 8
    1f96:	df 2e       	mov	r13, r31
    1f98:	da cf       	rjmp	.-76     	; 0x1f4e <f_open+0x298>
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
    1f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9c:	84 fd       	sbrc	r24, 4
    1f9e:	26 c0       	rjmp	.+76     	; 0x1fec <f_open+0x336>
    1fa0:	2d cf       	rjmp	.-422    	; 0x1dfc <f_open+0x146>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
    1fa2:	f1 01       	movw	r30, r2
    1fa4:	44 8a       	std	Z+20, r4	; 0x14
    1fa6:	55 8a       	std	Z+21, r5	; 0x15
    1fa8:	66 8a       	std	Z+22, r6	; 0x16
    1faa:	77 8a       	std	Z+23, r7	; 0x17
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
    1fac:	82 e0       	ldi	r24, 0x02	; 2
    1fae:	bb cf       	rjmp	.-138    	; 0x1f26 <f_open+0x270>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    1fb0:	6f 3f       	cpi	r22, 0xFF	; 255
    1fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb8:	69 f2       	breq	.-102    	; 0x1f54 <f_open+0x29e>
    1fba:	f3 cf       	rjmp	.-26     	; 0x1fa2 <f_open+0x2ec>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    1fbc:	8c 18       	sub	r8, r12
    1fbe:	9d 08       	sbc	r9, r13
    1fc0:	ae 08       	sbc	r10, r14
    1fc2:	bf 08       	sbc	r11, r15
    1fc4:	c8 14       	cp	r12, r8
    1fc6:	d9 04       	cpc	r13, r9
    1fc8:	ea 04       	cpc	r14, r10
    1fca:	fb 04       	cpc	r15, r11
    1fcc:	08 f4       	brcc	.+2      	; 0x1fd0 <f_open+0x31a>
    1fce:	7c cf       	rjmp	.-264    	; 0x1ec8 <f_open+0x212>
    1fd0:	cb cf       	rjmp	.-106    	; 0x1f68 <f_open+0x2b2>
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    1fd2:	8f ef       	ldi	r24, 0xFF	; 255
    1fd4:	48 16       	cp	r4, r24
    1fd6:	58 06       	cpc	r5, r24
    1fd8:	68 06       	cpc	r6, r24
    1fda:	78 06       	cpc	r7, r24
    1fdc:	79 f7       	brne	.-34     	; 0x1fbc <f_open+0x306>
    1fde:	ba cf       	rjmp	.-140    	; 0x1f54 <f_open+0x29e>
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    1fe0:	87 e0       	ldi	r24, 0x07	; 7
    1fe2:	a1 cf       	rjmp	.-190    	; 0x1f26 <f_open+0x270>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    1fe4:	88 e0       	ldi	r24, 0x08	; 8
    1fe6:	9f cf       	rjmp	.-194    	; 0x1f26 <f_open+0x270>
			if (res == FR_OK) {					/* Is the object exsiting? */
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
						res = FR_DENIED;
    1fe8:	87 e0       	ldi	r24, 0x07	; 7
    1fea:	9d cf       	rjmp	.-198    	; 0x1f26 <f_open+0x270>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
					res = FR_NO_FILE;
    1fec:	84 e0       	ldi	r24, 0x04	; 4
    1fee:	9b cf       	rjmp	.-202    	; 0x1f26 <f_open+0x270>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
}
    1ff0:	ac 96       	adiw	r28, 0x2c	; 44
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
    1ffc:	df 91       	pop	r29
    1ffe:	cf 91       	pop	r28
    2000:	1f 91       	pop	r17
    2002:	0f 91       	pop	r16
    2004:	ff 90       	pop	r15
    2006:	ef 90       	pop	r14
    2008:	df 90       	pop	r13
    200a:	cf 90       	pop	r12
    200c:	bf 90       	pop	r11
    200e:	af 90       	pop	r10
    2010:	9f 90       	pop	r9
    2012:	8f 90       	pop	r8
    2014:	7f 90       	pop	r7
    2016:	6f 90       	pop	r6
    2018:	5f 90       	pop	r5
    201a:	4f 90       	pop	r4
    201c:	3f 90       	pop	r3
    201e:	2f 90       	pop	r2
    2020:	08 95       	ret

00002022 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
    2022:	2f 92       	push	r2
    2024:	3f 92       	push	r3
    2026:	4f 92       	push	r4
    2028:	5f 92       	push	r5
    202a:	6f 92       	push	r6
    202c:	7f 92       	push	r7
    202e:	8f 92       	push	r8
    2030:	9f 92       	push	r9
    2032:	af 92       	push	r10
    2034:	bf 92       	push	r11
    2036:	cf 92       	push	r12
    2038:	df 92       	push	r13
    203a:	ef 92       	push	r14
    203c:	ff 92       	push	r15
    203e:	0f 93       	push	r16
    2040:	1f 93       	push	r17
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	00 d0       	rcall	.+0      	; 0x2048 <f_read+0x26>
    2048:	00 d0       	rcall	.+0      	; 0x204a <f_read+0x28>
    204a:	00 d0       	rcall	.+0      	; 0x204c <f_read+0x2a>
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	7c 01       	movw	r14, r24
    2052:	3b 01       	movw	r6, r22
    2054:	5a 01       	movw	r10, r20
    2056:	49 01       	movw	r8, r18
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    2058:	f9 01       	movw	r30, r18
    205a:	11 82       	std	Z+1, r1	; 0x01
    205c:	10 82       	st	Z, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
    205e:	8d 83       	std	Y+5, r24	; 0x05
    2060:	fe 82       	std	Y+6, r15	; 0x06
    2062:	be 01       	movw	r22, r28
    2064:	6f 5f       	subi	r22, 0xFF	; 255
    2066:	7f 4f       	sbci	r23, 0xFF	; 255
    2068:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    206c:	81 11       	cpse	r24, r1
    206e:	23 c1       	rjmp	.+582    	; 0x22b6 <f_read+0x294>
    2070:	f7 01       	movw	r30, r14
    2072:	87 85       	ldd	r24, Z+15	; 0x0f
    2074:	81 11       	cpse	r24, r1
    2076:	1f c1       	rjmp	.+574    	; 0x22b6 <f_read+0x294>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    2078:	86 85       	ldd	r24, Z+14	; 0x0e
    207a:	80 ff       	sbrs	r24, 0
    207c:	19 c1       	rjmp	.+562    	; 0x22b0 <f_read+0x28e>
	remain = fp->obj.objsize - fp->fptr;
    207e:	82 85       	ldd	r24, Z+10	; 0x0a
    2080:	93 85       	ldd	r25, Z+11	; 0x0b
    2082:	a4 85       	ldd	r26, Z+12	; 0x0c
    2084:	b5 85       	ldd	r27, Z+13	; 0x0d
    2086:	40 89       	ldd	r20, Z+16	; 0x10
    2088:	51 89       	ldd	r21, Z+17	; 0x11
    208a:	62 89       	ldd	r22, Z+18	; 0x12
    208c:	73 89       	ldd	r23, Z+19	; 0x13
    208e:	84 1b       	sub	r24, r20
    2090:	95 0b       	sbc	r25, r21
    2092:	a6 0b       	sbc	r26, r22
    2094:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    2096:	a5 01       	movw	r20, r10
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	70 e0       	ldi	r23, 0x00	; 0
    209c:	84 17       	cp	r24, r20
    209e:	95 07       	cpc	r25, r21
    20a0:	a6 07       	cpc	r26, r22
    20a2:	b7 07       	cpc	r27, r23
    20a4:	08 f4       	brcc	.+2      	; 0x20a8 <f_read+0x86>
    20a6:	5c 01       	movw	r10, r24

	for ( ;  btr;								/* Repeat until btr bytes read */
    20a8:	a1 14       	cp	r10, r1
    20aa:	b1 04       	cpc	r11, r1
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <f_read+0x8e>
    20ae:	02 c1       	rjmp	.+516    	; 0x22b4 <f_read+0x292>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
    20b0:	f7 01       	movw	r30, r14
    20b2:	80 89       	ldd	r24, Z+16	; 0x10
    20b4:	91 89       	ldd	r25, Z+17	; 0x11
    20b6:	a2 89       	ldd	r26, Z+18	; 0x12
    20b8:	b3 89       	ldd	r27, Z+19	; 0x13
    20ba:	ac 01       	movw	r20, r24
    20bc:	bd 01       	movw	r22, r26
    20be:	51 70       	andi	r21, 0x01	; 1
    20c0:	66 27       	eor	r22, r22
    20c2:	77 27       	eor	r23, r23
    20c4:	45 2b       	or	r20, r21
    20c6:	46 2b       	or	r20, r22
    20c8:	47 2b       	or	r20, r23
    20ca:	09 f0       	breq	.+2      	; 0x20ce <f_read+0xac>
    20cc:	a9 c0       	rjmp	.+338    	; 0x2220 <f_read+0x1fe>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
    20ce:	e9 81       	ldd	r30, Y+1	; 0x01
    20d0:	fa 81       	ldd	r31, Y+2	; 0x02
    20d2:	01 85       	ldd	r16, Z+9	; 0x09
    20d4:	12 85       	ldd	r17, Z+10	; 0x0a
    20d6:	01 50       	subi	r16, 0x01	; 1
    20d8:	11 09       	sbc	r17, r1
    20da:	ac 01       	movw	r20, r24
    20dc:	bd 01       	movw	r22, r26
    20de:	03 2e       	mov	r0, r19
    20e0:	39 e0       	ldi	r19, 0x09	; 9
    20e2:	76 95       	lsr	r23
    20e4:	67 95       	ror	r22
    20e6:	57 95       	ror	r21
    20e8:	47 95       	ror	r20
    20ea:	3a 95       	dec	r19
    20ec:	d1 f7       	brne	.-12     	; 0x20e2 <f_read+0xc0>
    20ee:	30 2d       	mov	r19, r0
    20f0:	04 23       	and	r16, r20
    20f2:	15 23       	and	r17, r21
			if (csect == 0) {					/* On the cluster boundary? */
    20f4:	01 15       	cp	r16, r1
    20f6:	11 05       	cpc	r17, r1
    20f8:	59 f5       	brne	.+86     	; 0x2150 <f_read+0x12e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    20fa:	89 2b       	or	r24, r25
    20fc:	8a 2b       	or	r24, r26
    20fe:	8b 2b       	or	r24, r27
    2100:	31 f4       	brne	.+12     	; 0x210e <f_read+0xec>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    2102:	f7 01       	movw	r30, r14
    2104:	66 81       	ldd	r22, Z+6	; 0x06
    2106:	77 81       	ldd	r23, Z+7	; 0x07
    2108:	80 85       	ldd	r24, Z+8	; 0x08
    210a:	91 85       	ldd	r25, Z+9	; 0x09
    210c:	09 c0       	rjmp	.+18     	; 0x2120 <f_read+0xfe>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
    210e:	f7 01       	movw	r30, r14
    2110:	44 89       	ldd	r20, Z+20	; 0x14
    2112:	55 89       	ldd	r21, Z+21	; 0x15
    2114:	66 89       	ldd	r22, Z+22	; 0x16
    2116:	77 89       	ldd	r23, Z+23	; 0x17
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	9e 81       	ldd	r25, Y+6	; 0x06
    211c:	0e 94 b0 03 	call	0x760	; 0x760 <get_fat>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    2120:	62 30       	cpi	r22, 0x02	; 2
    2122:	71 05       	cpc	r23, r1
    2124:	81 05       	cpc	r24, r1
    2126:	91 05       	cpc	r25, r1
    2128:	20 f4       	brcc	.+8      	; 0x2132 <f_read+0x110>
    212a:	82 e0       	ldi	r24, 0x02	; 2
    212c:	f7 01       	movw	r30, r14
    212e:	87 87       	std	Z+15, r24	; 0x0f
    2130:	c2 c0       	rjmp	.+388    	; 0x22b6 <f_read+0x294>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    2132:	6f 3f       	cpi	r22, 0xFF	; 255
    2134:	ff ef       	ldi	r31, 0xFF	; 255
    2136:	7f 07       	cpc	r23, r31
    2138:	8f 07       	cpc	r24, r31
    213a:	9f 07       	cpc	r25, r31
    213c:	21 f4       	brne	.+8      	; 0x2146 <f_read+0x124>
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	f7 01       	movw	r30, r14
    2142:	87 87       	std	Z+15, r24	; 0x0f
    2144:	b8 c0       	rjmp	.+368    	; 0x22b6 <f_read+0x294>
				fp->clust = clst;				/* Update current cluster */
    2146:	f7 01       	movw	r30, r14
    2148:	64 8b       	std	Z+20, r22	; 0x14
    214a:	75 8b       	std	Z+21, r23	; 0x15
    214c:	86 8b       	std	Z+22, r24	; 0x16
    214e:	97 8b       	std	Z+23, r25	; 0x17
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	9c 83       	std	Y+4, r25	; 0x04
    2156:	8b 83       	std	Y+3, r24	; 0x03
    2158:	f7 01       	movw	r30, r14
    215a:	44 89       	ldd	r20, Z+20	; 0x14
    215c:	55 89       	ldd	r21, Z+21	; 0x15
    215e:	66 89       	ldd	r22, Z+22	; 0x16
    2160:	77 89       	ldd	r23, Z+23	; 0x17
    2162:	0e 94 8a 00 	call	0x114	; 0x114 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    2166:	61 15       	cp	r22, r1
    2168:	71 05       	cpc	r23, r1
    216a:	81 05       	cpc	r24, r1
    216c:	91 05       	cpc	r25, r1
    216e:	21 f4       	brne	.+8      	; 0x2178 <f_read+0x156>
    2170:	82 e0       	ldi	r24, 0x02	; 2
    2172:	f7 01       	movw	r30, r14
    2174:	87 87       	std	Z+15, r24	; 0x0f
    2176:	9f c0       	rjmp	.+318    	; 0x22b6 <f_read+0x294>
			sect += csect;
    2178:	1b 01       	movw	r2, r22
    217a:	2c 01       	movw	r4, r24
    217c:	20 0e       	add	r2, r16
    217e:	31 1e       	adc	r3, r17
    2180:	41 1c       	adc	r4, r1
    2182:	51 1c       	adc	r5, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
    2184:	65 01       	movw	r12, r10
    2186:	cd 2c       	mov	r12, r13
    2188:	dd 24       	eor	r13, r13
    218a:	c6 94       	lsr	r12
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
    218c:	c1 14       	cp	r12, r1
    218e:	d1 04       	cpc	r13, r1
    2190:	09 f4       	brne	.+2      	; 0x2194 <f_read+0x172>
    2192:	41 c0       	rjmp	.+130    	; 0x2216 <f_read+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    2194:	eb 81       	ldd	r30, Y+3	; 0x03
    2196:	fc 81       	ldd	r31, Y+4	; 0x04
    2198:	81 85       	ldd	r24, Z+9	; 0x09
    219a:	92 85       	ldd	r25, Z+10	; 0x0a
    219c:	98 01       	movw	r18, r16
    219e:	2c 0d       	add	r18, r12
    21a0:	3d 1d       	adc	r19, r13
    21a2:	82 17       	cp	r24, r18
    21a4:	93 07       	cpc	r25, r19
    21a6:	18 f4       	brcc	.+6      	; 0x21ae <f_read+0x18c>
					cc = fs->csize - csect;
    21a8:	6c 01       	movw	r12, r24
    21aa:	c0 1a       	sub	r12, r16
    21ac:	d1 0a       	sbc	r13, r17
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    21ae:	86 01       	movw	r16, r12
    21b0:	a2 01       	movw	r20, r4
    21b2:	91 01       	movw	r18, r2
    21b4:	b3 01       	movw	r22, r6
    21b6:	eb 81       	ldd	r30, Y+3	; 0x03
    21b8:	fc 81       	ldd	r31, Y+4	; 0x04
    21ba:	81 81       	ldd	r24, Z+1	; 0x01
    21bc:	0e 94 21 1a 	call	0x3442	; 0x3442 <disk_read>
    21c0:	88 23       	and	r24, r24
    21c2:	21 f0       	breq	.+8      	; 0x21cc <f_read+0x1aa>
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	f7 01       	movw	r30, r14
    21c8:	87 87       	std	Z+15, r24	; 0x0f
    21ca:	75 c0       	rjmp	.+234    	; 0x22b6 <f_read+0x294>
#if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
    21cc:	e9 81       	ldd	r30, Y+1	; 0x01
    21ce:	fa 81       	ldd	r31, Y+2	; 0x02
    21d0:	83 81       	ldd	r24, Z+3	; 0x03
    21d2:	88 23       	and	r24, r24
    21d4:	e1 f0       	breq	.+56     	; 0x220e <f_read+0x1ec>
    21d6:	83 a5       	ldd	r24, Z+43	; 0x2b
    21d8:	94 a5       	ldd	r25, Z+44	; 0x2c
    21da:	a5 a5       	ldd	r26, Z+45	; 0x2d
    21dc:	b6 a5       	ldd	r27, Z+46	; 0x2e
    21de:	82 19       	sub	r24, r2
    21e0:	93 09       	sbc	r25, r3
    21e2:	a4 09       	sbc	r26, r4
    21e4:	b5 09       	sbc	r27, r5
    21e6:	a6 01       	movw	r20, r12
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	84 17       	cp	r24, r20
    21ee:	95 07       	cpc	r25, r21
    21f0:	a6 07       	cpc	r26, r22
    21f2:	b7 07       	cpc	r27, r23
    21f4:	60 f4       	brcc	.+24     	; 0x220e <f_read+0x1ec>
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
    21f6:	bf 01       	movw	r22, r30
    21f8:	61 5d       	subi	r22, 0xD1	; 209
    21fa:	7f 4f       	sbci	r23, 0xFF	; 255
    21fc:	98 2f       	mov	r25, r24
    21fe:	88 27       	eor	r24, r24
    2200:	99 0f       	add	r25, r25
    2202:	40 e0       	ldi	r20, 0x00	; 0
    2204:	52 e0       	ldi	r21, 0x02	; 2
    2206:	86 0d       	add	r24, r6
    2208:	97 1d       	adc	r25, r7
    220a:	0e 94 6e 00 	call	0xdc	; 0xdc <mem_cpy>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
    220e:	dc 2c       	mov	r13, r12
    2210:	cc 24       	eor	r12, r12
    2212:	dd 0c       	add	r13, r13
				continue;
    2214:	2f c0       	rjmp	.+94     	; 0x2274 <f_read+0x252>
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
			}
#endif
			fp->sect = sect;
    2216:	f7 01       	movw	r30, r14
    2218:	20 8e       	std	Z+24, r2	; 0x18
    221a:	31 8e       	std	Z+25, r3	; 0x19
    221c:	42 8e       	std	Z+26, r4	; 0x1a
    221e:	53 8e       	std	Z+27, r5	; 0x1b
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    2220:	f7 01       	movw	r30, r14
    2222:	80 89       	ldd	r24, Z+16	; 0x10
    2224:	91 89       	ldd	r25, Z+17	; 0x11
    2226:	91 70       	andi	r25, 0x01	; 1
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	32 e0       	ldi	r19, 0x02	; 2
    222c:	69 01       	movw	r12, r18
    222e:	c8 1a       	sub	r12, r24
    2230:	d9 0a       	sbc	r13, r25
    2232:	ac 14       	cp	r10, r12
    2234:	bd 04       	cpc	r11, r13
    2236:	08 f4       	brcc	.+2      	; 0x223a <f_read+0x218>
    2238:	65 01       	movw	r12, r10
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    223a:	f7 01       	movw	r30, r14
    223c:	40 8d       	ldd	r20, Z+24	; 0x18
    223e:	51 8d       	ldd	r21, Z+25	; 0x19
    2240:	62 8d       	ldd	r22, Z+26	; 0x1a
    2242:	73 8d       	ldd	r23, Z+27	; 0x1b
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
    224c:	88 23       	and	r24, r24
    224e:	21 f0       	breq	.+8      	; 0x2258 <f_read+0x236>
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	f7 01       	movw	r30, r14
    2254:	87 87       	std	Z+15, r24	; 0x0f
    2256:	2f c0       	rjmp	.+94     	; 0x22b6 <f_read+0x294>
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
    2258:	69 81       	ldd	r22, Y+1	; 0x01
    225a:	7a 81       	ldd	r23, Y+2	; 0x02
    225c:	61 5d       	subi	r22, 0xD1	; 209
    225e:	7f 4f       	sbci	r23, 0xFF	; 255
    2260:	f7 01       	movw	r30, r14
    2262:	80 89       	ldd	r24, Z+16	; 0x10
    2264:	91 89       	ldd	r25, Z+17	; 0x11
    2266:	91 70       	andi	r25, 0x01	; 1
    2268:	68 0f       	add	r22, r24
    226a:	79 1f       	adc	r23, r25
    226c:	a6 01       	movw	r20, r12
    226e:	c3 01       	movw	r24, r6
    2270:	0e 94 6e 00 	call	0xdc	; 0xdc <mem_cpy>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until btr bytes read */
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
    2274:	ac 18       	sub	r10, r12
    2276:	bd 08       	sbc	r11, r13
    2278:	f4 01       	movw	r30, r8
    227a:	80 81       	ld	r24, Z
    227c:	91 81       	ldd	r25, Z+1	; 0x01
    227e:	8c 0d       	add	r24, r12
    2280:	9d 1d       	adc	r25, r13
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	80 83       	st	Z, r24
    2286:	6c 0c       	add	r6, r12
    2288:	7d 1c       	adc	r7, r13
    228a:	f7 01       	movw	r30, r14
    228c:	80 89       	ldd	r24, Z+16	; 0x10
    228e:	91 89       	ldd	r25, Z+17	; 0x11
    2290:	a2 89       	ldd	r26, Z+18	; 0x12
    2292:	b3 89       	ldd	r27, Z+19	; 0x13
    2294:	8c 0d       	add	r24, r12
    2296:	9d 1d       	adc	r25, r13
    2298:	a1 1d       	adc	r26, r1
    229a:	b1 1d       	adc	r27, r1
    229c:	80 8b       	std	Z+16, r24	; 0x10
    229e:	91 8b       	std	Z+17, r25	; 0x11
    22a0:	a2 8b       	std	Z+18, r26	; 0x12
    22a2:	b3 8b       	std	Z+19, r27	; 0x13
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until btr bytes read */
    22a4:	a1 14       	cp	r10, r1
    22a6:	b1 04       	cpc	r11, r1
    22a8:	09 f0       	breq	.+2      	; 0x22ac <f_read+0x28a>
    22aa:	02 cf       	rjmp	.-508    	; 0x20b0 <f_read+0x8e>
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	03 c0       	rjmp	.+6      	; 0x22b6 <f_read+0x294>


	*br = 0;	/* Clear read byte counter */
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    22b0:	87 e0       	ldi	r24, 0x07	; 7
    22b2:	01 c0       	rjmp	.+2      	; 0x22b6 <f_read+0x294>
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
    22b4:	80 e0       	ldi	r24, 0x00	; 0
}
    22b6:	26 96       	adiw	r28, 0x06	; 6
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	1f 91       	pop	r17
    22c8:	0f 91       	pop	r16
    22ca:	ff 90       	pop	r15
    22cc:	ef 90       	pop	r14
    22ce:	df 90       	pop	r13
    22d0:	cf 90       	pop	r12
    22d2:	bf 90       	pop	r11
    22d4:	af 90       	pop	r10
    22d6:	9f 90       	pop	r9
    22d8:	8f 90       	pop	r8
    22da:	7f 90       	pop	r7
    22dc:	6f 90       	pop	r6
    22de:	5f 90       	pop	r5
    22e0:	4f 90       	pop	r4
    22e2:	3f 90       	pop	r3
    22e4:	2f 90       	pop	r2
    22e6:	08 95       	ret

000022e8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    22e8:	2f 92       	push	r2
    22ea:	3f 92       	push	r3
    22ec:	4f 92       	push	r4
    22ee:	5f 92       	push	r5
    22f0:	6f 92       	push	r6
    22f2:	7f 92       	push	r7
    22f4:	8f 92       	push	r8
    22f6:	9f 92       	push	r9
    22f8:	af 92       	push	r10
    22fa:	bf 92       	push	r11
    22fc:	cf 92       	push	r12
    22fe:	df 92       	push	r13
    2300:	ef 92       	push	r14
    2302:	ff 92       	push	r15
    2304:	0f 93       	push	r16
    2306:	1f 93       	push	r17
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	00 d0       	rcall	.+0      	; 0x230e <f_write+0x26>
    230e:	00 d0       	rcall	.+0      	; 0x2310 <f_write+0x28>
    2310:	00 d0       	rcall	.+0      	; 0x2312 <f_write+0x2a>
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	7c 01       	movw	r14, r24
    2318:	3b 01       	movw	r6, r22
    231a:	5a 01       	movw	r10, r20
    231c:	49 01       	movw	r8, r18
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    231e:	f9 01       	movw	r30, r18
    2320:	11 82       	std	Z+1, r1	; 0x01
    2322:	10 82       	st	Z, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
    2324:	8d 83       	std	Y+5, r24	; 0x05
    2326:	fe 82       	std	Y+6, r15	; 0x06
    2328:	be 01       	movw	r22, r28
    232a:	6f 5f       	subi	r22, 0xFF	; 255
    232c:	7f 4f       	sbci	r23, 0xFF	; 255
    232e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    2332:	81 11       	cpse	r24, r1
    2334:	8d c1       	rjmp	.+794    	; 0x2650 <f_write+0x368>
    2336:	f7 01       	movw	r30, r14
    2338:	87 85       	ldd	r24, Z+15	; 0x0f
    233a:	81 11       	cpse	r24, r1
    233c:	89 c1       	rjmp	.+786    	; 0x2650 <f_write+0x368>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    233e:	86 85       	ldd	r24, Z+14	; 0x0e
    2340:	81 ff       	sbrs	r24, 1
    2342:	85 c1       	rjmp	.+778    	; 0x264e <f_write+0x366>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    2344:	80 89       	ldd	r24, Z+16	; 0x10
    2346:	91 89       	ldd	r25, Z+17	; 0x11
    2348:	a2 89       	ldd	r26, Z+18	; 0x12
    234a:	b3 89       	ldd	r27, Z+19	; 0x13
    234c:	ac 01       	movw	r20, r24
    234e:	bd 01       	movw	r22, r26
    2350:	4a 0d       	add	r20, r10
    2352:	5b 1d       	adc	r21, r11
    2354:	61 1d       	adc	r22, r1
    2356:	71 1d       	adc	r23, r1
    2358:	48 17       	cp	r20, r24
    235a:	59 07       	cpc	r21, r25
    235c:	6a 07       	cpc	r22, r26
    235e:	7b 07       	cpc	r23, r27
    2360:	18 f4       	brcc	.+6      	; 0x2368 <f_write+0x80>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    2362:	5c 01       	movw	r10, r24
    2364:	a0 94       	com	r10
    2366:	b0 94       	com	r11
	}

	for ( ;  btw;							/* Repeat until all data written */
    2368:	a1 14       	cp	r10, r1
    236a:	b1 04       	cpc	r11, r1
    236c:	09 f4       	brne	.+2      	; 0x2370 <f_write+0x88>
    236e:	69 c1       	rjmp	.+722    	; 0x2642 <f_write+0x35a>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    2370:	f7 01       	movw	r30, r14
    2372:	80 89       	ldd	r24, Z+16	; 0x10
    2374:	91 89       	ldd	r25, Z+17	; 0x11
    2376:	a2 89       	ldd	r26, Z+18	; 0x12
    2378:	b3 89       	ldd	r27, Z+19	; 0x13
    237a:	ac 01       	movw	r20, r24
    237c:	bd 01       	movw	r22, r26
    237e:	51 70       	andi	r21, 0x01	; 1
    2380:	66 27       	eor	r22, r22
    2382:	77 27       	eor	r23, r23
    2384:	45 2b       	or	r20, r21
    2386:	46 2b       	or	r20, r22
    2388:	47 2b       	or	r20, r23
    238a:	09 f0       	breq	.+2      	; 0x238e <f_write+0xa6>
    238c:	00 c1       	rjmp	.+512    	; 0x258e <f_write+0x2a6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    238e:	e9 81       	ldd	r30, Y+1	; 0x01
    2390:	fa 81       	ldd	r31, Y+2	; 0x02
    2392:	01 85       	ldd	r16, Z+9	; 0x09
    2394:	12 85       	ldd	r17, Z+10	; 0x0a
    2396:	01 50       	subi	r16, 0x01	; 1
    2398:	11 09       	sbc	r17, r1
    239a:	ac 01       	movw	r20, r24
    239c:	bd 01       	movw	r22, r26
    239e:	03 2e       	mov	r0, r19
    23a0:	39 e0       	ldi	r19, 0x09	; 9
    23a2:	76 95       	lsr	r23
    23a4:	67 95       	ror	r22
    23a6:	57 95       	ror	r21
    23a8:	47 95       	ror	r20
    23aa:	3a 95       	dec	r19
    23ac:	d1 f7       	brne	.-12     	; 0x23a2 <f_write+0xba>
    23ae:	30 2d       	mov	r19, r0
    23b0:	04 23       	and	r16, r20
    23b2:	15 23       	and	r17, r21
			if (csect == 0) {				/* On the cluster boundary? */
    23b4:	01 15       	cp	r16, r1
    23b6:	11 05       	cpc	r17, r1
    23b8:	09 f0       	breq	.+2      	; 0x23bc <f_write+0xd4>
    23ba:	49 c0       	rjmp	.+146    	; 0x244e <f_write+0x166>
				if (fp->fptr == 0) {		/* On the top of the file? */
    23bc:	89 2b       	or	r24, r25
    23be:	8a 2b       	or	r24, r26
    23c0:	8b 2b       	or	r24, r27
    23c2:	91 f4       	brne	.+36     	; 0x23e8 <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
    23c4:	f7 01       	movw	r30, r14
    23c6:	66 81       	ldd	r22, Z+6	; 0x06
    23c8:	77 81       	ldd	r23, Z+7	; 0x07
    23ca:	80 85       	ldd	r24, Z+8	; 0x08
    23cc:	91 85       	ldd	r25, Z+9	; 0x09
					if (clst == 0) {		/* If no cluster is allocated, */
    23ce:	61 15       	cp	r22, r1
    23d0:	71 05       	cpc	r23, r1
    23d2:	81 05       	cpc	r24, r1
    23d4:	91 05       	cpc	r25, r1
    23d6:	b9 f4       	brne	.+46     	; 0x2406 <f_write+0x11e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    23d8:	40 e0       	ldi	r20, 0x00	; 0
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	ba 01       	movw	r22, r20
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <create_chain>
    23e6:	09 c0       	rjmp	.+18     	; 0x23fa <f_write+0x112>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    23e8:	f7 01       	movw	r30, r14
    23ea:	44 89       	ldd	r20, Z+20	; 0x14
    23ec:	55 89       	ldd	r21, Z+21	; 0x15
    23ee:	66 89       	ldd	r22, Z+22	; 0x16
    23f0:	77 89       	ldd	r23, Z+23	; 0x17
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <create_chain>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    23fa:	61 15       	cp	r22, r1
    23fc:	71 05       	cpc	r23, r1
    23fe:	81 05       	cpc	r24, r1
    2400:	91 05       	cpc	r25, r1
    2402:	09 f4       	brne	.+2      	; 0x2406 <f_write+0x11e>
    2404:	1e c1       	rjmp	.+572    	; 0x2642 <f_write+0x35a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    2406:	61 30       	cpi	r22, 0x01	; 1
    2408:	71 05       	cpc	r23, r1
    240a:	81 05       	cpc	r24, r1
    240c:	91 05       	cpc	r25, r1
    240e:	21 f4       	brne	.+8      	; 0x2418 <f_write+0x130>
    2410:	82 e0       	ldi	r24, 0x02	; 2
    2412:	f7 01       	movw	r30, r14
    2414:	87 87       	std	Z+15, r24	; 0x0f
    2416:	1c c1       	rjmp	.+568    	; 0x2650 <f_write+0x368>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    2418:	6f 3f       	cpi	r22, 0xFF	; 255
    241a:	ff ef       	ldi	r31, 0xFF	; 255
    241c:	7f 07       	cpc	r23, r31
    241e:	8f 07       	cpc	r24, r31
    2420:	9f 07       	cpc	r25, r31
    2422:	21 f4       	brne	.+8      	; 0x242c <f_write+0x144>
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	f7 01       	movw	r30, r14
    2428:	87 87       	std	Z+15, r24	; 0x0f
    242a:	12 c1       	rjmp	.+548    	; 0x2650 <f_write+0x368>
				fp->clust = clst;			/* Update current cluster */
    242c:	f7 01       	movw	r30, r14
    242e:	64 8b       	std	Z+20, r22	; 0x14
    2430:	75 8b       	std	Z+21, r23	; 0x15
    2432:	86 8b       	std	Z+22, r24	; 0x16
    2434:	97 8b       	std	Z+23, r25	; 0x17
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    2436:	26 81       	ldd	r18, Z+6	; 0x06
    2438:	37 81       	ldd	r19, Z+7	; 0x07
    243a:	40 85       	ldd	r20, Z+8	; 0x08
    243c:	51 85       	ldd	r21, Z+9	; 0x09
    243e:	23 2b       	or	r18, r19
    2440:	24 2b       	or	r18, r20
    2442:	25 2b       	or	r18, r21
    2444:	21 f4       	brne	.+8      	; 0x244e <f_write+0x166>
    2446:	66 83       	std	Z+6, r22	; 0x06
    2448:	77 83       	std	Z+7, r23	; 0x07
    244a:	80 87       	std	Z+8, r24	; 0x08
    244c:	91 87       	std	Z+9, r25	; 0x09
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
    244e:	29 81       	ldd	r18, Y+1	; 0x01
    2450:	3a 81       	ldd	r19, Y+2	; 0x02
    2452:	f9 01       	movw	r30, r18
    2454:	43 a5       	ldd	r20, Z+43	; 0x2b
    2456:	54 a5       	ldd	r21, Z+44	; 0x2c
    2458:	65 a5       	ldd	r22, Z+45	; 0x2d
    245a:	76 a5       	ldd	r23, Z+46	; 0x2e
    245c:	f7 01       	movw	r30, r14
    245e:	80 8d       	ldd	r24, Z+24	; 0x18
    2460:	91 8d       	ldd	r25, Z+25	; 0x19
    2462:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2464:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2466:	48 17       	cp	r20, r24
    2468:	59 07       	cpc	r21, r25
    246a:	6a 07       	cpc	r22, r26
    246c:	7b 07       	cpc	r23, r27
    246e:	49 f4       	brne	.+18     	; 0x2482 <f_write+0x19a>
    2470:	c9 01       	movw	r24, r18
    2472:	0e 94 15 01 	call	0x22a	; 0x22a <sync_window>
    2476:	88 23       	and	r24, r24
    2478:	21 f0       	breq	.+8      	; 0x2482 <f_write+0x19a>
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	f7 01       	movw	r30, r14
    247e:	87 87       	std	Z+15, r24	; 0x0f
    2480:	e7 c0       	rjmp	.+462    	; 0x2650 <f_write+0x368>
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	9a 81       	ldd	r25, Y+2	; 0x02
    2486:	9c 83       	std	Y+4, r25	; 0x04
    2488:	8b 83       	std	Y+3, r24	; 0x03
    248a:	f7 01       	movw	r30, r14
    248c:	44 89       	ldd	r20, Z+20	; 0x14
    248e:	55 89       	ldd	r21, Z+21	; 0x15
    2490:	66 89       	ldd	r22, Z+22	; 0x16
    2492:	77 89       	ldd	r23, Z+23	; 0x17
    2494:	0e 94 8a 00 	call	0x114	; 0x114 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    2498:	61 15       	cp	r22, r1
    249a:	71 05       	cpc	r23, r1
    249c:	81 05       	cpc	r24, r1
    249e:	91 05       	cpc	r25, r1
    24a0:	21 f4       	brne	.+8      	; 0x24aa <f_write+0x1c2>
    24a2:	82 e0       	ldi	r24, 0x02	; 2
    24a4:	f7 01       	movw	r30, r14
    24a6:	87 87       	std	Z+15, r24	; 0x0f
    24a8:	d3 c0       	rjmp	.+422    	; 0x2650 <f_write+0x368>
			sect += csect;
    24aa:	1b 01       	movw	r2, r22
    24ac:	2c 01       	movw	r4, r24
    24ae:	20 0e       	add	r2, r16
    24b0:	31 1e       	adc	r3, r17
    24b2:	41 1c       	adc	r4, r1
    24b4:	51 1c       	adc	r5, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    24b6:	65 01       	movw	r12, r10
    24b8:	cd 2c       	mov	r12, r13
    24ba:	dd 24       	eor	r13, r13
    24bc:	c6 94       	lsr	r12
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
    24be:	c1 14       	cp	r12, r1
    24c0:	d1 04       	cpc	r13, r1
    24c2:	09 f4       	brne	.+2      	; 0x24c6 <f_write+0x1de>
    24c4:	41 c0       	rjmp	.+130    	; 0x2548 <f_write+0x260>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    24c6:	eb 81       	ldd	r30, Y+3	; 0x03
    24c8:	fc 81       	ldd	r31, Y+4	; 0x04
    24ca:	81 85       	ldd	r24, Z+9	; 0x09
    24cc:	92 85       	ldd	r25, Z+10	; 0x0a
    24ce:	98 01       	movw	r18, r16
    24d0:	2c 0d       	add	r18, r12
    24d2:	3d 1d       	adc	r19, r13
    24d4:	82 17       	cp	r24, r18
    24d6:	93 07       	cpc	r25, r19
    24d8:	18 f4       	brcc	.+6      	; 0x24e0 <f_write+0x1f8>
					cc = fs->csize - csect;
    24da:	6c 01       	movw	r12, r24
    24dc:	c0 1a       	sub	r12, r16
    24de:	d1 0a       	sbc	r13, r17
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    24e0:	86 01       	movw	r16, r12
    24e2:	a2 01       	movw	r20, r4
    24e4:	91 01       	movw	r18, r2
    24e6:	b3 01       	movw	r22, r6
    24e8:	eb 81       	ldd	r30, Y+3	; 0x03
    24ea:	fc 81       	ldd	r31, Y+4	; 0x04
    24ec:	81 81       	ldd	r24, Z+1	; 0x01
    24ee:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <disk_write>
    24f2:	88 23       	and	r24, r24
    24f4:	21 f0       	breq	.+8      	; 0x24fe <f_write+0x216>
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	f7 01       	movw	r30, r14
    24fa:	87 87       	std	Z+15, r24	; 0x0f
    24fc:	a9 c0       	rjmp	.+338    	; 0x2650 <f_write+0x368>
#if FF_FS_MINIMIZE <= 2
#if FF_FS_TINY
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    24fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2500:	fa 81       	ldd	r31, Y+2	; 0x02
    2502:	43 a5       	ldd	r20, Z+43	; 0x2b
    2504:	54 a5       	ldd	r21, Z+44	; 0x2c
    2506:	65 a5       	ldd	r22, Z+45	; 0x2d
    2508:	76 a5       	ldd	r23, Z+46	; 0x2e
    250a:	42 19       	sub	r20, r2
    250c:	53 09       	sbc	r21, r3
    250e:	64 09       	sbc	r22, r4
    2510:	75 09       	sbc	r23, r5
    2512:	c6 01       	movw	r24, r12
    2514:	a0 e0       	ldi	r26, 0x00	; 0
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	48 17       	cp	r20, r24
    251a:	59 07       	cpc	r21, r25
    251c:	6a 07       	cpc	r22, r26
    251e:	7b 07       	cpc	r23, r27
    2520:	78 f4       	brcc	.+30     	; 0x2540 <f_write+0x258>
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
    2522:	54 2f       	mov	r21, r20
    2524:	44 27       	eor	r20, r20
    2526:	55 0f       	add	r21, r21
    2528:	b3 01       	movw	r22, r6
    252a:	64 0f       	add	r22, r20
    252c:	75 1f       	adc	r23, r21
    252e:	40 e0       	ldi	r20, 0x00	; 0
    2530:	52 e0       	ldi	r21, 0x02	; 2
    2532:	cf 01       	movw	r24, r30
    2534:	8f 96       	adiw	r24, 0x2f	; 47
    2536:	0e 94 6e 00 	call	0xdc	; 0xdc <mem_cpy>
					fs->wflag = 0;
    253a:	e9 81       	ldd	r30, Y+1	; 0x01
    253c:	fa 81       	ldd	r31, Y+2	; 0x02
    253e:	13 82       	std	Z+3, r1	; 0x03
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    2540:	dc 2c       	mov	r13, r12
    2542:	cc 24       	eor	r12, r12
    2544:	dd 0c       	add	r13, r13
				continue;
    2546:	51 c0       	rjmp	.+162    	; 0x25ea <f_write+0x302>
			}
#if FF_FS_TINY
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
    2548:	f7 01       	movw	r30, r14
    254a:	40 89       	ldd	r20, Z+16	; 0x10
    254c:	51 89       	ldd	r21, Z+17	; 0x11
    254e:	62 89       	ldd	r22, Z+18	; 0x12
    2550:	73 89       	ldd	r23, Z+19	; 0x13
    2552:	82 85       	ldd	r24, Z+10	; 0x0a
    2554:	93 85       	ldd	r25, Z+11	; 0x0b
    2556:	a4 85       	ldd	r26, Z+12	; 0x0c
    2558:	b5 85       	ldd	r27, Z+13	; 0x0d
    255a:	48 17       	cp	r20, r24
    255c:	59 07       	cpc	r21, r25
    255e:	6a 07       	cpc	r22, r26
    2560:	7b 07       	cpc	r23, r27
    2562:	80 f0       	brcs	.+32     	; 0x2584 <f_write+0x29c>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	0e 94 15 01 	call	0x22a	; 0x22a <sync_window>
    256c:	88 23       	and	r24, r24
    256e:	21 f0       	breq	.+8      	; 0x2578 <f_write+0x290>
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	f7 01       	movw	r30, r14
    2574:	87 87       	std	Z+15, r24	; 0x0f
    2576:	6c c0       	rjmp	.+216    	; 0x2650 <f_write+0x368>
				fs->winsect = sect;
    2578:	e9 81       	ldd	r30, Y+1	; 0x01
    257a:	fa 81       	ldd	r31, Y+2	; 0x02
    257c:	23 a6       	std	Z+43, r2	; 0x2b
    257e:	34 a6       	std	Z+44, r3	; 0x2c
    2580:	45 a6       	std	Z+45, r4	; 0x2d
    2582:	56 a6       	std	Z+46, r5	; 0x2e
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
    2584:	f7 01       	movw	r30, r14
    2586:	20 8e       	std	Z+24, r2	; 0x18
    2588:	31 8e       	std	Z+25, r3	; 0x19
    258a:	42 8e       	std	Z+26, r4	; 0x1a
    258c:	53 8e       	std	Z+27, r5	; 0x1b
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    258e:	f7 01       	movw	r30, r14
    2590:	80 89       	ldd	r24, Z+16	; 0x10
    2592:	91 89       	ldd	r25, Z+17	; 0x11
    2594:	91 70       	andi	r25, 0x01	; 1
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	32 e0       	ldi	r19, 0x02	; 2
    259a:	69 01       	movw	r12, r18
    259c:	c8 1a       	sub	r12, r24
    259e:	d9 0a       	sbc	r13, r25
    25a0:	ac 14       	cp	r10, r12
    25a2:	bd 04       	cpc	r11, r13
    25a4:	08 f4       	brcc	.+2      	; 0x25a8 <f_write+0x2c0>
    25a6:	65 01       	movw	r12, r10
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    25a8:	f7 01       	movw	r30, r14
    25aa:	40 8d       	ldd	r20, Z+24	; 0x18
    25ac:	51 8d       	ldd	r21, Z+25	; 0x19
    25ae:	62 8d       	ldd	r22, Z+26	; 0x1a
    25b0:	73 8d       	ldd	r23, Z+27	; 0x1b
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	9a 81       	ldd	r25, Y+2	; 0x02
    25b6:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
    25ba:	88 23       	and	r24, r24
    25bc:	21 f0       	breq	.+8      	; 0x25c6 <f_write+0x2de>
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	f7 01       	movw	r30, r14
    25c2:	87 87       	std	Z+15, r24	; 0x0f
    25c4:	45 c0       	rjmp	.+138    	; 0x2650 <f_write+0x368>
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    25c6:	29 81       	ldd	r18, Y+1	; 0x01
    25c8:	3a 81       	ldd	r19, Y+2	; 0x02
    25ca:	21 5d       	subi	r18, 0xD1	; 209
    25cc:	3f 4f       	sbci	r19, 0xFF	; 255
    25ce:	f7 01       	movw	r30, r14
    25d0:	80 89       	ldd	r24, Z+16	; 0x10
    25d2:	91 89       	ldd	r25, Z+17	; 0x11
    25d4:	91 70       	andi	r25, 0x01	; 1
    25d6:	a6 01       	movw	r20, r12
    25d8:	b3 01       	movw	r22, r6
    25da:	82 0f       	add	r24, r18
    25dc:	93 1f       	adc	r25, r19
    25de:	0e 94 6e 00 	call	0xdc	; 0xdc <mem_cpy>
		fs->wflag = 1;
    25e2:	e9 81       	ldd	r30, Y+1	; 0x01
    25e4:	fa 81       	ldd	r31, Y+2	; 0x02
    25e6:	21 e0       	ldi	r18, 0x01	; 1
    25e8:	23 83       	std	Z+3, r18	; 0x03
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
    25ea:	ac 18       	sub	r10, r12
    25ec:	bd 08       	sbc	r11, r13
    25ee:	f4 01       	movw	r30, r8
    25f0:	80 81       	ld	r24, Z
    25f2:	91 81       	ldd	r25, Z+1	; 0x01
    25f4:	8c 0d       	add	r24, r12
    25f6:	9d 1d       	adc	r25, r13
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	80 83       	st	Z, r24
    25fc:	6c 0c       	add	r6, r12
    25fe:	7d 1c       	adc	r7, r13
    2600:	f7 01       	movw	r30, r14
    2602:	80 89       	ldd	r24, Z+16	; 0x10
    2604:	91 89       	ldd	r25, Z+17	; 0x11
    2606:	a2 89       	ldd	r26, Z+18	; 0x12
    2608:	b3 89       	ldd	r27, Z+19	; 0x13
    260a:	8c 0d       	add	r24, r12
    260c:	9d 1d       	adc	r25, r13
    260e:	a1 1d       	adc	r26, r1
    2610:	b1 1d       	adc	r27, r1
    2612:	80 8b       	std	Z+16, r24	; 0x10
    2614:	91 8b       	std	Z+17, r25	; 0x11
    2616:	a2 8b       	std	Z+18, r26	; 0x12
    2618:	b3 8b       	std	Z+19, r27	; 0x13
    261a:	42 85       	ldd	r20, Z+10	; 0x0a
    261c:	53 85       	ldd	r21, Z+11	; 0x0b
    261e:	64 85       	ldd	r22, Z+12	; 0x0c
    2620:	75 85       	ldd	r23, Z+13	; 0x0d
    2622:	48 17       	cp	r20, r24
    2624:	59 07       	cpc	r21, r25
    2626:	6a 07       	cpc	r22, r26
    2628:	7b 07       	cpc	r23, r27
    262a:	10 f4       	brcc	.+4      	; 0x2630 <f_write+0x348>
    262c:	ac 01       	movw	r20, r24
    262e:	bd 01       	movw	r22, r26
    2630:	f7 01       	movw	r30, r14
    2632:	42 87       	std	Z+10, r20	; 0x0a
    2634:	53 87       	std	Z+11, r21	; 0x0b
    2636:	64 87       	std	Z+12, r22	; 0x0c
    2638:	75 87       	std	Z+13, r23	; 0x0d
	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
    263a:	a1 14       	cp	r10, r1
    263c:	b1 04       	cpc	r11, r1
    263e:	09 f0       	breq	.+2      	; 0x2642 <f_write+0x35a>
    2640:	97 ce       	rjmp	.-722    	; 0x2370 <f_write+0x88>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
    2642:	f7 01       	movw	r30, r14
    2644:	86 85       	ldd	r24, Z+14	; 0x0e
    2646:	80 64       	ori	r24, 0x40	; 64
    2648:	86 87       	std	Z+14, r24	; 0x0e

	LEAVE_FF(fs, FR_OK);
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	01 c0       	rjmp	.+2      	; 0x2650 <f_write+0x368>


	*bw = 0;	/* Clear write byte counter */
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    264e:	87 e0       	ldi	r24, 0x07	; 7
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
    2650:	26 96       	adiw	r28, 0x06	; 6
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	df 91       	pop	r29
    265e:	cf 91       	pop	r28
    2660:	1f 91       	pop	r17
    2662:	0f 91       	pop	r16
    2664:	ff 90       	pop	r15
    2666:	ef 90       	pop	r14
    2668:	df 90       	pop	r13
    266a:	cf 90       	pop	r12
    266c:	bf 90       	pop	r11
    266e:	af 90       	pop	r10
    2670:	9f 90       	pop	r9
    2672:	8f 90       	pop	r8
    2674:	7f 90       	pop	r7
    2676:	6f 90       	pop	r6
    2678:	5f 90       	pop	r5
    267a:	4f 90       	pop	r4
    267c:	3f 90       	pop	r3
    267e:	2f 90       	pop	r2
    2680:	08 95       	ret

00002682 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    2682:	ef 92       	push	r14
    2684:	ff 92       	push	r15
    2686:	0f 93       	push	r16
    2688:	1f 93       	push	r17
    268a:	cf 93       	push	r28
    268c:	df 93       	push	r29
    268e:	00 d0       	rcall	.+0      	; 0x2690 <f_sync+0xe>
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	8c 01       	movw	r16, r24
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    2696:	be 01       	movw	r22, r28
    2698:	6f 5f       	subi	r22, 0xFF	; 255
    269a:	7f 4f       	sbci	r23, 0xFF	; 255
    269c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <validate>
	if (res == FR_OK) {
    26a0:	81 11       	cpse	r24, r1
    26a2:	3c c0       	rjmp	.+120    	; 0x271c <f_sync+0x9a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    26a4:	f8 01       	movw	r30, r16
    26a6:	96 85       	ldd	r25, Z+14	; 0x0e
    26a8:	96 ff       	sbrs	r25, 6
    26aa:	38 c0       	rjmp	.+112    	; 0x271c <f_sync+0x9a>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
    26ac:	44 8d       	ldd	r20, Z+28	; 0x1c
    26ae:	55 8d       	ldd	r21, Z+29	; 0x1d
    26b0:	66 8d       	ldd	r22, Z+30	; 0x1e
    26b2:	77 8d       	ldd	r23, Z+31	; 0x1f
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	0e 94 6f 01 	call	0x2de	; 0x2de <move_window>
				if (res == FR_OK) {
    26bc:	81 11       	cpse	r24, r1
    26be:	2e c0       	rjmp	.+92     	; 0x271c <f_sync+0x9a>
					dir = fp->dir_ptr;
    26c0:	f8 01       	movw	r30, r16
    26c2:	e0 a0       	ldd	r14, Z+32	; 0x20
    26c4:	f1 a0       	ldd	r15, Z+33	; 0x21
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    26c6:	f7 01       	movw	r30, r14
    26c8:	83 85       	ldd	r24, Z+11	; 0x0b
    26ca:	80 62       	ori	r24, 0x20	; 32
    26cc:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
    26ce:	f8 01       	movw	r30, r16
    26d0:	26 81       	ldd	r18, Z+6	; 0x06
    26d2:	37 81       	ldd	r19, Z+7	; 0x07
    26d4:	40 85       	ldd	r20, Z+8	; 0x08
    26d6:	51 85       	ldd	r21, Z+9	; 0x09
    26d8:	b7 01       	movw	r22, r14
    26da:	80 81       	ld	r24, Z
    26dc:	91 81       	ldd	r25, Z+1	; 0x01
    26de:	0e 94 a3 03 	call	0x746	; 0x746 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    26e2:	f8 01       	movw	r30, r16
    26e4:	32 85       	ldd	r19, Z+10	; 0x0a
    26e6:	23 85       	ldd	r18, Z+11	; 0x0b
    26e8:	94 85       	ldd	r25, Z+12	; 0x0c
    26ea:	85 85       	ldd	r24, Z+13	; 0x0d
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    26ec:	f7 01       	movw	r30, r14
    26ee:	34 8f       	std	Z+28, r19	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    26f0:	25 8f       	std	Z+29, r18	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    26f2:	96 8f       	std	Z+30, r25	; 0x1e
	*ptr++ = (BYTE)val;
    26f4:	87 8f       	std	Z+31, r24	; 0x1f
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    26f6:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    26f8:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    26fa:	81 e2       	ldi	r24, 0x21	; 33
    26fc:	80 8f       	std	Z+24, r24	; 0x18
	*ptr++ = (BYTE)val;
    26fe:	8e e4       	ldi	r24, 0x4E	; 78
    2700:	81 8f       	std	Z+25, r24	; 0x19
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2702:	12 8a       	std	Z+18, r1	; 0x12
	*ptr++ = (BYTE)val;
    2704:	13 8a       	std	Z+19, r1	; 0x13
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	21 e0       	ldi	r18, 0x01	; 1
    270c:	fc 01       	movw	r30, r24
    270e:	23 83       	std	Z+3, r18	; 0x03
					res = sync_fs(fs);					/* Restore it to the directory */
    2710:	0e 94 10 02 	call	0x420	; 0x420 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
    2714:	f8 01       	movw	r30, r16
    2716:	96 85       	ldd	r25, Z+14	; 0x0e
    2718:	9f 7b       	andi	r25, 0xBF	; 191
    271a:	96 87       	std	Z+14, r25	; 0x0e
			}
		}
	}

	LEAVE_FF(fs, res);
}
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	1f 91       	pop	r17
    2726:	0f 91       	pop	r16
    2728:	ff 90       	pop	r15
    272a:	ef 90       	pop	r14
    272c:	08 95       	ret

0000272e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
    272e:	0f 93       	push	r16
    2730:	1f 93       	push	r17
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	00 d0       	rcall	.+0      	; 0x2738 <f_close+0xa>
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    273e:	0e 94 41 13 	call	0x2682	; 0x2682 <f_sync>
	if (res == FR_OK)
    2742:	81 11       	cpse	r24, r1
    2744:	0b c0       	rjmp	.+22     	; 0x275c <f_close+0x2e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
    2746:	be 01       	movw	r22, r28
    2748:	6f 5f       	subi	r22, 0xFF	; 255
    274a:	7f 4f       	sbci	r23, 0xFF	; 255
    274c:	c8 01       	movw	r24, r16
    274e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <validate>
		if (res == FR_OK) {
    2752:	81 11       	cpse	r24, r1
    2754:	03 c0       	rjmp	.+6      	; 0x275c <f_close+0x2e>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
    2756:	f8 01       	movw	r30, r16
    2758:	11 82       	std	Z+1, r1	; 0x01
    275a:	10 82       	st	Z, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	1f 91       	pop	r17
    2766:	0f 91       	pop	r16
    2768:	08 95       	ret

0000276a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
    276a:	2f 92       	push	r2
    276c:	3f 92       	push	r3
    276e:	4f 92       	push	r4
    2770:	5f 92       	push	r5
    2772:	6f 92       	push	r6
    2774:	7f 92       	push	r7
    2776:	8f 92       	push	r8
    2778:	9f 92       	push	r9
    277a:	af 92       	push	r10
    277c:	bf 92       	push	r11
    277e:	cf 92       	push	r12
    2780:	df 92       	push	r13
    2782:	ef 92       	push	r14
    2784:	ff 92       	push	r15
    2786:	0f 93       	push	r16
    2788:	1f 93       	push	r17
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
    278e:	00 d0       	rcall	.+0      	; 0x2790 <f_lseek+0x26>
    2790:	00 d0       	rcall	.+0      	; 0x2792 <f_lseek+0x28>
    2792:	00 d0       	rcall	.+0      	; 0x2794 <f_lseek+0x2a>
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	8c 01       	movw	r16, r24
    279a:	6a 01       	movw	r12, r20
    279c:	7b 01       	movw	r14, r22
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, tlen, ulen, *tbl;
	LBA_t dsc;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
    279e:	78 2e       	mov	r7, r24
    27a0:	61 2e       	mov	r6, r17
    27a2:	be 01       	movw	r22, r28
    27a4:	6f 5f       	subi	r22, 0xFF	; 255
    27a6:	7f 4f       	sbci	r23, 0xFF	; 255
    27a8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
    27ac:	81 11       	cpse	r24, r1
    27ae:	76 c1       	rjmp	.+748    	; 0x2a9c <f_lseek+0x332>
    27b0:	d8 01       	movw	r26, r16
    27b2:	1f 96       	adiw	r26, 0x0f	; 15
    27b4:	8c 91       	ld	r24, X
    27b6:	1f 97       	sbiw	r26, 0x0f	; 15
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
    27b8:	81 11       	cpse	r24, r1
    27ba:	70 c1       	rjmp	.+736    	; 0x2a9c <f_lseek+0x332>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
    27bc:	1a 96       	adiw	r26, 0x0a	; 10
    27be:	8d 91       	ld	r24, X+
    27c0:	9d 91       	ld	r25, X+
    27c2:	0d 90       	ld	r0, X+
    27c4:	bc 91       	ld	r27, X
    27c6:	a0 2d       	mov	r26, r0
    27c8:	8c 15       	cp	r24, r12
    27ca:	9d 05       	cpc	r25, r13
    27cc:	ae 05       	cpc	r26, r14
    27ce:	bf 05       	cpc	r27, r15
    27d0:	30 f4       	brcc	.+12     	; 0x27de <f_lseek+0x74>
    27d2:	f8 01       	movw	r30, r16
    27d4:	26 85       	ldd	r18, Z+14	; 0x0e
    27d6:	21 fd       	sbrc	r18, 1
    27d8:	02 c0       	rjmp	.+4      	; 0x27de <f_lseek+0x74>
			ofs = fp->obj.objsize;
    27da:	6c 01       	movw	r12, r24
    27dc:	7d 01       	movw	r14, r26
		}
		ifptr = fp->fptr;
    27de:	f8 01       	movw	r30, r16
    27e0:	80 89       	ldd	r24, Z+16	; 0x10
    27e2:	91 89       	ldd	r25, Z+17	; 0x11
    27e4:	a2 89       	ldd	r26, Z+18	; 0x12
    27e6:	b3 89       	ldd	r27, Z+19	; 0x13
		fp->fptr = nsect = 0;
    27e8:	10 8a       	std	Z+16, r1	; 0x10
    27ea:	11 8a       	std	Z+17, r1	; 0x11
    27ec:	12 8a       	std	Z+18, r1	; 0x12
    27ee:	13 8a       	std	Z+19, r1	; 0x13
		if (ofs > 0) {
    27f0:	c1 14       	cp	r12, r1
    27f2:	d1 04       	cpc	r13, r1
    27f4:	e1 04       	cpc	r14, r1
    27f6:	f1 04       	cpc	r15, r1
    27f8:	09 f4       	brne	.+2      	; 0x27fc <f_lseek+0x92>
    27fa:	4b c1       	rjmp	.+662    	; 0x2a92 <f_lseek+0x328>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
    27fc:	e9 81       	ldd	r30, Y+1	; 0x01
    27fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2800:	81 84       	ldd	r8, Z+9	; 0x09
    2802:	92 84       	ldd	r9, Z+10	; 0x0a
    2804:	a1 2c       	mov	r10, r1
    2806:	b1 2c       	mov	r11, r1
    2808:	07 2e       	mov	r0, r23
    280a:	79 e0       	ldi	r23, 0x09	; 9
    280c:	88 0c       	add	r8, r8
    280e:	99 1c       	adc	r9, r9
    2810:	aa 1c       	adc	r10, r10
    2812:	bb 1c       	adc	r11, r11
    2814:	7a 95       	dec	r23
    2816:	d1 f7       	brne	.-12     	; 0x280c <f_lseek+0xa2>
    2818:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	a1 05       	cpc	r26, r1
    281e:	b1 05       	cpc	r27, r1
    2820:	e9 f1       	breq	.+122    	; 0x289c <f_lseek+0x132>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2822:	1c 01       	movw	r2, r24
    2824:	2d 01       	movw	r4, r26
    2826:	f1 e0       	ldi	r31, 0x01	; 1
    2828:	2f 1a       	sub	r2, r31
    282a:	31 08       	sbc	r3, r1
    282c:	41 08       	sbc	r4, r1
    282e:	51 08       	sbc	r5, r1
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs > 0) {
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2830:	c7 01       	movw	r24, r14
    2832:	b6 01       	movw	r22, r12
    2834:	61 50       	subi	r22, 0x01	; 1
    2836:	71 09       	sbc	r23, r1
    2838:	81 09       	sbc	r24, r1
    283a:	91 09       	sbc	r25, r1
    283c:	a5 01       	movw	r20, r10
    283e:	94 01       	movw	r18, r8
    2840:	0e 94 92 1b 	call	0x3724	; 0x3724 <__udivmodsi4>
    2844:	2b 83       	std	Y+3, r18	; 0x03
    2846:	3c 83       	std	Y+4, r19	; 0x04
    2848:	4d 83       	std	Y+5, r20	; 0x05
    284a:	5e 83       	std	Y+6, r21	; 0x06
    284c:	c2 01       	movw	r24, r4
    284e:	b1 01       	movw	r22, r2
    2850:	a5 01       	movw	r20, r10
    2852:	94 01       	movw	r18, r8
    2854:	0e 94 92 1b 	call	0x3724	; 0x3724 <__udivmodsi4>
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	9c 81       	ldd	r25, Y+4	; 0x04
    285c:	ad 81       	ldd	r26, Y+5	; 0x05
    285e:	be 81       	ldd	r27, Y+6	; 0x06
    2860:	82 17       	cp	r24, r18
    2862:	93 07       	cpc	r25, r19
    2864:	a4 07       	cpc	r26, r20
    2866:	b5 07       	cpc	r27, r21
    2868:	c8 f0       	brcs	.+50     	; 0x289c <f_lseek+0x132>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
    286a:	88 27       	eor	r24, r24
    286c:	99 27       	eor	r25, r25
    286e:	dc 01       	movw	r26, r24
    2870:	88 19       	sub	r24, r8
    2872:	99 09       	sbc	r25, r9
    2874:	aa 09       	sbc	r26, r10
    2876:	bb 09       	sbc	r27, r11
    2878:	82 21       	and	r24, r2
    287a:	93 21       	and	r25, r3
    287c:	a4 21       	and	r26, r4
    287e:	b5 21       	and	r27, r5
    2880:	f8 01       	movw	r30, r16
    2882:	80 8b       	std	Z+16, r24	; 0x10
    2884:	91 8b       	std	Z+17, r25	; 0x11
    2886:	a2 8b       	std	Z+18, r26	; 0x12
    2888:	b3 8b       	std	Z+19, r27	; 0x13
				ofs -= fp->fptr;
    288a:	c8 1a       	sub	r12, r24
    288c:	d9 0a       	sbc	r13, r25
    288e:	ea 0a       	sbc	r14, r26
    2890:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    2892:	44 89       	ldd	r20, Z+20	; 0x14
    2894:	55 89       	ldd	r21, Z+21	; 0x15
    2896:	66 89       	ldd	r22, Z+22	; 0x16
    2898:	77 89       	ldd	r23, Z+23	; 0x17
    289a:	34 c0       	rjmp	.+104    	; 0x2904 <f_lseek+0x19a>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
    289c:	d8 01       	movw	r26, r16
    289e:	16 96       	adiw	r26, 0x06	; 6
    28a0:	4d 91       	ld	r20, X+
    28a2:	5d 91       	ld	r21, X+
    28a4:	6d 91       	ld	r22, X+
    28a6:	7c 91       	ld	r23, X
    28a8:	19 97       	sbiw	r26, 0x09	; 9
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    28aa:	41 15       	cp	r20, r1
    28ac:	51 05       	cpc	r21, r1
    28ae:	61 05       	cpc	r22, r1
    28b0:	71 05       	cpc	r23, r1
    28b2:	09 f5       	brne	.+66     	; 0x28f6 <f_lseek+0x18c>
					clst = create_chain(&fp->obj, 0);
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	50 e0       	ldi	r21, 0x00	; 0
    28b8:	ba 01       	movw	r22, r20
    28ba:	c8 01       	movw	r24, r16
    28bc:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <create_chain>
    28c0:	ab 01       	movw	r20, r22
    28c2:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fs, FR_INT_ERR);
    28c4:	41 30       	cpi	r20, 0x01	; 1
    28c6:	51 05       	cpc	r21, r1
    28c8:	61 05       	cpc	r22, r1
    28ca:	71 05       	cpc	r23, r1
    28cc:	21 f4       	brne	.+8      	; 0x28d6 <f_lseek+0x16c>
    28ce:	82 e0       	ldi	r24, 0x02	; 2
    28d0:	f8 01       	movw	r30, r16
    28d2:	87 87       	std	Z+15, r24	; 0x0f
    28d4:	e3 c0       	rjmp	.+454    	; 0x2a9c <f_lseek+0x332>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    28d6:	4f 3f       	cpi	r20, 0xFF	; 255
    28d8:	ff ef       	ldi	r31, 0xFF	; 255
    28da:	5f 07       	cpc	r21, r31
    28dc:	6f 07       	cpc	r22, r31
    28de:	7f 07       	cpc	r23, r31
    28e0:	29 f4       	brne	.+10     	; 0x28ec <f_lseek+0x182>
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	d8 01       	movw	r26, r16
    28e6:	1f 96       	adiw	r26, 0x0f	; 15
    28e8:	8c 93       	st	X, r24
    28ea:	d8 c0       	rjmp	.+432    	; 0x2a9c <f_lseek+0x332>
					fp->obj.sclust = clst;
    28ec:	f8 01       	movw	r30, r16
    28ee:	46 83       	std	Z+6, r20	; 0x06
    28f0:	57 83       	std	Z+7, r21	; 0x07
    28f2:	60 87       	std	Z+8, r22	; 0x08
    28f4:	71 87       	std	Z+9, r23	; 0x09
				}
#endif
				fp->clust = clst;
    28f6:	d8 01       	movw	r26, r16
    28f8:	54 96       	adiw	r26, 0x14	; 20
    28fa:	4d 93       	st	X+, r20
    28fc:	5d 93       	st	X+, r21
    28fe:	6d 93       	st	X+, r22
    2900:	7c 93       	st	X, r23
    2902:	57 97       	sbiw	r26, 0x17	; 23
			}
			if (clst != 0) {
    2904:	41 15       	cp	r20, r1
    2906:	51 05       	cpc	r21, r1
    2908:	61 05       	cpc	r22, r1
    290a:	71 05       	cpc	r23, r1
    290c:	09 f4       	brne	.+2      	; 0x2910 <f_lseek+0x1a6>
    290e:	8a c0       	rjmp	.+276    	; 0x2a24 <f_lseek+0x2ba>
				while (ofs > bcs) {						/* Cluster following loop */
    2910:	8c 14       	cp	r8, r12
    2912:	9d 04       	cpc	r9, r13
    2914:	ae 04       	cpc	r10, r14
    2916:	bf 04       	cpc	r11, r15
    2918:	08 f0       	brcs	.+2      	; 0x291c <f_lseek+0x1b2>
    291a:	52 c0       	rjmp	.+164    	; 0x29c0 <f_lseek+0x256>
					ofs -= bcs; fp->fptr += bcs;
    291c:	c8 18       	sub	r12, r8
    291e:	d9 08       	sbc	r13, r9
    2920:	ea 08       	sbc	r14, r10
    2922:	fb 08       	sbc	r15, r11
    2924:	f8 01       	movw	r30, r16
    2926:	80 89       	ldd	r24, Z+16	; 0x10
    2928:	91 89       	ldd	r25, Z+17	; 0x11
    292a:	a2 89       	ldd	r26, Z+18	; 0x12
    292c:	b3 89       	ldd	r27, Z+19	; 0x13
    292e:	88 0d       	add	r24, r8
    2930:	99 1d       	adc	r25, r9
    2932:	aa 1d       	adc	r26, r10
    2934:	bb 1d       	adc	r27, r11
    2936:	80 8b       	std	Z+16, r24	; 0x10
    2938:	91 8b       	std	Z+17, r25	; 0x11
    293a:	a2 8b       	std	Z+18, r26	; 0x12
    293c:	b3 8b       	std	Z+19, r27	; 0x13
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    293e:	86 85       	ldd	r24, Z+14	; 0x0e
    2940:	81 ff       	sbrs	r24, 1
    2942:	0c c0       	rjmp	.+24     	; 0x295c <f_lseek+0x1f2>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
    2944:	87 2d       	mov	r24, r7
    2946:	96 2d       	mov	r25, r6
    2948:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <create_chain>
    294c:	ab 01       	movw	r20, r22
    294e:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* Clip file size in case of disk full */
    2950:	41 15       	cp	r20, r1
    2952:	51 05       	cpc	r21, r1
    2954:	61 05       	cpc	r22, r1
    2956:	71 05       	cpc	r23, r1
    2958:	39 f4       	brne	.+14     	; 0x2968 <f_lseek+0x1fe>
    295a:	68 c0       	rjmp	.+208    	; 0x2a2c <f_lseek+0x2c2>
							ofs = 0; break;
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
    295c:	87 2d       	mov	r24, r7
    295e:	96 2d       	mov	r25, r6
    2960:	0e 94 b0 03 	call	0x760	; 0x760 <get_fat>
    2964:	ab 01       	movw	r20, r22
    2966:	bc 01       	movw	r22, r24
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    2968:	4f 3f       	cpi	r20, 0xFF	; 255
    296a:	ff ef       	ldi	r31, 0xFF	; 255
    296c:	5f 07       	cpc	r21, r31
    296e:	6f 07       	cpc	r22, r31
    2970:	7f 07       	cpc	r23, r31
    2972:	29 f4       	brne	.+10     	; 0x297e <f_lseek+0x214>
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	d8 01       	movw	r26, r16
    2978:	1f 96       	adiw	r26, 0x0f	; 15
    297a:	8c 93       	st	X, r24
    297c:	8f c0       	rjmp	.+286    	; 0x2a9c <f_lseek+0x332>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
    297e:	42 30       	cpi	r20, 0x02	; 2
    2980:	51 05       	cpc	r21, r1
    2982:	61 05       	cpc	r22, r1
    2984:	71 05       	cpc	r23, r1
    2986:	58 f0       	brcs	.+22     	; 0x299e <f_lseek+0x234>
    2988:	e9 81       	ldd	r30, Y+1	; 0x01
    298a:	fa 81       	ldd	r31, Y+2	; 0x02
    298c:	83 89       	ldd	r24, Z+19	; 0x13
    298e:	94 89       	ldd	r25, Z+20	; 0x14
    2990:	a5 89       	ldd	r26, Z+21	; 0x15
    2992:	b6 89       	ldd	r27, Z+22	; 0x16
    2994:	48 17       	cp	r20, r24
    2996:	59 07       	cpc	r21, r25
    2998:	6a 07       	cpc	r22, r26
    299a:	7b 07       	cpc	r23, r27
    299c:	20 f0       	brcs	.+8      	; 0x29a6 <f_lseek+0x23c>
    299e:	82 e0       	ldi	r24, 0x02	; 2
    29a0:	f8 01       	movw	r30, r16
    29a2:	87 87       	std	Z+15, r24	; 0x0f
    29a4:	7b c0       	rjmp	.+246    	; 0x2a9c <f_lseek+0x332>
					fp->clust = clst;
    29a6:	d8 01       	movw	r26, r16
    29a8:	54 96       	adiw	r26, 0x14	; 20
    29aa:	4d 93       	st	X+, r20
    29ac:	5d 93       	st	X+, r21
    29ae:	6d 93       	st	X+, r22
    29b0:	7c 93       	st	X, r23
    29b2:	57 97       	sbiw	r26, 0x17	; 23
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    29b4:	8c 14       	cp	r8, r12
    29b6:	9d 04       	cpc	r9, r13
    29b8:	ae 04       	cpc	r10, r14
    29ba:	bf 04       	cpc	r11, r15
    29bc:	08 f4       	brcc	.+2      	; 0x29c0 <f_lseek+0x256>
    29be:	ae cf       	rjmp	.-164    	; 0x291c <f_lseek+0x1b2>
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
					fp->clust = clst;
				}
				fp->fptr += ofs;
    29c0:	f8 01       	movw	r30, r16
    29c2:	80 89       	ldd	r24, Z+16	; 0x10
    29c4:	91 89       	ldd	r25, Z+17	; 0x11
    29c6:	a2 89       	ldd	r26, Z+18	; 0x12
    29c8:	b3 89       	ldd	r27, Z+19	; 0x13
    29ca:	8c 0d       	add	r24, r12
    29cc:	9d 1d       	adc	r25, r13
    29ce:	ae 1d       	adc	r26, r14
    29d0:	bf 1d       	adc	r27, r15
    29d2:	80 8b       	std	Z+16, r24	; 0x10
    29d4:	91 8b       	std	Z+17, r25	; 0x11
    29d6:	a2 8b       	std	Z+18, r26	; 0x12
    29d8:	b3 8b       	std	Z+19, r27	; 0x13
				if (ofs % SS(fs)) {
    29da:	d7 01       	movw	r26, r14
    29dc:	c6 01       	movw	r24, r12
    29de:	91 70       	andi	r25, 0x01	; 1
    29e0:	aa 27       	eor	r26, r26
    29e2:	bb 27       	eor	r27, r27
    29e4:	89 2b       	or	r24, r25
    29e6:	8a 2b       	or	r24, r26
    29e8:	8b 2b       	or	r24, r27
    29ea:	21 f1       	breq	.+72     	; 0x2a34 <f_lseek+0x2ca>
					nsect = clst2sect(fs, clst);	/* Current sector */
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	9a 81       	ldd	r25, Y+2	; 0x02
    29f0:	0e 94 8a 00 	call	0x114	; 0x114 <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
    29f4:	61 15       	cp	r22, r1
    29f6:	71 05       	cpc	r23, r1
    29f8:	81 05       	cpc	r24, r1
    29fa:	91 05       	cpc	r25, r1
    29fc:	29 f4       	brne	.+10     	; 0x2a08 <f_lseek+0x29e>
    29fe:	82 e0       	ldi	r24, 0x02	; 2
    2a00:	d8 01       	movw	r26, r16
    2a02:	1f 96       	adiw	r26, 0x0f	; 15
    2a04:	8c 93       	st	X, r24
    2a06:	4a c0       	rjmp	.+148    	; 0x2a9c <f_lseek+0x332>
					nsect += (DWORD)(ofs / SS(fs));
    2a08:	0b 2e       	mov	r0, r27
    2a0a:	b9 e0       	ldi	r27, 0x09	; 9
    2a0c:	f6 94       	lsr	r15
    2a0e:	e7 94       	ror	r14
    2a10:	d7 94       	ror	r13
    2a12:	c7 94       	ror	r12
    2a14:	ba 95       	dec	r27
    2a16:	d1 f7       	brne	.-12     	; 0x2a0c <f_lseek+0x2a2>
    2a18:	b0 2d       	mov	r27, r0
    2a1a:	c6 0e       	add	r12, r22
    2a1c:	d7 1e       	adc	r13, r23
    2a1e:	e8 1e       	adc	r14, r24
    2a20:	f9 1e       	adc	r15, r25
    2a22:	0b c0       	rjmp	.+22     	; 0x2a3a <f_lseek+0x2d0>
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2a24:	c1 2c       	mov	r12, r1
    2a26:	d1 2c       	mov	r13, r1
    2a28:	76 01       	movw	r14, r12
    2a2a:	07 c0       	rjmp	.+14     	; 0x2a3a <f_lseek+0x2d0>
    2a2c:	c1 2c       	mov	r12, r1
    2a2e:	d1 2c       	mov	r13, r1
    2a30:	76 01       	movw	r14, r12
    2a32:	03 c0       	rjmp	.+6      	; 0x2a3a <f_lseek+0x2d0>
    2a34:	c1 2c       	mov	r12, r1
    2a36:	d1 2c       	mov	r13, r1
    2a38:	76 01       	movw	r14, r12
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
					nsect += (DWORD)(ofs / SS(fs));
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
    2a3a:	f8 01       	movw	r30, r16
    2a3c:	80 89       	ldd	r24, Z+16	; 0x10
    2a3e:	91 89       	ldd	r25, Z+17	; 0x11
    2a40:	a2 89       	ldd	r26, Z+18	; 0x12
    2a42:	b3 89       	ldd	r27, Z+19	; 0x13
    2a44:	42 85       	ldd	r20, Z+10	; 0x0a
    2a46:	53 85       	ldd	r21, Z+11	; 0x0b
    2a48:	64 85       	ldd	r22, Z+12	; 0x0c
    2a4a:	75 85       	ldd	r23, Z+13	; 0x0d
    2a4c:	48 17       	cp	r20, r24
    2a4e:	59 07       	cpc	r21, r25
    2a50:	6a 07       	cpc	r22, r26
    2a52:	7b 07       	cpc	r23, r27
    2a54:	38 f4       	brcc	.+14     	; 0x2a64 <f_lseek+0x2fa>
			fp->obj.objsize = fp->fptr;
    2a56:	82 87       	std	Z+10, r24	; 0x0a
    2a58:	93 87       	std	Z+11, r25	; 0x0b
    2a5a:	a4 87       	std	Z+12, r26	; 0x0c
    2a5c:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA_MODIFIED;
    2a5e:	26 85       	ldd	r18, Z+14	; 0x0e
    2a60:	20 64       	ori	r18, 0x40	; 64
    2a62:	26 87       	std	Z+14, r18	; 0x0e
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
    2a64:	91 70       	andi	r25, 0x01	; 1
    2a66:	aa 27       	eor	r26, r26
    2a68:	bb 27       	eor	r27, r27
    2a6a:	89 2b       	or	r24, r25
    2a6c:	8a 2b       	or	r24, r26
    2a6e:	8b 2b       	or	r24, r27
    2a70:	91 f0       	breq	.+36     	; 0x2a96 <f_lseek+0x32c>
    2a72:	f8 01       	movw	r30, r16
    2a74:	80 8d       	ldd	r24, Z+24	; 0x18
    2a76:	91 8d       	ldd	r25, Z+25	; 0x19
    2a78:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a7a:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2a7c:	c8 16       	cp	r12, r24
    2a7e:	d9 06       	cpc	r13, r25
    2a80:	ea 06       	cpc	r14, r26
    2a82:	fb 06       	cpc	r15, r27
    2a84:	51 f0       	breq	.+20     	; 0x2a9a <f_lseek+0x330>
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
#endif
			fp->sect = nsect;
    2a86:	c0 8e       	std	Z+24, r12	; 0x18
    2a88:	d1 8e       	std	Z+25, r13	; 0x19
    2a8a:	e2 8e       	std	Z+26, r14	; 0x1a
    2a8c:	f3 8e       	std	Z+27, r15	; 0x1b
		}
	}

	LEAVE_FF(fs, res);
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	05 c0       	rjmp	.+10     	; 0x2a9c <f_lseek+0x332>
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	03 c0       	rjmp	.+6      	; 0x2a9c <f_lseek+0x332>
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	01 c0       	rjmp	.+2      	; 0x2a9c <f_lseek+0x332>
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
}
    2a9c:	26 96       	adiw	r28, 0x06	; 6
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	1f 91       	pop	r17
    2aae:	0f 91       	pop	r16
    2ab0:	ff 90       	pop	r15
    2ab2:	ef 90       	pop	r14
    2ab4:	df 90       	pop	r13
    2ab6:	cf 90       	pop	r12
    2ab8:	bf 90       	pop	r11
    2aba:	af 90       	pop	r10
    2abc:	9f 90       	pop	r9
    2abe:	8f 90       	pop	r8
    2ac0:	7f 90       	pop	r7
    2ac2:	6f 90       	pop	r6
    2ac4:	5f 90       	pop	r5
    2ac6:	4f 90       	pop	r4
    2ac8:	3f 90       	pop	r3
    2aca:	2f 90       	pop	r2
    2acc:	08 95       	ret

00002ace <USART_Init>:
uint8_t append_string_with_limits(char *string, char *string_to_append, char max_size){
	
	char *p = string + strlen(string);
	strcpy(p, string_to_append);
	return 1;
}
    2ace:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    2ad2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    2ad6:	e0 ec       	ldi	r30, 0xC0	; 192
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	80 81       	ld	r24, Z
    2adc:	82 60       	ori	r24, 0x02	; 2
    2ade:	80 83       	st	Z, r24
    2ae0:	88 e1       	ldi	r24, 0x18	; 24
    2ae2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2ae6:	86 e0       	ldi	r24, 0x06	; 6
    2ae8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    2aec:	08 95       	ret

00002aee <USART_Transmit>:
    2aee:	e0 ec       	ldi	r30, 0xC0	; 192
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	90 81       	ld	r25, Z
    2af4:	95 ff       	sbrs	r25, 5
    2af6:	fd cf       	rjmp	.-6      	; 0x2af2 <USART_Transmit+0x4>
    2af8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2afc:	08 95       	ret

00002afe <uart_puts>:
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	ec 01       	movw	r28, r24
    2b04:	88 81       	ld	r24, Y
    2b06:	88 23       	and	r24, r24
    2b08:	31 f0       	breq	.+12     	; 0x2b16 <uart_puts+0x18>
    2b0a:	21 96       	adiw	r28, 0x01	; 1
    2b0c:	0e 94 77 15 	call	0x2aee	; 0x2aee <USART_Transmit>
    2b10:	89 91       	ld	r24, Y+
    2b12:	81 11       	cpse	r24, r1
    2b14:	fb cf       	rjmp	.-10     	; 0x2b0c <uart_puts+0xe>
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	08 95       	ret

00002b1c <uart_puts_with_length>:
    2b1c:	0f 93       	push	r16
    2b1e:	1f 93       	push	r17
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
    2b24:	fc 01       	movw	r30, r24
    2b26:	eb 01       	movw	r28, r22
    2b28:	80 81       	ld	r24, Z
    2b2a:	88 23       	and	r24, r24
    2b2c:	79 f0       	breq	.+30     	; 0x2b4c <uart_puts_with_length+0x30>
    2b2e:	20 97       	sbiw	r28, 0x00	; 0
    2b30:	69 f0       	breq	.+26     	; 0x2b4c <uart_puts_with_length+0x30>
    2b32:	8f 01       	movw	r16, r30
    2b34:	0f 5f       	subi	r16, 0xFF	; 255
    2b36:	1f 4f       	sbci	r17, 0xFF	; 255
    2b38:	0e 94 77 15 	call	0x2aee	; 0x2aee <USART_Transmit>
    2b3c:	21 97       	sbiw	r28, 0x01	; 1
    2b3e:	f8 01       	movw	r30, r16
    2b40:	81 91       	ld	r24, Z+
    2b42:	8f 01       	movw	r16, r30
    2b44:	88 23       	and	r24, r24
    2b46:	11 f0       	breq	.+4      	; 0x2b4c <uart_puts_with_length+0x30>
    2b48:	20 97       	sbiw	r28, 0x00	; 0
    2b4a:	b1 f7       	brne	.-20     	; 0x2b38 <uart_puts_with_length+0x1c>
    2b4c:	df 91       	pop	r29
    2b4e:	cf 91       	pop	r28
    2b50:	1f 91       	pop	r17
    2b52:	0f 91       	pop	r16
    2b54:	08 95       	ret

00002b56 <uart_puts_rn>:
    2b56:	0e 94 7f 15 	call	0x2afe	; 0x2afe <uart_puts>
    2b5a:	89 e8       	ldi	r24, 0x89	; 137
    2b5c:	92 e0       	ldi	r25, 0x02	; 2
    2b5e:	0e 94 7f 15 	call	0x2afe	; 0x2afe <uart_puts>
    2b62:	08 95       	ret

00002b64 <Sent_error_message>:
    2b64:	0f 93       	push	r16
    2b66:	1f 93       	push	r17
    2b68:	cf 93       	push	r28
    2b6a:	df 93       	push	r29
    2b6c:	00 d0       	rcall	.+0      	; 0x2b6e <Sent_error_message+0xa>
    2b6e:	00 d0       	rcall	.+0      	; 0x2b70 <Sent_error_message+0xc>
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	8b 01       	movw	r16, r22
    2b76:	81 11       	cpse	r24, r1
    2b78:	08 c0       	rjmp	.+16     	; 0x2b8a <Sent_error_message+0x26>
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <uart_puts>
    2b80:	8a e9       	ldi	r24, 0x9A	; 154
    2b82:	91 e0       	ldi	r25, 0x01	; 1
    2b84:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <uart_puts_rn>
    2b88:	12 c0       	rjmp	.+36     	; 0x2bae <Sent_error_message+0x4a>
    2b8a:	4a e0       	ldi	r20, 0x0A	; 10
    2b8c:	be 01       	movw	r22, r28
    2b8e:	6f 5f       	subi	r22, 0xFF	; 255
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__itoa_ncheck>
    2b98:	c8 01       	movw	r24, r16
    2b9a:	0e 94 7f 15 	call	0x2afe	; 0x2afe <uart_puts>
    2b9e:	81 eb       	ldi	r24, 0xB1	; 177
    2ba0:	91 e0       	ldi	r25, 0x01	; 1
    2ba2:	0e 94 7f 15 	call	0x2afe	; 0x2afe <uart_puts>
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	01 96       	adiw	r24, 0x01	; 1
    2baa:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <uart_puts_rn>
    2bae:	0f 90       	pop	r0
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	df 91       	pop	r29
    2bb8:	cf 91       	pop	r28
    2bba:	1f 91       	pop	r17
    2bbc:	0f 91       	pop	r16
    2bbe:	08 95       	ret

00002bc0 <init_timer>:
    2bc0:	82 e0       	ldi	r24, 0x02	; 2
    2bc2:	84 bd       	out	0x24, r24	; 36
    2bc4:	95 e0       	ldi	r25, 0x05	; 5
    2bc6:	95 bd       	out	0x25, r25	; 37
    2bc8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    2bcc:	8c e7       	ldi	r24, 0x7C	; 124
    2bce:	87 bd       	out	0x27, r24	; 39
    2bd0:	78 94       	sei
    2bd2:	08 95       	ret

00002bd4 <adc_init>:
    2bd4:	88 ec       	ldi	r24, 0xC8	; 200
    2bd6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    2bda:	87 e8       	ldi	r24, 0x87	; 135
    2bdc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2be0:	08 95       	ret

00002be2 <start_conversion_asynchro>:
    2be2:	ea e7       	ldi	r30, 0x7A	; 122
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	88 60       	ori	r24, 0x08	; 8
    2bea:	80 83       	st	Z, r24
    2bec:	80 81       	ld	r24, Z
    2bee:	80 64       	ori	r24, 0x40	; 64
    2bf0:	80 83       	st	Z, r24
    2bf2:	08 95       	ret

00002bf4 <__vector_21>:
    2bf4:	1f 92       	push	r1
    2bf6:	0f 92       	push	r0
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	0f 92       	push	r0
    2bfc:	11 24       	eor	r1, r1
    2bfe:	8f 93       	push	r24
    2c00:	9f 93       	push	r25
    2c02:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    2c06:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    2c0a:	81 55       	subi	r24, 0x51	; 81
    2c0c:	91 40       	sbci	r25, 0x01	; 1
    2c0e:	90 93 c6 05 	sts	0x05C6, r25	; 0x8005c6 <adc_result+0x1>
    2c12:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <adc_result>
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <flag>
    2c1c:	9f 91       	pop	r25
    2c1e:	8f 91       	pop	r24
    2c20:	0f 90       	pop	r0
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	0f 90       	pop	r0
    2c26:	1f 90       	pop	r1
    2c28:	18 95       	reti

00002c2a <__vector_14>:
    2c2a:	1f 92       	push	r1
    2c2c:	0f 92       	push	r0
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	0f 92       	push	r0
    2c32:	11 24       	eor	r1, r1
    2c34:	2f 93       	push	r18
    2c36:	3f 93       	push	r19
    2c38:	4f 93       	push	r20
    2c3a:	5f 93       	push	r21
    2c3c:	6f 93       	push	r22
    2c3e:	7f 93       	push	r23
    2c40:	8f 93       	push	r24
    2c42:	9f 93       	push	r25
    2c44:	af 93       	push	r26
    2c46:	bf 93       	push	r27
    2c48:	ef 93       	push	r30
    2c4a:	ff 93       	push	r31
    2c4c:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <licznik>
    2c50:	90 91 c8 05 	lds	r25, 0x05C8	; 0x8005c8 <licznik+0x1>
    2c54:	01 96       	adiw	r24, 0x01	; 1
    2c56:	90 93 c8 05 	sts	0x05C8, r25	; 0x8005c8 <licznik+0x1>
    2c5a:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <licznik>
    2c5e:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <licznik_32bit>
    2c62:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <licznik_32bit+0x1>
    2c66:	a0 91 93 02 	lds	r26, 0x0293	; 0x800293 <licznik_32bit+0x2>
    2c6a:	b0 91 94 02 	lds	r27, 0x0294	; 0x800294 <licznik_32bit+0x3>
    2c6e:	01 96       	adiw	r24, 0x01	; 1
    2c70:	a1 1d       	adc	r26, r1
    2c72:	b1 1d       	adc	r27, r1
    2c74:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <licznik_32bit>
    2c78:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <licznik_32bit+0x1>
    2c7c:	a0 93 93 02 	sts	0x0293, r26	; 0x800293 <licznik_32bit+0x2>
    2c80:	b0 93 94 02 	sts	0x0294, r27	; 0x800294 <licznik_32bit+0x3>
    2c84:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <licznik>
    2c88:	90 91 c8 05 	lds	r25, 0x05C8	; 0x8005c8 <licznik+0x1>
    2c8c:	8d 37       	cpi	r24, 0x7D	; 125
    2c8e:	91 05       	cpc	r25, r1
    2c90:	30 f0       	brcs	.+12     	; 0x2c9e <__vector_14+0x74>
    2c92:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <licznik+0x1>
    2c96:	10 92 c7 05 	sts	0x05C7, r1	; 0x8005c7 <licznik>
    2c9a:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <start_conversion_asynchro>
    2c9e:	ff 91       	pop	r31
    2ca0:	ef 91       	pop	r30
    2ca2:	bf 91       	pop	r27
    2ca4:	af 91       	pop	r26
    2ca6:	9f 91       	pop	r25
    2ca8:	8f 91       	pop	r24
    2caa:	7f 91       	pop	r23
    2cac:	6f 91       	pop	r22
    2cae:	5f 91       	pop	r21
    2cb0:	4f 91       	pop	r20
    2cb2:	3f 91       	pop	r19
    2cb4:	2f 91       	pop	r18
    2cb6:	0f 90       	pop	r0
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	0f 90       	pop	r0
    2cbc:	1f 90       	pop	r1
    2cbe:	18 95       	reti

00002cc0 <append_string>:
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	01 90       	ld	r0, Z+
    2cc4:	00 20       	and	r0, r0
    2cc6:	e9 f7       	brne	.-6      	; 0x2cc2 <append_string+0x2>
    2cc8:	cf 01       	movw	r24, r30
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	0e 94 ce 1b 	call	0x379c	; 0x379c <strcpy>
    2cd0:	08 95       	ret

00002cd2 <main>:


int main (void) // clock 16 Mhz
{
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	c8 53       	subi	r28, 0x38	; 56
    2cdc:	d1 40       	sbci	r29, 0x01	; 1
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
}

void USART_Init_Baud_Rate (unsigned  long Baud_rate){
	unsigned int UBRR;
	UBRR =  ((F_CPU / 8UL) /  Baud_rate ) - 1UL;
	USART_Init(UBRR);
    2ce8:	83 e3       	ldi	r24, 0x33	; 51
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	0e 94 67 15 	call	0x2ace	; 0x2ace <USART_Init>
	//CLKPR  = 1<<CLKPS0;
	USART_Init_Baud_Rate( 38400 ); // do not work at very high baud rate
	//USART_Init(1); //Use this when you want to get very very high baud rate
	
	
	uart_puts_rn("Arduino Booted");
    2cf0:	86 ec       	ldi	r24, 0xC6	; 198
    2cf2:	91 e0       	ldi	r25, 0x01	; 1
    2cf4:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <uart_puts_rn>
	adc_init();
    2cf8:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <adc_init>
// 	while(1){
// 		_delay_ms(500);
// 		start_conversion_synchro();
// 	}
	
init_timer();
    2cfc:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <init_timer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2d00:	2f ef       	ldi	r18, 0xFF	; 255
    2d02:	83 e2       	ldi	r24, 0x23	; 35
    2d04:	94 ef       	ldi	r25, 0xF4	; 244
    2d06:	21 50       	subi	r18, 0x01	; 1
    2d08:	80 40       	sbci	r24, 0x00	; 0
    2d0a:	90 40       	sbci	r25, 0x00	; 0
    2d0c:	e1 f7       	brne	.-8      	; 0x2d06 <main+0x34>
    2d0e:	00 c0       	rjmp	.+0      	; 0x2d10 <main+0x3e>
    2d10:	00 00       	nop
	//SET_LED_ON();
	_delay_ms(5000);
	//SET_LED_OFF();

	FRESULT fr;
	f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
    2d12:	40 e0       	ldi	r20, 0x00	; 0
    2d14:	6b e8       	ldi	r22, 0x8B	; 139
    2d16:	72 e0       	ldi	r23, 0x02	; 2
    2d18:	86 e9       	ldi	r24, 0x96	; 150
    2d1a:	92 e0       	ldi	r25, 0x02	; 2
    2d1c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <f_mount>
// 	Sent_error_message(fr, "Close file WRITE.TXT");
// }
// 
// 
// 
 	fr = f_open(&Fil, "WRITE2.TXT", FA_WRITE | FA_OPEN_APPEND | FA_READ);	/* Create a file */
    2d20:	43 e3       	ldi	r20, 0x33	; 51
    2d22:	69 e6       	ldi	r22, 0x69	; 105
    2d24:	72 e0       	ldi	r23, 0x02	; 2
    2d26:	89 ec       	ldi	r24, 0xC9	; 201
    2d28:	95 e0       	ldi	r25, 0x05	; 5
    2d2a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <f_open>
    2d2e:	18 2f       	mov	r17, r24
	// fr = f_open(&Fil, "WRITE2.TXT", FA_WRITE | FA_CREATE_ALWAYS );
 	Sent_error_message(fr, "File open WRITE2.TXT");
    2d30:	65 ed       	ldi	r22, 0xD5	; 213
    2d32:	71 e0       	ldi	r23, 0x01	; 1
    2d34:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <Sent_error_message>
 	if (fr == FR_OK) {
    2d38:	11 11       	cpse	r17, r1
    2d3a:	3a c0       	rjmp	.+116    	; 0x2db0 <main+0xde>
// 		//if (fr == FR_OK && Bytes_Written == 11) {		/* Lights green LED if data written well */
// 		//	uart_puts_rn("Write to file succesfully");
// 			//DDRB |= (1<<5); PORTB |= (1<<5);	/* Set PB4 high */
// 		//}
// 		
 		fr = f_rewind(&Fil);
    2d3c:	40 e0       	ldi	r20, 0x00	; 0
    2d3e:	50 e0       	ldi	r21, 0x00	; 0
    2d40:	ba 01       	movw	r22, r20
    2d42:	89 ec       	ldi	r24, 0xC9	; 201
    2d44:	95 e0       	ldi	r25, 0x05	; 5
    2d46:	0e 94 b5 13 	call	0x276a	; 0x276a <f_lseek>
		Sent_error_message(fr, "Rewind file");
    2d4a:	6a ee       	ldi	r22, 0xEA	; 234
    2d4c:	71 e0       	ldi	r23, 0x01	; 1
    2d4e:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <Sent_error_message>
 		
		UINT Bytes_to_read = 128;
		UINT Bytes_readed = 0;
    2d52:	c9 52       	subi	r28, 0x29	; 41
    2d54:	df 4f       	sbci	r29, 0xFF	; 255
    2d56:	19 82       	std	Y+1, r1	; 0x01
    2d58:	18 82       	st	Y, r1
    2d5a:	c7 5d       	subi	r28, 0xD7	; 215
    2d5c:	d0 40       	sbci	r29, 0x00	; 0
		do 
		{
			
			BYTE Buff[150];

			fr = f_read ( &Fil, Buff, Bytes_to_read, &Bytes_readed);
    2d5e:	9e 01       	movw	r18, r28
    2d60:	29 52       	subi	r18, 0x29	; 41
    2d62:	3f 4f       	sbci	r19, 0xFF	; 255
    2d64:	40 e8       	ldi	r20, 0x80	; 128
    2d66:	50 e0       	ldi	r21, 0x00	; 0
    2d68:	be 01       	movw	r22, r28
    2d6a:	6f 5f       	subi	r22, 0xFF	; 255
    2d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d6e:	89 ec       	ldi	r24, 0xC9	; 201
    2d70:	95 e0       	ldi	r25, 0x05	; 5
    2d72:	0e 94 11 10 	call	0x2022	; 0x2022 <f_read>
			//Sent_error_message(fr, "Read file");
			if(fr) Sent_error_message(fr, "Read file");
    2d76:	88 23       	and	r24, r24
    2d78:	09 f4       	brne	.+2      	; 0x2d7c <main+0xaa>
    2d7a:	ed c0       	rjmp	.+474    	; 0x2f56 <main+0x284>
    2d7c:	66 ef       	ldi	r22, 0xF6	; 246
    2d7e:	71 e0       	ldi	r23, 0x01	; 1
    2d80:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <Sent_error_message>
    2d84:	0d c0       	rjmp	.+26     	; 0x2da0 <main+0xce>
				
				//uart_puts_rn("Bytes Readed: ");
				uart_puts_with_length((char*)(Buff), Bytes_readed);
				//uart_puts_rn("");
				if(Bytes_to_read != Bytes_readed){
					uart_puts_rn("End of file");
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	92 e0       	ldi	r25, 0x02	; 2
    2d8a:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <uart_puts_rn>
				}
			}
			
		} while (Bytes_to_read == Bytes_readed && fr == FR_OK);
    2d8e:	c9 52       	subi	r28, 0x29	; 41
    2d90:	df 4f       	sbci	r29, 0xFF	; 255
    2d92:	88 81       	ld	r24, Y
    2d94:	99 81       	ldd	r25, Y+1	; 0x01
    2d96:	c7 5d       	subi	r28, 0xD7	; 215
    2d98:	d0 40       	sbci	r29, 0x00	; 0
    2d9a:	80 38       	cpi	r24, 0x80	; 128
    2d9c:	91 05       	cpc	r25, r1
    2d9e:	f9 f2       	breq	.-66     	; 0x2d5e <main+0x8c>
		
		
		fr = f_close(&Fil);	
    2da0:	89 ec       	ldi	r24, 0xC9	; 201
    2da2:	95 e0       	ldi	r25, 0x05	; 5
    2da4:	0e 94 97 13 	call	0x272e	; 0x272e <f_close>
		Sent_error_message(fr, "Close file");
    2da8:	6c e0       	ldi	r22, 0x0C	; 12
    2daa:	72 e0       	ldi	r23, 0x02	; 2
    2dac:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <Sent_error_message>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    2db0:	8e 01       	movw	r16, r28
    2db2:	09 50       	subi	r16, 0x09	; 9
    2db4:	1f 4f       	sbci	r17, 0xFF	; 255

// 	for (;;) {
// 
// 	}
	while(1){
		if(flag){
    2db6:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <flag>
    2dba:	88 23       	and	r24, r24
    2dbc:	e1 f3       	breq	.-8      	; 0x2db6 <main+0xe4>
				flag = 0;
    2dbe:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <flag>
				char adc_result_string[ 32 ];
				char licznik_32bit_string[ 32 ];
				char string_size[ 32 ];
				utoa( adc_result, adc_result_string, 10 );
    2dc2:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <adc_result>
    2dc6:	90 91 c6 05 	lds	r25, 0x05C6	; 0x8005c6 <adc_result+0x1>
    2dca:	4a e0       	ldi	r20, 0x0A	; 10
    2dcc:	be 01       	movw	r22, r28
    2dce:	69 5e       	subi	r22, 0xE9	; 233
    2dd0:	7e 4f       	sbci	r23, 0xFE	; 254
    2dd2:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__utoa_ncheck>
				utoa( licznik_32bit, licznik_32bit_string, 10 );
    2dd6:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <licznik_32bit>
    2dda:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <licznik_32bit+0x1>
    2dde:	a0 91 93 02 	lds	r26, 0x0293	; 0x800293 <licznik_32bit+0x2>
    2de2:	b0 91 94 02 	lds	r27, 0x0294	; 0x800294 <licznik_32bit+0x3>
    2de6:	4a e0       	ldi	r20, 0x0A	; 10
    2de8:	b8 01       	movw	r22, r16
    2dea:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__utoa_ncheck>
				UINT string_size_int = strlen(licznik_32bit_string);
    2dee:	f8 01       	movw	r30, r16
    2df0:	01 90       	ld	r0, Z+
    2df2:	00 20       	and	r0, r0
    2df4:	e9 f7       	brne	.-6      	; 0x2df0 <main+0x11e>
    2df6:	cf 01       	movw	r24, r30
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	4a e0       	ldi	r20, 0x0A	; 10
    2dfc:	be 01       	movw	r22, r28
    2dfe:	69 52       	subi	r22, 0x29	; 41
    2e00:	7f 4f       	sbci	r23, 0xFF	; 255
    2e02:	80 1b       	sub	r24, r16
    2e04:	91 0b       	sbc	r25, r17
    2e06:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__utoa_ncheck>
				uart_puts(licznik_32bit_string);
				uart_puts(" ADC asynchro ");
				uart_puts_rn(adc_result_string);*/
				char string_to_sd[64];
				char string_to_sd2[64];
				string_to_sd[0]= '\0';
    2e0a:	c9 56       	subi	r28, 0x69	; 105
    2e0c:	df 4f       	sbci	r29, 0xFF	; 255
    2e0e:	18 82       	st	Y, r1
    2e10:	c7 59       	subi	r28, 0x97	; 151
    2e12:	d0 40       	sbci	r29, 0x00	; 0
				string_to_sd2[0]= '\0';
    2e14:	19 82       	std	Y+1, r1	; 0x01
				
				/*strcpy(string_to_sd, "String size: ");
				char *p = string_to_sd + strlen(string_to_sd);
				strcpy(p, licznik_32bit_string);*/
				append_string(string_to_sd, "String size: ");
    2e16:	67 e1       	ldi	r22, 0x17	; 23
    2e18:	72 e0       	ldi	r23, 0x02	; 2
    2e1a:	ce 01       	movw	r24, r28
    2e1c:	89 56       	subi	r24, 0x69	; 105
    2e1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e20:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <append_string>
				append_string(string_to_sd, string_size);
    2e24:	be 01       	movw	r22, r28
    2e26:	69 52       	subi	r22, 0x29	; 41
    2e28:	7f 4f       	sbci	r23, 0xFF	; 255
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	89 56       	subi	r24, 0x69	; 105
    2e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e30:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <append_string>
				append_string(string_to_sd, " Licznik_32bit: ");
    2e34:	65 e2       	ldi	r22, 0x25	; 37
    2e36:	72 e0       	ldi	r23, 0x02	; 2
    2e38:	ce 01       	movw	r24, r28
    2e3a:	89 56       	subi	r24, 0x69	; 105
    2e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e3e:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <append_string>
				append_string(string_to_sd, licznik_32bit_string);
    2e42:	b8 01       	movw	r22, r16
    2e44:	ce 01       	movw	r24, r28
    2e46:	89 56       	subi	r24, 0x69	; 105
    2e48:	9f 4f       	sbci	r25, 0xFF	; 255
    2e4a:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <append_string>
				append_string(string_to_sd, " ADC asynchro: ");
    2e4e:	66 e3       	ldi	r22, 0x36	; 54
    2e50:	72 e0       	ldi	r23, 0x02	; 2
    2e52:	ce 01       	movw	r24, r28
    2e54:	89 56       	subi	r24, 0x69	; 105
    2e56:	9f 4f       	sbci	r25, 0xFF	; 255
    2e58:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <append_string>
				append_string(string_to_sd, adc_result_string);
    2e5c:	be 01       	movw	r22, r28
    2e5e:	69 5e       	subi	r22, 0xE9	; 233
    2e60:	7e 4f       	sbci	r23, 0xFE	; 254
    2e62:	ce 01       	movw	r24, r28
    2e64:	89 56       	subi	r24, 0x69	; 105
    2e66:	9f 4f       	sbci	r25, 0xFF	; 255
    2e68:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <append_string>
				append_string(string_to_sd, "\r\n");
    2e6c:	69 e8       	ldi	r22, 0x89	; 137
    2e6e:	72 e0       	ldi	r23, 0x02	; 2
    2e70:	ce 01       	movw	r24, r28
    2e72:	89 56       	subi	r24, 0x69	; 105
    2e74:	9f 4f       	sbci	r25, 0xFF	; 255
    2e76:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <append_string>
				//uart_puts_rn(string_to_sd);
				uart_puts(string_to_sd);
    2e7a:	ce 01       	movw	r24, r28
    2e7c:	89 56       	subi	r24, 0x69	; 105
    2e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e80:	0e 94 7f 15 	call	0x2afe	; 0x2afe <uart_puts>
				
				append_string(string_to_sd2, licznik_32bit_string);
    2e84:	b8 01       	movw	r22, r16
    2e86:	ce 01       	movw	r24, r28
    2e88:	01 96       	adiw	r24, 0x01	; 1
    2e8a:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <append_string>
				append_string(string_to_sd2, ";");
    2e8e:	66 e4       	ldi	r22, 0x46	; 70
    2e90:	72 e0       	ldi	r23, 0x02	; 2
    2e92:	ce 01       	movw	r24, r28
    2e94:	01 96       	adiw	r24, 0x01	; 1
    2e96:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <append_string>
				append_string(string_to_sd2, adc_result_string);
    2e9a:	be 01       	movw	r22, r28
    2e9c:	69 5e       	subi	r22, 0xE9	; 233
    2e9e:	7e 4f       	sbci	r23, 0xFE	; 254
    2ea0:	ce 01       	movw	r24, r28
    2ea2:	01 96       	adiw	r24, 0x01	; 1
    2ea4:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <append_string>
				append_string(string_to_sd2, "\r\n");
    2ea8:	69 e8       	ldi	r22, 0x89	; 137
    2eaa:	72 e0       	ldi	r23, 0x02	; 2
    2eac:	ce 01       	movw	r24, r28
    2eae:	01 96       	adiw	r24, 0x01	; 1
    2eb0:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <append_string>
				
				append_string(Buffer_string, string_to_sd2);
    2eb4:	be 01       	movw	r22, r28
    2eb6:	6f 5f       	subi	r22, 0xFF	; 255
    2eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eba:	85 ec       	ldi	r24, 0xC5	; 197
    2ebc:	94 e0       	ldi	r25, 0x04	; 4
    2ebe:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <append_string>
				uint16_t Buffer_string_size;
				
				Buffer_string_size = strlen(Buffer_string);
    2ec2:	e5 ec       	ldi	r30, 0xC5	; 197
    2ec4:	f4 e0       	ldi	r31, 0x04	; 4
    2ec6:	01 90       	ld	r0, Z+
    2ec8:	00 20       	and	r0, r0
    2eca:	e9 f7       	brne	.-6      	; 0x2ec6 <main+0x1f4>
    2ecc:	31 97       	sbiw	r30, 0x01	; 1
    2ece:	e5 5c       	subi	r30, 0xC5	; 197
    2ed0:	f4 40       	sbci	r31, 0x04	; 4
				//Buffer_string_size = 201;
				if(Buffer_string_size > 200){
    2ed2:	e9 3c       	cpi	r30, 0xC9	; 201
    2ed4:	f1 05       	cpc	r31, r1
    2ed6:	08 f4       	brcc	.+2      	; 0x2eda <main+0x208>
    2ed8:	6e cf       	rjmp	.-292    	; 0x2db6 <main+0xe4>
								
				fr = f_open(&Fil, "WRITE2.TXT", FA_WRITE | FA_OPEN_APPEND );	/* Create a file */
    2eda:	42 e3       	ldi	r20, 0x32	; 50
    2edc:	69 e6       	ldi	r22, 0x69	; 105
    2ede:	72 e0       	ldi	r23, 0x02	; 2
    2ee0:	89 ec       	ldi	r24, 0xC9	; 201
    2ee2:	95 e0       	ldi	r25, 0x05	; 5
    2ee4:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <f_open>
    2ee8:	f8 2e       	mov	r15, r24
				Sent_error_message(fr, "File open WRITE2.TXT");
    2eea:	65 ed       	ldi	r22, 0xD5	; 213
    2eec:	71 e0       	ldi	r23, 0x01	; 1
    2eee:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <Sent_error_message>
				if (fr == FR_OK) {
    2ef2:	f1 10       	cpse	r15, r1
    2ef4:	1f c0       	rjmp	.+62     	; 0x2f34 <main+0x262>
					UINT Bytes_Written;
					//BYTE Bytes_to_write[512];
					//for(int i = 0; i < 512;i++)
					//Bytes_to_write[i] = i;
					//for(int i = 0; i < 100;i++){
						fr = f_write(&Fil, (BYTE*)(Buffer_string), strlen(Buffer_string), &Bytes_Written);	/* Write data to the file */
    2ef6:	e5 ec       	ldi	r30, 0xC5	; 197
    2ef8:	f4 e0       	ldi	r31, 0x04	; 4
    2efa:	01 90       	ld	r0, Z+
    2efc:	00 20       	and	r0, r0
    2efe:	e9 f7       	brne	.-6      	; 0x2efa <main+0x228>
    2f00:	31 97       	sbiw	r30, 0x01	; 1
    2f02:	af 01       	movw	r20, r30
    2f04:	45 5c       	subi	r20, 0xC5	; 197
    2f06:	54 40       	sbci	r21, 0x04	; 4
    2f08:	9e 01       	movw	r18, r28
    2f0a:	29 5c       	subi	r18, 0xC9	; 201
    2f0c:	3e 4f       	sbci	r19, 0xFE	; 254
    2f0e:	65 ec       	ldi	r22, 0xC5	; 197
    2f10:	74 e0       	ldi	r23, 0x04	; 4
    2f12:	89 ec       	ldi	r24, 0xC9	; 201
    2f14:	95 e0       	ldi	r25, 0x05	; 5
    2f16:	0e 94 74 11 	call	0x22e8	; 0x22e8 <f_write>
						Sent_error_message(fr, "File write WRITE2.TXT");
    2f1a:	68 e4       	ldi	r22, 0x48	; 72
    2f1c:	72 e0       	ldi	r23, 0x02	; 2
    2f1e:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <Sent_error_message>
					//}
					fr = f_close(&Fil);
    2f22:	89 ec       	ldi	r24, 0xC9	; 201
    2f24:	95 e0       	ldi	r25, 0x05	; 5
    2f26:	0e 94 97 13 	call	0x272e	; 0x272e <f_close>
    2f2a:	f8 2e       	mov	r15, r24
					Sent_error_message(fr, "Close file WRITE2.TXT");
    2f2c:	6e e5       	ldi	r22, 0x5E	; 94
    2f2e:	72 e0       	ldi	r23, 0x02	; 2
    2f30:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <Sent_error_message>
				
				}
				if (fr == FR_DISK_ERR){
    2f34:	f1 e0       	ldi	r31, 0x01	; 1
    2f36:	ff 12       	cpse	r15, r31
    2f38:	07 c0       	rjmp	.+14     	; 0x2f48 <main+0x276>
					//fr = f_close(&Fil);
					//Sent_error_message(fr, "File open WRITE2.TXT");
					f_mount(&FatFs, "", 0);
    2f3a:	40 e0       	ldi	r20, 0x00	; 0
    2f3c:	6b e8       	ldi	r22, 0x8B	; 139
    2f3e:	72 e0       	ldi	r23, 0x02	; 2
    2f40:	86 e9       	ldi	r24, 0x96	; 150
    2f42:	92 e0       	ldi	r25, 0x02	; 2
    2f44:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <f_mount>
void delete_string(char *string){
	
	//char *p = string + strlen(string);
	//strcpy(p, string_to_append);
	
	*string = '\0';
    2f48:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <Buffer_string>
					//fr = f_close(&Fil);
					//Sent_error_message(fr, "File open WRITE2.TXT");
					f_mount(&FatFs, "", 0);
					}
			delete_string(Buffer_string);
			uart_puts("Buffer_string deleted\r\n");	
    2f4c:	84 e7       	ldi	r24, 0x74	; 116
    2f4e:	92 e0       	ldi	r25, 0x02	; 2
    2f50:	0e 94 7f 15 	call	0x2afe	; 0x2afe <uart_puts>
    2f54:	30 cf       	rjmp	.-416    	; 0x2db6 <main+0xe4>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2f56:	4a e0       	ldi	r20, 0x0A	; 10
    2f58:	be 01       	movw	r22, r28
    2f5a:	69 56       	subi	r22, 0x69	; 105
    2f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5e:	c9 52       	subi	r28, 0x29	; 41
    2f60:	df 4f       	sbci	r29, 0xFF	; 255
    2f62:	88 81       	ld	r24, Y
    2f64:	99 81       	ldd	r25, Y+1	; 0x01
    2f66:	c7 5d       	subi	r28, 0xD7	; 215
    2f68:	d0 40       	sbci	r29, 0x00	; 0
    2f6a:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__itoa_ncheck>
				char b[ 32 ];
				itoa( Bytes_readed, b, 10 );
				//uart_puts_rn(b);
				
				//uart_puts_rn("Bytes Readed: ");
				uart_puts_with_length((char*)(Buff), Bytes_readed);
    2f6e:	c9 52       	subi	r28, 0x29	; 41
    2f70:	df 4f       	sbci	r29, 0xFF	; 255
    2f72:	68 81       	ld	r22, Y
    2f74:	79 81       	ldd	r23, Y+1	; 0x01
    2f76:	c7 5d       	subi	r28, 0xD7	; 215
    2f78:	d0 40       	sbci	r29, 0x00	; 0
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	01 96       	adiw	r24, 0x01	; 1
    2f7e:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <uart_puts_with_length>
				//uart_puts_rn("");
				if(Bytes_to_read != Bytes_readed){
    2f82:	c9 52       	subi	r28, 0x29	; 41
    2f84:	df 4f       	sbci	r29, 0xFF	; 255
    2f86:	88 81       	ld	r24, Y
    2f88:	99 81       	ldd	r25, Y+1	; 0x01
    2f8a:	c7 5d       	subi	r28, 0xD7	; 215
    2f8c:	d0 40       	sbci	r29, 0x00	; 0
    2f8e:	80 38       	cpi	r24, 0x80	; 128
    2f90:	91 05       	cpc	r25, r1
    2f92:	09 f0       	breq	.+2      	; 0x2f96 <main+0x2c4>
    2f94:	f8 ce       	rjmp	.-528    	; 0x2d86 <main+0xb4>
    2f96:	fb ce       	rjmp	.-522    	; 0x2d8e <main+0xbc>

00002f98 <dly_us>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f98:	25 e0       	ldi	r18, 0x05	; 5
    2f9a:	2a 95       	dec	r18
    2f9c:	f1 f7       	brne	.-4      	; 0x2f9a <dly_us+0x2>
    2f9e:	00 00       	nop
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif*/
_delay_us(1);
	} while (--n);
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	d1 f7       	brne	.-12     	; 0x2f98 <dly_us>
}
    2fa4:	08 95       	ret

00002fa6 <SPI_MasterInit>:
#define DD_SCK PB5
#define DD_MISO PB4
#define DD_CS PB2

void SPI_MasterInit(void){
	CS_INIT();
    2fa6:	22 9a       	sbi	0x04, 2	; 4
	DDR_SPI &= ~(( 1<<DD_MISO ) );
    2fa8:	24 98       	cbi	0x04, 4	; 4
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)| ( 1<<DD_CS ); /* Set MOSI and SCK output, all others input */
    2faa:	84 b1       	in	r24, 0x04	; 4
    2fac:	8c 62       	ori	r24, 0x2C	; 44
    2fae:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X);//|(1<<SPR1)|(1<<SPR0)|(1<<SPI2X); /* Enable SPI, Master, set clock rate fck/16 */
    2fb0:	81 e5       	ldi	r24, 0x51	; 81
    2fb2:	8c bd       	out	0x2c, r24	; 44
    2fb4:	08 95       	ret

00002fb6 <SPI_MasterTransmit>:
	
	}
	
BYTE SPI_MasterTransmit(BYTE cData){/* Start transmission */
	BYTE received_data;
	SPDR = cData;/* Wait for transmission complete */
    2fb6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    2fb8:	0d b4       	in	r0, 0x2d	; 45
    2fba:	07 fe       	sbrs	r0, 7
    2fbc:	fd cf       	rjmp	.-6      	; 0x2fb8 <SPI_MasterTransmit+0x2>
	received_data = SPDR;
    2fbe:	8e b5       	in	r24, 0x2e	; 46
	return received_data;
	}
    2fc0:	08 95       	ret

00002fc2 <rcvr_mmc>:
static
void rcvr_mmc (
	BYTE *buff,	/* Pointer to read buffer */
	UINT bc		/* Number of bytes to receive */
)
{
    2fc2:	0f 93       	push	r16
    2fc4:	1f 93       	push	r17
    2fc6:	cf 93       	push	r28
    2fc8:	df 93       	push	r29
    2fca:	eb 01       	movw	r28, r22
    2fcc:	8c 01       	movw	r16, r24
// 		r <<= 1; if (DO) r++;	/* bit1 */
// 		CK_H(); CK_L();
// 		r <<= 1; if (DO) r++;	/* bit0 */
// 		CK_H(); CK_L();
// 		*buff++ = r;			/* Store a received byte */
		*buff++ = SPI_MasterTransmit(255);
    2fce:	8f ef       	ldi	r24, 0xFF	; 255
    2fd0:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <SPI_MasterTransmit>
    2fd4:	f8 01       	movw	r30, r16
    2fd6:	81 93       	st	Z+, r24
    2fd8:	8f 01       	movw	r16, r30
	} while (--bc);
    2fda:	21 97       	sbiw	r28, 0x01	; 1
    2fdc:	c1 f7       	brne	.-16     	; 0x2fce <rcvr_mmc+0xc>
}
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	08 95       	ret

00002fe8 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
    2fe8:	0f 93       	push	r16
    2fea:	1f 93       	push	r17
    2fec:	cf 93       	push	r28
    2fee:	df 93       	push	r29
    2ff0:	1f 92       	push	r1
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    2ff6:	08 e8       	ldi	r16, 0x88	; 136
    2ff8:	13 e1       	ldi	r17, 0x13	; 19
		rcvr_mmc(&d, 1);
    2ffa:	61 e0       	ldi	r22, 0x01	; 1
    2ffc:	70 e0       	ldi	r23, 0x00	; 0
    2ffe:	ce 01       	movw	r24, r28
    3000:	01 96       	adiw	r24, 0x01	; 1
    3002:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <rcvr_mmc>
		if (d == 0xFF) break;
    3006:	89 81       	ldd	r24, Y+1	; 0x01
    3008:	8f 3f       	cpi	r24, 0xFF	; 255
    300a:	39 f0       	breq	.+14     	; 0x301a <wait_ready+0x32>
		dly_us(100);
    300c:	84 e6       	ldi	r24, 0x64	; 100
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <dly_us>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    3014:	01 50       	subi	r16, 0x01	; 1
    3016:	11 09       	sbc	r17, r1
    3018:	81 f7       	brne	.-32     	; 0x2ffa <wait_ready+0x12>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	01 2b       	or	r16, r17
    3020:	11 f4       	brne	.+4      	; 0x3026 <wait_ready+0x3e>
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	90 e0       	ldi	r25, 0x00	; 0
}
    3026:	0f 90       	pop	r0
    3028:	df 91       	pop	r29
    302a:	cf 91       	pop	r28
    302c:	1f 91       	pop	r17
    302e:	0f 91       	pop	r16
    3030:	08 95       	ret

00003032 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    3032:	cf 93       	push	r28
    3034:	df 93       	push	r29
    3036:	1f 92       	push	r1
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();				/* Set CS# high */
    303c:	2a 9a       	sbi	0x05, 2	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    303e:	61 e0       	ldi	r22, 0x01	; 1
    3040:	70 e0       	ldi	r23, 0x00	; 0
    3042:	ce 01       	movw	r24, r28
    3044:	01 96       	adiw	r24, 0x01	; 1
    3046:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <rcvr_mmc>
}
    304a:	0f 90       	pop	r0
    304c:	df 91       	pop	r29
    304e:	cf 91       	pop	r28
    3050:	08 95       	ret

00003052 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
    3052:	0f 93       	push	r16
    3054:	1f 93       	push	r17
    3056:	cf 93       	push	r28
    3058:	df 93       	push	r29
    305a:	1f 92       	push	r1
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();				/* Set CS# low */
    3060:	2a 98       	cbi	0x05, 2	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    3062:	61 e0       	ldi	r22, 0x01	; 1
    3064:	70 e0       	ldi	r23, 0x00	; 0
    3066:	ce 01       	movw	r24, r28
    3068:	01 96       	adiw	r24, 0x01	; 1
    306a:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <rcvr_mmc>
	if (wait_ready()) return 1;	/* Wait for card ready */
    306e:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <wait_ready>
    3072:	8c 01       	movw	r16, r24
    3074:	89 2b       	or	r24, r25
    3076:	19 f4       	brne	.+6      	; 0x307e <select+0x2c>
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
			//return 1;
	deselect();
    3078:	0e 94 19 18 	call	0x3032	; 0x3032 <deselect>
	return 0;			/* Failed */
    307c:	02 c0       	rjmp	.+4      	; 0x3082 <select+0x30>
{
	BYTE d;

	CS_L();				/* Set CS# low */
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
	if (wait_ready()) return 1;	/* Wait for card ready */
    307e:	01 e0       	ldi	r16, 0x01	; 1
    3080:	10 e0       	ldi	r17, 0x00	; 0
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
			//return 1;
	deselect();
	return 0;			/* Failed */
}
    3082:	c8 01       	movw	r24, r16
    3084:	0f 90       	pop	r0
    3086:	df 91       	pop	r29
    3088:	cf 91       	pop	r28
    308a:	1f 91       	pop	r17
    308c:	0f 91       	pop	r16
    308e:	08 95       	ret

00003090 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
    3090:	cf 92       	push	r12
    3092:	df 92       	push	r13
    3094:	ef 92       	push	r14
    3096:	ff 92       	push	r15
    3098:	0f 93       	push	r16
    309a:	1f 93       	push	r17
    309c:	cf 93       	push	r28
    309e:	df 93       	push	r29
    30a0:	00 d0       	rcall	.+0      	; 0x30a2 <rcvr_datablock+0x12>
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	7c 01       	movw	r14, r24
    30a8:	6b 01       	movw	r12, r22
    30aa:	08 ee       	ldi	r16, 0xE8	; 232
    30ac:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
    30ae:	61 e0       	ldi	r22, 0x01	; 1
    30b0:	70 e0       	ldi	r23, 0x00	; 0
    30b2:	ce 01       	movw	r24, r28
    30b4:	01 96       	adiw	r24, 0x01	; 1
    30b6:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <rcvr_mmc>
		if (d[0] != 0xFF) break;
    30ba:	89 81       	ldd	r24, Y+1	; 0x01
    30bc:	8f 3f       	cpi	r24, 0xFF	; 255
    30be:	39 f4       	brne	.+14     	; 0x30ce <rcvr_datablock+0x3e>
		dly_us(100);
    30c0:	84 e6       	ldi	r24, 0x64	; 100
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <dly_us>
    30c8:	01 50       	subi	r16, 0x01	; 1
    30ca:	11 09       	sbc	r17, r1
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    30cc:	81 f7       	brne	.-32     	; 0x30ae <rcvr_datablock+0x1e>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	8e 3f       	cpi	r24, 0xFE	; 254
    30d2:	69 f4       	brne	.+26     	; 0x30ee <rcvr_datablock+0x5e>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    30d4:	b6 01       	movw	r22, r12
    30d6:	c7 01       	movw	r24, r14
    30d8:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
    30dc:	62 e0       	ldi	r22, 0x02	; 2
    30de:	70 e0       	ldi	r23, 0x00	; 0
    30e0:	ce 01       	movw	r24, r28
    30e2:	01 96       	adiw	r24, 0x01	; 1
    30e4:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <rcvr_mmc>

	return 1;						/* Return with success */
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	02 c0       	rjmp	.+4      	; 0x30f2 <rcvr_datablock+0x62>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	90 e0       	ldi	r25, 0x00	; 0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
    30f2:	0f 90       	pop	r0
    30f4:	0f 90       	pop	r0
    30f6:	df 91       	pop	r29
    30f8:	cf 91       	pop	r28
    30fa:	1f 91       	pop	r17
    30fc:	0f 91       	pop	r16
    30fe:	ff 90       	pop	r15
    3100:	ef 90       	pop	r14
    3102:	df 90       	pop	r13
    3104:	cf 90       	pop	r12
    3106:	08 95       	ret

00003108 <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
    3108:	0f 93       	push	r16
    310a:	1f 93       	push	r17
    310c:	cf 93       	push	r28
    310e:	df 93       	push	r29
    3110:	eb 01       	movw	r28, r22
    3112:	8c 01       	movw	r16, r24


	do {
		d = *buff++;	/* Get a byte to be sent */
		
		SPI_MasterTransmit(d);
    3114:	f8 01       	movw	r30, r16
    3116:	81 91       	ld	r24, Z+
    3118:	8f 01       	movw	r16, r30
    311a:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <SPI_MasterTransmit>
		//CK_H(); CK_L();
	//	if (d & 0x01) DI_H(); else { DI_L();	/* bit0 */
			//PORTB |= (1<<5);
		//}
		//CK_H(); CK_L();
	} while (--bc);
    311e:	21 97       	sbiw	r28, 0x01	; 1
    3120:	c9 f7       	brne	.-14     	; 0x3114 <xmit_mmc+0xc>
}
    3122:	df 91       	pop	r29
    3124:	cf 91       	pop	r28
    3126:	1f 91       	pop	r17
    3128:	0f 91       	pop	r16
    312a:	08 95       	ret

0000312c <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    312c:	df 92       	push	r13
    312e:	ef 92       	push	r14
    3130:	ff 92       	push	r15
    3132:	0f 93       	push	r16
    3134:	1f 93       	push	r17
    3136:	cf 93       	push	r28
    3138:	df 93       	push	r29
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	27 97       	sbiw	r28, 0x07	; 7
    3140:	0f b6       	in	r0, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	de bf       	out	0x3e, r29	; 62
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	cd bf       	out	0x3d, r28	; 61
    314a:	18 2f       	mov	r17, r24
    314c:	04 2f       	mov	r16, r20
    314e:	f5 2e       	mov	r15, r21
    3150:	e6 2e       	mov	r14, r22
    3152:	d7 2e       	mov	r13, r23
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    3154:	88 23       	and	r24, r24
    3156:	54 f4       	brge	.+20     	; 0x316c <send_cmd+0x40>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
    3158:	40 e0       	ldi	r20, 0x00	; 0
    315a:	50 e0       	ldi	r21, 0x00	; 0
    315c:	ba 01       	movw	r22, r20
    315e:	87 e3       	ldi	r24, 0x37	; 55
    3160:	0e 94 96 18 	call	0x312c	; 0x312c <send_cmd>
		if (n > 1) return n;
    3164:	82 30       	cpi	r24, 0x02	; 2
    3166:	08 f0       	brcs	.+2      	; 0x316a <send_cmd+0x3e>
    3168:	57 c0       	rjmp	.+174    	; 0x3218 <send_cmd+0xec>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    316a:	1f 77       	andi	r17, 0x7F	; 127
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    316c:	1c 30       	cpi	r17, 0x0C	; 12
    316e:	29 f1       	breq	.+74     	; 0x31ba <send_cmd+0x8e>
		deselect();
    3170:	0e 94 19 18 	call	0x3032	; 0x3032 <deselect>
		if (!select()) return 0xFF;
    3174:	0e 94 29 18 	call	0x3052	; 0x3052 <select>
    3178:	89 2b       	or	r24, r25
    317a:	e9 f0       	breq	.+58     	; 0x31b6 <send_cmd+0x8a>
	}
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    317c:	81 2f       	mov	r24, r17
    317e:	80 64       	ori	r24, 0x40	; 64
    3180:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    3182:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    3184:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    3186:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    3188:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    318a:	11 23       	and	r17, r17
    318c:	e1 f1       	breq	.+120    	; 0x3206 <send_cmd+0xda>
    318e:	38 c0       	rjmp	.+112    	; 0x3200 <send_cmd+0xd4>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
	xmit_mmc(buf, 6);

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    3190:	61 e0       	ldi	r22, 0x01	; 1
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	ce 01       	movw	r24, r28
    3196:	01 96       	adiw	r24, 0x01	; 1
    3198:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <rcvr_mmc>
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    319c:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
    319e:	61 e0       	ldi	r22, 0x01	; 1
    31a0:	70 e0       	ldi	r23, 0x00	; 0
    31a2:	ce 01       	movw	r24, r28
    31a4:	01 96       	adiw	r24, 0x01	; 1
    31a6:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <rcvr_mmc>
	while ((d & 0x80) && --n);
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	88 23       	and	r24, r24
    31ae:	a4 f5       	brge	.+104    	; 0x3218 <send_cmd+0xec>
    31b0:	11 50       	subi	r17, 0x01	; 1
    31b2:	a9 f7       	brne	.-22     	; 0x319e <send_cmd+0x72>
    31b4:	31 c0       	rjmp	.+98     	; 0x3218 <send_cmd+0xec>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    31b6:	8f ef       	ldi	r24, 0xFF	; 255
    31b8:	2f c0       	rjmp	.+94     	; 0x3218 <send_cmd+0xec>
	}
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    31ba:	8c e4       	ldi	r24, 0x4C	; 76
    31bc:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    31be:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    31c0:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    31c2:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    31c4:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    31ca:	66 e0       	ldi	r22, 0x06	; 6
    31cc:	70 e0       	ldi	r23, 0x00	; 0
    31ce:	ce 01       	movw	r24, r28
    31d0:	02 96       	adiw	r24, 0x02	; 2
    31d2:	0e 94 84 18 	call	0x3108	; 0x3108 <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    31d6:	1c 30       	cpi	r17, 0x0C	; 12
    31d8:	09 f7       	brne	.-62     	; 0x319c <send_cmd+0x70>
    31da:	da cf       	rjmp	.-76     	; 0x3190 <send_cmd+0x64>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    31dc:	87 e8       	ldi	r24, 0x87	; 135
    31de:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    31e0:	66 e0       	ldi	r22, 0x06	; 6
    31e2:	70 e0       	ldi	r23, 0x00	; 0
    31e4:	ce 01       	movw	r24, r28
    31e6:	02 96       	adiw	r24, 0x02	; 2
    31e8:	0e 94 84 18 	call	0x3108	; 0x3108 <xmit_mmc>
    31ec:	d7 cf       	rjmp	.-82     	; 0x319c <send_cmd+0x70>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    31f2:	66 e0       	ldi	r22, 0x06	; 6
    31f4:	70 e0       	ldi	r23, 0x00	; 0
    31f6:	ce 01       	movw	r24, r28
    31f8:	02 96       	adiw	r24, 0x02	; 2
    31fa:	0e 94 84 18 	call	0x3108	; 0x3108 <xmit_mmc>
    31fe:	ce cf       	rjmp	.-100    	; 0x319c <send_cmd+0x70>
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    3200:	18 30       	cpi	r17, 0x08	; 8
    3202:	61 f3       	breq	.-40     	; 0x31dc <send_cmd+0xb0>
    3204:	f4 cf       	rjmp	.-24     	; 0x31ee <send_cmd+0xc2>
	buf[5] = n;
    3206:	85 e9       	ldi	r24, 0x95	; 149
    3208:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    320a:	66 e0       	ldi	r22, 0x06	; 6
    320c:	70 e0       	ldi	r23, 0x00	; 0
    320e:	ce 01       	movw	r24, r28
    3210:	02 96       	adiw	r24, 0x02	; 2
    3212:	0e 94 84 18 	call	0x3108	; 0x3108 <xmit_mmc>
    3216:	c2 cf       	rjmp	.-124    	; 0x319c <send_cmd+0x70>
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
    3218:	27 96       	adiw	r28, 0x07	; 7
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	cd bf       	out	0x3d, r28	; 61
    3224:	df 91       	pop	r29
    3226:	cf 91       	pop	r28
    3228:	1f 91       	pop	r17
    322a:	0f 91       	pop	r16
    322c:	ff 90       	pop	r15
    322e:	ef 90       	pop	r14
    3230:	df 90       	pop	r13
    3232:	08 95       	ret

00003234 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    3234:	ef 92       	push	r14
    3236:	ff 92       	push	r15
    3238:	1f 93       	push	r17
    323a:	cf 93       	push	r28
    323c:	df 93       	push	r29
    323e:	00 d0       	rcall	.+0      	; 0x3240 <xmit_datablock+0xc>
    3240:	cd b7       	in	r28, 0x3d	; 61
    3242:	de b7       	in	r29, 0x3e	; 62
    3244:	7c 01       	movw	r14, r24
    3246:	16 2f       	mov	r17, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
    3248:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <wait_ready>
    324c:	00 97       	sbiw	r24, 0x00	; 0
    324e:	31 f1       	breq	.+76     	; 0x329c <xmit_datablock+0x68>

	d[0] = token;
    3250:	19 83       	std	Y+1, r17	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
    3252:	61 e0       	ldi	r22, 0x01	; 1
    3254:	70 e0       	ldi	r23, 0x00	; 0
    3256:	ce 01       	movw	r24, r28
    3258:	01 96       	adiw	r24, 0x01	; 1
    325a:	0e 94 84 18 	call	0x3108	; 0x3108 <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
    325e:	1d 3f       	cpi	r17, 0xFD	; 253
    3260:	d9 f0       	breq	.+54     	; 0x3298 <xmit_datablock+0x64>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    3262:	60 e0       	ldi	r22, 0x00	; 0
    3264:	72 e0       	ldi	r23, 0x02	; 2
    3266:	c7 01       	movw	r24, r14
    3268:	0e 94 84 18 	call	0x3108	; 0x3108 <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    326c:	62 e0       	ldi	r22, 0x02	; 2
    326e:	70 e0       	ldi	r23, 0x00	; 0
    3270:	ce 01       	movw	r24, r28
    3272:	01 96       	adiw	r24, 0x01	; 1
    3274:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
    3278:	61 e0       	ldi	r22, 0x01	; 1
    327a:	70 e0       	ldi	r23, 0x00	; 0
    327c:	ce 01       	movw	r24, r28
    327e:	01 96       	adiw	r24, 0x01	; 1
    3280:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <rcvr_mmc>
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	8f 71       	andi	r24, 0x1F	; 31
    3288:	31 e0       	ldi	r19, 0x01	; 1
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	85 30       	cpi	r24, 0x05	; 5
    328e:	09 f0       	breq	.+2      	; 0x3292 <xmit_datablock+0x5e>
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	83 2f       	mov	r24, r19
    3294:	92 2f       	mov	r25, r18
    3296:	02 c0       	rjmp	.+4      	; 0x329c <xmit_datablock+0x68>
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	90 e0       	ldi	r25, 0x00	; 0
}
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	df 91       	pop	r29
    32a2:	cf 91       	pop	r28
    32a4:	1f 91       	pop	r17
    32a6:	ff 90       	pop	r15
    32a8:	ef 90       	pop	r14
    32aa:	08 95       	ret

000032ac <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    32ac:	81 11       	cpse	r24, r1
    32ae:	03 c0       	rjmp	.+6      	; 0x32b6 <disk_status+0xa>

	return Stat;
    32b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    32b4:	08 95       	ret

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    32b6:	81 e0       	ldi	r24, 0x01	; 1

	return Stat;
}
    32b8:	08 95       	ret

000032ba <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    32ba:	ef 92       	push	r14
    32bc:	ff 92       	push	r15
    32be:	0f 93       	push	r16
    32c0:	1f 93       	push	r17
    32c2:	cf 93       	push	r28
    32c4:	df 93       	push	r29
    32c6:	00 d0       	rcall	.+0      	; 0x32c8 <disk_initialize+0xe>
    32c8:	00 d0       	rcall	.+0      	; 0x32ca <disk_initialize+0x10>
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    32ce:	81 11       	cpse	r24, r1
    32d0:	ac c0       	rjmp	.+344    	; 0x342a <disk_initialize+0x170>

	dly_us(10000);			/* 10ms */
    32d2:	80 e1       	ldi	r24, 0x10	; 16
    32d4:	97 e2       	ldi	r25, 0x27	; 39
    32d6:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <dly_us>
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
    32da:	22 9a       	sbi	0x04, 2	; 4
    32dc:	2a 9a       	sbi	0x05, 2	; 5
	//CK_INIT(); //CK_L();		/* Initialize port pin tied to SCLK */
	//DI_INIT();				/* Initialize port pin tied to DI */
	//DO_INIT();				/* Initialize port pin tied to DO */
	SPI_MasterInit();
    32de:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <SPI_MasterInit>
    32e2:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    32e4:	61 e0       	ldi	r22, 0x01	; 1
    32e6:	70 e0       	ldi	r23, 0x00	; 0
    32e8:	ce 01       	movw	r24, r28
    32ea:	01 96       	adiw	r24, 0x01	; 1
    32ec:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <rcvr_mmc>
    32f0:	11 50       	subi	r17, 0x01	; 1
    32f2:	c1 f7       	brne	.-16     	; 0x32e4 <disk_initialize+0x2a>
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    32f4:	40 e0       	ldi	r20, 0x00	; 0
    32f6:	50 e0       	ldi	r21, 0x00	; 0
    32f8:	ba 01       	movw	r22, r20
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	0e 94 96 18 	call	0x312c	; 0x312c <send_cmd>
    3300:	81 30       	cpi	r24, 0x01	; 1
    3302:	09 f0       	breq	.+2      	; 0x3306 <disk_initialize+0x4c>
    3304:	77 c0       	rjmp	.+238    	; 0x33f4 <disk_initialize+0x13a>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    3306:	4a ea       	ldi	r20, 0xAA	; 170
    3308:	51 e0       	ldi	r21, 0x01	; 1
    330a:	60 e0       	ldi	r22, 0x00	; 0
    330c:	70 e0       	ldi	r23, 0x00	; 0
    330e:	88 e0       	ldi	r24, 0x08	; 8
    3310:	0e 94 96 18 	call	0x312c	; 0x312c <send_cmd>
    3314:	81 30       	cpi	r24, 0x01	; 1
    3316:	d1 f5       	brne	.+116    	; 0x338c <disk_initialize+0xd2>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    3318:	64 e0       	ldi	r22, 0x04	; 4
    331a:	70 e0       	ldi	r23, 0x00	; 0
    331c:	ce 01       	movw	r24, r28
    331e:	01 96       	adiw	r24, 0x01	; 1
    3320:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    3324:	8b 81       	ldd	r24, Y+3	; 0x03
    3326:	81 30       	cpi	r24, 0x01	; 1
    3328:	09 f0       	breq	.+2      	; 0x332c <disk_initialize+0x72>
    332a:	66 c0       	rjmp	.+204    	; 0x33f8 <disk_initialize+0x13e>
    332c:	8c 81       	ldd	r24, Y+4	; 0x04
    332e:	8a 3a       	cpi	r24, 0xAA	; 170
    3330:	09 f0       	breq	.+2      	; 0x3334 <disk_initialize+0x7a>
    3332:	64 c0       	rjmp	.+200    	; 0x33fc <disk_initialize+0x142>
    3334:	08 ee       	ldi	r16, 0xE8	; 232
    3336:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    3338:	40 e0       	ldi	r20, 0x00	; 0
    333a:	50 e0       	ldi	r21, 0x00	; 0
    333c:	60 e0       	ldi	r22, 0x00	; 0
    333e:	70 e4       	ldi	r23, 0x40	; 64
    3340:	89 ea       	ldi	r24, 0xA9	; 169
    3342:	0e 94 96 18 	call	0x312c	; 0x312c <send_cmd>
    3346:	88 23       	and	r24, r24
    3348:	49 f0       	breq	.+18     	; 0x335c <disk_initialize+0xa2>
					dly_us(1000);
    334a:	88 ee       	ldi	r24, 0xE8	; 232
    334c:	93 e0       	ldi	r25, 0x03	; 3
    334e:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <dly_us>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    3352:	01 50       	subi	r16, 0x01	; 1
    3354:	11 09       	sbc	r17, r1
    3356:	81 f7       	brne	.-32     	; 0x3338 <disk_initialize+0x7e>
	//DO_INIT();				/* Initialize port pin tied to DO */
	SPI_MasterInit();
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	ty = 0;
    3358:	f1 2c       	mov	r15, r1
    335a:	5c c0       	rjmp	.+184    	; 0x3414 <disk_initialize+0x15a>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    335c:	01 2b       	or	r16, r17
    335e:	09 f4       	brne	.+2      	; 0x3362 <disk_initialize+0xa8>
    3360:	4f c0       	rjmp	.+158    	; 0x3400 <disk_initialize+0x146>
    3362:	40 e0       	ldi	r20, 0x00	; 0
    3364:	50 e0       	ldi	r21, 0x00	; 0
    3366:	ba 01       	movw	r22, r20
    3368:	8a e3       	ldi	r24, 0x3A	; 58
    336a:	0e 94 96 18 	call	0x312c	; 0x312c <send_cmd>
    336e:	81 11       	cpse	r24, r1
    3370:	49 c0       	rjmp	.+146    	; 0x3404 <disk_initialize+0x14a>
					rcvr_mmc(buf, 4);
    3372:	64 e0       	ldi	r22, 0x04	; 4
    3374:	70 e0       	ldi	r23, 0x00	; 0
    3376:	ce 01       	movw	r24, r28
    3378:	01 96       	adiw	r24, 0x01	; 1
    337a:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    337e:	89 81       	ldd	r24, Y+1	; 0x01
    3380:	86 fd       	sbrc	r24, 6
    3382:	42 c0       	rjmp	.+132    	; 0x3408 <disk_initialize+0x14e>
    3384:	68 94       	set
    3386:	ff 24       	eor	r15, r15
    3388:	f2 f8       	bld	r15, 2
    338a:	44 c0       	rjmp	.+136    	; 0x3414 <disk_initialize+0x15a>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    338c:	40 e0       	ldi	r20, 0x00	; 0
    338e:	50 e0       	ldi	r21, 0x00	; 0
    3390:	ba 01       	movw	r22, r20
    3392:	89 ea       	ldi	r24, 0xA9	; 169
    3394:	0e 94 96 18 	call	0x312c	; 0x312c <send_cmd>
    3398:	82 30       	cpi	r24, 0x02	; 2
    339a:	28 f0       	brcs	.+10     	; 0x33a6 <disk_initialize+0xec>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    339c:	ee 24       	eor	r14, r14
    339e:	e3 94       	inc	r14
    33a0:	ff 24       	eor	r15, r15
    33a2:	f3 94       	inc	r15
    33a4:	07 c0       	rjmp	.+14     	; 0x33b4 <disk_initialize+0xfa>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    33a6:	0f 2e       	mov	r0, r31
    33a8:	f9 ea       	ldi	r31, 0xA9	; 169
    33aa:	ef 2e       	mov	r14, r31
    33ac:	f0 2d       	mov	r31, r0
    33ae:	68 94       	set
    33b0:	ff 24       	eor	r15, r15
    33b2:	f1 f8       	bld	r15, 1
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    33b4:	08 ee       	ldi	r16, 0xE8	; 232
    33b6:	13 e0       	ldi	r17, 0x03	; 3
				if (send_cmd(cmd, 0) == 0) break;
    33b8:	40 e0       	ldi	r20, 0x00	; 0
    33ba:	50 e0       	ldi	r21, 0x00	; 0
    33bc:	ba 01       	movw	r22, r20
    33be:	8e 2d       	mov	r24, r14
    33c0:	0e 94 96 18 	call	0x312c	; 0x312c <send_cmd>
    33c4:	88 23       	and	r24, r24
    33c6:	49 f0       	breq	.+18     	; 0x33da <disk_initialize+0x120>
				dly_us(1000);
    33c8:	88 ee       	ldi	r24, 0xE8	; 232
    33ca:	93 e0       	ldi	r25, 0x03	; 3
    33cc:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <dly_us>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    33d0:	01 50       	subi	r16, 0x01	; 1
    33d2:	11 09       	sbc	r17, r1
    33d4:	89 f7       	brne	.-30     	; 0x33b8 <disk_initialize+0xfe>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    33d6:	f1 2c       	mov	r15, r1
    33d8:	1d c0       	rjmp	.+58     	; 0x3414 <disk_initialize+0x15a>
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    33da:	01 2b       	or	r16, r17
    33dc:	d1 f0       	breq	.+52     	; 0x3412 <disk_initialize+0x158>
    33de:	40 e0       	ldi	r20, 0x00	; 0
    33e0:	52 e0       	ldi	r21, 0x02	; 2
    33e2:	60 e0       	ldi	r22, 0x00	; 0
    33e4:	70 e0       	ldi	r23, 0x00	; 0
    33e6:	80 e1       	ldi	r24, 0x10	; 16
    33e8:	0e 94 96 18 	call	0x312c	; 0x312c <send_cmd>
    33ec:	88 23       	and	r24, r24
    33ee:	91 f0       	breq	.+36     	; 0x3414 <disk_initialize+0x15a>
				ty = 0;
    33f0:	f1 2c       	mov	r15, r1
    33f2:	10 c0       	rjmp	.+32     	; 0x3414 <disk_initialize+0x15a>
	//DO_INIT();				/* Initialize port pin tied to DO */
	SPI_MasterInit();
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	ty = 0;
    33f4:	f1 2c       	mov	r15, r1
    33f6:	0e c0       	rjmp	.+28     	; 0x3414 <disk_initialize+0x15a>
    33f8:	f1 2c       	mov	r15, r1
    33fa:	0c c0       	rjmp	.+24     	; 0x3414 <disk_initialize+0x15a>
    33fc:	f1 2c       	mov	r15, r1
    33fe:	0a c0       	rjmp	.+20     	; 0x3414 <disk_initialize+0x15a>
    3400:	f1 2c       	mov	r15, r1
    3402:	08 c0       	rjmp	.+16     	; 0x3414 <disk_initialize+0x15a>
    3404:	f1 2c       	mov	r15, r1
    3406:	06 c0       	rjmp	.+12     	; 0x3414 <disk_initialize+0x15a>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
					rcvr_mmc(buf, 4);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    3408:	0f 2e       	mov	r0, r31
    340a:	fc e0       	ldi	r31, 0x0C	; 12
    340c:	ff 2e       	mov	r15, r31
    340e:	f0 2d       	mov	r31, r0
    3410:	01 c0       	rjmp	.+2      	; 0x3414 <disk_initialize+0x15a>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    3412:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
    3414:	f0 92 95 02 	sts	0x0295, r15	; 0x800295 <CardType>
	s = ty ? 0 : STA_NOINIT;
    3418:	11 e0       	ldi	r17, 0x01	; 1
    341a:	f1 10       	cpse	r15, r1
    341c:	10 e0       	ldi	r17, 0x00	; 0
	Stat = s;
    341e:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <__data_start>

	deselect();
    3422:	0e 94 19 18 	call	0x3032	; 0x3032 <deselect>

	return s;
    3426:	81 2f       	mov	r24, r17
    3428:	01 c0       	rjmp	.+2      	; 0x342c <disk_initialize+0x172>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    342a:	83 e0       	ldi	r24, 0x03	; 3
	Stat = s;

	deselect();

	return s;
}
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	1f 91       	pop	r17
    343a:	0f 91       	pop	r16
    343c:	ff 90       	pop	r15
    343e:	ef 90       	pop	r14
    3440:	08 95       	ret

00003442 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3442:	ff 92       	push	r15
    3444:	0f 93       	push	r16
    3446:	1f 93       	push	r17
    3448:	cf 93       	push	r28
    344a:	df 93       	push	r29
    344c:	eb 01       	movw	r28, r22

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    344e:	81 11       	cpse	r24, r1
    3450:	3f c0       	rjmp	.+126    	; 0x34d0 <disk_read+0x8e>
{
	BYTE cmd;
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3452:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3456:	80 fd       	sbrc	r24, 0
    3458:	3d c0       	rjmp	.+122    	; 0x34d4 <disk_read+0x92>
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    345a:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <CardType>
    345e:	83 fd       	sbrc	r24, 3
    3460:	09 c0       	rjmp	.+18     	; 0x3474 <disk_read+0x32>
    3462:	01 2e       	mov	r0, r17
    3464:	19 e0       	ldi	r17, 0x09	; 9
    3466:	22 0f       	add	r18, r18
    3468:	33 1f       	adc	r19, r19
    346a:	44 1f       	adc	r20, r20
    346c:	55 1f       	adc	r21, r21
    346e:	1a 95       	dec	r17
    3470:	d1 f7       	brne	.-12     	; 0x3466 <disk_read+0x24>
    3472:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    3474:	02 30       	cpi	r16, 0x02	; 2
    3476:	11 05       	cpc	r17, r1
    3478:	28 f4       	brcc	.+10     	; 0x3484 <disk_read+0x42>
    347a:	0f 2e       	mov	r0, r31
    347c:	f1 e1       	ldi	r31, 0x11	; 17
    347e:	ff 2e       	mov	r15, r31
    3480:	f0 2d       	mov	r31, r0
    3482:	04 c0       	rjmp	.+8      	; 0x348c <disk_read+0x4a>
    3484:	0f 2e       	mov	r0, r31
    3486:	f2 e1       	ldi	r31, 0x12	; 18
    3488:	ff 2e       	mov	r15, r31
    348a:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sect) == 0) {
    348c:	ba 01       	movw	r22, r20
    348e:	a9 01       	movw	r20, r18
    3490:	8f 2d       	mov	r24, r15
    3492:	0e 94 96 18 	call	0x312c	; 0x312c <send_cmd>
    3496:	81 11       	cpse	r24, r1
    3498:	14 c0       	rjmp	.+40     	; 0x34c2 <disk_read+0x80>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    349a:	60 e0       	ldi	r22, 0x00	; 0
    349c:	72 e0       	ldi	r23, 0x02	; 2
    349e:	ce 01       	movw	r24, r28
    34a0:	0e 94 48 18 	call	0x3090	; 0x3090 <rcvr_datablock>
    34a4:	89 2b       	or	r24, r25
    34a6:	21 f0       	breq	.+8      	; 0x34b0 <disk_read+0x6e>
			buff += 512;
    34a8:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    34aa:	01 50       	subi	r16, 0x01	; 1
    34ac:	11 09       	sbc	r17, r1
    34ae:	a9 f7       	brne	.-22     	; 0x349a <disk_read+0x58>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    34b0:	82 e1       	ldi	r24, 0x12	; 18
    34b2:	f8 12       	cpse	r15, r24
    34b4:	06 c0       	rjmp	.+12     	; 0x34c2 <disk_read+0x80>
    34b6:	40 e0       	ldi	r20, 0x00	; 0
    34b8:	50 e0       	ldi	r21, 0x00	; 0
    34ba:	ba 01       	movw	r22, r20
    34bc:	8c e0       	ldi	r24, 0x0C	; 12
    34be:	0e 94 96 18 	call	0x312c	; 0x312c <send_cmd>
	}
	deselect();
    34c2:	0e 94 19 18 	call	0x3032	; 0x3032 <deselect>

	return count ? RES_ERROR : RES_OK;
    34c6:	81 e0       	ldi	r24, 0x01	; 1
    34c8:	01 2b       	or	r16, r17
    34ca:	29 f4       	brne	.+10     	; 0x34d6 <disk_read+0x94>
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	03 c0       	rjmp	.+6      	; 0x34d6 <disk_read+0x94>
{
	BYTE cmd;
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    34d0:	83 e0       	ldi	r24, 0x03	; 3
    34d2:	01 c0       	rjmp	.+2      	; 0x34d6 <disk_read+0x94>
    34d4:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    34d6:	df 91       	pop	r29
    34d8:	cf 91       	pop	r28
    34da:	1f 91       	pop	r17
    34dc:	0f 91       	pop	r16
    34de:	ff 90       	pop	r15
    34e0:	08 95       	ret

000034e2 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    34e2:	cf 92       	push	r12
    34e4:	df 92       	push	r13
    34e6:	ef 92       	push	r14
    34e8:	ff 92       	push	r15
    34ea:	0f 93       	push	r16
    34ec:	1f 93       	push	r17
    34ee:	cf 93       	push	r28
    34f0:	df 93       	push	r29
    34f2:	eb 01       	movw	r28, r22
    34f4:	69 01       	movw	r12, r18
    34f6:	7a 01       	movw	r14, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    34f8:	81 11       	cpse	r24, r1
    34fa:	50 c0       	rjmp	.+160    	; 0x359c <disk_write+0xba>
)
{
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    34fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3500:	80 fd       	sbrc	r24, 0
    3502:	4e c0       	rjmp	.+156    	; 0x35a0 <disk_write+0xbe>
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    3504:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <CardType>
    3508:	83 fd       	sbrc	r24, 3
    350a:	09 c0       	rjmp	.+18     	; 0x351e <disk_write+0x3c>
    350c:	0b 2e       	mov	r0, r27
    350e:	b9 e0       	ldi	r27, 0x09	; 9
    3510:	cc 0c       	add	r12, r12
    3512:	dd 1c       	adc	r13, r13
    3514:	ee 1c       	adc	r14, r14
    3516:	ff 1c       	adc	r15, r15
    3518:	ba 95       	dec	r27
    351a:	d1 f7       	brne	.-12     	; 0x3510 <disk_write+0x2e>
    351c:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    351e:	01 30       	cpi	r16, 0x01	; 1
    3520:	11 05       	cpc	r17, r1
    3522:	99 f4       	brne	.+38     	; 0x354a <disk_write+0x68>
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
    3524:	b7 01       	movw	r22, r14
    3526:	a6 01       	movw	r20, r12
    3528:	88 e1       	ldi	r24, 0x18	; 24
    352a:	0e 94 96 18 	call	0x312c	; 0x312c <send_cmd>
    352e:	81 11       	cpse	r24, r1
    3530:	2e c0       	rjmp	.+92     	; 0x358e <disk_write+0xac>
			&& xmit_datablock(buff, 0xFE))
    3532:	6e ef       	ldi	r22, 0xFE	; 254
    3534:	ce 01       	movw	r24, r28
    3536:	0e 94 1a 19 	call	0x3234	; 0x3234 <xmit_datablock>
    353a:	31 e0       	ldi	r19, 0x01	; 1
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	89 2b       	or	r24, r25
    3540:	09 f0       	breq	.+2      	; 0x3544 <disk_write+0x62>
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	03 2f       	mov	r16, r19
    3546:	12 2f       	mov	r17, r18
    3548:	22 c0       	rjmp	.+68     	; 0x358e <disk_write+0xac>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    354a:	86 70       	andi	r24, 0x06	; 6
    354c:	31 f0       	breq	.+12     	; 0x355a <disk_write+0x78>
    354e:	a8 01       	movw	r20, r16
    3550:	60 e0       	ldi	r22, 0x00	; 0
    3552:	70 e0       	ldi	r23, 0x00	; 0
    3554:	87 e9       	ldi	r24, 0x97	; 151
    3556:	0e 94 96 18 	call	0x312c	; 0x312c <send_cmd>
		if (send_cmd(CMD25, sect) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    355a:	b7 01       	movw	r22, r14
    355c:	a6 01       	movw	r20, r12
    355e:	89 e1       	ldi	r24, 0x19	; 25
    3560:	0e 94 96 18 	call	0x312c	; 0x312c <send_cmd>
    3564:	81 11       	cpse	r24, r1
    3566:	13 c0       	rjmp	.+38     	; 0x358e <disk_write+0xac>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    3568:	6c ef       	ldi	r22, 0xFC	; 252
    356a:	ce 01       	movw	r24, r28
    356c:	0e 94 1a 19 	call	0x3234	; 0x3234 <xmit_datablock>
    3570:	89 2b       	or	r24, r25
    3572:	21 f0       	breq	.+8      	; 0x357c <disk_write+0x9a>
				buff += 512;
    3574:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    3576:	01 50       	subi	r16, 0x01	; 1
    3578:	11 09       	sbc	r17, r1
    357a:	b1 f7       	brne	.-20     	; 0x3568 <disk_write+0x86>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    357c:	6d ef       	ldi	r22, 0xFD	; 253
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	0e 94 1a 19 	call	0x3234	; 0x3234 <xmit_datablock>
    3586:	89 2b       	or	r24, r25
    3588:	11 f4       	brne	.+4      	; 0x358e <disk_write+0xac>
				count = 1;
    358a:	01 e0       	ldi	r16, 0x01	; 1
    358c:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    358e:	0e 94 19 18 	call	0x3032	; 0x3032 <deselect>

	return count ? RES_ERROR : RES_OK;
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	01 2b       	or	r16, r17
    3596:	29 f4       	brne	.+10     	; 0x35a2 <disk_write+0xc0>
    3598:	80 e0       	ldi	r24, 0x00	; 0
    359a:	03 c0       	rjmp	.+6      	; 0x35a2 <disk_write+0xc0>
)
{
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    359c:	83 e0       	ldi	r24, 0x03	; 3
    359e:	01 c0       	rjmp	.+2      	; 0x35a2 <disk_write+0xc0>
    35a0:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    35a2:	df 91       	pop	r29
    35a4:	cf 91       	pop	r28
    35a6:	1f 91       	pop	r17
    35a8:	0f 91       	pop	r16
    35aa:	ff 90       	pop	r15
    35ac:	ef 90       	pop	r14
    35ae:	df 90       	pop	r13
    35b0:	cf 90       	pop	r12
    35b2:	08 95       	ret

000035b4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    35b4:	0f 93       	push	r16
    35b6:	1f 93       	push	r17
    35b8:	cf 93       	push	r28
    35ba:	df 93       	push	r29
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
    35c0:	60 97       	sbiw	r28, 0x10	; 16
    35c2:	0f b6       	in	r0, 0x3f	; 63
    35c4:	f8 94       	cli
    35c6:	de bf       	out	0x3e, r29	; 62
    35c8:	0f be       	out	0x3f, r0	; 63
    35ca:	cd bf       	out	0x3d, r28	; 61

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    35cc:	81 11       	cpse	r24, r1
    35ce:	9c c0       	rjmp	.+312    	; 0x3708 <disk_ioctl+0x154>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    35d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    35d4:	80 fd       	sbrc	r24, 0
    35d6:	9a c0       	rjmp	.+308    	; 0x370c <disk_ioctl+0x158>
    35d8:	8a 01       	movw	r16, r20

	res = RES_ERROR;
	switch (ctrl) {
    35da:	61 30       	cpi	r22, 0x01	; 1
    35dc:	69 f0       	breq	.+26     	; 0x35f8 <disk_ioctl+0x44>
    35de:	20 f0       	brcs	.+8      	; 0x35e8 <disk_ioctl+0x34>
    35e0:	63 30       	cpi	r22, 0x03	; 3
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <disk_ioctl+0x32>
    35e4:	7d c0       	rjmp	.+250    	; 0x36e0 <disk_ioctl+0x12c>
    35e6:	87 c0       	rjmp	.+270    	; 0x36f6 <disk_ioctl+0x142>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
    35e8:	0e 94 29 18 	call	0x3052	; 0x3052 <select>
    35ec:	11 e0       	ldi	r17, 0x01	; 1
    35ee:	89 2b       	or	r24, r25
    35f0:	09 f4       	brne	.+2      	; 0x35f4 <disk_ioctl+0x40>
    35f2:	86 c0       	rjmp	.+268    	; 0x3700 <disk_ioctl+0x14c>
    35f4:	10 e0       	ldi	r17, 0x00	; 0
    35f6:	84 c0       	rjmp	.+264    	; 0x3700 <disk_ioctl+0x14c>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    35f8:	40 e0       	ldi	r20, 0x00	; 0
    35fa:	50 e0       	ldi	r21, 0x00	; 0
    35fc:	ba 01       	movw	r22, r20
    35fe:	89 e0       	ldi	r24, 0x09	; 9
    3600:	0e 94 96 18 	call	0x312c	; 0x312c <send_cmd>
    3604:	81 11       	cpse	r24, r1
    3606:	79 c0       	rjmp	.+242    	; 0x36fa <disk_ioctl+0x146>
    3608:	60 e1       	ldi	r22, 0x10	; 16
    360a:	70 e0       	ldi	r23, 0x00	; 0
    360c:	ce 01       	movw	r24, r28
    360e:	01 96       	adiw	r24, 0x01	; 1
    3610:	0e 94 48 18 	call	0x3090	; 0x3090 <rcvr_datablock>
    3614:	89 2b       	or	r24, r25
    3616:	09 f4       	brne	.+2      	; 0x361a <disk_ioctl+0x66>
    3618:	72 c0       	rjmp	.+228    	; 0x36fe <disk_ioctl+0x14a>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    361a:	89 81       	ldd	r24, Y+1	; 0x01
    361c:	82 95       	swap	r24
    361e:	86 95       	lsr	r24
    3620:	86 95       	lsr	r24
    3622:	83 70       	andi	r24, 0x03	; 3
    3624:	81 30       	cpi	r24, 0x01	; 1
    3626:	31 f5       	brne	.+76     	; 0x3674 <disk_ioctl+0xc0>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(LBA_t*)buff = cs << 10;
    3628:	29 85       	ldd	r18, Y+9	; 0x09
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	32 2f       	mov	r19, r18
    362e:	22 27       	eor	r18, r18
    3630:	8a 85       	ldd	r24, Y+10	; 0x0a
    3632:	28 0f       	add	r18, r24
    3634:	31 1d       	adc	r19, r1
    3636:	88 85       	ldd	r24, Y+8	; 0x08
    3638:	8f 73       	andi	r24, 0x3F	; 63
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	a0 e0       	ldi	r26, 0x00	; 0
    363e:	b0 e0       	ldi	r27, 0x00	; 0
    3640:	dc 01       	movw	r26, r24
    3642:	99 27       	eor	r25, r25
    3644:	88 27       	eor	r24, r24
    3646:	01 96       	adiw	r24, 0x01	; 1
    3648:	a1 1d       	adc	r26, r1
    364a:	b1 1d       	adc	r27, r1
    364c:	82 0f       	add	r24, r18
    364e:	93 1f       	adc	r25, r19
    3650:	a1 1d       	adc	r26, r1
    3652:	b1 1d       	adc	r27, r1
    3654:	07 2e       	mov	r0, r23
    3656:	7a e0       	ldi	r23, 0x0A	; 10
    3658:	88 0f       	add	r24, r24
    365a:	99 1f       	adc	r25, r25
    365c:	aa 1f       	adc	r26, r26
    365e:	bb 1f       	adc	r27, r27
    3660:	7a 95       	dec	r23
    3662:	d1 f7       	brne	.-12     	; 0x3658 <disk_ioctl+0xa4>
    3664:	70 2d       	mov	r23, r0
    3666:	f8 01       	movw	r30, r16
    3668:	80 83       	st	Z, r24
    366a:	91 83       	std	Z+1, r25	; 0x01
    366c:	a2 83       	std	Z+2, r26	; 0x02
    366e:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(LBA_t*)buff = cs << (n - 9);
				}
				res = RES_OK;
    3670:	10 e0       	ldi	r17, 0x00	; 0
    3672:	46 c0       	rjmp	.+140    	; 0x3700 <disk_ioctl+0x14c>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(LBA_t*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(LBA_t*)buff = cs << (n - 9);
    3674:	89 85       	ldd	r24, Y+9	; 0x09
    3676:	82 95       	swap	r24
    3678:	86 95       	lsr	r24
    367a:	86 95       	lsr	r24
    367c:	83 70       	andi	r24, 0x03	; 3
    367e:	28 85       	ldd	r18, Y+8	; 0x08
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	f4 e0       	ldi	r31, 0x04	; 4
    3684:	2f 9f       	mul	r18, r31
    3686:	80 0d       	add	r24, r0
    3688:	91 1d       	adc	r25, r1
    368a:	11 24       	eor	r1, r1
    368c:	9c 01       	movw	r18, r24
    368e:	2f 5f       	subi	r18, 0xFF	; 255
    3690:	3f 4f       	sbci	r19, 0xFF	; 255
    3692:	9f 81       	ldd	r25, Y+7	; 0x07
    3694:	93 70       	andi	r25, 0x03	; 3
    3696:	89 2f       	mov	r24, r25
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	98 2f       	mov	r25, r24
    369c:	88 27       	eor	r24, r24
    369e:	99 0f       	add	r25, r25
    36a0:	99 0f       	add	r25, r25
    36a2:	82 0f       	add	r24, r18
    36a4:	93 1f       	adc	r25, r19
    36a6:	a0 e0       	ldi	r26, 0x00	; 0
    36a8:	b0 e0       	ldi	r27, 0x00	; 0
    36aa:	2e 81       	ldd	r18, Y+6	; 0x06
    36ac:	32 2f       	mov	r19, r18
    36ae:	3f 70       	andi	r19, 0x0F	; 15
    36b0:	2b 85       	ldd	r18, Y+11	; 0x0b
    36b2:	22 1f       	adc	r18, r18
    36b4:	22 27       	eor	r18, r18
    36b6:	22 1f       	adc	r18, r18
    36b8:	23 0f       	add	r18, r19
    36ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    36bc:	33 70       	andi	r19, 0x03	; 3
    36be:	33 0f       	add	r19, r19
    36c0:	23 0f       	add	r18, r19
    36c2:	27 50       	subi	r18, 0x07	; 7
    36c4:	04 c0       	rjmp	.+8      	; 0x36ce <disk_ioctl+0x11a>
    36c6:	88 0f       	add	r24, r24
    36c8:	99 1f       	adc	r25, r25
    36ca:	aa 1f       	adc	r26, r26
    36cc:	bb 1f       	adc	r27, r27
    36ce:	2a 95       	dec	r18
    36d0:	d2 f7       	brpl	.-12     	; 0x36c6 <disk_ioctl+0x112>
    36d2:	f8 01       	movw	r30, r16
    36d4:	80 83       	st	Z, r24
    36d6:	91 83       	std	Z+1, r25	; 0x01
    36d8:	a2 83       	std	Z+2, r26	; 0x02
    36da:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    36dc:	10 e0       	ldi	r17, 0x00	; 0
    36de:	10 c0       	rjmp	.+32     	; 0x3700 <disk_ioctl+0x14c>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
    36e0:	80 e8       	ldi	r24, 0x80	; 128
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	a0 e0       	ldi	r26, 0x00	; 0
    36e6:	b0 e0       	ldi	r27, 0x00	; 0
    36e8:	fa 01       	movw	r30, r20
    36ea:	80 83       	st	Z, r24
    36ec:	91 83       	std	Z+1, r25	; 0x01
    36ee:	a2 83       	std	Z+2, r26	; 0x02
    36f0:	b3 83       	std	Z+3, r27	; 0x03
			res = RES_OK;
    36f2:	10 e0       	ldi	r17, 0x00	; 0
			break;
    36f4:	05 c0       	rjmp	.+10     	; 0x3700 <disk_ioctl+0x14c>

		default:
			res = RES_PARERR;
    36f6:	14 e0       	ldi	r17, 0x04	; 4
    36f8:	03 c0       	rjmp	.+6      	; 0x3700 <disk_ioctl+0x14c>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
    36fa:	11 e0       	ldi	r17, 0x01	; 1
    36fc:	01 c0       	rjmp	.+2      	; 0x3700 <disk_ioctl+0x14c>
    36fe:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
	}

	deselect();
    3700:	0e 94 19 18 	call	0x3032	; 0x3032 <deselect>

	return res;
    3704:	81 2f       	mov	r24, r17
    3706:	03 c0       	rjmp	.+6      	; 0x370e <disk_ioctl+0x15a>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    3708:	83 e0       	ldi	r24, 0x03	; 3
    370a:	01 c0       	rjmp	.+2      	; 0x370e <disk_ioctl+0x15a>
    370c:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    370e:	60 96       	adiw	r28, 0x10	; 16
    3710:	0f b6       	in	r0, 0x3f	; 63
    3712:	f8 94       	cli
    3714:	de bf       	out	0x3e, r29	; 62
    3716:	0f be       	out	0x3f, r0	; 63
    3718:	cd bf       	out	0x3d, r28	; 61
    371a:	df 91       	pop	r29
    371c:	cf 91       	pop	r28
    371e:	1f 91       	pop	r17
    3720:	0f 91       	pop	r16
    3722:	08 95       	ret

00003724 <__udivmodsi4>:
    3724:	a1 e2       	ldi	r26, 0x21	; 33
    3726:	1a 2e       	mov	r1, r26
    3728:	aa 1b       	sub	r26, r26
    372a:	bb 1b       	sub	r27, r27
    372c:	fd 01       	movw	r30, r26
    372e:	0d c0       	rjmp	.+26     	; 0x374a <__udivmodsi4_ep>

00003730 <__udivmodsi4_loop>:
    3730:	aa 1f       	adc	r26, r26
    3732:	bb 1f       	adc	r27, r27
    3734:	ee 1f       	adc	r30, r30
    3736:	ff 1f       	adc	r31, r31
    3738:	a2 17       	cp	r26, r18
    373a:	b3 07       	cpc	r27, r19
    373c:	e4 07       	cpc	r30, r20
    373e:	f5 07       	cpc	r31, r21
    3740:	20 f0       	brcs	.+8      	; 0x374a <__udivmodsi4_ep>
    3742:	a2 1b       	sub	r26, r18
    3744:	b3 0b       	sbc	r27, r19
    3746:	e4 0b       	sbc	r30, r20
    3748:	f5 0b       	sbc	r31, r21

0000374a <__udivmodsi4_ep>:
    374a:	66 1f       	adc	r22, r22
    374c:	77 1f       	adc	r23, r23
    374e:	88 1f       	adc	r24, r24
    3750:	99 1f       	adc	r25, r25
    3752:	1a 94       	dec	r1
    3754:	69 f7       	brne	.-38     	; 0x3730 <__udivmodsi4_loop>
    3756:	60 95       	com	r22
    3758:	70 95       	com	r23
    375a:	80 95       	com	r24
    375c:	90 95       	com	r25
    375e:	9b 01       	movw	r18, r22
    3760:	ac 01       	movw	r20, r24
    3762:	bd 01       	movw	r22, r26
    3764:	cf 01       	movw	r24, r30
    3766:	08 95       	ret

00003768 <__muluhisi3>:
    3768:	0e 94 bf 1b 	call	0x377e	; 0x377e <__umulhisi3>
    376c:	a5 9f       	mul	r26, r21
    376e:	90 0d       	add	r25, r0
    3770:	b4 9f       	mul	r27, r20
    3772:	90 0d       	add	r25, r0
    3774:	a4 9f       	mul	r26, r20
    3776:	80 0d       	add	r24, r0
    3778:	91 1d       	adc	r25, r1
    377a:	11 24       	eor	r1, r1
    377c:	08 95       	ret

0000377e <__umulhisi3>:
    377e:	a2 9f       	mul	r26, r18
    3780:	b0 01       	movw	r22, r0
    3782:	b3 9f       	mul	r27, r19
    3784:	c0 01       	movw	r24, r0
    3786:	a3 9f       	mul	r26, r19
    3788:	70 0d       	add	r23, r0
    378a:	81 1d       	adc	r24, r1
    378c:	11 24       	eor	r1, r1
    378e:	91 1d       	adc	r25, r1
    3790:	b2 9f       	mul	r27, r18
    3792:	70 0d       	add	r23, r0
    3794:	81 1d       	adc	r24, r1
    3796:	11 24       	eor	r1, r1
    3798:	91 1d       	adc	r25, r1
    379a:	08 95       	ret

0000379c <strcpy>:
    379c:	fb 01       	movw	r30, r22
    379e:	dc 01       	movw	r26, r24
    37a0:	01 90       	ld	r0, Z+
    37a2:	0d 92       	st	X+, r0
    37a4:	00 20       	and	r0, r0
    37a6:	e1 f7       	brne	.-8      	; 0x37a0 <strcpy+0x4>
    37a8:	08 95       	ret

000037aa <__itoa_ncheck>:
    37aa:	bb 27       	eor	r27, r27
    37ac:	4a 30       	cpi	r20, 0x0A	; 10
    37ae:	31 f4       	brne	.+12     	; 0x37bc <__itoa_ncheck+0x12>
    37b0:	99 23       	and	r25, r25
    37b2:	22 f4       	brpl	.+8      	; 0x37bc <__itoa_ncheck+0x12>
    37b4:	bd e2       	ldi	r27, 0x2D	; 45
    37b6:	90 95       	com	r25
    37b8:	81 95       	neg	r24
    37ba:	9f 4f       	sbci	r25, 0xFF	; 255
    37bc:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__utoa_common>

000037c0 <__utoa_ncheck>:
    37c0:	bb 27       	eor	r27, r27

000037c2 <__utoa_common>:
    37c2:	fb 01       	movw	r30, r22
    37c4:	55 27       	eor	r21, r21
    37c6:	aa 27       	eor	r26, r26
    37c8:	88 0f       	add	r24, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	aa 1f       	adc	r26, r26
    37ce:	a4 17       	cp	r26, r20
    37d0:	10 f0       	brcs	.+4      	; 0x37d6 <__utoa_common+0x14>
    37d2:	a4 1b       	sub	r26, r20
    37d4:	83 95       	inc	r24
    37d6:	50 51       	subi	r21, 0x10	; 16
    37d8:	b9 f7       	brne	.-18     	; 0x37c8 <__utoa_common+0x6>
    37da:	a0 5d       	subi	r26, 0xD0	; 208
    37dc:	aa 33       	cpi	r26, 0x3A	; 58
    37de:	08 f0       	brcs	.+2      	; 0x37e2 <__utoa_common+0x20>
    37e0:	a9 5d       	subi	r26, 0xD9	; 217
    37e2:	a1 93       	st	Z+, r26
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	79 f7       	brne	.-34     	; 0x37c6 <__utoa_common+0x4>
    37e8:	b1 11       	cpse	r27, r1
    37ea:	b1 93       	st	Z+, r27
    37ec:	11 92       	st	Z+, r1
    37ee:	cb 01       	movw	r24, r22
    37f0:	0c 94 fa 1b 	jmp	0x37f4	; 0x37f4 <strrev>

000037f4 <strrev>:
    37f4:	dc 01       	movw	r26, r24
    37f6:	fc 01       	movw	r30, r24
    37f8:	67 2f       	mov	r22, r23
    37fa:	71 91       	ld	r23, Z+
    37fc:	77 23       	and	r23, r23
    37fe:	e1 f7       	brne	.-8      	; 0x37f8 <strrev+0x4>
    3800:	32 97       	sbiw	r30, 0x02	; 2
    3802:	04 c0       	rjmp	.+8      	; 0x380c <strrev+0x18>
    3804:	7c 91       	ld	r23, X
    3806:	6d 93       	st	X+, r22
    3808:	70 83       	st	Z, r23
    380a:	62 91       	ld	r22, -Z
    380c:	ae 17       	cp	r26, r30
    380e:	bf 07       	cpc	r27, r31
    3810:	c8 f3       	brcs	.-14     	; 0x3804 <strrev+0x10>
    3812:	08 95       	ret

00003814 <_exit>:
    3814:	f8 94       	cli

00003816 <__stop_program>:
    3816:	ff cf       	rjmp	.-2      	; 0x3816 <__stop_program>
