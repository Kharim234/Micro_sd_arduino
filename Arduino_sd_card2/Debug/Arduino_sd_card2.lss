
Arduino_sd_card2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800100  00003f42  00003fd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c7  008001cc  008001cc  000040a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000040a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000040d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00004114  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006cca  00000000  00000000  0000448c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012d5  00000000  00000000  0000b156  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003857  00000000  00000000  0000c42b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010f0  00000000  00000000  0000fc84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ebc  00000000  00000000  00010d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008707  00000000  00000000  00011c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f8  00000000  00000000  0001a337  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
       8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
       c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      10:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      14:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      18:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      1c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      20:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      24:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      28:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      2c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      30:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      34:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      38:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__vector_14>
      3c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      40:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      44:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      48:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      4c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      50:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      54:	0c 94 16 19 	jmp	0x322c	; 0x322c <__vector_21>
      58:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      5c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      60:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      64:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	43 6c       	ori	r20, 0xC3	; 195
      6a:	6f 73       	andi	r22, 0x3F	; 63
      6c:	65 20       	and	r6, r5
      6e:	66 69       	ori	r22, 0x96	; 150
      70:	6c 65       	ori	r22, 0x5C	; 92
      72:	20 57       	subi	r18, 0x70	; 112
      74:	52 49       	sbci	r21, 0x92	; 146
      76:	54 45       	sbci	r21, 0x54	; 84
      78:	32 2e       	mov	r3, r18
      7a:	54 58       	subi	r21, 0x84	; 132
      7c:	54 00       	.word	0x0054	; ????

0000007e <__c.2593>:
      7e:	46 69 6c 65 20 77 72 69 74 65 20 57 52 49 54 45     File write WRITE
      8e:	32 2e 54 58 54 00                                   2.TXT.

00000094 <__c.2590>:
      94:	46 69 6c 65 20 6f 70 65 6e 20 57 52 49 54 45 32     File open WRITE2
      a4:	2e 54 58 54 00                                      .TXT.

000000a9 <__c.2576>:
      a9:	43 6c 6f 73 65 20 66 69 6c 65 00                    Close file.

000000b4 <__c.2572>:
      b4:	45 6e 64 20 6f 66 20 66 69 6c 65 00                 End of file.

000000c0 <__c.2569>:
      c0:	52 65 61 64 20 66 69 6c 65 00                       Read file.

000000ca <__c.2564>:
      ca:	52 65 77 69 6e 64 20 66 69 6c 65 00                 Rewind file.

000000d6 <__c.2562>:
      d6:	46 69 6c 65 20 6f 70 65 6e 20 57 52 49 54 45 32     File open WRITE2
      e6:	2e 54 58 54 00                                      .TXT.

000000eb <__c.2559>:
      eb:	0d 0a 20 41 72 64 75 69 6e 6f 20 42 6f 6f 74 65     .. Arduino Boote
      fb:	64 00                                               d.

000000fd <__c.2501>:
      fd:	20 2d 20 46 41 49 4c 20 45 72 72 6f 72 20 63 6f      - FAIL Error co
     10d:	64 65 3a 20 20 00                                   de:  .

00000113 <__c.2498>:
     113:	20 2d 20 73 75 63 63 65 73 20 45 72 72 6f 72 20      - succes Error 
     123:	63 6f 64 65 20 30 00                                code 0.

0000012a <__c.2478>:
     12a:	0d 0a 00 00                                         ....

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d8 e0       	ldi	r29, 0x08	; 8
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e2 e4       	ldi	r30, 0x42	; 66
     142:	ff e3       	ldi	r31, 0x3F	; 63
     144:	02 c0       	rjmp	.+4      	; 0x14a <__do_copy_data+0x10>
     146:	05 90       	lpm	r0, Z+
     148:	0d 92       	st	X+, r0
     14a:	ac 3c       	cpi	r26, 0xCC	; 204
     14c:	b1 07       	cpc	r27, r17
     14e:	d9 f7       	brne	.-10     	; 0x146 <__do_copy_data+0xc>

00000150 <__do_clear_bss>:
     150:	25 e0       	ldi	r18, 0x05	; 5
     152:	ac ec       	ldi	r26, 0xCC	; 204
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
     158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
     15a:	a3 39       	cpi	r26, 0x93	; 147
     15c:	b2 07       	cpc	r27, r18
     15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>
     160:	0e 94 a7 19 	call	0x334e	; 0x334e <main>
     164:	0c 94 9f 1f 	jmp	0x3f3e	; 0x3f3e <_exit>

00000168 <__bad_interrupt>:
     168:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016c <ld_dword>:

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
}
     16c:	fc 01       	movw	r30, r24
     16e:	63 81       	ldd	r22, Z+3	; 0x03
     170:	86 2f       	mov	r24, r22
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b0 e0       	ldi	r27, 0x00	; 0
     178:	ba 2f       	mov	r27, r26
     17a:	a9 2f       	mov	r26, r25
     17c:	98 2f       	mov	r25, r24
     17e:	88 27       	eor	r24, r24
     180:	22 81       	ldd	r18, Z+2	; 0x02
     182:	82 2b       	or	r24, r18
     184:	ba 2f       	mov	r27, r26
     186:	a9 2f       	mov	r26, r25
     188:	98 2f       	mov	r25, r24
     18a:	88 27       	eor	r24, r24
     18c:	21 81       	ldd	r18, Z+1	; 0x01
     18e:	82 2b       	or	r24, r18
     190:	ba 2f       	mov	r27, r26
     192:	a9 2f       	mov	r26, r25
     194:	98 2f       	mov	r25, r24
     196:	88 27       	eor	r24, r24
     198:	20 81       	ld	r18, Z
     19a:	bc 01       	movw	r22, r24
     19c:	cd 01       	movw	r24, r26
     19e:	62 2b       	or	r22, r18
     1a0:	08 95       	ret

000001a2 <mem_cpy>:
     1a2:	41 15       	cp	r20, r1
     1a4:	51 05       	cpc	r21, r1
     1a6:	51 f0       	breq	.+20     	; 0x1bc <mem_cpy+0x1a>
     1a8:	a6 2f       	mov	r26, r22
     1aa:	b7 2f       	mov	r27, r23
     1ac:	fc 01       	movw	r30, r24
     1ae:	48 0f       	add	r20, r24
     1b0:	59 1f       	adc	r21, r25
     1b2:	9d 91       	ld	r25, X+
     1b4:	91 93       	st	Z+, r25
     1b6:	e4 17       	cp	r30, r20
     1b8:	f5 07       	cpc	r31, r21
     1ba:	d9 f7       	brne	.-10     	; 0x1b2 <mem_cpy+0x10>
     1bc:	08 95       	ret

000001be <mem_cmp>:
     1be:	dc 01       	movw	r26, r24
     1c0:	e6 2f       	mov	r30, r22
     1c2:	f7 2f       	mov	r31, r23
     1c4:	8d 91       	ld	r24, X+
     1c6:	21 91       	ld	r18, Z+
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	82 1b       	sub	r24, r18
     1cc:	91 09       	sbc	r25, r1
     1ce:	41 50       	subi	r20, 0x01	; 1
     1d0:	51 09       	sbc	r21, r1
     1d2:	11 f0       	breq	.+4      	; 0x1d8 <mem_cmp+0x1a>
     1d4:	00 97       	sbiw	r24, 0x00	; 0
     1d6:	b1 f3       	breq	.-20     	; 0x1c4 <mem_cmp+0x6>
     1d8:	08 95       	ret

000001da <clst2sect>:
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	fc 01       	movw	r30, r24
     1e0:	9a 01       	movw	r18, r20
     1e2:	ab 01       	movw	r20, r22
     1e4:	22 50       	subi	r18, 0x02	; 2
     1e6:	31 09       	sbc	r19, r1
     1e8:	41 09       	sbc	r20, r1
     1ea:	51 09       	sbc	r21, r1
     1ec:	83 89       	ldd	r24, Z+19	; 0x13
     1ee:	94 89       	ldd	r25, Z+20	; 0x14
     1f0:	a5 89       	ldd	r26, Z+21	; 0x15
     1f2:	b6 89       	ldd	r27, Z+22	; 0x16
     1f4:	02 97       	sbiw	r24, 0x02	; 2
     1f6:	a1 09       	sbc	r26, r1
     1f8:	b1 09       	sbc	r27, r1
     1fa:	28 17       	cp	r18, r24
     1fc:	39 07       	cpc	r19, r25
     1fe:	4a 07       	cpc	r20, r26
     200:	5b 07       	cpc	r21, r27
     202:	68 f4       	brcc	.+26     	; 0x21e <clst2sect+0x44>
     204:	a1 85       	ldd	r26, Z+9	; 0x09
     206:	b2 85       	ldd	r27, Z+10	; 0x0a
     208:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__muluhisi3>
     20c:	07 a1       	ldd	r16, Z+39	; 0x27
     20e:	10 a5       	ldd	r17, Z+40	; 0x28
     210:	21 a5       	ldd	r18, Z+41	; 0x29
     212:	32 a5       	ldd	r19, Z+42	; 0x2a
     214:	60 0f       	add	r22, r16
     216:	71 1f       	adc	r23, r17
     218:	82 1f       	adc	r24, r18
     21a:	93 1f       	adc	r25, r19
     21c:	03 c0       	rjmp	.+6      	; 0x224 <clst2sect+0x4a>
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	cb 01       	movw	r24, r22
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	08 95       	ret

0000022a <get_ldnumber>:
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	ec 01       	movw	r28, r24
     230:	a8 81       	ld	r26, Y
     232:	b9 81       	ldd	r27, Y+1	; 0x01
     234:	10 97       	sbiw	r26, 0x00	; 0
     236:	f1 f0       	breq	.+60     	; 0x274 <get_ldnumber+0x4a>
     238:	9d 01       	movw	r18, r26
     23a:	2f 5f       	subi	r18, 0xFF	; 255
     23c:	3f 4f       	sbci	r19, 0xFF	; 255
     23e:	f9 01       	movw	r30, r18
     240:	31 97       	sbiw	r30, 0x01	; 1
     242:	90 81       	ld	r25, Z
     244:	91 32       	cpi	r25, 0x21	; 33
     246:	18 f0       	brcs	.+6      	; 0x24e <get_ldnumber+0x24>
     248:	9a 33       	cpi	r25, 0x3A	; 58
     24a:	b9 f7       	brne	.-18     	; 0x23a <get_ldnumber+0x10>
     24c:	02 c0       	rjmp	.+4      	; 0x252 <get_ldnumber+0x28>
     24e:	9a 33       	cpi	r25, 0x3A	; 58
     250:	a1 f4       	brne	.+40     	; 0x27a <get_ldnumber+0x50>
     252:	8c 91       	ld	r24, X
     254:	90 ed       	ldi	r25, 0xD0	; 208
     256:	98 0f       	add	r25, r24
     258:	9a 30       	cpi	r25, 0x0A	; 10
     25a:	90 f4       	brcc	.+36     	; 0x280 <get_ldnumber+0x56>
     25c:	12 96       	adiw	r26, 0x02	; 2
     25e:	2a 17       	cp	r18, r26
     260:	3b 07       	cpc	r19, r27
     262:	89 f4       	brne	.+34     	; 0x286 <get_ldnumber+0x5c>
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	c0 97       	sbiw	r24, 0x30	; 48
     268:	18 16       	cp	r1, r24
     26a:	19 06       	cpc	r1, r25
     26c:	7c f0       	brlt	.+30     	; 0x28c <get_ldnumber+0x62>
     26e:	39 83       	std	Y+1, r19	; 0x01
     270:	28 83       	st	Y, r18
     272:	0e c0       	rjmp	.+28     	; 0x290 <get_ldnumber+0x66>
     274:	8f ef       	ldi	r24, 0xFF	; 255
     276:	9f ef       	ldi	r25, 0xFF	; 255
     278:	0b c0       	rjmp	.+22     	; 0x290 <get_ldnumber+0x66>
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	08 c0       	rjmp	.+16     	; 0x290 <get_ldnumber+0x66>
     280:	8f ef       	ldi	r24, 0xFF	; 255
     282:	9f ef       	ldi	r25, 0xFF	; 255
     284:	05 c0       	rjmp	.+10     	; 0x290 <get_ldnumber+0x66>
     286:	8f ef       	ldi	r24, 0xFF	; 255
     288:	9f ef       	ldi	r25, 0xFF	; 255
     28a:	02 c0       	rjmp	.+4      	; 0x290 <get_ldnumber+0x66>
     28c:	8f ef       	ldi	r24, 0xFF	; 255
     28e:	9f ef       	ldi	r25, 0xFF	; 255
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <validate>:
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	ec 01       	movw	r28, r24
     2a0:	8b 01       	movw	r16, r22
     2a2:	89 2b       	or	r24, r25
     2a4:	e1 f0       	breq	.+56     	; 0x2de <validate+0x48>
     2a6:	e8 81       	ld	r30, Y
     2a8:	f9 81       	ldd	r31, Y+1	; 0x01
     2aa:	30 97       	sbiw	r30, 0x00	; 0
     2ac:	c1 f0       	breq	.+48     	; 0x2de <validate+0x48>
     2ae:	80 81       	ld	r24, Z
     2b0:	88 23       	and	r24, r24
     2b2:	a9 f0       	breq	.+42     	; 0x2de <validate+0x48>
     2b4:	2a 81       	ldd	r18, Y+2	; 0x02
     2b6:	3b 81       	ldd	r19, Y+3	; 0x03
     2b8:	85 81       	ldd	r24, Z+5	; 0x05
     2ba:	96 81       	ldd	r25, Z+6	; 0x06
     2bc:	28 17       	cp	r18, r24
     2be:	39 07       	cpc	r19, r25
     2c0:	71 f4       	brne	.+28     	; 0x2de <validate+0x48>
     2c2:	81 81       	ldd	r24, Z+1	; 0x01
     2c4:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <disk_status>
     2c8:	80 fd       	sbrc	r24, 0
     2ca:	09 c0       	rjmp	.+18     	; 0x2de <validate+0x48>
     2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <validate+0x40>
     2ce:	f8 01       	movw	r30, r16
     2d0:	31 83       	std	Z+1, r19	; 0x01
     2d2:	20 83       	st	Z, r18
     2d4:	08 c0       	rjmp	.+16     	; 0x2e6 <validate+0x50>
     2d6:	28 81       	ld	r18, Y
     2d8:	39 81       	ldd	r19, Y+1	; 0x01
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	f8 cf       	rjmp	.-16     	; 0x2ce <validate+0x38>
     2de:	89 e0       	ldi	r24, 0x09	; 9
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	f4 cf       	rjmp	.-24     	; 0x2ce <validate+0x38>
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <sync_window>:
     2f0:	8f 92       	push	r8
     2f2:	9f 92       	push	r9
     2f4:	af 92       	push	r10
     2f6:	bf 92       	push	r11
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	fc 01       	movw	r30, r24
     306:	23 81       	ldd	r18, Z+3	; 0x03
     308:	22 23       	and	r18, r18
     30a:	d1 f1       	breq	.+116    	; 0x380 <sync_window+0x90>
     30c:	ec 01       	movw	r28, r24
     30e:	7c 01       	movw	r14, r24
     310:	ff e2       	ldi	r31, 0x2F	; 47
     312:	ef 0e       	add	r14, r31
     314:	f1 1c       	adc	r15, r1
     316:	2b a5       	ldd	r18, Y+43	; 0x2b
     318:	3c a5       	ldd	r19, Y+44	; 0x2c
     31a:	4d a5       	ldd	r20, Y+45	; 0x2d
     31c:	5e a5       	ldd	r21, Y+46	; 0x2e
     31e:	01 e0       	ldi	r16, 0x01	; 1
     320:	10 e0       	ldi	r17, 0x00	; 0
     322:	b7 01       	movw	r22, r14
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <disk_write>
     32a:	81 11       	cpse	r24, r1
     32c:	2b c0       	rjmp	.+86     	; 0x384 <sync_window+0x94>
     32e:	1b 82       	std	Y+3, r1	; 0x03
     330:	0b a5       	ldd	r16, Y+43	; 0x2b
     332:	1c a5       	ldd	r17, Y+44	; 0x2c
     334:	2d a5       	ldd	r18, Y+45	; 0x2d
     336:	3e a5       	ldd	r19, Y+46	; 0x2e
     338:	8f 89       	ldd	r24, Y+23	; 0x17
     33a:	98 8d       	ldd	r25, Y+24	; 0x18
     33c:	a9 8d       	ldd	r26, Y+25	; 0x19
     33e:	ba 8d       	ldd	r27, Y+26	; 0x1a
     340:	8f 8c       	ldd	r8, Y+31	; 0x1f
     342:	98 a0       	ldd	r9, Y+32	; 0x20
     344:	a9 a0       	ldd	r10, Y+33	; 0x21
     346:	ba a0       	ldd	r11, Y+34	; 0x22
     348:	b9 01       	movw	r22, r18
     34a:	a8 01       	movw	r20, r16
     34c:	48 19       	sub	r20, r8
     34e:	59 09       	sbc	r21, r9
     350:	6a 09       	sbc	r22, r10
     352:	7b 09       	sbc	r23, r11
     354:	48 17       	cp	r20, r24
     356:	59 07       	cpc	r21, r25
     358:	6a 07       	cpc	r22, r26
     35a:	7b 07       	cpc	r23, r27
     35c:	a8 f4       	brcc	.+42     	; 0x388 <sync_window+0x98>
     35e:	6a 81       	ldd	r22, Y+2	; 0x02
     360:	62 30       	cpi	r22, 0x02	; 2
     362:	a1 f4       	brne	.+40     	; 0x38c <sync_window+0x9c>
     364:	a9 01       	movw	r20, r18
     366:	98 01       	movw	r18, r16
     368:	28 0f       	add	r18, r24
     36a:	39 1f       	adc	r19, r25
     36c:	4a 1f       	adc	r20, r26
     36e:	5b 1f       	adc	r21, r27
     370:	01 e0       	ldi	r16, 0x01	; 1
     372:	10 e0       	ldi	r17, 0x00	; 0
     374:	b7 01       	movw	r22, r14
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <disk_write>
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	07 c0       	rjmp	.+14     	; 0x38e <sync_window+0x9e>
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	05 c0       	rjmp	.+10     	; 0x38e <sync_window+0x9e>
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	03 c0       	rjmp	.+6      	; 0x38e <sync_window+0x9e>
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	01 c0       	rjmp	.+2      	; 0x38e <sync_window+0x9e>
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	bf 90       	pop	r11
     39c:	af 90       	pop	r10
     39e:	9f 90       	pop	r9
     3a0:	8f 90       	pop	r8
     3a2:	08 95       	ret

000003a4 <move_window>:
     3a4:	8f 92       	push	r8
     3a6:	9f 92       	push	r9
     3a8:	af 92       	push	r10
     3aa:	bf 92       	push	r11
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	ec 01       	movw	r28, r24
     3b8:	4a 01       	movw	r8, r20
     3ba:	5b 01       	movw	r10, r22
     3bc:	8b a5       	ldd	r24, Y+43	; 0x2b
     3be:	9c a5       	ldd	r25, Y+44	; 0x2c
     3c0:	ad a5       	ldd	r26, Y+45	; 0x2d
     3c2:	be a5       	ldd	r27, Y+46	; 0x2e
     3c4:	84 17       	cp	r24, r20
     3c6:	95 07       	cpc	r25, r21
     3c8:	a6 07       	cpc	r26, r22
     3ca:	b7 07       	cpc	r27, r23
     3cc:	e9 f0       	breq	.+58     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     3ce:	ce 01       	movw	r24, r28
     3d0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <sync_window>
     3d4:	f8 2e       	mov	r15, r24
     3d6:	81 11       	cpse	r24, r1
     3d8:	18 c0       	rjmp	.+48     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     3da:	01 e0       	ldi	r16, 0x01	; 1
     3dc:	10 e0       	ldi	r17, 0x00	; 0
     3de:	a5 01       	movw	r20, r10
     3e0:	94 01       	movw	r18, r8
     3e2:	be 01       	movw	r22, r28
     3e4:	61 5d       	subi	r22, 0xD1	; 209
     3e6:	7f 4f       	sbci	r23, 0xFF	; 255
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <disk_read>
     3ee:	88 23       	and	r24, r24
     3f0:	31 f0       	breq	.+12     	; 0x3fe <move_window+0x5a>
     3f2:	ff 24       	eor	r15, r15
     3f4:	f3 94       	inc	r15
     3f6:	88 24       	eor	r8, r8
     3f8:	8a 94       	dec	r8
     3fa:	98 2c       	mov	r9, r8
     3fc:	54 01       	movw	r10, r8
     3fe:	8b a6       	std	Y+43, r8	; 0x2b
     400:	9c a6       	std	Y+44, r9	; 0x2c
     402:	ad a6       	std	Y+45, r10	; 0x2d
     404:	be a6       	std	Y+46, r11	; 0x2e
     406:	01 c0       	rjmp	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     408:	f1 2c       	mov	r15, r1
     40a:	8f 2d       	mov	r24, r15
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	bf 90       	pop	r11
     418:	af 90       	pop	r10
     41a:	9f 90       	pop	r9
     41c:	8f 90       	pop	r8
     41e:	08 95       	ret

00000420 <dir_clear>:
     420:	8f 92       	push	r8
     422:	9f 92       	push	r9
     424:	af 92       	push	r10
     426:	bf 92       	push	r11
     428:	cf 92       	push	r12
     42a:	df 92       	push	r13
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	7c 01       	movw	r14, r24
     43a:	4a 01       	movw	r8, r20
     43c:	5b 01       	movw	r10, r22
     43e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <sync_window>
     442:	81 11       	cpse	r24, r1
     444:	42 c0       	rjmp	.+132    	; 0x4ca <dir_clear+0xaa>
     446:	b5 01       	movw	r22, r10
     448:	a4 01       	movw	r20, r8
     44a:	c7 01       	movw	r24, r14
     44c:	0e 94 ed 00 	call	0x1da	; 0x1da <clst2sect>
     450:	4b 01       	movw	r8, r22
     452:	5c 01       	movw	r10, r24
     454:	f7 01       	movw	r30, r14
     456:	63 a7       	std	Z+43, r22	; 0x2b
     458:	74 a7       	std	Z+44, r23	; 0x2c
     45a:	85 a7       	std	Z+45, r24	; 0x2d
     45c:	96 a7       	std	Z+46, r25	; 0x2e
     45e:	67 01       	movw	r12, r14
     460:	ff e2       	ldi	r31, 0x2F	; 47
     462:	cf 0e       	add	r12, r31
     464:	d1 1c       	adc	r13, r1
     466:	f6 01       	movw	r30, r12
     468:	c7 01       	movw	r24, r14
     46a:	81 5d       	subi	r24, 0xD1	; 209
     46c:	9d 4f       	sbci	r25, 0xFD	; 253
     46e:	11 92       	st	Z+, r1
     470:	e8 17       	cp	r30, r24
     472:	f9 07       	cpc	r31, r25
     474:	e1 f7       	brne	.-8      	; 0x46e <dir_clear+0x4e>
     476:	f7 01       	movw	r30, r14
     478:	81 85       	ldd	r24, Z+9	; 0x09
     47a:	92 85       	ldd	r25, Z+10	; 0x0a
     47c:	89 2b       	or	r24, r25
     47e:	59 f4       	brne	.+22     	; 0x496 <dir_clear+0x76>
     480:	c0 e0       	ldi	r28, 0x00	; 0
     482:	d0 e0       	ldi	r29, 0x00	; 0
     484:	19 c0       	rjmp	.+50     	; 0x4b8 <dir_clear+0x98>
     486:	21 96       	adiw	r28, 0x01	; 1
     488:	f7 01       	movw	r30, r14
     48a:	81 85       	ldd	r24, Z+9	; 0x09
     48c:	92 85       	ldd	r25, Z+10	; 0x0a
     48e:	c8 17       	cp	r28, r24
     490:	d9 07       	cpc	r29, r25
     492:	18 f0       	brcs	.+6      	; 0x49a <dir_clear+0x7a>
     494:	11 c0       	rjmp	.+34     	; 0x4b8 <dir_clear+0x98>
     496:	c0 e0       	ldi	r28, 0x00	; 0
     498:	d0 e0       	ldi	r29, 0x00	; 0
     49a:	01 e0       	ldi	r16, 0x01	; 1
     49c:	10 e0       	ldi	r17, 0x00	; 0
     49e:	a5 01       	movw	r20, r10
     4a0:	94 01       	movw	r18, r8
     4a2:	2c 0f       	add	r18, r28
     4a4:	3d 1f       	adc	r19, r29
     4a6:	41 1d       	adc	r20, r1
     4a8:	51 1d       	adc	r21, r1
     4aa:	b6 01       	movw	r22, r12
     4ac:	f7 01       	movw	r30, r14
     4ae:	81 81       	ldd	r24, Z+1	; 0x01
     4b0:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <disk_write>
     4b4:	88 23       	and	r24, r24
     4b6:	39 f3       	breq	.-50     	; 0x486 <dir_clear+0x66>
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	f7 01       	movw	r30, r14
     4bc:	21 85       	ldd	r18, Z+9	; 0x09
     4be:	32 85       	ldd	r19, Z+10	; 0x0a
     4c0:	2c 17       	cp	r18, r28
     4c2:	3d 07       	cpc	r19, r29
     4c4:	19 f4       	brne	.+6      	; 0x4cc <dir_clear+0xac>
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <dir_clear+0xac>
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	df 90       	pop	r13
     4da:	cf 90       	pop	r12
     4dc:	bf 90       	pop	r11
     4de:	af 90       	pop	r10
     4e0:	9f 90       	pop	r9
     4e2:	8f 90       	pop	r8
     4e4:	08 95       	ret

000004e6 <sync_fs>:
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	ec 01       	movw	r28, r24
     4f0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <sync_window>
     4f4:	98 2f       	mov	r25, r24
     4f6:	81 11       	cpse	r24, r1
     4f8:	61 c0       	rjmp	.+194    	; 0x5bc <sync_fs+0xd6>
     4fa:	88 81       	ld	r24, Y
     4fc:	83 30       	cpi	r24, 0x03	; 3
     4fe:	09 f0       	breq	.+2      	; 0x502 <sync_fs+0x1c>
     500:	53 c0       	rjmp	.+166    	; 0x5a8 <sync_fs+0xc2>
     502:	8c 81       	ldd	r24, Y+4	; 0x04
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	09 f0       	breq	.+2      	; 0x50a <sync_fs+0x24>
     508:	4f c0       	rjmp	.+158    	; 0x5a8 <sync_fs+0xc2>
     50a:	be 01       	movw	r22, r28
     50c:	61 5d       	subi	r22, 0xD1	; 209
     50e:	7f 4f       	sbci	r23, 0xFF	; 255
     510:	fb 01       	movw	r30, r22
     512:	ce 01       	movw	r24, r28
     514:	81 5d       	subi	r24, 0xD1	; 209
     516:	9d 4f       	sbci	r25, 0xFD	; 253
     518:	11 92       	st	Z+, r1
     51a:	e8 17       	cp	r30, r24
     51c:	f9 07       	cpc	r31, r25
     51e:	e1 f7       	brne	.-8      	; 0x518 <sync_fs+0x32>
     520:	85 e5       	ldi	r24, 0x55	; 85
     522:	fe 01       	movw	r30, r28
     524:	e3 5d       	subi	r30, 0xD3	; 211
     526:	fd 4f       	sbci	r31, 0xFD	; 253
     528:	80 83       	st	Z, r24
     52a:	8a ea       	ldi	r24, 0xAA	; 170
     52c:	31 96       	adiw	r30, 0x01	; 1
     52e:	80 83       	st	Z, r24
     530:	82 e5       	ldi	r24, 0x52	; 82
     532:	8f a7       	std	Y+47, r24	; 0x2f
     534:	88 ab       	std	Y+48, r24	; 0x30
     536:	81 e6       	ldi	r24, 0x61	; 97
     538:	89 ab       	std	Y+49, r24	; 0x31
     53a:	91 e4       	ldi	r25, 0x41	; 65
     53c:	9a ab       	std	Y+50, r25	; 0x32
     53e:	22 e7       	ldi	r18, 0x72	; 114
     540:	7b 97       	sbiw	r30, 0x1b	; 27
     542:	20 83       	st	Z, r18
     544:	31 96       	adiw	r30, 0x01	; 1
     546:	20 83       	st	Z, r18
     548:	31 96       	adiw	r30, 0x01	; 1
     54a:	90 83       	st	Z, r25
     54c:	31 96       	adiw	r30, 0x01	; 1
     54e:	80 83       	st	Z, r24
     550:	3f 85       	ldd	r19, Y+15	; 0x0f
     552:	28 89       	ldd	r18, Y+16	; 0x10
     554:	99 89       	ldd	r25, Y+17	; 0x11
     556:	8a 89       	ldd	r24, Y+18	; 0x12
     558:	31 96       	adiw	r30, 0x01	; 1
     55a:	30 83       	st	Z, r19
     55c:	31 96       	adiw	r30, 0x01	; 1
     55e:	20 83       	st	Z, r18
     560:	31 96       	adiw	r30, 0x01	; 1
     562:	90 83       	st	Z, r25
     564:	31 96       	adiw	r30, 0x01	; 1
     566:	80 83       	st	Z, r24
     568:	3b 85       	ldd	r19, Y+11	; 0x0b
     56a:	2c 85       	ldd	r18, Y+12	; 0x0c
     56c:	9d 85       	ldd	r25, Y+13	; 0x0d
     56e:	8e 85       	ldd	r24, Y+14	; 0x0e
     570:	31 96       	adiw	r30, 0x01	; 1
     572:	30 83       	st	Z, r19
     574:	31 96       	adiw	r30, 0x01	; 1
     576:	20 83       	st	Z, r18
     578:	31 96       	adiw	r30, 0x01	; 1
     57a:	90 83       	st	Z, r25
     57c:	31 96       	adiw	r30, 0x01	; 1
     57e:	80 83       	st	Z, r24
     580:	8b 8d       	ldd	r24, Y+27	; 0x1b
     582:	9c 8d       	ldd	r25, Y+28	; 0x1c
     584:	ad 8d       	ldd	r26, Y+29	; 0x1d
     586:	be 8d       	ldd	r27, Y+30	; 0x1e
     588:	9c 01       	movw	r18, r24
     58a:	ad 01       	movw	r20, r26
     58c:	2f 5f       	subi	r18, 0xFF	; 255
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
     590:	4f 4f       	sbci	r20, 0xFF	; 255
     592:	5f 4f       	sbci	r21, 0xFF	; 255
     594:	2b a7       	std	Y+43, r18	; 0x2b
     596:	3c a7       	std	Y+44, r19	; 0x2c
     598:	4d a7       	std	Y+45, r20	; 0x2d
     59a:	5e a7       	std	Y+46, r21	; 0x2e
     59c:	01 e0       	ldi	r16, 0x01	; 1
     59e:	10 e0       	ldi	r17, 0x00	; 0
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <disk_write>
     5a6:	1c 82       	std	Y+4, r1	; 0x04
     5a8:	40 e0       	ldi	r20, 0x00	; 0
     5aa:	50 e0       	ldi	r21, 0x00	; 0
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	89 81       	ldd	r24, Y+1	; 0x01
     5b0:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <disk_ioctl>
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	81 11       	cpse	r24, r1
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <sync_fs+0xd6>
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	89 2f       	mov	r24, r25
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	08 95       	ret

000005c8 <put_fat>:
     5c8:	2f 92       	push	r2
     5ca:	3f 92       	push	r3
     5cc:	4f 92       	push	r4
     5ce:	5f 92       	push	r5
     5d0:	6f 92       	push	r6
     5d2:	7f 92       	push	r7
     5d4:	8f 92       	push	r8
     5d6:	9f 92       	push	r9
     5d8:	af 92       	push	r10
     5da:	bf 92       	push	r11
     5dc:	cf 92       	push	r12
     5de:	df 92       	push	r13
     5e0:	ef 92       	push	r14
     5e2:	ff 92       	push	r15
     5e4:	0f 93       	push	r16
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	42 30       	cpi	r20, 0x02	; 2
     5ee:	51 05       	cpc	r21, r1
     5f0:	61 05       	cpc	r22, r1
     5f2:	71 05       	cpc	r23, r1
     5f4:	08 f4       	brcc	.+2      	; 0x5f8 <put_fat+0x30>
     5f6:	d2 c0       	rjmp	.+420    	; 0x79c <put_fat+0x1d4>
     5f8:	fc 01       	movw	r30, r24
     5fa:	c3 88       	ldd	r12, Z+19	; 0x13
     5fc:	d4 88       	ldd	r13, Z+20	; 0x14
     5fe:	e5 88       	ldd	r14, Z+21	; 0x15
     600:	f6 88       	ldd	r15, Z+22	; 0x16
     602:	4c 15       	cp	r20, r12
     604:	5d 05       	cpc	r21, r13
     606:	6e 05       	cpc	r22, r14
     608:	7f 05       	cpc	r23, r15
     60a:	08 f0       	brcs	.+2      	; 0x60e <put_fat+0x46>
     60c:	c9 c0       	rjmp	.+402    	; 0x7a0 <put_fat+0x1d8>
     60e:	28 01       	movw	r4, r16
     610:	39 01       	movw	r6, r18
     612:	6a 01       	movw	r12, r20
     614:	7b 01       	movw	r14, r22
     616:	ec 01       	movw	r28, r24
     618:	80 81       	ld	r24, Z
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	09 f4       	brne	.+2      	; 0x620 <put_fat+0x58>
     61e:	64 c0       	rjmp	.+200    	; 0x6e8 <put_fat+0x120>
     620:	83 30       	cpi	r24, 0x03	; 3
     622:	09 f4       	brne	.+2      	; 0x626 <put_fat+0x5e>
     624:	82 c0       	rjmp	.+260    	; 0x72a <put_fat+0x162>
     626:	81 30       	cpi	r24, 0x01	; 1
     628:	09 f0       	breq	.+2      	; 0x62c <put_fat+0x64>
     62a:	bc c0       	rjmp	.+376    	; 0x7a4 <put_fat+0x1dc>
     62c:	5a 01       	movw	r10, r20
     62e:	b6 94       	lsr	r11
     630:	a7 94       	ror	r10
     632:	a4 0e       	add	r10, r20
     634:	b5 1e       	adc	r11, r21
     636:	c5 01       	movw	r24, r10
     638:	89 2f       	mov	r24, r25
     63a:	99 27       	eor	r25, r25
     63c:	86 95       	lsr	r24
     63e:	47 8d       	ldd	r20, Z+31	; 0x1f
     640:	50 a1       	ldd	r21, Z+32	; 0x20
     642:	61 a1       	ldd	r22, Z+33	; 0x21
     644:	72 a1       	ldd	r23, Z+34	; 0x22
     646:	48 0f       	add	r20, r24
     648:	59 1f       	adc	r21, r25
     64a:	61 1d       	adc	r22, r1
     64c:	71 1d       	adc	r23, r1
     64e:	cf 01       	movw	r24, r30
     650:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
     654:	18 2f       	mov	r17, r24
     656:	81 11       	cpse	r24, r1
     658:	c5 c0       	rjmp	.+394    	; 0x7e4 <put_fat+0x21c>
     65a:	1e 01       	movw	r2, r28
     65c:	ff e2       	ldi	r31, 0x2F	; 47
     65e:	2f 0e       	add	r2, r31
     660:	31 1c       	adc	r3, r1
     662:	45 01       	movw	r8, r10
     664:	2f ef       	ldi	r18, 0xFF	; 255
     666:	82 1a       	sub	r8, r18
     668:	92 0a       	sbc	r9, r18
     66a:	31 e0       	ldi	r19, 0x01	; 1
     66c:	b3 22       	and	r11, r19
     66e:	f1 01       	movw	r30, r2
     670:	ea 0d       	add	r30, r10
     672:	fb 1d       	adc	r31, r11
     674:	c0 fe       	sbrs	r12, 0
     676:	1e c0       	rjmp	.+60     	; 0x6b4 <put_fat+0xec>
     678:	80 81       	ld	r24, Z
     67a:	28 2f       	mov	r18, r24
     67c:	2f 70       	andi	r18, 0x0F	; 15
     67e:	30 e1       	ldi	r19, 0x10	; 16
     680:	43 9e       	mul	r4, r19
     682:	c0 01       	movw	r24, r0
     684:	11 24       	eor	r1, r1
     686:	82 2b       	or	r24, r18
     688:	80 83       	st	Z, r24
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	8b 83       	std	Y+3, r24	; 0x03
     68e:	4f 8d       	ldd	r20, Y+31	; 0x1f
     690:	58 a1       	ldd	r21, Y+32	; 0x20
     692:	69 a1       	ldd	r22, Y+33	; 0x21
     694:	7a a1       	ldd	r23, Y+34	; 0x22
     696:	c4 01       	movw	r24, r8
     698:	89 2f       	mov	r24, r25
     69a:	99 27       	eor	r25, r25
     69c:	86 95       	lsr	r24
     69e:	48 0f       	add	r20, r24
     6a0:	59 1f       	adc	r21, r25
     6a2:	61 1d       	adc	r22, r1
     6a4:	71 1d       	adc	r23, r1
     6a6:	ce 01       	movw	r24, r28
     6a8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
     6ac:	88 23       	and	r24, r24
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <put_fat+0xea>
     6b0:	7f c0       	rjmp	.+254    	; 0x7b0 <put_fat+0x1e8>
     6b2:	7a c0       	rjmp	.+244    	; 0x7a8 <put_fat+0x1e0>
     6b4:	40 82       	st	Z, r4
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	8b 83       	std	Y+3, r24	; 0x03
     6ba:	4f 8d       	ldd	r20, Y+31	; 0x1f
     6bc:	58 a1       	ldd	r21, Y+32	; 0x20
     6be:	69 a1       	ldd	r22, Y+33	; 0x21
     6c0:	7a a1       	ldd	r23, Y+34	; 0x22
     6c2:	c4 01       	movw	r24, r8
     6c4:	89 2f       	mov	r24, r25
     6c6:	99 27       	eor	r25, r25
     6c8:	86 95       	lsr	r24
     6ca:	48 0f       	add	r20, r24
     6cc:	59 1f       	adc	r21, r25
     6ce:	61 1d       	adc	r22, r1
     6d0:	71 1d       	adc	r23, r1
     6d2:	ce 01       	movw	r24, r28
     6d4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
     6d8:	88 23       	and	r24, r24
     6da:	09 f4       	brne	.+2      	; 0x6de <put_fat+0x116>
     6dc:	77 c0       	rjmp	.+238    	; 0x7cc <put_fat+0x204>
     6de:	66 c0       	rjmp	.+204    	; 0x7ac <put_fat+0x1e4>
     6e0:	40 82       	st	Z, r4
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	8b 83       	std	Y+3, r24	; 0x03
     6e6:	7e c0       	rjmp	.+252    	; 0x7e4 <put_fat+0x21c>
     6e8:	45 2f       	mov	r20, r21
     6ea:	56 2f       	mov	r21, r22
     6ec:	67 2f       	mov	r22, r23
     6ee:	77 27       	eor	r23, r23
     6f0:	87 8d       	ldd	r24, Z+31	; 0x1f
     6f2:	90 a1       	ldd	r25, Z+32	; 0x20
     6f4:	a1 a1       	ldd	r26, Z+33	; 0x21
     6f6:	b2 a1       	ldd	r27, Z+34	; 0x22
     6f8:	48 0f       	add	r20, r24
     6fa:	59 1f       	adc	r21, r25
     6fc:	6a 1f       	adc	r22, r26
     6fe:	7b 1f       	adc	r23, r27
     700:	cf 01       	movw	r24, r30
     702:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
     706:	18 2f       	mov	r17, r24
     708:	81 11       	cpse	r24, r1
     70a:	6c c0       	rjmp	.+216    	; 0x7e4 <put_fat+0x21c>
     70c:	fe 01       	movw	r30, r28
     70e:	bf 96       	adiw	r30, 0x2f	; 47
     710:	cc 0c       	add	r12, r12
     712:	dd 1c       	adc	r13, r13
     714:	e8 94       	clt
     716:	c0 f8       	bld	r12, 0
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	d8 22       	and	r13, r24
     71c:	ec 0d       	add	r30, r12
     71e:	fd 1d       	adc	r31, r13
     720:	40 82       	st	Z, r4
     722:	51 82       	std	Z+1, r5	; 0x01
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	8b 83       	std	Y+3, r24	; 0x03
     728:	5d c0       	rjmp	.+186    	; 0x7e4 <put_fat+0x21c>
     72a:	87 8d       	ldd	r24, Z+31	; 0x1f
     72c:	90 a1       	ldd	r25, Z+32	; 0x20
     72e:	a1 a1       	ldd	r26, Z+33	; 0x21
     730:	b2 a1       	ldd	r27, Z+34	; 0x22
     732:	68 94       	set
     734:	16 f8       	bld	r1, 6
     736:	76 95       	lsr	r23
     738:	67 95       	ror	r22
     73a:	57 95       	ror	r21
     73c:	47 95       	ror	r20
     73e:	16 94       	lsr	r1
     740:	d1 f7       	brne	.-12     	; 0x736 <put_fat+0x16e>
     742:	48 0f       	add	r20, r24
     744:	59 1f       	adc	r21, r25
     746:	6a 1f       	adc	r22, r26
     748:	7b 1f       	adc	r23, r27
     74a:	cf 01       	movw	r24, r30
     74c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
     750:	18 2f       	mov	r17, r24
     752:	81 11       	cpse	r24, r1
     754:	47 c0       	rjmp	.+142    	; 0x7e4 <put_fat+0x21c>
     756:	ef e0       	ldi	r30, 0x0F	; 15
     758:	7e 22       	and	r7, r30
     75a:	ce 01       	movw	r24, r28
     75c:	8f 96       	adiw	r24, 0x2f	; 47
     75e:	cc 0c       	add	r12, r12
     760:	dd 1c       	adc	r13, r13
     762:	cc 0c       	add	r12, r12
     764:	dd 1c       	adc	r13, r13
     766:	fc ef       	ldi	r31, 0xFC	; 252
     768:	cf 22       	and	r12, r31
     76a:	f1 e0       	ldi	r31, 0x01	; 1
     76c:	df 22       	and	r13, r31
     76e:	c8 0e       	add	r12, r24
     770:	d9 1e       	adc	r13, r25
     772:	c6 01       	movw	r24, r12
     774:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_dword>
     778:	dc 01       	movw	r26, r24
     77a:	cb 01       	movw	r24, r22
     77c:	88 27       	eor	r24, r24
     77e:	99 27       	eor	r25, r25
     780:	aa 27       	eor	r26, r26
     782:	b0 7f       	andi	r27, 0xF0	; 240
     784:	48 2a       	or	r4, r24
     786:	59 2a       	or	r5, r25
     788:	6a 2a       	or	r6, r26
     78a:	7b 2a       	or	r7, r27
     78c:	f6 01       	movw	r30, r12
     78e:	40 82       	st	Z, r4
     790:	51 82       	std	Z+1, r5	; 0x01
     792:	62 82       	std	Z+2, r6	; 0x02
     794:	73 82       	std	Z+3, r7	; 0x03
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	8b 83       	std	Y+3, r24	; 0x03
     79a:	24 c0       	rjmp	.+72     	; 0x7e4 <put_fat+0x21c>
     79c:	12 e0       	ldi	r17, 0x02	; 2
     79e:	22 c0       	rjmp	.+68     	; 0x7e4 <put_fat+0x21c>
     7a0:	12 e0       	ldi	r17, 0x02	; 2
     7a2:	20 c0       	rjmp	.+64     	; 0x7e4 <put_fat+0x21c>
     7a4:	12 e0       	ldi	r17, 0x02	; 2
     7a6:	1e c0       	rjmp	.+60     	; 0x7e4 <put_fat+0x21c>
     7a8:	18 2f       	mov	r17, r24
     7aa:	1c c0       	rjmp	.+56     	; 0x7e4 <put_fat+0x21c>
     7ac:	18 2f       	mov	r17, r24
     7ae:	1a c0       	rjmp	.+52     	; 0x7e4 <put_fat+0x21c>
     7b0:	f1 e0       	ldi	r31, 0x01	; 1
     7b2:	9f 22       	and	r9, r31
     7b4:	f1 01       	movw	r30, r2
     7b6:	e8 0d       	add	r30, r8
     7b8:	f9 1d       	adc	r31, r9
     7ba:	68 94       	set
     7bc:	13 f8       	bld	r1, 3
     7be:	76 94       	lsr	r7
     7c0:	67 94       	ror	r6
     7c2:	57 94       	ror	r5
     7c4:	47 94       	ror	r4
     7c6:	16 94       	lsr	r1
     7c8:	d1 f7       	brne	.-12     	; 0x7be <put_fat+0x1f6>
     7ca:	8a cf       	rjmp	.-236    	; 0x6e0 <put_fat+0x118>
     7cc:	21 e0       	ldi	r18, 0x01	; 1
     7ce:	92 22       	and	r9, r18
     7d0:	f1 01       	movw	r30, r2
     7d2:	e8 0d       	add	r30, r8
     7d4:	f9 1d       	adc	r31, r9
     7d6:	90 81       	ld	r25, Z
     7d8:	90 7f       	andi	r25, 0xF0	; 240
     7da:	85 2d       	mov	r24, r5
     7dc:	8f 70       	andi	r24, 0x0F	; 15
     7de:	49 2e       	mov	r4, r25
     7e0:	48 2a       	or	r4, r24
     7e2:	7e cf       	rjmp	.-260    	; 0x6e0 <put_fat+0x118>
     7e4:	81 2f       	mov	r24, r17
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	ff 90       	pop	r15
     7f0:	ef 90       	pop	r14
     7f2:	df 90       	pop	r13
     7f4:	cf 90       	pop	r12
     7f6:	bf 90       	pop	r11
     7f8:	af 90       	pop	r10
     7fa:	9f 90       	pop	r9
     7fc:	8f 90       	pop	r8
     7fe:	7f 90       	pop	r7
     800:	6f 90       	pop	r6
     802:	5f 90       	pop	r5
     804:	4f 90       	pop	r4
     806:	3f 90       	pop	r3
     808:	2f 90       	pop	r2
     80a:	08 95       	ret

0000080c <st_clust>:
     80c:	fb 01       	movw	r30, r22
     80e:	22 8f       	std	Z+26, r18	; 0x1a
     810:	33 8f       	std	Z+27, r19	; 0x1b
     812:	dc 01       	movw	r26, r24
     814:	8c 91       	ld	r24, X
     816:	83 30       	cpi	r24, 0x03	; 3
     818:	29 f4       	brne	.+10     	; 0x824 <st_clust+0x18>
     81a:	ca 01       	movw	r24, r20
     81c:	aa 27       	eor	r26, r26
     81e:	bb 27       	eor	r27, r27
     820:	84 8b       	std	Z+20, r24	; 0x14
     822:	95 8b       	std	Z+21, r25	; 0x15
     824:	08 95       	ret

00000826 <get_fat>:
     826:	af 92       	push	r10
     828:	bf 92       	push	r11
     82a:	cf 92       	push	r12
     82c:	df 92       	push	r13
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	42 30       	cpi	r20, 0x02	; 2
     83c:	51 05       	cpc	r21, r1
     83e:	61 05       	cpc	r22, r1
     840:	71 05       	cpc	r23, r1
     842:	08 f4       	brcc	.+2      	; 0x846 <get_fat+0x20>
     844:	a6 c0       	rjmp	.+332    	; 0x992 <__stack+0x93>
     846:	fc 01       	movw	r30, r24
     848:	c0 81       	ld	r28, Z
     84a:	d1 81       	ldd	r29, Z+1	; 0x01
     84c:	8b 89       	ldd	r24, Y+19	; 0x13
     84e:	9c 89       	ldd	r25, Y+20	; 0x14
     850:	ad 89       	ldd	r26, Y+21	; 0x15
     852:	be 89       	ldd	r27, Y+22	; 0x16
     854:	48 17       	cp	r20, r24
     856:	59 07       	cpc	r21, r25
     858:	6a 07       	cpc	r22, r26
     85a:	7b 07       	cpc	r23, r27
     85c:	08 f0       	brcs	.+2      	; 0x860 <get_fat+0x3a>
     85e:	9e c0       	rjmp	.+316    	; 0x99c <__stack+0x9d>
     860:	6a 01       	movw	r12, r20
     862:	7b 01       	movw	r14, r22
     864:	88 81       	ld	r24, Y
     866:	82 30       	cpi	r24, 0x02	; 2
     868:	09 f4       	brne	.+2      	; 0x86c <get_fat+0x46>
     86a:	4d c0       	rjmp	.+154    	; 0x906 <__stack+0x7>
     86c:	83 30       	cpi	r24, 0x03	; 3
     86e:	09 f4       	brne	.+2      	; 0x872 <get_fat+0x4c>
     870:	6c c0       	rjmp	.+216    	; 0x94a <__stack+0x4b>
     872:	81 30       	cpi	r24, 0x01	; 1
     874:	09 f0       	breq	.+2      	; 0x878 <get_fat+0x52>
     876:	97 c0       	rjmp	.+302    	; 0x9a6 <__stack+0xa7>
     878:	8a 01       	movw	r16, r20
     87a:	16 95       	lsr	r17
     87c:	07 95       	ror	r16
     87e:	04 0f       	add	r16, r20
     880:	15 1f       	adc	r17, r21
     882:	c8 01       	movw	r24, r16
     884:	89 2f       	mov	r24, r25
     886:	99 27       	eor	r25, r25
     888:	86 95       	lsr	r24
     88a:	4f 8d       	ldd	r20, Y+31	; 0x1f
     88c:	58 a1       	ldd	r21, Y+32	; 0x20
     88e:	69 a1       	ldd	r22, Y+33	; 0x21
     890:	7a a1       	ldd	r23, Y+34	; 0x22
     892:	48 0f       	add	r20, r24
     894:	59 1f       	adc	r21, r25
     896:	61 1d       	adc	r22, r1
     898:	71 1d       	adc	r23, r1
     89a:	ce 01       	movw	r24, r28
     89c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
     8a0:	81 11       	cpse	r24, r1
     8a2:	86 c0       	rjmp	.+268    	; 0x9b0 <__stack+0xb1>
     8a4:	58 01       	movw	r10, r16
     8a6:	ff ef       	ldi	r31, 0xFF	; 255
     8a8:	af 1a       	sub	r10, r31
     8aa:	bf 0a       	sbc	r11, r31
     8ac:	11 70       	andi	r17, 0x01	; 1
     8ae:	fe 01       	movw	r30, r28
     8b0:	e0 0f       	add	r30, r16
     8b2:	f1 1f       	adc	r31, r17
     8b4:	17 a5       	ldd	r17, Z+47	; 0x2f
     8b6:	c5 01       	movw	r24, r10
     8b8:	89 2f       	mov	r24, r25
     8ba:	99 27       	eor	r25, r25
     8bc:	86 95       	lsr	r24
     8be:	4f 8d       	ldd	r20, Y+31	; 0x1f
     8c0:	58 a1       	ldd	r21, Y+32	; 0x20
     8c2:	69 a1       	ldd	r22, Y+33	; 0x21
     8c4:	7a a1       	ldd	r23, Y+34	; 0x22
     8c6:	48 0f       	add	r20, r24
     8c8:	59 1f       	adc	r21, r25
     8ca:	61 1d       	adc	r22, r1
     8cc:	71 1d       	adc	r23, r1
     8ce:	ce 01       	movw	r24, r28
     8d0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
     8d4:	81 11       	cpse	r24, r1
     8d6:	70 c0       	rjmp	.+224    	; 0x9b8 <__stack+0xb9>
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	b8 22       	and	r11, r24
     8dc:	ca 0d       	add	r28, r10
     8de:	db 1d       	adc	r29, r11
     8e0:	8f a5       	ldd	r24, Y+47	; 0x2f
     8e2:	61 2f       	mov	r22, r17
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	78 2b       	or	r23, r24
     8e8:	c0 fe       	sbrs	r12, 0
     8ea:	09 c0       	rjmp	.+18     	; 0x8fe <get_fat+0xd8>
     8ec:	72 95       	swap	r23
     8ee:	62 95       	swap	r22
     8f0:	6f 70       	andi	r22, 0x0F	; 15
     8f2:	67 27       	eor	r22, r23
     8f4:	7f 70       	andi	r23, 0x0F	; 15
     8f6:	67 27       	eor	r22, r23
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	68 c0       	rjmp	.+208    	; 0x9ce <__stack+0xcf>
     8fe:	7f 70       	andi	r23, 0x0F	; 15
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	64 c0       	rjmp	.+200    	; 0x9ce <__stack+0xcf>
     906:	45 2f       	mov	r20, r21
     908:	56 2f       	mov	r21, r22
     90a:	67 2f       	mov	r22, r23
     90c:	77 27       	eor	r23, r23
     90e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     910:	98 a1       	ldd	r25, Y+32	; 0x20
     912:	a9 a1       	ldd	r26, Y+33	; 0x21
     914:	ba a1       	ldd	r27, Y+34	; 0x22
     916:	48 0f       	add	r20, r24
     918:	59 1f       	adc	r21, r25
     91a:	6a 1f       	adc	r22, r26
     91c:	7b 1f       	adc	r23, r27
     91e:	ce 01       	movw	r24, r28
     920:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
     924:	81 11       	cpse	r24, r1
     926:	4c c0       	rjmp	.+152    	; 0x9c0 <__stack+0xc1>
     928:	af 96       	adiw	r28, 0x2f	; 47
     92a:	a6 01       	movw	r20, r12
     92c:	44 0f       	add	r20, r20
     92e:	55 1f       	adc	r21, r21
     930:	4e 7f       	andi	r20, 0xFE	; 254
     932:	51 70       	andi	r21, 0x01	; 1
     934:	c4 0f       	add	r28, r20
     936:	d5 1f       	adc	r29, r21
     938:	69 81       	ldd	r22, Y+1	; 0x01
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	76 2f       	mov	r23, r22
     93e:	66 27       	eor	r22, r22
     940:	88 81       	ld	r24, Y
     942:	68 2b       	or	r22, r24
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	42 c0       	rjmp	.+132    	; 0x9ce <__stack+0xcf>
     94a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     94c:	98 a1       	ldd	r25, Y+32	; 0x20
     94e:	a9 a1       	ldd	r26, Y+33	; 0x21
     950:	ba a1       	ldd	r27, Y+34	; 0x22
     952:	68 94       	set
     954:	16 f8       	bld	r1, 6
     956:	76 95       	lsr	r23
     958:	67 95       	ror	r22
     95a:	57 95       	ror	r21
     95c:	47 95       	ror	r20
     95e:	16 94       	lsr	r1
     960:	d1 f7       	brne	.-12     	; 0x956 <__stack+0x57>
     962:	48 0f       	add	r20, r24
     964:	59 1f       	adc	r21, r25
     966:	6a 1f       	adc	r22, r26
     968:	7b 1f       	adc	r23, r27
     96a:	ce 01       	movw	r24, r28
     96c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
     970:	81 11       	cpse	r24, r1
     972:	2a c0       	rjmp	.+84     	; 0x9c8 <__stack+0xc9>
     974:	af 96       	adiw	r28, 0x2f	; 47
     976:	a6 01       	movw	r20, r12
     978:	44 0f       	add	r20, r20
     97a:	55 1f       	adc	r21, r21
     97c:	44 0f       	add	r20, r20
     97e:	55 1f       	adc	r21, r21
     980:	ca 01       	movw	r24, r20
     982:	8c 7f       	andi	r24, 0xFC	; 252
     984:	91 70       	andi	r25, 0x01	; 1
     986:	8c 0f       	add	r24, r28
     988:	9d 1f       	adc	r25, r29
     98a:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_dword>
     98e:	9f 70       	andi	r25, 0x0F	; 15
     990:	1e c0       	rjmp	.+60     	; 0x9ce <__stack+0xcf>
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	19 c0       	rjmp	.+50     	; 0x9ce <__stack+0xcf>
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	14 c0       	rjmp	.+40     	; 0x9ce <__stack+0xcf>
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0f c0       	rjmp	.+30     	; 0x9ce <__stack+0xcf>
     9b0:	6f ef       	ldi	r22, 0xFF	; 255
     9b2:	7f ef       	ldi	r23, 0xFF	; 255
     9b4:	cb 01       	movw	r24, r22
     9b6:	0b c0       	rjmp	.+22     	; 0x9ce <__stack+0xcf>
     9b8:	6f ef       	ldi	r22, 0xFF	; 255
     9ba:	7f ef       	ldi	r23, 0xFF	; 255
     9bc:	cb 01       	movw	r24, r22
     9be:	07 c0       	rjmp	.+14     	; 0x9ce <__stack+0xcf>
     9c0:	6f ef       	ldi	r22, 0xFF	; 255
     9c2:	7f ef       	ldi	r23, 0xFF	; 255
     9c4:	cb 01       	movw	r24, r22
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <__stack+0xcf>
     9c8:	6f ef       	ldi	r22, 0xFF	; 255
     9ca:	7f ef       	ldi	r23, 0xFF	; 255
     9cc:	cb 01       	movw	r24, r22
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	cf 90       	pop	r12
     9de:	bf 90       	pop	r11
     9e0:	af 90       	pop	r10
     9e2:	08 95       	ret

000009e4 <dir_sdi>:
     9e4:	4f 92       	push	r4
     9e6:	5f 92       	push	r5
     9e8:	6f 92       	push	r6
     9ea:	7f 92       	push	r7
     9ec:	8f 92       	push	r8
     9ee:	9f 92       	push	r9
     9f0:	af 92       	push	r10
     9f2:	bf 92       	push	r11
     9f4:	cf 92       	push	r12
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	ec 01       	movw	r28, r24
     a06:	6a 01       	movw	r12, r20
     a08:	7b 01       	movw	r14, r22
     a0a:	41 15       	cp	r20, r1
     a0c:	51 05       	cpc	r21, r1
     a0e:	80 e2       	ldi	r24, 0x20	; 32
     a10:	68 07       	cpc	r22, r24
     a12:	71 05       	cpc	r23, r1
     a14:	08 f0       	brcs	.+2      	; 0xa18 <dir_sdi+0x34>
     a16:	b3 c0       	rjmp	.+358    	; 0xb7e <dir_sdi+0x19a>
     a18:	db 01       	movw	r26, r22
     a1a:	ca 01       	movw	r24, r20
     a1c:	8f 71       	andi	r24, 0x1F	; 31
     a1e:	99 27       	eor	r25, r25
     a20:	aa 27       	eor	r26, r26
     a22:	bb 27       	eor	r27, r27
     a24:	89 2b       	or	r24, r25
     a26:	8a 2b       	or	r24, r26
     a28:	8b 2b       	or	r24, r27
     a2a:	09 f0       	breq	.+2      	; 0xa2e <dir_sdi+0x4a>
     a2c:	aa c0       	rjmp	.+340    	; 0xb82 <dir_sdi+0x19e>
     a2e:	08 81       	ld	r16, Y
     a30:	19 81       	ldd	r17, Y+1	; 0x01
     a32:	4e 87       	std	Y+14, r20	; 0x0e
     a34:	5f 87       	std	Y+15, r21	; 0x0f
     a36:	68 8b       	std	Y+16, r22	; 0x10
     a38:	79 8b       	std	Y+17, r23	; 0x11
     a3a:	8e 80       	ldd	r8, Y+6	; 0x06
     a3c:	9f 80       	ldd	r9, Y+7	; 0x07
     a3e:	a8 84       	ldd	r10, Y+8	; 0x08
     a40:	b9 84       	ldd	r11, Y+9	; 0x09
     a42:	81 14       	cp	r8, r1
     a44:	91 04       	cpc	r9, r1
     a46:	a1 04       	cpc	r10, r1
     a48:	b1 04       	cpc	r11, r1
     a4a:	61 f5       	brne	.+88     	; 0xaa4 <dir_sdi+0xc0>
     a4c:	f8 01       	movw	r30, r16
     a4e:	80 81       	ld	r24, Z
     a50:	83 30       	cpi	r24, 0x03	; 3
     a52:	40 f0       	brcs	.+16     	; 0xa64 <dir_sdi+0x80>
     a54:	83 a1       	ldd	r24, Z+35	; 0x23
     a56:	94 a1       	ldd	r25, Z+36	; 0x24
     a58:	a5 a1       	ldd	r26, Z+37	; 0x25
     a5a:	b6 a1       	ldd	r27, Z+38	; 0x26
     a5c:	00 97       	sbiw	r24, 0x00	; 0
     a5e:	a1 05       	cpc	r26, r1
     a60:	b1 05       	cpc	r27, r1
     a62:	f1 f4       	brne	.+60     	; 0xaa0 <dir_sdi+0xbc>
     a64:	f8 01       	movw	r30, r16
     a66:	87 81       	ldd	r24, Z+7	; 0x07
     a68:	90 85       	ldd	r25, Z+8	; 0x08
     a6a:	a0 e0       	ldi	r26, 0x00	; 0
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	b7 01       	movw	r22, r14
     a70:	a6 01       	movw	r20, r12
     a72:	68 94       	set
     a74:	14 f8       	bld	r1, 4
     a76:	76 95       	lsr	r23
     a78:	67 95       	ror	r22
     a7a:	57 95       	ror	r21
     a7c:	47 95       	ror	r20
     a7e:	16 94       	lsr	r1
     a80:	d1 f7       	brne	.-12     	; 0xa76 <dir_sdi+0x92>
     a82:	48 17       	cp	r20, r24
     a84:	59 07       	cpc	r21, r25
     a86:	6a 07       	cpc	r22, r26
     a88:	7b 07       	cpc	r23, r27
     a8a:	08 f0       	brcs	.+2      	; 0xa8e <dir_sdi+0xaa>
     a8c:	7c c0       	rjmp	.+248    	; 0xb86 <dir_sdi+0x1a2>
     a8e:	83 a1       	ldd	r24, Z+35	; 0x23
     a90:	94 a1       	ldd	r25, Z+36	; 0x24
     a92:	a5 a1       	ldd	r26, Z+37	; 0x25
     a94:	b6 a1       	ldd	r27, Z+38	; 0x26
     a96:	8e 8b       	std	Y+22, r24	; 0x16
     a98:	9f 8b       	std	Y+23, r25	; 0x17
     a9a:	a8 8f       	std	Y+24, r26	; 0x18
     a9c:	b9 8f       	std	Y+25, r27	; 0x19
     a9e:	46 c0       	rjmp	.+140    	; 0xb2c <dir_sdi+0x148>
     aa0:	4c 01       	movw	r8, r24
     aa2:	5d 01       	movw	r10, r26
     aa4:	f8 01       	movw	r30, r16
     aa6:	41 84       	ldd	r4, Z+9	; 0x09
     aa8:	52 84       	ldd	r5, Z+10	; 0x0a
     aaa:	61 2c       	mov	r6, r1
     aac:	71 2c       	mov	r7, r1
     aae:	03 2e       	mov	r0, r19
     ab0:	39 e0       	ldi	r19, 0x09	; 9
     ab2:	44 0c       	add	r4, r4
     ab4:	55 1c       	adc	r5, r5
     ab6:	66 1c       	adc	r6, r6
     ab8:	77 1c       	adc	r7, r7
     aba:	3a 95       	dec	r19
     abc:	d1 f7       	brne	.-12     	; 0xab2 <dir_sdi+0xce>
     abe:	30 2d       	mov	r19, r0
     ac0:	c4 14       	cp	r12, r4
     ac2:	d5 04       	cpc	r13, r5
     ac4:	e6 04       	cpc	r14, r6
     ac6:	f7 04       	cpc	r15, r7
     ac8:	40 f1       	brcs	.+80     	; 0xb1a <dir_sdi+0x136>
     aca:	b5 01       	movw	r22, r10
     acc:	a4 01       	movw	r20, r8
     ace:	ce 01       	movw	r24, r28
     ad0:	0e 94 13 04 	call	0x826	; 0x826 <get_fat>
     ad4:	4b 01       	movw	r8, r22
     ad6:	5c 01       	movw	r10, r24
     ad8:	6f 3f       	cpi	r22, 0xFF	; 255
     ada:	7f 4f       	sbci	r23, 0xFF	; 255
     adc:	8f 4f       	sbci	r24, 0xFF	; 255
     ade:	9f 4f       	sbci	r25, 0xFF	; 255
     ae0:	09 f4       	brne	.+2      	; 0xae4 <dir_sdi+0x100>
     ae2:	53 c0       	rjmp	.+166    	; 0xb8a <dir_sdi+0x1a6>
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	88 16       	cp	r8, r24
     ae8:	91 04       	cpc	r9, r1
     aea:	a1 04       	cpc	r10, r1
     aec:	b1 04       	cpc	r11, r1
     aee:	08 f4       	brcc	.+2      	; 0xaf2 <dir_sdi+0x10e>
     af0:	4e c0       	rjmp	.+156    	; 0xb8e <dir_sdi+0x1aa>
     af2:	f8 01       	movw	r30, r16
     af4:	83 89       	ldd	r24, Z+19	; 0x13
     af6:	94 89       	ldd	r25, Z+20	; 0x14
     af8:	a5 89       	ldd	r26, Z+21	; 0x15
     afa:	b6 89       	ldd	r27, Z+22	; 0x16
     afc:	88 16       	cp	r8, r24
     afe:	99 06       	cpc	r9, r25
     b00:	aa 06       	cpc	r10, r26
     b02:	bb 06       	cpc	r11, r27
     b04:	08 f0       	brcs	.+2      	; 0xb08 <dir_sdi+0x124>
     b06:	45 c0       	rjmp	.+138    	; 0xb92 <dir_sdi+0x1ae>
     b08:	c4 18       	sub	r12, r4
     b0a:	d5 08       	sbc	r13, r5
     b0c:	e6 08       	sbc	r14, r6
     b0e:	f7 08       	sbc	r15, r7
     b10:	c4 14       	cp	r12, r4
     b12:	d5 04       	cpc	r13, r5
     b14:	e6 04       	cpc	r14, r6
     b16:	f7 04       	cpc	r15, r7
     b18:	c0 f6       	brcc	.-80     	; 0xaca <dir_sdi+0xe6>
     b1a:	b5 01       	movw	r22, r10
     b1c:	a4 01       	movw	r20, r8
     b1e:	c8 01       	movw	r24, r16
     b20:	0e 94 ed 00 	call	0x1da	; 0x1da <clst2sect>
     b24:	6e 8b       	std	Y+22, r22	; 0x16
     b26:	7f 8b       	std	Y+23, r23	; 0x17
     b28:	88 8f       	std	Y+24, r24	; 0x18
     b2a:	99 8f       	std	Y+25, r25	; 0x19
     b2c:	8a 8a       	std	Y+18, r8	; 0x12
     b2e:	9b 8a       	std	Y+19, r9	; 0x13
     b30:	ac 8a       	std	Y+20, r10	; 0x14
     b32:	bd 8a       	std	Y+21, r11	; 0x15
     b34:	8e 89       	ldd	r24, Y+22	; 0x16
     b36:	9f 89       	ldd	r25, Y+23	; 0x17
     b38:	a8 8d       	ldd	r26, Y+24	; 0x18
     b3a:	b9 8d       	ldd	r27, Y+25	; 0x19
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	a1 05       	cpc	r26, r1
     b40:	b1 05       	cpc	r27, r1
     b42:	49 f1       	breq	.+82     	; 0xb96 <dir_sdi+0x1b2>
     b44:	b7 01       	movw	r22, r14
     b46:	a6 01       	movw	r20, r12
     b48:	03 2e       	mov	r0, r19
     b4a:	39 e0       	ldi	r19, 0x09	; 9
     b4c:	76 95       	lsr	r23
     b4e:	67 95       	ror	r22
     b50:	57 95       	ror	r21
     b52:	47 95       	ror	r20
     b54:	3a 95       	dec	r19
     b56:	d1 f7       	brne	.-12     	; 0xb4c <dir_sdi+0x168>
     b58:	30 2d       	mov	r19, r0
     b5a:	84 0f       	add	r24, r20
     b5c:	95 1f       	adc	r25, r21
     b5e:	a6 1f       	adc	r26, r22
     b60:	b7 1f       	adc	r27, r23
     b62:	8e 8b       	std	Y+22, r24	; 0x16
     b64:	9f 8b       	std	Y+23, r25	; 0x17
     b66:	a8 8f       	std	Y+24, r26	; 0x18
     b68:	b9 8f       	std	Y+25, r27	; 0x19
     b6a:	01 5d       	subi	r16, 0xD1	; 209
     b6c:	1f 4f       	sbci	r17, 0xFF	; 255
     b6e:	f1 e0       	ldi	r31, 0x01	; 1
     b70:	df 22       	and	r13, r31
     b72:	c0 0e       	add	r12, r16
     b74:	d1 1e       	adc	r13, r17
     b76:	db 8e       	std	Y+27, r13	; 0x1b
     b78:	ca 8e       	std	Y+26, r12	; 0x1a
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	0d c0       	rjmp	.+26     	; 0xb98 <dir_sdi+0x1b4>
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	0b c0       	rjmp	.+22     	; 0xb98 <dir_sdi+0x1b4>
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	09 c0       	rjmp	.+18     	; 0xb98 <dir_sdi+0x1b4>
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	07 c0       	rjmp	.+14     	; 0xb98 <dir_sdi+0x1b4>
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	05 c0       	rjmp	.+10     	; 0xb98 <dir_sdi+0x1b4>
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	03 c0       	rjmp	.+6      	; 0xb98 <dir_sdi+0x1b4>
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <dir_sdi+0x1b4>
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	bf 90       	pop	r11
     baa:	af 90       	pop	r10
     bac:	9f 90       	pop	r9
     bae:	8f 90       	pop	r8
     bb0:	7f 90       	pop	r7
     bb2:	6f 90       	pop	r6
     bb4:	5f 90       	pop	r5
     bb6:	4f 90       	pop	r4
     bb8:	08 95       	ret

00000bba <create_chain>:
     bba:	4f 92       	push	r4
     bbc:	5f 92       	push	r5
     bbe:	6f 92       	push	r6
     bc0:	7f 92       	push	r7
     bc2:	8f 92       	push	r8
     bc4:	9f 92       	push	r9
     bc6:	af 92       	push	r10
     bc8:	bf 92       	push	r11
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	8c 01       	movw	r16, r24
     bdc:	2a 01       	movw	r4, r20
     bde:	3b 01       	movw	r6, r22
     be0:	fc 01       	movw	r30, r24
     be2:	c0 81       	ld	r28, Z
     be4:	d1 81       	ldd	r29, Z+1	; 0x01
     be6:	41 15       	cp	r20, r1
     be8:	51 05       	cpc	r21, r1
     bea:	61 05       	cpc	r22, r1
     bec:	71 05       	cpc	r23, r1
     bee:	c9 f4       	brne	.+50     	; 0xc22 <create_chain+0x68>
     bf0:	8b 84       	ldd	r8, Y+11	; 0x0b
     bf2:	9c 84       	ldd	r9, Y+12	; 0x0c
     bf4:	ad 84       	ldd	r10, Y+13	; 0x0d
     bf6:	be 84       	ldd	r11, Y+14	; 0x0e
     bf8:	81 14       	cp	r8, r1
     bfa:	91 04       	cpc	r9, r1
     bfc:	a1 04       	cpc	r10, r1
     bfe:	b1 04       	cpc	r11, r1
     c00:	09 f4       	brne	.+2      	; 0xc04 <create_chain+0x4a>
     c02:	22 c1       	rjmp	.+580    	; 0xe48 <create_chain+0x28e>
     c04:	8b 89       	ldd	r24, Y+19	; 0x13
     c06:	9c 89       	ldd	r25, Y+20	; 0x14
     c08:	ad 89       	ldd	r26, Y+21	; 0x15
     c0a:	be 89       	ldd	r27, Y+22	; 0x16
     c0c:	88 16       	cp	r8, r24
     c0e:	99 06       	cpc	r9, r25
     c10:	aa 06       	cpc	r10, r26
     c12:	bb 06       	cpc	r11, r27
     c14:	08 f4       	brcc	.+2      	; 0xc18 <create_chain+0x5e>
     c16:	1c c1       	rjmp	.+568    	; 0xe50 <create_chain+0x296>
     c18:	81 2c       	mov	r8, r1
     c1a:	91 2c       	mov	r9, r1
     c1c:	54 01       	movw	r10, r8
     c1e:	83 94       	inc	r8
     c20:	17 c1       	rjmp	.+558    	; 0xe50 <create_chain+0x296>
     c22:	0e 94 13 04 	call	0x826	; 0x826 <get_fat>
     c26:	62 30       	cpi	r22, 0x02	; 2
     c28:	71 05       	cpc	r23, r1
     c2a:	81 05       	cpc	r24, r1
     c2c:	91 05       	cpc	r25, r1
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <create_chain+0x78>
     c30:	d3 c0       	rjmp	.+422    	; 0xdd8 <create_chain+0x21e>
     c32:	6f 3f       	cpi	r22, 0xFF	; 255
     c34:	ff ef       	ldi	r31, 0xFF	; 255
     c36:	7f 07       	cpc	r23, r31
     c38:	8f 07       	cpc	r24, r31
     c3a:	9f 07       	cpc	r25, r31
     c3c:	09 f4       	brne	.+2      	; 0xc40 <create_chain+0x86>
     c3e:	d1 c0       	rjmp	.+418    	; 0xde2 <create_chain+0x228>
     c40:	cb 88       	ldd	r12, Y+19	; 0x13
     c42:	dc 88       	ldd	r13, Y+20	; 0x14
     c44:	ed 88       	ldd	r14, Y+21	; 0x15
     c46:	fe 88       	ldd	r15, Y+22	; 0x16
     c48:	6c 15       	cp	r22, r12
     c4a:	7d 05       	cpc	r23, r13
     c4c:	8e 05       	cpc	r24, r14
     c4e:	9f 05       	cpc	r25, r15
     c50:	08 f0       	brcs	.+2      	; 0xc54 <create_chain+0x9a>
     c52:	e9 c0       	rjmp	.+466    	; 0xe26 <create_chain+0x26c>
     c54:	07 c1       	rjmp	.+526    	; 0xe64 <create_chain+0x2aa>
     c56:	73 01       	movw	r14, r6
     c58:	62 01       	movw	r12, r4
     c5a:	2f ef       	ldi	r18, 0xFF	; 255
     c5c:	c2 1a       	sub	r12, r18
     c5e:	d2 0a       	sbc	r13, r18
     c60:	e2 0a       	sbc	r14, r18
     c62:	f2 0a       	sbc	r15, r18
     c64:	8b 89       	ldd	r24, Y+19	; 0x13
     c66:	9c 89       	ldd	r25, Y+20	; 0x14
     c68:	ad 89       	ldd	r26, Y+21	; 0x15
     c6a:	be 89       	ldd	r27, Y+22	; 0x16
     c6c:	c8 16       	cp	r12, r24
     c6e:	d9 06       	cpc	r13, r25
     c70:	ea 06       	cpc	r14, r26
     c72:	fb 06       	cpc	r15, r27
     c74:	28 f0       	brcs	.+10     	; 0xc80 <create_chain+0xc6>
     c76:	c1 2c       	mov	r12, r1
     c78:	d1 2c       	mov	r13, r1
     c7a:	76 01       	movw	r14, r12
     c7c:	68 94       	set
     c7e:	c1 f8       	bld	r12, 1
     c80:	b7 01       	movw	r22, r14
     c82:	a6 01       	movw	r20, r12
     c84:	c8 01       	movw	r24, r16
     c86:	0e 94 13 04 	call	0x826	; 0x826 <get_fat>
     c8a:	61 30       	cpi	r22, 0x01	; 1
     c8c:	71 05       	cpc	r23, r1
     c8e:	81 05       	cpc	r24, r1
     c90:	91 05       	cpc	r25, r1
     c92:	09 f4       	brne	.+2      	; 0xc96 <create_chain+0xdc>
     c94:	aa c0       	rjmp	.+340    	; 0xdea <create_chain+0x230>
     c96:	6f 3f       	cpi	r22, 0xFF	; 255
     c98:	ef ef       	ldi	r30, 0xFF	; 255
     c9a:	7e 07       	cpc	r23, r30
     c9c:	8e 07       	cpc	r24, r30
     c9e:	9e 07       	cpc	r25, r30
     ca0:	09 f4       	brne	.+2      	; 0xca4 <create_chain+0xea>
     ca2:	a8 c0       	rjmp	.+336    	; 0xdf4 <create_chain+0x23a>
     ca4:	67 2b       	or	r22, r23
     ca6:	68 2b       	or	r22, r24
     ca8:	69 2b       	or	r22, r25
     caa:	b1 f0       	breq	.+44     	; 0xcd8 <create_chain+0x11e>
     cac:	8b 84       	ldd	r8, Y+11	; 0x0b
     cae:	9c 84       	ldd	r9, Y+12	; 0x0c
     cb0:	ad 84       	ldd	r10, Y+13	; 0x0d
     cb2:	be 84       	ldd	r11, Y+14	; 0x0e
     cb4:	f2 e0       	ldi	r31, 0x02	; 2
     cb6:	8f 16       	cp	r8, r31
     cb8:	91 04       	cpc	r9, r1
     cba:	a1 04       	cpc	r10, r1
     cbc:	b1 04       	cpc	r11, r1
     cbe:	08 f4       	brcc	.+2      	; 0xcc2 <create_chain+0x108>
     cc0:	bd c0       	rjmp	.+378    	; 0xe3c <create_chain+0x282>
     cc2:	8b 89       	ldd	r24, Y+19	; 0x13
     cc4:	9c 89       	ldd	r25, Y+20	; 0x14
     cc6:	ad 89       	ldd	r26, Y+21	; 0x15
     cc8:	be 89       	ldd	r27, Y+22	; 0x16
     cca:	88 16       	cp	r8, r24
     ccc:	99 06       	cpc	r9, r25
     cce:	aa 06       	cpc	r10, r26
     cd0:	bb 06       	cpc	r11, r27
     cd2:	08 f0       	brcs	.+2      	; 0xcd6 <create_chain+0x11c>
     cd4:	b6 c0       	rjmp	.+364    	; 0xe42 <create_chain+0x288>
     cd6:	07 c0       	rjmp	.+14     	; 0xce6 <create_chain+0x12c>
     cd8:	c1 14       	cp	r12, r1
     cda:	d1 04       	cpc	r13, r1
     cdc:	e1 04       	cpc	r14, r1
     cde:	f1 04       	cpc	r15, r1
     ce0:	d1 f5       	brne	.+116    	; 0xd56 <create_chain+0x19c>
     ce2:	53 01       	movw	r10, r6
     ce4:	42 01       	movw	r8, r4
     ce6:	75 01       	movw	r14, r10
     ce8:	64 01       	movw	r12, r8
     cea:	2f ef       	ldi	r18, 0xFF	; 255
     cec:	c2 1a       	sub	r12, r18
     cee:	d2 0a       	sbc	r13, r18
     cf0:	e2 0a       	sbc	r14, r18
     cf2:	f2 0a       	sbc	r15, r18
     cf4:	8b 89       	ldd	r24, Y+19	; 0x13
     cf6:	9c 89       	ldd	r25, Y+20	; 0x14
     cf8:	ad 89       	ldd	r26, Y+21	; 0x15
     cfa:	be 89       	ldd	r27, Y+22	; 0x16
     cfc:	c8 16       	cp	r12, r24
     cfe:	d9 06       	cpc	r13, r25
     d00:	ea 06       	cpc	r14, r26
     d02:	fb 06       	cpc	r15, r27
     d04:	60 f0       	brcs	.+24     	; 0xd1e <create_chain+0x164>
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	88 16       	cp	r8, r24
     d0a:	91 04       	cpc	r9, r1
     d0c:	a1 04       	cpc	r10, r1
     d0e:	b1 04       	cpc	r11, r1
     d10:	08 f4       	brcc	.+2      	; 0xd14 <create_chain+0x15a>
     d12:	74 c0       	rjmp	.+232    	; 0xdfc <create_chain+0x242>
     d14:	c1 2c       	mov	r12, r1
     d16:	d1 2c       	mov	r13, r1
     d18:	76 01       	movw	r14, r12
     d1a:	68 94       	set
     d1c:	c1 f8       	bld	r12, 1
     d1e:	b7 01       	movw	r22, r14
     d20:	a6 01       	movw	r20, r12
     d22:	c8 01       	movw	r24, r16
     d24:	0e 94 13 04 	call	0x826	; 0x826 <get_fat>
     d28:	61 15       	cp	r22, r1
     d2a:	71 05       	cpc	r23, r1
     d2c:	81 05       	cpc	r24, r1
     d2e:	91 05       	cpc	r25, r1
     d30:	91 f0       	breq	.+36     	; 0xd56 <create_chain+0x19c>
     d32:	61 30       	cpi	r22, 0x01	; 1
     d34:	71 05       	cpc	r23, r1
     d36:	81 05       	cpc	r24, r1
     d38:	91 05       	cpc	r25, r1
     d3a:	09 f4       	brne	.+2      	; 0xd3e <create_chain+0x184>
     d3c:	63 c0       	rjmp	.+198    	; 0xe04 <create_chain+0x24a>
     d3e:	6f 3f       	cpi	r22, 0xFF	; 255
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	8f 4f       	sbci	r24, 0xFF	; 255
     d44:	9f 4f       	sbci	r25, 0xFF	; 255
     d46:	09 f4       	brne	.+2      	; 0xd4a <create_chain+0x190>
     d48:	62 c0       	rjmp	.+196    	; 0xe0e <create_chain+0x254>
     d4a:	c8 14       	cp	r12, r8
     d4c:	d9 04       	cpc	r13, r9
     d4e:	ea 04       	cpc	r14, r10
     d50:	fb 04       	cpc	r15, r11
     d52:	59 f6       	brne	.-106    	; 0xcea <create_chain+0x130>
     d54:	60 c0       	rjmp	.+192    	; 0xe16 <create_chain+0x25c>
     d56:	0f ef       	ldi	r16, 0xFF	; 255
     d58:	1f ef       	ldi	r17, 0xFF	; 255
     d5a:	98 01       	movw	r18, r16
     d5c:	b7 01       	movw	r22, r14
     d5e:	a6 01       	movw	r20, r12
     d60:	ce 01       	movw	r24, r28
     d62:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <put_fat>
     d66:	81 11       	cpse	r24, r1
     d68:	30 c0       	rjmp	.+96     	; 0xdca <create_chain+0x210>
     d6a:	41 14       	cp	r4, r1
     d6c:	51 04       	cpc	r5, r1
     d6e:	61 04       	cpc	r6, r1
     d70:	71 04       	cpc	r7, r1
     d72:	49 f0       	breq	.+18     	; 0xd86 <create_chain+0x1cc>
     d74:	97 01       	movw	r18, r14
     d76:	86 01       	movw	r16, r12
     d78:	b3 01       	movw	r22, r6
     d7a:	a2 01       	movw	r20, r4
     d7c:	ce 01       	movw	r24, r28
     d7e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <put_fat>
     d82:	81 11       	cpse	r24, r1
     d84:	22 c0       	rjmp	.+68     	; 0xdca <create_chain+0x210>
     d86:	cb 86       	std	Y+11, r12	; 0x0b
     d88:	dc 86       	std	Y+12, r13	; 0x0c
     d8a:	ed 86       	std	Y+13, r14	; 0x0d
     d8c:	fe 86       	std	Y+14, r15	; 0x0e
     d8e:	4f 85       	ldd	r20, Y+15	; 0x0f
     d90:	58 89       	ldd	r21, Y+16	; 0x10
     d92:	69 89       	ldd	r22, Y+17	; 0x11
     d94:	7a 89       	ldd	r23, Y+18	; 0x12
     d96:	8b 89       	ldd	r24, Y+19	; 0x13
     d98:	9c 89       	ldd	r25, Y+20	; 0x14
     d9a:	ad 89       	ldd	r26, Y+21	; 0x15
     d9c:	be 89       	ldd	r27, Y+22	; 0x16
     d9e:	02 97       	sbiw	r24, 0x02	; 2
     da0:	a1 09       	sbc	r26, r1
     da2:	b1 09       	sbc	r27, r1
     da4:	84 17       	cp	r24, r20
     da6:	95 07       	cpc	r25, r21
     da8:	a6 07       	cpc	r26, r22
     daa:	b7 07       	cpc	r27, r23
     dac:	40 f0       	brcs	.+16     	; 0xdbe <create_chain+0x204>
     dae:	41 50       	subi	r20, 0x01	; 1
     db0:	51 09       	sbc	r21, r1
     db2:	61 09       	sbc	r22, r1
     db4:	71 09       	sbc	r23, r1
     db6:	4f 87       	std	Y+15, r20	; 0x0f
     db8:	58 8b       	std	Y+16, r21	; 0x10
     dba:	69 8b       	std	Y+17, r22	; 0x11
     dbc:	7a 8b       	std	Y+18, r23	; 0x12
     dbe:	8c 81       	ldd	r24, Y+4	; 0x04
     dc0:	81 60       	ori	r24, 0x01	; 1
     dc2:	8c 83       	std	Y+4, r24	; 0x04
     dc4:	c7 01       	movw	r24, r14
     dc6:	b6 01       	movw	r22, r12
     dc8:	4d c0       	rjmp	.+154    	; 0xe64 <create_chain+0x2aa>
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	41 f1       	breq	.+80     	; 0xe1e <create_chain+0x264>
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	46 c0       	rjmp	.+140    	; 0xe64 <create_chain+0x2aa>
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	41 c0       	rjmp	.+130    	; 0xe64 <create_chain+0x2aa>
     de2:	6f ef       	ldi	r22, 0xFF	; 255
     de4:	7f ef       	ldi	r23, 0xFF	; 255
     de6:	cb 01       	movw	r24, r22
     de8:	3d c0       	rjmp	.+122    	; 0xe64 <create_chain+0x2aa>
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	38 c0       	rjmp	.+112    	; 0xe64 <create_chain+0x2aa>
     df4:	6f ef       	ldi	r22, 0xFF	; 255
     df6:	7f ef       	ldi	r23, 0xFF	; 255
     df8:	cb 01       	movw	r24, r22
     dfa:	34 c0       	rjmp	.+104    	; 0xe64 <create_chain+0x2aa>
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	cb 01       	movw	r24, r22
     e02:	30 c0       	rjmp	.+96     	; 0xe64 <create_chain+0x2aa>
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	2b c0       	rjmp	.+86     	; 0xe64 <create_chain+0x2aa>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	cb 01       	movw	r24, r22
     e14:	27 c0       	rjmp	.+78     	; 0xe64 <create_chain+0x2aa>
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	cb 01       	movw	r24, r22
     e1c:	23 c0       	rjmp	.+70     	; 0xe64 <create_chain+0x2aa>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	cb 01       	movw	r24, r22
     e24:	1f c0       	rjmp	.+62     	; 0xe64 <create_chain+0x2aa>
     e26:	6f 85       	ldd	r22, Y+15	; 0x0f
     e28:	78 89       	ldd	r23, Y+16	; 0x10
     e2a:	89 89       	ldd	r24, Y+17	; 0x11
     e2c:	9a 89       	ldd	r25, Y+18	; 0x12
     e2e:	61 15       	cp	r22, r1
     e30:	71 05       	cpc	r23, r1
     e32:	81 05       	cpc	r24, r1
     e34:	91 05       	cpc	r25, r1
     e36:	09 f0       	breq	.+2      	; 0xe3a <create_chain+0x280>
     e38:	0e cf       	rjmp	.-484    	; 0xc56 <create_chain+0x9c>
     e3a:	14 c0       	rjmp	.+40     	; 0xe64 <create_chain+0x2aa>
     e3c:	53 01       	movw	r10, r6
     e3e:	42 01       	movw	r8, r4
     e40:	52 cf       	rjmp	.-348    	; 0xce6 <create_chain+0x12c>
     e42:	53 01       	movw	r10, r6
     e44:	42 01       	movw	r8, r4
     e46:	4f cf       	rjmp	.-354    	; 0xce6 <create_chain+0x12c>
     e48:	81 2c       	mov	r8, r1
     e4a:	91 2c       	mov	r9, r1
     e4c:	54 01       	movw	r10, r8
     e4e:	83 94       	inc	r8
     e50:	6f 85       	ldd	r22, Y+15	; 0x0f
     e52:	78 89       	ldd	r23, Y+16	; 0x10
     e54:	89 89       	ldd	r24, Y+17	; 0x11
     e56:	9a 89       	ldd	r25, Y+18	; 0x12
     e58:	61 15       	cp	r22, r1
     e5a:	71 05       	cpc	r23, r1
     e5c:	81 05       	cpc	r24, r1
     e5e:	91 05       	cpc	r25, r1
     e60:	09 f0       	breq	.+2      	; 0xe64 <create_chain+0x2aa>
     e62:	41 cf       	rjmp	.-382    	; 0xce6 <create_chain+0x12c>
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	bf 90       	pop	r11
     e76:	af 90       	pop	r10
     e78:	9f 90       	pop	r9
     e7a:	8f 90       	pop	r8
     e7c:	7f 90       	pop	r7
     e7e:	6f 90       	pop	r6
     e80:	5f 90       	pop	r5
     e82:	4f 90       	pop	r4
     e84:	08 95       	ret

00000e86 <remove_chain>:
     e86:	4f 92       	push	r4
     e88:	5f 92       	push	r5
     e8a:	6f 92       	push	r6
     e8c:	7f 92       	push	r7
     e8e:	af 92       	push	r10
     e90:	bf 92       	push	r11
     e92:	cf 92       	push	r12
     e94:	df 92       	push	r13
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	5c 01       	movw	r10, r24
     ea4:	6a 01       	movw	r12, r20
     ea6:	7b 01       	movw	r14, r22
     ea8:	b9 01       	movw	r22, r18
     eaa:	a8 01       	movw	r20, r16
     eac:	22 e0       	ldi	r18, 0x02	; 2
     eae:	c2 16       	cp	r12, r18
     eb0:	d1 04       	cpc	r13, r1
     eb2:	e1 04       	cpc	r14, r1
     eb4:	f1 04       	cpc	r15, r1
     eb6:	08 f4       	brcc	.+2      	; 0xeba <remove_chain+0x34>
     eb8:	63 c0       	rjmp	.+198    	; 0xf80 <remove_chain+0xfa>
     eba:	fc 01       	movw	r30, r24
     ebc:	c0 81       	ld	r28, Z
     ebe:	d1 81       	ldd	r29, Z+1	; 0x01
     ec0:	8b 89       	ldd	r24, Y+19	; 0x13
     ec2:	9c 89       	ldd	r25, Y+20	; 0x14
     ec4:	ad 89       	ldd	r26, Y+21	; 0x15
     ec6:	be 89       	ldd	r27, Y+22	; 0x16
     ec8:	c8 16       	cp	r12, r24
     eca:	d9 06       	cpc	r13, r25
     ecc:	ea 06       	cpc	r14, r26
     ece:	fb 06       	cpc	r15, r27
     ed0:	08 f0       	brcs	.+2      	; 0xed4 <remove_chain+0x4e>
     ed2:	58 c0       	rjmp	.+176    	; 0xf84 <remove_chain+0xfe>
     ed4:	41 15       	cp	r20, r1
     ed6:	51 05       	cpc	r21, r1
     ed8:	61 05       	cpc	r22, r1
     eda:	71 05       	cpc	r23, r1
     edc:	41 f0       	breq	.+16     	; 0xeee <remove_chain+0x68>
     ede:	0f ef       	ldi	r16, 0xFF	; 255
     ee0:	1f ef       	ldi	r17, 0xFF	; 255
     ee2:	98 01       	movw	r18, r16
     ee4:	ce 01       	movw	r24, r28
     ee6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <put_fat>
     eea:	81 11       	cpse	r24, r1
     eec:	52 c0       	rjmp	.+164    	; 0xf92 <remove_chain+0x10c>
     eee:	b7 01       	movw	r22, r14
     ef0:	a6 01       	movw	r20, r12
     ef2:	c5 01       	movw	r24, r10
     ef4:	0e 94 13 04 	call	0x826	; 0x826 <get_fat>
     ef8:	2b 01       	movw	r4, r22
     efa:	3c 01       	movw	r6, r24
     efc:	61 15       	cp	r22, r1
     efe:	71 05       	cpc	r23, r1
     f00:	81 05       	cpc	r24, r1
     f02:	91 05       	cpc	r25, r1
     f04:	09 f4       	brne	.+2      	; 0xf08 <remove_chain+0x82>
     f06:	40 c0       	rjmp	.+128    	; 0xf88 <remove_chain+0x102>
     f08:	61 30       	cpi	r22, 0x01	; 1
     f0a:	71 05       	cpc	r23, r1
     f0c:	81 05       	cpc	r24, r1
     f0e:	91 05       	cpc	r25, r1
     f10:	e9 f1       	breq	.+122    	; 0xf8c <remove_chain+0x106>
     f12:	6f 3f       	cpi	r22, 0xFF	; 255
     f14:	7f 4f       	sbci	r23, 0xFF	; 255
     f16:	8f 4f       	sbci	r24, 0xFF	; 255
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	d1 f1       	breq	.+116    	; 0xf90 <remove_chain+0x10a>
     f1c:	00 e0       	ldi	r16, 0x00	; 0
     f1e:	10 e0       	ldi	r17, 0x00	; 0
     f20:	98 01       	movw	r18, r16
     f22:	b7 01       	movw	r22, r14
     f24:	a6 01       	movw	r20, r12
     f26:	ce 01       	movw	r24, r28
     f28:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <put_fat>
     f2c:	81 11       	cpse	r24, r1
     f2e:	31 c0       	rjmp	.+98     	; 0xf92 <remove_chain+0x10c>
     f30:	8f 85       	ldd	r24, Y+15	; 0x0f
     f32:	98 89       	ldd	r25, Y+16	; 0x10
     f34:	a9 89       	ldd	r26, Y+17	; 0x11
     f36:	ba 89       	ldd	r27, Y+18	; 0x12
     f38:	4b 89       	ldd	r20, Y+19	; 0x13
     f3a:	5c 89       	ldd	r21, Y+20	; 0x14
     f3c:	6d 89       	ldd	r22, Y+21	; 0x15
     f3e:	7e 89       	ldd	r23, Y+22	; 0x16
     f40:	6a 01       	movw	r12, r20
     f42:	7b 01       	movw	r14, r22
     f44:	e2 e0       	ldi	r30, 0x02	; 2
     f46:	ce 1a       	sub	r12, r30
     f48:	d1 08       	sbc	r13, r1
     f4a:	e1 08       	sbc	r14, r1
     f4c:	f1 08       	sbc	r15, r1
     f4e:	8c 15       	cp	r24, r12
     f50:	9d 05       	cpc	r25, r13
     f52:	ae 05       	cpc	r26, r14
     f54:	bf 05       	cpc	r27, r15
     f56:	50 f4       	brcc	.+20     	; 0xf6c <remove_chain+0xe6>
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	a1 1d       	adc	r26, r1
     f5c:	b1 1d       	adc	r27, r1
     f5e:	8f 87       	std	Y+15, r24	; 0x0f
     f60:	98 8b       	std	Y+16, r25	; 0x10
     f62:	a9 8b       	std	Y+17, r26	; 0x11
     f64:	ba 8b       	std	Y+18, r27	; 0x12
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	81 60       	ori	r24, 0x01	; 1
     f6a:	8c 83       	std	Y+4, r24	; 0x04
     f6c:	73 01       	movw	r14, r6
     f6e:	62 01       	movw	r12, r4
     f70:	44 16       	cp	r4, r20
     f72:	55 06       	cpc	r5, r21
     f74:	66 06       	cpc	r6, r22
     f76:	77 06       	cpc	r7, r23
     f78:	08 f4       	brcc	.+2      	; 0xf7c <remove_chain+0xf6>
     f7a:	b9 cf       	rjmp	.-142    	; 0xeee <remove_chain+0x68>
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	09 c0       	rjmp	.+18     	; 0xf92 <remove_chain+0x10c>
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	07 c0       	rjmp	.+14     	; 0xf92 <remove_chain+0x10c>
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <remove_chain+0x10c>
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	03 c0       	rjmp	.+6      	; 0xf92 <remove_chain+0x10c>
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <remove_chain+0x10c>
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	ff 90       	pop	r15
     f9c:	ef 90       	pop	r14
     f9e:	df 90       	pop	r13
     fa0:	cf 90       	pop	r12
     fa2:	bf 90       	pop	r11
     fa4:	af 90       	pop	r10
     fa6:	7f 90       	pop	r7
     fa8:	6f 90       	pop	r6
     faa:	5f 90       	pop	r5
     fac:	4f 90       	pop	r4
     fae:	08 95       	ret

00000fb0 <dir_next>:
     fb0:	4f 92       	push	r4
     fb2:	5f 92       	push	r5
     fb4:	6f 92       	push	r6
     fb6:	7f 92       	push	r7
     fb8:	af 92       	push	r10
     fba:	bf 92       	push	r11
     fbc:	cf 92       	push	r12
     fbe:	df 92       	push	r13
     fc0:	ef 92       	push	r14
     fc2:	ff 92       	push	r15
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	8b 01       	movw	r16, r22
     fce:	fc 01       	movw	r30, r24
     fd0:	c6 84       	ldd	r12, Z+14	; 0x0e
     fd2:	d7 84       	ldd	r13, Z+15	; 0x0f
     fd4:	e0 88       	ldd	r14, Z+16	; 0x10
     fd6:	f1 88       	ldd	r15, Z+17	; 0x11
     fd8:	f0 e2       	ldi	r31, 0x20	; 32
     fda:	cf 0e       	add	r12, r31
     fdc:	d1 1c       	adc	r13, r1
     fde:	e1 1c       	adc	r14, r1
     fe0:	f1 1c       	adc	r15, r1
     fe2:	c1 14       	cp	r12, r1
     fe4:	d1 04       	cpc	r13, r1
     fe6:	20 e2       	ldi	r18, 0x20	; 32
     fe8:	e2 06       	cpc	r14, r18
     fea:	f1 04       	cpc	r15, r1
     fec:	38 f0       	brcs	.+14     	; 0xffc <dir_next+0x4c>
     fee:	fc 01       	movw	r30, r24
     ff0:	16 8a       	std	Z+22, r1	; 0x16
     ff2:	17 8a       	std	Z+23, r1	; 0x17
     ff4:	10 8e       	std	Z+24, r1	; 0x18
     ff6:	11 8e       	std	Z+25, r1	; 0x19
     ff8:	84 e0       	ldi	r24, 0x04	; 4
     ffa:	ca c0       	rjmp	.+404    	; 0x1190 <dir_next+0x1e0>
     ffc:	fc 01       	movw	r30, r24
     ffe:	46 89       	ldd	r20, Z+22	; 0x16
    1000:	57 89       	ldd	r21, Z+23	; 0x17
    1002:	60 8d       	ldd	r22, Z+24	; 0x18
    1004:	71 8d       	ldd	r23, Z+25	; 0x19
    1006:	41 15       	cp	r20, r1
    1008:	51 05       	cpc	r21, r1
    100a:	61 05       	cpc	r22, r1
    100c:	71 05       	cpc	r23, r1
    100e:	09 f4       	brne	.+2      	; 0x1012 <dir_next+0x62>
    1010:	b2 c0       	rjmp	.+356    	; 0x1176 <dir_next+0x1c6>
    1012:	ec 01       	movw	r28, r24
    1014:	a0 80       	ld	r10, Z
    1016:	b1 80       	ldd	r11, Z+1	; 0x01
    1018:	d7 01       	movw	r26, r14
    101a:	c6 01       	movw	r24, r12
    101c:	91 70       	andi	r25, 0x01	; 1
    101e:	aa 27       	eor	r26, r26
    1020:	bb 27       	eor	r27, r27
    1022:	89 2b       	or	r24, r25
    1024:	8a 2b       	or	r24, r26
    1026:	8b 2b       	or	r24, r27
    1028:	09 f0       	breq	.+2      	; 0x102c <dir_next+0x7c>
    102a:	96 c0       	rjmp	.+300    	; 0x1158 <dir_next+0x1a8>
    102c:	4f 5f       	subi	r20, 0xFF	; 255
    102e:	5f 4f       	sbci	r21, 0xFF	; 255
    1030:	6f 4f       	sbci	r22, 0xFF	; 255
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	46 8b       	std	Z+22, r20	; 0x16
    1036:	57 8b       	std	Z+23, r21	; 0x17
    1038:	60 8f       	std	Z+24, r22	; 0x18
    103a:	71 8f       	std	Z+25, r23	; 0x19
    103c:	42 89       	ldd	r20, Z+18	; 0x12
    103e:	53 89       	ldd	r21, Z+19	; 0x13
    1040:	64 89       	ldd	r22, Z+20	; 0x14
    1042:	75 89       	ldd	r23, Z+21	; 0x15
    1044:	41 15       	cp	r20, r1
    1046:	51 05       	cpc	r21, r1
    1048:	61 05       	cpc	r22, r1
    104a:	71 05       	cpc	r23, r1
    104c:	d9 f4       	brne	.+54     	; 0x1084 <dir_next+0xd4>
    104e:	f5 01       	movw	r30, r10
    1050:	87 81       	ldd	r24, Z+7	; 0x07
    1052:	90 85       	ldd	r25, Z+8	; 0x08
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	b7 01       	movw	r22, r14
    105a:	a6 01       	movw	r20, r12
    105c:	68 94       	set
    105e:	14 f8       	bld	r1, 4
    1060:	76 95       	lsr	r23
    1062:	67 95       	ror	r22
    1064:	57 95       	ror	r21
    1066:	47 95       	ror	r20
    1068:	16 94       	lsr	r1
    106a:	d1 f7       	brne	.-12     	; 0x1060 <dir_next+0xb0>
    106c:	48 17       	cp	r20, r24
    106e:	59 07       	cpc	r21, r25
    1070:	6a 07       	cpc	r22, r26
    1072:	7b 07       	cpc	r23, r27
    1074:	08 f4       	brcc	.+2      	; 0x1078 <dir_next+0xc8>
    1076:	70 c0       	rjmp	.+224    	; 0x1158 <dir_next+0x1a8>
    1078:	1e 8a       	std	Y+22, r1	; 0x16
    107a:	1f 8a       	std	Y+23, r1	; 0x17
    107c:	18 8e       	std	Y+24, r1	; 0x18
    107e:	19 8e       	std	Y+25, r1	; 0x19
    1080:	84 e0       	ldi	r24, 0x04	; 4
    1082:	86 c0       	rjmp	.+268    	; 0x1190 <dir_next+0x1e0>
    1084:	f5 01       	movw	r30, r10
    1086:	81 85       	ldd	r24, Z+9	; 0x09
    1088:	92 85       	ldd	r25, Z+10	; 0x0a
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	a0 e0       	ldi	r26, 0x00	; 0
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	26 01       	movw	r4, r12
    1092:	37 01       	movw	r6, r14
    1094:	03 2e       	mov	r0, r19
    1096:	39 e0       	ldi	r19, 0x09	; 9
    1098:	76 94       	lsr	r7
    109a:	67 94       	ror	r6
    109c:	57 94       	ror	r5
    109e:	47 94       	ror	r4
    10a0:	3a 95       	dec	r19
    10a2:	d1 f7       	brne	.-12     	; 0x1098 <dir_next+0xe8>
    10a4:	30 2d       	mov	r19, r0
    10a6:	84 21       	and	r24, r4
    10a8:	95 21       	and	r25, r5
    10aa:	a6 21       	and	r26, r6
    10ac:	b7 21       	and	r27, r7
    10ae:	89 2b       	or	r24, r25
    10b0:	8a 2b       	or	r24, r26
    10b2:	8b 2b       	or	r24, r27
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <dir_next+0x108>
    10b6:	50 c0       	rjmp	.+160    	; 0x1158 <dir_next+0x1a8>
    10b8:	ce 01       	movw	r24, r28
    10ba:	0e 94 13 04 	call	0x826	; 0x826 <get_fat>
    10be:	2b 01       	movw	r4, r22
    10c0:	3c 01       	movw	r6, r24
    10c2:	62 30       	cpi	r22, 0x02	; 2
    10c4:	71 05       	cpc	r23, r1
    10c6:	81 05       	cpc	r24, r1
    10c8:	91 05       	cpc	r25, r1
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <dir_next+0x11e>
    10cc:	56 c0       	rjmp	.+172    	; 0x117a <dir_next+0x1ca>
    10ce:	6f 3f       	cpi	r22, 0xFF	; 255
    10d0:	7f 4f       	sbci	r23, 0xFF	; 255
    10d2:	8f 4f       	sbci	r24, 0xFF	; 255
    10d4:	9f 4f       	sbci	r25, 0xFF	; 255
    10d6:	09 f4       	brne	.+2      	; 0x10da <dir_next+0x12a>
    10d8:	52 c0       	rjmp	.+164    	; 0x117e <dir_next+0x1ce>
    10da:	f5 01       	movw	r30, r10
    10dc:	83 89       	ldd	r24, Z+19	; 0x13
    10de:	94 89       	ldd	r25, Z+20	; 0x14
    10e0:	a5 89       	ldd	r26, Z+21	; 0x15
    10e2:	b6 89       	ldd	r27, Z+22	; 0x16
    10e4:	48 16       	cp	r4, r24
    10e6:	59 06       	cpc	r5, r25
    10e8:	6a 06       	cpc	r6, r26
    10ea:	7b 06       	cpc	r7, r27
    10ec:	40 f1       	brcs	.+80     	; 0x113e <dir_next+0x18e>
    10ee:	01 2b       	or	r16, r17
    10f0:	31 f4       	brne	.+12     	; 0x10fe <dir_next+0x14e>
    10f2:	1e 8a       	std	Y+22, r1	; 0x16
    10f4:	1f 8a       	std	Y+23, r1	; 0x17
    10f6:	18 8e       	std	Y+24, r1	; 0x18
    10f8:	19 8e       	std	Y+25, r1	; 0x19
    10fa:	84 e0       	ldi	r24, 0x04	; 4
    10fc:	49 c0       	rjmp	.+146    	; 0x1190 <dir_next+0x1e0>
    10fe:	4a 89       	ldd	r20, Y+18	; 0x12
    1100:	5b 89       	ldd	r21, Y+19	; 0x13
    1102:	6c 89       	ldd	r22, Y+20	; 0x14
    1104:	7d 89       	ldd	r23, Y+21	; 0x15
    1106:	ce 01       	movw	r24, r28
    1108:	0e 94 dd 05 	call	0xbba	; 0xbba <create_chain>
    110c:	2b 01       	movw	r4, r22
    110e:	3c 01       	movw	r6, r24
    1110:	61 15       	cp	r22, r1
    1112:	71 05       	cpc	r23, r1
    1114:	81 05       	cpc	r24, r1
    1116:	91 05       	cpc	r25, r1
    1118:	a1 f1       	breq	.+104    	; 0x1182 <dir_next+0x1d2>
    111a:	61 30       	cpi	r22, 0x01	; 1
    111c:	71 05       	cpc	r23, r1
    111e:	81 05       	cpc	r24, r1
    1120:	91 05       	cpc	r25, r1
    1122:	89 f1       	breq	.+98     	; 0x1186 <dir_next+0x1d6>
    1124:	6f 3f       	cpi	r22, 0xFF	; 255
    1126:	2f ef       	ldi	r18, 0xFF	; 255
    1128:	72 07       	cpc	r23, r18
    112a:	82 07       	cpc	r24, r18
    112c:	92 07       	cpc	r25, r18
    112e:	69 f1       	breq	.+90     	; 0x118a <dir_next+0x1da>
    1130:	ab 01       	movw	r20, r22
    1132:	bc 01       	movw	r22, r24
    1134:	c5 01       	movw	r24, r10
    1136:	0e 94 10 02 	call	0x420	; 0x420 <dir_clear>
    113a:	81 11       	cpse	r24, r1
    113c:	28 c0       	rjmp	.+80     	; 0x118e <dir_next+0x1de>
    113e:	4a 8a       	std	Y+18, r4	; 0x12
    1140:	5b 8a       	std	Y+19, r5	; 0x13
    1142:	6c 8a       	std	Y+20, r6	; 0x14
    1144:	7d 8a       	std	Y+21, r7	; 0x15
    1146:	b3 01       	movw	r22, r6
    1148:	a2 01       	movw	r20, r4
    114a:	c5 01       	movw	r24, r10
    114c:	0e 94 ed 00 	call	0x1da	; 0x1da <clst2sect>
    1150:	6e 8b       	std	Y+22, r22	; 0x16
    1152:	7f 8b       	std	Y+23, r23	; 0x17
    1154:	88 8f       	std	Y+24, r24	; 0x18
    1156:	99 8f       	std	Y+25, r25	; 0x19
    1158:	ce 86       	std	Y+14, r12	; 0x0e
    115a:	df 86       	std	Y+15, r13	; 0x0f
    115c:	e8 8a       	std	Y+16, r14	; 0x10
    115e:	f9 8a       	std	Y+17, r15	; 0x11
    1160:	8f e2       	ldi	r24, 0x2F	; 47
    1162:	a8 0e       	add	r10, r24
    1164:	b1 1c       	adc	r11, r1
    1166:	e1 e0       	ldi	r30, 0x01	; 1
    1168:	de 22       	and	r13, r30
    116a:	ca 0c       	add	r12, r10
    116c:	db 1c       	adc	r13, r11
    116e:	db 8e       	std	Y+27, r13	; 0x1b
    1170:	ca 8e       	std	Y+26, r12	; 0x1a
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	0d c0       	rjmp	.+26     	; 0x1190 <dir_next+0x1e0>
    1176:	84 e0       	ldi	r24, 0x04	; 4
    1178:	0b c0       	rjmp	.+22     	; 0x1190 <dir_next+0x1e0>
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	09 c0       	rjmp	.+18     	; 0x1190 <dir_next+0x1e0>
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	07 c0       	rjmp	.+14     	; 0x1190 <dir_next+0x1e0>
    1182:	87 e0       	ldi	r24, 0x07	; 7
    1184:	05 c0       	rjmp	.+10     	; 0x1190 <dir_next+0x1e0>
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <dir_next+0x1e0>
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <dir_next+0x1e0>
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	df 90       	pop	r13
    119e:	cf 90       	pop	r12
    11a0:	bf 90       	pop	r11
    11a2:	af 90       	pop	r10
    11a4:	7f 90       	pop	r7
    11a6:	6f 90       	pop	r6
    11a8:	5f 90       	pop	r5
    11aa:	4f 90       	pop	r4
    11ac:	08 95       	ret

000011ae <dir_register>:
    11ae:	ef 92       	push	r14
    11b0:	ff 92       	push	r15
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	cf 93       	push	r28
    11b8:	8c 01       	movw	r16, r24
    11ba:	dc 01       	movw	r26, r24
    11bc:	ed 90       	ld	r14, X+
    11be:	fc 90       	ld	r15, X
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	ba 01       	movw	r22, r20
    11c6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <dir_sdi>
    11ca:	c8 2f       	mov	r28, r24
    11cc:	81 11       	cpse	r24, r1
    11ce:	1d c0       	rjmp	.+58     	; 0x120a <dir_register+0x5c>
    11d0:	f8 01       	movw	r30, r16
    11d2:	46 89       	ldd	r20, Z+22	; 0x16
    11d4:	57 89       	ldd	r21, Z+23	; 0x17
    11d6:	60 8d       	ldd	r22, Z+24	; 0x18
    11d8:	71 8d       	ldd	r23, Z+25	; 0x19
    11da:	c7 01       	movw	r24, r14
    11dc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
    11e0:	c8 2f       	mov	r28, r24
    11e2:	81 11       	cpse	r24, r1
    11e4:	12 c0       	rjmp	.+36     	; 0x120a <dir_register+0x5c>
    11e6:	d8 01       	movw	r26, r16
    11e8:	5a 96       	adiw	r26, 0x1a	; 26
    11ea:	ed 91       	ld	r30, X+
    11ec:	fc 91       	ld	r31, X
    11ee:	5b 97       	sbiw	r26, 0x1b	; 27
    11f0:	80 81       	ld	r24, Z
    11f2:	85 3e       	cpi	r24, 0xE5	; 229
    11f4:	71 f0       	breq	.+28     	; 0x1212 <dir_register+0x64>
    11f6:	88 23       	and	r24, r24
    11f8:	61 f0       	breq	.+24     	; 0x1212 <dir_register+0x64>
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	c8 01       	movw	r24, r16
    1200:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <dir_next>
    1204:	c8 2f       	mov	r28, r24
    1206:	88 23       	and	r24, r24
    1208:	19 f3       	breq	.-58     	; 0x11d0 <dir_register+0x22>
    120a:	c4 30       	cpi	r28, 0x04	; 4
    120c:	39 f1       	breq	.+78     	; 0x125c <dir_register+0xae>
    120e:	c1 11       	cpse	r28, r1
    1210:	26 c0       	rjmp	.+76     	; 0x125e <dir_register+0xb0>
    1212:	f8 01       	movw	r30, r16
    1214:	46 89       	ldd	r20, Z+22	; 0x16
    1216:	57 89       	ldd	r21, Z+23	; 0x17
    1218:	60 8d       	ldd	r22, Z+24	; 0x18
    121a:	71 8d       	ldd	r23, Z+25	; 0x19
    121c:	c7 01       	movw	r24, r14
    121e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
    1222:	c8 2f       	mov	r28, r24
    1224:	81 11       	cpse	r24, r1
    1226:	1b c0       	rjmp	.+54     	; 0x125e <dir_register+0xb0>
    1228:	d8 01       	movw	r26, r16
    122a:	5a 96       	adiw	r26, 0x1a	; 26
    122c:	ed 91       	ld	r30, X+
    122e:	fc 91       	ld	r31, X
    1230:	5b 97       	sbiw	r26, 0x1b	; 27
    1232:	cf 01       	movw	r24, r30
    1234:	80 96       	adiw	r24, 0x20	; 32
    1236:	11 92       	st	Z+, r1
    1238:	e8 17       	cp	r30, r24
    123a:	f9 07       	cpc	r31, r25
    123c:	e1 f7       	brne	.-8      	; 0x1236 <dir_register+0x88>
    123e:	b8 01       	movw	r22, r16
    1240:	64 5e       	subi	r22, 0xE4	; 228
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	4b e0       	ldi	r20, 0x0B	; 11
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	f8 01       	movw	r30, r16
    124a:	82 8d       	ldd	r24, Z+26	; 0x1a
    124c:	93 8d       	ldd	r25, Z+27	; 0x1b
    124e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mem_cpy>
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	d7 01       	movw	r26, r14
    1256:	13 96       	adiw	r26, 0x03	; 3
    1258:	8c 93       	st	X, r24
    125a:	01 c0       	rjmp	.+2      	; 0x125e <dir_register+0xb0>
    125c:	c7 e0       	ldi	r28, 0x07	; 7
    125e:	8c 2f       	mov	r24, r28
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	08 95       	ret

0000126c <check_fs>:
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	ec 01       	movw	r28, r24
    1272:	1b 82       	std	Y+3, r1	; 0x03
    1274:	8f ef       	ldi	r24, 0xFF	; 255
    1276:	9f ef       	ldi	r25, 0xFF	; 255
    1278:	dc 01       	movw	r26, r24
    127a:	8b a7       	std	Y+43, r24	; 0x2b
    127c:	9c a7       	std	Y+44, r25	; 0x2c
    127e:	ad a7       	std	Y+45, r26	; 0x2d
    1280:	be a7       	std	Y+46, r27	; 0x2e
    1282:	ce 01       	movw	r24, r28
    1284:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
    1288:	81 11       	cpse	r24, r1
    128a:	2c c0       	rjmp	.+88     	; 0x12e4 <check_fs+0x78>
    128c:	fe 01       	movw	r30, r28
    128e:	e2 5d       	subi	r30, 0xD2	; 210
    1290:	fd 4f       	sbci	r31, 0xFD	; 253
    1292:	80 81       	ld	r24, Z
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	98 2f       	mov	r25, r24
    1298:	88 27       	eor	r24, r24
    129a:	31 97       	sbiw	r30, 0x01	; 1
    129c:	20 81       	ld	r18, Z
    129e:	82 2b       	or	r24, r18
    12a0:	85 35       	cpi	r24, 0x55	; 85
    12a2:	9a 4a       	sbci	r25, 0xAA	; 170
    12a4:	11 f5       	brne	.+68     	; 0x12ea <check_fs+0x7e>
    12a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    12a8:	8b 3e       	cpi	r24, 0xEB	; 235
    12aa:	19 f0       	breq	.+6      	; 0x12b2 <check_fs+0x46>
    12ac:	88 5e       	subi	r24, 0xE8	; 232
    12ae:	82 30       	cpi	r24, 0x02	; 2
    12b0:	f8 f4       	brcc	.+62     	; 0x12f0 <check_fs+0x84>
    12b2:	43 e0       	ldi	r20, 0x03	; 3
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	71 e0       	ldi	r23, 0x01	; 1
    12ba:	ce 01       	movw	r24, r28
    12bc:	8b 59       	subi	r24, 0x9B	; 155
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	0e 94 df 00 	call	0x1be	; 0x1be <mem_cmp>
    12c4:	89 2b       	or	r24, r25
    12c6:	b9 f0       	breq	.+46     	; 0x12f6 <check_fs+0x8a>
    12c8:	45 e0       	ldi	r20, 0x05	; 5
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	65 e0       	ldi	r22, 0x05	; 5
    12ce:	71 e0       	ldi	r23, 0x01	; 1
    12d0:	ce 01       	movw	r24, r28
    12d2:	8f 57       	subi	r24, 0x7F	; 127
    12d4:	9f 4f       	sbci	r25, 0xFF	; 255
    12d6:	0e 94 df 00 	call	0x1be	; 0x1be <mem_cmp>
    12da:	89 2b       	or	r24, r25
    12dc:	79 f0       	breq	.+30     	; 0x12fc <check_fs+0x90>
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e c0       	rjmp	.+28     	; 0x1300 <check_fs+0x94>
    12e4:	84 e0       	ldi	r24, 0x04	; 4
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0b c0       	rjmp	.+22     	; 0x1300 <check_fs+0x94>
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	08 c0       	rjmp	.+16     	; 0x1300 <check_fs+0x94>
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	05 c0       	rjmp	.+10     	; 0x1300 <check_fs+0x94>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <check_fs+0x94>
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <mount_volume>:
    1306:	2f 92       	push	r2
    1308:	3f 92       	push	r3
    130a:	4f 92       	push	r4
    130c:	5f 92       	push	r5
    130e:	6f 92       	push	r6
    1310:	7f 92       	push	r7
    1312:	8f 92       	push	r8
    1314:	9f 92       	push	r9
    1316:	af 92       	push	r10
    1318:	bf 92       	push	r11
    131a:	cf 92       	push	r12
    131c:	df 92       	push	r13
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	6e 97       	sbiw	r28, 0x1e	; 30
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	6b 01       	movw	r12, r22
    133c:	b4 2e       	mov	r11, r20
    133e:	db 01       	movw	r26, r22
    1340:	1d 92       	st	X+, r1
    1342:	1c 92       	st	X, r1
    1344:	0e 94 15 01 	call	0x22a	; 0x22a <get_ldnumber>
    1348:	7c 01       	movw	r14, r24
    134a:	99 23       	and	r25, r25
    134c:	0c f4       	brge	.+2      	; 0x1350 <mount_volume+0x4a>
    134e:	6a c2       	rjmp	.+1236   	; 0x1824 <mount_volume+0x51e>
    1350:	fc 01       	movw	r30, r24
    1352:	ee 0f       	add	r30, r30
    1354:	ff 1f       	adc	r31, r31
    1356:	e2 53       	subi	r30, 0x32	; 50
    1358:	fe 4f       	sbci	r31, 0xFE	; 254
    135a:	00 81       	ld	r16, Z
    135c:	11 81       	ldd	r17, Z+1	; 0x01
    135e:	01 15       	cp	r16, r1
    1360:	11 05       	cpc	r17, r1
    1362:	09 f4       	brne	.+2      	; 0x1366 <mount_volume+0x60>
    1364:	61 c2       	rjmp	.+1218   	; 0x1828 <mount_volume+0x522>
    1366:	f6 01       	movw	r30, r12
    1368:	11 83       	std	Z+1, r17	; 0x01
    136a:	00 83       	st	Z, r16
    136c:	fb 2d       	mov	r31, r11
    136e:	fe 7f       	andi	r31, 0xFE	; 254
    1370:	bf 2e       	mov	r11, r31
    1372:	d8 01       	movw	r26, r16
    1374:	8c 91       	ld	r24, X
    1376:	88 23       	and	r24, r24
    1378:	69 f0       	breq	.+26     	; 0x1394 <mount_volume+0x8e>
    137a:	11 96       	adiw	r26, 0x01	; 1
    137c:	8c 91       	ld	r24, X
    137e:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <disk_status>
    1382:	80 fd       	sbrc	r24, 0
    1384:	07 c0       	rjmp	.+14     	; 0x1394 <mount_volume+0x8e>
    1386:	bb 20       	and	r11, r11
    1388:	09 f4       	brne	.+2      	; 0x138c <mount_volume+0x86>
    138a:	50 c2       	rjmp	.+1184   	; 0x182c <mount_volume+0x526>
    138c:	82 ff       	sbrs	r24, 2
    138e:	50 c2       	rjmp	.+1184   	; 0x1830 <mount_volume+0x52a>
    1390:	8a e0       	ldi	r24, 0x0A	; 10
    1392:	f5 c2       	rjmp	.+1514   	; 0x197e <mount_volume+0x678>
    1394:	f8 01       	movw	r30, r16
    1396:	10 82       	st	Z, r1
    1398:	e1 82       	std	Z+1, r14	; 0x01
    139a:	8e 2d       	mov	r24, r14
    139c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <disk_initialize>
    13a0:	80 fd       	sbrc	r24, 0
    13a2:	48 c2       	rjmp	.+1168   	; 0x1834 <mount_volume+0x52e>
    13a4:	bb 20       	and	r11, r11
    13a6:	09 f4       	brne	.+2      	; 0x13aa <mount_volume+0xa4>
    13a8:	6b c2       	rjmp	.+1238   	; 0x1880 <mount_volume+0x57a>
    13aa:	82 fd       	sbrc	r24, 2
    13ac:	45 c2       	rjmp	.+1162   	; 0x1838 <mount_volume+0x532>
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	ba 01       	movw	r22, r20
    13b4:	c8 01       	movw	r24, r16
    13b6:	0e 94 36 09 	call	0x126c	; 0x126c <check_fs>
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	91 05       	cpc	r25, r1
    13be:	c9 f5       	brne	.+114    	; 0x1432 <mount_volume+0x12c>
    13c0:	48 01       	movw	r8, r16
    13c2:	fb e0       	ldi	r31, 0x0B	; 11
    13c4:	8f 1a       	sub	r8, r31
    13c6:	fe ef       	ldi	r31, 0xFE	; 254
    13c8:	9f 0a       	sbc	r9, r31
    13ca:	9e 01       	movw	r18, r28
    13cc:	2f 5f       	subi	r18, 0xFF	; 255
    13ce:	3f 4f       	sbci	r19, 0xFF	; 255
    13d0:	79 01       	movw	r14, r18
    13d2:	6e 01       	movw	r12, r28
    13d4:	31 e1       	ldi	r19, 0x11	; 17
    13d6:	c3 0e       	add	r12, r19
    13d8:	d1 1c       	adc	r13, r1
    13da:	57 01       	movw	r10, r14
    13dc:	c4 01       	movw	r24, r8
    13de:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_dword>
    13e2:	d5 01       	movw	r26, r10
    13e4:	6d 93       	st	X+, r22
    13e6:	7d 93       	st	X+, r23
    13e8:	8d 93       	st	X+, r24
    13ea:	9d 93       	st	X+, r25
    13ec:	5d 01       	movw	r10, r26
    13ee:	b0 e1       	ldi	r27, 0x10	; 16
    13f0:	8b 0e       	add	r8, r27
    13f2:	91 1c       	adc	r9, r1
    13f4:	ac 14       	cp	r10, r12
    13f6:	bd 04       	cpc	r11, r13
    13f8:	89 f7       	brne	.-30     	; 0x13dc <mount_volume+0xd6>
    13fa:	0f 2e       	mov	r0, r31
    13fc:	f3 e0       	ldi	r31, 0x03	; 3
    13fe:	af 2e       	mov	r10, r31
    1400:	f0 2d       	mov	r31, r0
    1402:	b1 2c       	mov	r11, r1
    1404:	f7 01       	movw	r30, r14
    1406:	41 91       	ld	r20, Z+
    1408:	51 91       	ld	r21, Z+
    140a:	61 91       	ld	r22, Z+
    140c:	71 91       	ld	r23, Z+
    140e:	7f 01       	movw	r14, r30
    1410:	41 15       	cp	r20, r1
    1412:	51 05       	cpc	r21, r1
    1414:	61 05       	cpc	r22, r1
    1416:	71 05       	cpc	r23, r1
    1418:	39 f0       	breq	.+14     	; 0x1428 <mount_volume+0x122>
    141a:	c8 01       	movw	r24, r16
    141c:	0e 94 36 09 	call	0x126c	; 0x126c <check_fs>
    1420:	82 30       	cpi	r24, 0x02	; 2
    1422:	91 05       	cpc	r25, r1
    1424:	18 f4       	brcc	.+6      	; 0x142c <mount_volume+0x126>
    1426:	37 c2       	rjmp	.+1134   	; 0x1896 <mount_volume+0x590>
    1428:	8a 2d       	mov	r24, r10
    142a:	9b 2d       	mov	r25, r11
    142c:	ce 14       	cp	r12, r14
    142e:	df 04       	cpc	r13, r15
    1430:	49 f7       	brne	.-46     	; 0x1404 <mount_volume+0xfe>
    1432:	84 30       	cpi	r24, 0x04	; 4
    1434:	91 05       	cpc	r25, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <mount_volume+0x134>
    1438:	01 c2       	rjmp	.+1026   	; 0x183c <mount_volume+0x536>
    143a:	02 97       	sbiw	r24, 0x02	; 2
    143c:	08 f0       	brcs	.+2      	; 0x1440 <mount_volume+0x13a>
    143e:	00 c2       	rjmp	.+1024   	; 0x1840 <mount_volume+0x53a>
    1440:	d8 01       	movw	r26, r16
    1442:	db 96       	adiw	r26, 0x3b	; 59
    1444:	8c 91       	ld	r24, X
    1446:	db 97       	sbiw	r26, 0x3b	; 59
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	98 2f       	mov	r25, r24
    144c:	88 27       	eor	r24, r24
    144e:	da 96       	adiw	r26, 0x3a	; 58
    1450:	2c 91       	ld	r18, X
    1452:	82 2b       	or	r24, r18
    1454:	81 15       	cp	r24, r1
    1456:	92 40       	sbci	r25, 0x02	; 2
    1458:	09 f0       	breq	.+2      	; 0x145c <mount_volume+0x156>
    145a:	f4 c1       	rjmp	.+1000   	; 0x1844 <mount_volume+0x53e>
    145c:	f8 01       	movw	r30, r16
    145e:	ea 5b       	subi	r30, 0xBA	; 186
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	80 80       	ld	r8, Z
    1464:	91 2c       	mov	r9, r1
    1466:	98 2c       	mov	r9, r8
    1468:	88 24       	eor	r8, r8
    146a:	31 97       	sbiw	r30, 0x01	; 1
    146c:	80 81       	ld	r24, Z
    146e:	88 2a       	or	r8, r24
    1470:	94 01       	movw	r18, r8
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	29 8b       	std	Y+17, r18	; 0x11
    1478:	3a 8b       	std	Y+18, r19	; 0x12
    147a:	4b 8b       	std	Y+19, r20	; 0x13
    147c:	5c 8b       	std	Y+20, r21	; 0x14
    147e:	23 2b       	or	r18, r19
    1480:	24 2b       	or	r18, r20
    1482:	25 2b       	or	r18, r21
    1484:	49 f4       	brne	.+18     	; 0x1498 <mount_volume+0x192>
    1486:	c8 01       	movw	r24, r16
    1488:	8d 5a       	subi	r24, 0xAD	; 173
    148a:	9f 4f       	sbci	r25, 0xFF	; 255
    148c:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_dword>
    1490:	69 8b       	std	Y+17, r22	; 0x11
    1492:	7a 8b       	std	Y+18, r23	; 0x12
    1494:	8b 8b       	std	Y+19, r24	; 0x13
    1496:	9c 8b       	std	Y+20, r25	; 0x14
    1498:	d8 01       	movw	r26, r16
    149a:	9b 96       	adiw	r26, 0x2b	; 43
    149c:	8d 90       	ld	r8, X+
    149e:	9d 90       	ld	r9, X+
    14a0:	ad 90       	ld	r10, X+
    14a2:	bc 90       	ld	r11, X
    14a4:	9e 97       	sbiw	r26, 0x2e	; 46
    14a6:	29 89       	ldd	r18, Y+17	; 0x11
    14a8:	3a 89       	ldd	r19, Y+18	; 0x12
    14aa:	4b 89       	ldd	r20, Y+19	; 0x13
    14ac:	5c 89       	ldd	r21, Y+20	; 0x14
    14ae:	57 96       	adiw	r26, 0x17	; 23
    14b0:	2d 93       	st	X+, r18
    14b2:	3d 93       	st	X+, r19
    14b4:	4d 93       	st	X+, r20
    14b6:	5c 93       	st	X, r21
    14b8:	5a 97       	sbiw	r26, 0x1a	; 26
    14ba:	df 96       	adiw	r26, 0x3f	; 63
    14bc:	7c 90       	ld	r7, X
    14be:	df 97       	sbiw	r26, 0x3f	; 63
    14c0:	12 96       	adiw	r26, 0x02	; 2
    14c2:	7c 92       	st	X, r7
    14c4:	12 97       	sbiw	r26, 0x02	; 2
    14c6:	8f ef       	ldi	r24, 0xFF	; 255
    14c8:	87 0d       	add	r24, r7
    14ca:	82 30       	cpi	r24, 0x02	; 2
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <mount_volume+0x1ca>
    14ce:	bc c1       	rjmp	.+888    	; 0x1848 <mount_volume+0x542>
    14d0:	dc 96       	adiw	r26, 0x3c	; 60
    14d2:	3c 90       	ld	r3, X
    14d4:	dc 97       	sbiw	r26, 0x3c	; 60
    14d6:	83 2d       	mov	r24, r3
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	1a 96       	adiw	r26, 0x0a	; 10
    14dc:	9c 93       	st	X, r25
    14de:	8e 93       	st	-X, r24
    14e0:	19 97       	sbiw	r26, 0x09	; 9
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <mount_volume+0x1e2>
    14e6:	b2 c1       	rjmp	.+868    	; 0x184c <mount_volume+0x546>
    14e8:	9c 01       	movw	r18, r24
    14ea:	21 50       	subi	r18, 0x01	; 1
    14ec:	31 09       	sbc	r19, r1
    14ee:	82 23       	and	r24, r18
    14f0:	93 23       	and	r25, r19
    14f2:	89 2b       	or	r24, r25
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <mount_volume+0x1f2>
    14f6:	ac c1       	rjmp	.+856    	; 0x1850 <mount_volume+0x54a>
    14f8:	f8 01       	movw	r30, r16
    14fa:	ef 5b       	subi	r30, 0xBF	; 191
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	80 81       	ld	r24, Z
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	98 2f       	mov	r25, r24
    1504:	88 27       	eor	r24, r24
    1506:	31 97       	sbiw	r30, 0x01	; 1
    1508:	20 81       	ld	r18, Z
    150a:	fc 01       	movw	r30, r24
    150c:	e2 2b       	or	r30, r18
    150e:	fe 8b       	std	Y+22, r31	; 0x16
    1510:	ed 8b       	std	Y+21, r30	; 0x15
    1512:	18 96       	adiw	r26, 0x08	; 8
    1514:	fc 93       	st	X, r31
    1516:	ee 93       	st	-X, r30
    1518:	17 97       	sbiw	r26, 0x07	; 7
    151a:	cf 01       	movw	r24, r30
    151c:	8f 70       	andi	r24, 0x0F	; 15
    151e:	99 27       	eor	r25, r25
    1520:	89 2b       	or	r24, r25
    1522:	09 f0       	breq	.+2      	; 0x1526 <mount_volume+0x220>
    1524:	97 c1       	rjmp	.+814    	; 0x1854 <mount_volume+0x54e>
    1526:	f8 01       	movw	r30, r16
    1528:	ed 5b       	subi	r30, 0xBD	; 189
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	c0 80       	ld	r12, Z
    152e:	d1 2c       	mov	r13, r1
    1530:	dc 2c       	mov	r13, r12
    1532:	cc 24       	eor	r12, r12
    1534:	31 97       	sbiw	r30, 0x01	; 1
    1536:	80 81       	ld	r24, Z
    1538:	c8 2a       	or	r12, r24
    153a:	e1 2c       	mov	r14, r1
    153c:	f1 2c       	mov	r15, r1
    153e:	c1 14       	cp	r12, r1
    1540:	d1 04       	cpc	r13, r1
    1542:	e1 04       	cpc	r14, r1
    1544:	f1 04       	cpc	r15, r1
    1546:	39 f4       	brne	.+14     	; 0x1556 <mount_volume+0x250>
    1548:	c8 01       	movw	r24, r16
    154a:	81 5b       	subi	r24, 0xB1	; 177
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_dword>
    1552:	6b 01       	movw	r12, r22
    1554:	7c 01       	movw	r14, r24
    1556:	d8 01       	movw	r26, r16
    1558:	de 96       	adiw	r26, 0x3e	; 62
    155a:	ec 91       	ld	r30, X
    155c:	de 97       	sbiw	r26, 0x3e	; 62
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	fe 2f       	mov	r31, r30
    1562:	ee 27       	eor	r30, r30
    1564:	dd 96       	adiw	r26, 0x3d	; 61
    1566:	8c 91       	ld	r24, X
    1568:	e8 2b       	or	r30, r24
    156a:	30 97       	sbiw	r30, 0x00	; 0
    156c:	09 f4       	brne	.+2      	; 0x1570 <mount_volume+0x26a>
    156e:	74 c1       	rjmp	.+744    	; 0x1858 <mount_volume+0x552>
    1570:	a7 2d       	mov	r26, r7
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	29 89       	ldd	r18, Y+17	; 0x11
    1576:	3a 89       	ldd	r19, Y+18	; 0x12
    1578:	4b 89       	ldd	r20, Y+19	; 0x13
    157a:	5c 89       	ldd	r21, Y+20	; 0x14
    157c:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__muluhisi3>
    1580:	6b 8f       	std	Y+27, r22	; 0x1b
    1582:	7c 8f       	std	Y+28, r23	; 0x1c
    1584:	8d 8f       	std	Y+29, r24	; 0x1d
    1586:	9e 8f       	std	Y+30, r25	; 0x1e
    1588:	9f 01       	movw	r18, r30
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	2f 8b       	std	Y+23, r18	; 0x17
    1590:	38 8f       	std	Y+24, r19	; 0x18
    1592:	49 8f       	std	Y+25, r20	; 0x19
    1594:	5a 8f       	std	Y+26, r21	; 0x1a
    1596:	8d 89       	ldd	r24, Y+21	; 0x15
    1598:	9e 89       	ldd	r25, Y+22	; 0x16
    159a:	92 95       	swap	r25
    159c:	82 95       	swap	r24
    159e:	8f 70       	andi	r24, 0x0F	; 15
    15a0:	89 27       	eor	r24, r25
    15a2:	9f 70       	andi	r25, 0x0F	; 15
    15a4:	89 27       	eor	r24, r25
    15a6:	28 0f       	add	r18, r24
    15a8:	39 1f       	adc	r19, r25
    15aa:	41 1d       	adc	r20, r1
    15ac:	51 1d       	adc	r21, r1
    15ae:	4b 8c       	ldd	r4, Y+27	; 0x1b
    15b0:	5c 8c       	ldd	r5, Y+28	; 0x1c
    15b2:	6d 8c       	ldd	r6, Y+29	; 0x1d
    15b4:	7e 8c       	ldd	r7, Y+30	; 0x1e
    15b6:	42 0e       	add	r4, r18
    15b8:	53 1e       	adc	r5, r19
    15ba:	64 1e       	adc	r6, r20
    15bc:	75 1e       	adc	r7, r21
    15be:	c4 14       	cp	r12, r4
    15c0:	d5 04       	cpc	r13, r5
    15c2:	e6 04       	cpc	r14, r6
    15c4:	f7 04       	cpc	r15, r7
    15c6:	08 f4       	brcc	.+2      	; 0x15ca <mount_volume+0x2c4>
    15c8:	49 c1       	rjmp	.+658    	; 0x185c <mount_volume+0x556>
    15ca:	c7 01       	movw	r24, r14
    15cc:	b6 01       	movw	r22, r12
    15ce:	64 19       	sub	r22, r4
    15d0:	75 09       	sbc	r23, r5
    15d2:	86 09       	sbc	r24, r6
    15d4:	97 09       	sbc	r25, r7
    15d6:	23 2d       	mov	r18, r3
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e0       	ldi	r20, 0x00	; 0
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__udivmodsi4>
    15e2:	da 01       	movw	r26, r20
    15e4:	c9 01       	movw	r24, r18
    15e6:	21 15       	cp	r18, r1
    15e8:	31 05       	cpc	r19, r1
    15ea:	41 05       	cpc	r20, r1
    15ec:	51 05       	cpc	r21, r1
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <mount_volume+0x2ec>
    15f0:	37 c1       	rjmp	.+622    	; 0x1860 <mount_volume+0x55a>
    15f2:	26 3f       	cpi	r18, 0xF6	; 246
    15f4:	6f ef       	ldi	r22, 0xFF	; 255
    15f6:	36 07       	cpc	r19, r22
    15f8:	46 07       	cpc	r20, r22
    15fa:	6f e0       	ldi	r22, 0x0F	; 15
    15fc:	56 07       	cpc	r21, r22
    15fe:	30 f4       	brcc	.+12     	; 0x160c <mount_volume+0x306>
    1600:	0f 2e       	mov	r0, r31
    1602:	f3 e0       	ldi	r31, 0x03	; 3
    1604:	2f 2e       	mov	r2, r31
    1606:	31 2c       	mov	r3, r1
    1608:	f0 2d       	mov	r31, r0
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <mount_volume+0x30a>
    160c:	21 2c       	mov	r2, r1
    160e:	31 2c       	mov	r3, r1
    1610:	86 3f       	cpi	r24, 0xF6	; 246
    1612:	ef ef       	ldi	r30, 0xFF	; 255
    1614:	9e 07       	cpc	r25, r30
    1616:	a1 05       	cpc	r26, r1
    1618:	b1 05       	cpc	r27, r1
    161a:	20 f4       	brcc	.+8      	; 0x1624 <mount_volume+0x31e>
    161c:	68 94       	set
    161e:	22 24       	eor	r2, r2
    1620:	21 f8       	bld	r2, 1
    1622:	31 2c       	mov	r3, r1
    1624:	86 3f       	cpi	r24, 0xF6	; 246
    1626:	9f 40       	sbci	r25, 0x0F	; 15
    1628:	a1 05       	cpc	r26, r1
    162a:	b1 05       	cpc	r27, r1
    162c:	08 f4       	brcc	.+2      	; 0x1630 <mount_volume+0x32a>
    162e:	7a c1       	rjmp	.+756    	; 0x1924 <mount_volume+0x61e>
    1630:	21 14       	cp	r2, r1
    1632:	31 04       	cpc	r3, r1
    1634:	09 f4       	brne	.+2      	; 0x1638 <mount_volume+0x332>
    1636:	16 c1       	rjmp	.+556    	; 0x1864 <mount_volume+0x55e>
    1638:	69 01       	movw	r12, r18
    163a:	7a 01       	movw	r14, r20
    163c:	62 e0       	ldi	r22, 0x02	; 2
    163e:	c6 0e       	add	r12, r22
    1640:	d1 1c       	adc	r13, r1
    1642:	e1 1c       	adc	r14, r1
    1644:	f1 1c       	adc	r15, r1
    1646:	d8 01       	movw	r26, r16
    1648:	53 96       	adiw	r26, 0x13	; 19
    164a:	cd 92       	st	X+, r12
    164c:	dd 92       	st	X+, r13
    164e:	ed 92       	st	X+, r14
    1650:	fc 92       	st	X, r15
    1652:	56 97       	sbiw	r26, 0x16	; 22
    1654:	f8 01       	movw	r30, r16
    1656:	83 8e       	std	Z+27, r8	; 0x1b
    1658:	94 8e       	std	Z+28, r9	; 0x1c
    165a:	a5 8e       	std	Z+29, r10	; 0x1d
    165c:	b6 8e       	std	Z+30, r11	; 0x1e
    165e:	8f 89       	ldd	r24, Y+23	; 0x17
    1660:	98 8d       	ldd	r25, Y+24	; 0x18
    1662:	a9 8d       	ldd	r26, Y+25	; 0x19
    1664:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1666:	88 0d       	add	r24, r8
    1668:	99 1d       	adc	r25, r9
    166a:	aa 1d       	adc	r26, r10
    166c:	bb 1d       	adc	r27, r11
    166e:	87 8f       	std	Z+31, r24	; 0x1f
    1670:	90 a3       	std	Z+32, r25	; 0x20
    1672:	a1 a3       	std	Z+33, r26	; 0x21
    1674:	b2 a3       	std	Z+34, r27	; 0x22
    1676:	b5 01       	movw	r22, r10
    1678:	a4 01       	movw	r20, r8
    167a:	44 0d       	add	r20, r4
    167c:	55 1d       	adc	r21, r5
    167e:	66 1d       	adc	r22, r6
    1680:	77 1d       	adc	r23, r7
    1682:	47 a3       	std	Z+39, r20	; 0x27
    1684:	50 a7       	std	Z+40, r21	; 0x28
    1686:	61 a7       	std	Z+41, r22	; 0x29
    1688:	72 a7       	std	Z+42, r23	; 0x2a
    168a:	f3 e0       	ldi	r31, 0x03	; 3
    168c:	2f 16       	cp	r2, r31
    168e:	31 04       	cpc	r3, r1
    1690:	09 f0       	breq	.+2      	; 0x1694 <mount_volume+0x38e>
    1692:	40 c0       	rjmp	.+128    	; 0x1714 <mount_volume+0x40e>
    1694:	f8 01       	movw	r30, r16
    1696:	e6 5a       	subi	r30, 0xA6	; 166
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	80 81       	ld	r24, Z
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	98 2f       	mov	r25, r24
    16a0:	88 27       	eor	r24, r24
    16a2:	31 97       	sbiw	r30, 0x01	; 1
    16a4:	20 81       	ld	r18, Z
    16a6:	82 2b       	or	r24, r18
    16a8:	89 2b       	or	r24, r25
    16aa:	09 f0       	breq	.+2      	; 0x16ae <mount_volume+0x3a8>
    16ac:	dd c0       	rjmp	.+442    	; 0x1868 <mount_volume+0x562>
    16ae:	2d 89       	ldd	r18, Y+21	; 0x15
    16b0:	3e 89       	ldd	r19, Y+22	; 0x16
    16b2:	23 2b       	or	r18, r19
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <mount_volume+0x3b2>
    16b6:	da c0       	rjmp	.+436    	; 0x186c <mount_volume+0x566>
    16b8:	c8 01       	movw	r24, r16
    16ba:	85 5a       	subi	r24, 0xA5	; 165
    16bc:	9f 4f       	sbci	r25, 0xFF	; 255
    16be:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_dword>
    16c2:	d8 01       	movw	r26, r16
    16c4:	93 96       	adiw	r26, 0x23	; 35
    16c6:	6d 93       	st	X+, r22
    16c8:	7d 93       	st	X+, r23
    16ca:	8d 93       	st	X+, r24
    16cc:	9c 93       	st	X, r25
    16ce:	96 97       	sbiw	r26, 0x26	; 38
    16d0:	cc 0c       	add	r12, r12
    16d2:	dd 1c       	adc	r13, r13
    16d4:	ee 1c       	adc	r14, r14
    16d6:	ff 1c       	adc	r15, r15
    16d8:	cc 0c       	add	r12, r12
    16da:	dd 1c       	adc	r13, r13
    16dc:	ee 1c       	adc	r14, r14
    16de:	ff 1c       	adc	r15, r15
    16e0:	bf ef       	ldi	r27, 0xFF	; 255
    16e2:	cb 0e       	add	r12, r27
    16e4:	b1 e0       	ldi	r27, 0x01	; 1
    16e6:	db 1e       	adc	r13, r27
    16e8:	e1 1c       	adc	r14, r1
    16ea:	f1 1c       	adc	r15, r1
    16ec:	0b 2e       	mov	r0, r27
    16ee:	b9 e0       	ldi	r27, 0x09	; 9
    16f0:	f6 94       	lsr	r15
    16f2:	e7 94       	ror	r14
    16f4:	d7 94       	ror	r13
    16f6:	c7 94       	ror	r12
    16f8:	ba 95       	dec	r27
    16fa:	d1 f7       	brne	.-12     	; 0x16f0 <mount_volume+0x3ea>
    16fc:	b0 2d       	mov	r27, r0
    16fe:	29 89       	ldd	r18, Y+17	; 0x11
    1700:	3a 89       	ldd	r19, Y+18	; 0x12
    1702:	4b 89       	ldd	r20, Y+19	; 0x13
    1704:	5c 89       	ldd	r21, Y+20	; 0x14
    1706:	2c 15       	cp	r18, r12
    1708:	3d 05       	cpc	r19, r13
    170a:	4e 05       	cpc	r20, r14
    170c:	5f 05       	cpc	r21, r15
    170e:	08 f4       	brcc	.+2      	; 0x1712 <mount_volume+0x40c>
    1710:	af c0       	rjmp	.+350    	; 0x1870 <mount_volume+0x56a>
    1712:	ed c0       	rjmp	.+474    	; 0x18ee <mount_volume+0x5e8>
    1714:	4d 89       	ldd	r20, Y+21	; 0x15
    1716:	5e 89       	ldd	r21, Y+22	; 0x16
    1718:	45 2b       	or	r20, r21
    171a:	09 f4       	brne	.+2      	; 0x171e <mount_volume+0x418>
    171c:	ab c0       	rjmp	.+342    	; 0x1874 <mount_volume+0x56e>
    171e:	4b 8c       	ldd	r4, Y+27	; 0x1b
    1720:	5c 8c       	ldd	r5, Y+28	; 0x1c
    1722:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1724:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1726:	48 0e       	add	r4, r24
    1728:	59 1e       	adc	r5, r25
    172a:	6a 1e       	adc	r6, r26
    172c:	7b 1e       	adc	r7, r27
    172e:	d8 01       	movw	r26, r16
    1730:	93 96       	adiw	r26, 0x23	; 35
    1732:	4d 92       	st	X+, r4
    1734:	5d 92       	st	X+, r5
    1736:	6d 92       	st	X+, r6
    1738:	7c 92       	st	X, r7
    173a:	96 97       	sbiw	r26, 0x26	; 38
    173c:	b2 e0       	ldi	r27, 0x02	; 2
    173e:	2b 16       	cp	r2, r27
    1740:	31 04       	cpc	r3, r1
    1742:	29 f4       	brne	.+10     	; 0x174e <mount_volume+0x448>
    1744:	cc 0c       	add	r12, r12
    1746:	dd 1c       	adc	r13, r13
    1748:	ee 1c       	adc	r14, r14
    174a:	ff 1c       	adc	r15, r15
    174c:	b7 c0       	rjmp	.+366    	; 0x18bc <mount_volume+0x5b6>
    174e:	a3 e0       	ldi	r26, 0x03	; 3
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	a7 01       	movw	r20, r14
    1754:	96 01       	movw	r18, r12
    1756:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__muluhisi3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	b6 95       	lsr	r27
    1760:	a7 95       	ror	r26
    1762:	97 95       	ror	r25
    1764:	87 95       	ror	r24
    1766:	e1 e0       	ldi	r30, 0x01	; 1
    1768:	ce 22       	and	r12, r30
    176a:	dd 24       	eor	r13, r13
    176c:	ee 24       	eor	r14, r14
    176e:	ff 24       	eor	r15, r15
    1770:	c8 0e       	add	r12, r24
    1772:	d9 1e       	adc	r13, r25
    1774:	ea 1e       	adc	r14, r26
    1776:	fb 1e       	adc	r15, r27
    1778:	a1 c0       	rjmp	.+322    	; 0x18bc <mount_volume+0x5b6>
    177a:	b5 01       	movw	r22, r10
    177c:	a4 01       	movw	r20, r8
    177e:	4f 5f       	subi	r20, 0xFF	; 255
    1780:	5f 4f       	sbci	r21, 0xFF	; 255
    1782:	6f 4f       	sbci	r22, 0xFF	; 255
    1784:	7f 4f       	sbci	r23, 0xFF	; 255
    1786:	c8 01       	movw	r24, r16
    1788:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
    178c:	81 11       	cpse	r24, r1
    178e:	39 c0       	rjmp	.+114    	; 0x1802 <mount_volume+0x4fc>
    1790:	d8 01       	movw	r26, r16
    1792:	14 96       	adiw	r26, 0x04	; 4
    1794:	1c 92       	st	X, r1
    1796:	f8 01       	movw	r30, r16
    1798:	e2 5d       	subi	r30, 0xD2	; 210
    179a:	fd 4f       	sbci	r31, 0xFD	; 253
    179c:	80 81       	ld	r24, Z
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	98 2f       	mov	r25, r24
    17a2:	88 27       	eor	r24, r24
    17a4:	31 97       	sbiw	r30, 0x01	; 1
    17a6:	20 81       	ld	r18, Z
    17a8:	82 2b       	or	r24, r18
    17aa:	85 35       	cpi	r24, 0x55	; 85
    17ac:	9a 4a       	sbci	r25, 0xAA	; 170
    17ae:	49 f5       	brne	.+82     	; 0x1802 <mount_volume+0x4fc>
    17b0:	c8 01       	movw	r24, r16
    17b2:	8f 96       	adiw	r24, 0x2f	; 47
    17b4:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_dword>
    17b8:	62 35       	cpi	r22, 0x52	; 82
    17ba:	72 45       	sbci	r23, 0x52	; 82
    17bc:	81 46       	sbci	r24, 0x61	; 97
    17be:	91 44       	sbci	r25, 0x41	; 65
    17c0:	01 f5       	brne	.+64     	; 0x1802 <mount_volume+0x4fc>
    17c2:	c8 01       	movw	r24, r16
    17c4:	8d 5e       	subi	r24, 0xED	; 237
    17c6:	9d 4f       	sbci	r25, 0xFD	; 253
    17c8:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_dword>
    17cc:	62 37       	cpi	r22, 0x72	; 114
    17ce:	72 47       	sbci	r23, 0x72	; 114
    17d0:	81 44       	sbci	r24, 0x41	; 65
    17d2:	91 46       	sbci	r25, 0x61	; 97
    17d4:	b1 f4       	brne	.+44     	; 0x1802 <mount_volume+0x4fc>
    17d6:	c8 01       	movw	r24, r16
    17d8:	89 5e       	subi	r24, 0xE9	; 233
    17da:	9d 4f       	sbci	r25, 0xFD	; 253
    17dc:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_dword>
    17e0:	d8 01       	movw	r26, r16
    17e2:	1f 96       	adiw	r26, 0x0f	; 15
    17e4:	6d 93       	st	X+, r22
    17e6:	7d 93       	st	X+, r23
    17e8:	8d 93       	st	X+, r24
    17ea:	9c 93       	st	X, r25
    17ec:	52 97       	sbiw	r26, 0x12	; 18
    17ee:	c8 01       	movw	r24, r16
    17f0:	85 5e       	subi	r24, 0xE5	; 229
    17f2:	9d 4f       	sbci	r25, 0xFD	; 253
    17f4:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_dword>
    17f8:	f8 01       	movw	r30, r16
    17fa:	63 87       	std	Z+11, r22	; 0x0b
    17fc:	74 87       	std	Z+12, r23	; 0x0c
    17fe:	85 87       	std	Z+13, r24	; 0x0d
    1800:	96 87       	std	Z+14, r25	; 0x0e
    1802:	d8 01       	movw	r26, r16
    1804:	2c 92       	st	X, r2
    1806:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
    180a:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <__data_end+0x1>
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <__data_end+0x1>
    1814:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__data_end>
    1818:	16 96       	adiw	r26, 0x06	; 6
    181a:	9c 93       	st	X, r25
    181c:	8e 93       	st	-X, r24
    181e:	15 97       	sbiw	r26, 0x05	; 5
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	ad c0       	rjmp	.+346    	; 0x197e <mount_volume+0x678>
    1824:	8b e0       	ldi	r24, 0x0B	; 11
    1826:	ab c0       	rjmp	.+342    	; 0x197e <mount_volume+0x678>
    1828:	8c e0       	ldi	r24, 0x0C	; 12
    182a:	a9 c0       	rjmp	.+338    	; 0x197e <mount_volume+0x678>
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	a7 c0       	rjmp	.+334    	; 0x197e <mount_volume+0x678>
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	a5 c0       	rjmp	.+330    	; 0x197e <mount_volume+0x678>
    1834:	83 e0       	ldi	r24, 0x03	; 3
    1836:	a3 c0       	rjmp	.+326    	; 0x197e <mount_volume+0x678>
    1838:	8a e0       	ldi	r24, 0x0A	; 10
    183a:	a1 c0       	rjmp	.+322    	; 0x197e <mount_volume+0x678>
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	9f c0       	rjmp	.+318    	; 0x197e <mount_volume+0x678>
    1840:	8d e0       	ldi	r24, 0x0D	; 13
    1842:	9d c0       	rjmp	.+314    	; 0x197e <mount_volume+0x678>
    1844:	8d e0       	ldi	r24, 0x0D	; 13
    1846:	9b c0       	rjmp	.+310    	; 0x197e <mount_volume+0x678>
    1848:	8d e0       	ldi	r24, 0x0D	; 13
    184a:	99 c0       	rjmp	.+306    	; 0x197e <mount_volume+0x678>
    184c:	8d e0       	ldi	r24, 0x0D	; 13
    184e:	97 c0       	rjmp	.+302    	; 0x197e <mount_volume+0x678>
    1850:	8d e0       	ldi	r24, 0x0D	; 13
    1852:	95 c0       	rjmp	.+298    	; 0x197e <mount_volume+0x678>
    1854:	8d e0       	ldi	r24, 0x0D	; 13
    1856:	93 c0       	rjmp	.+294    	; 0x197e <mount_volume+0x678>
    1858:	8d e0       	ldi	r24, 0x0D	; 13
    185a:	91 c0       	rjmp	.+290    	; 0x197e <mount_volume+0x678>
    185c:	8d e0       	ldi	r24, 0x0D	; 13
    185e:	8f c0       	rjmp	.+286    	; 0x197e <mount_volume+0x678>
    1860:	8d e0       	ldi	r24, 0x0D	; 13
    1862:	8d c0       	rjmp	.+282    	; 0x197e <mount_volume+0x678>
    1864:	8d e0       	ldi	r24, 0x0D	; 13
    1866:	8b c0       	rjmp	.+278    	; 0x197e <mount_volume+0x678>
    1868:	8d e0       	ldi	r24, 0x0D	; 13
    186a:	89 c0       	rjmp	.+274    	; 0x197e <mount_volume+0x678>
    186c:	8d e0       	ldi	r24, 0x0D	; 13
    186e:	87 c0       	rjmp	.+270    	; 0x197e <mount_volume+0x678>
    1870:	8d e0       	ldi	r24, 0x0D	; 13
    1872:	85 c0       	rjmp	.+266    	; 0x197e <mount_volume+0x678>
    1874:	8d e0       	ldi	r24, 0x0D	; 13
    1876:	83 c0       	rjmp	.+262    	; 0x197e <mount_volume+0x678>
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	81 c0       	rjmp	.+258    	; 0x197e <mount_volume+0x678>
    187c:	8d e0       	ldi	r24, 0x0D	; 13
    187e:	7f c0       	rjmp	.+254    	; 0x197e <mount_volume+0x678>
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	ba 01       	movw	r22, r20
    1886:	c8 01       	movw	r24, r16
    1888:	0e 94 36 09 	call	0x126c	; 0x126c <check_fs>
    188c:	82 30       	cpi	r24, 0x02	; 2
    188e:	91 05       	cpc	r25, r1
    1890:	09 f0       	breq	.+2      	; 0x1894 <mount_volume+0x58e>
    1892:	cf cd       	rjmp	.-1122   	; 0x1432 <mount_volume+0x12c>
    1894:	95 cd       	rjmp	.-1238   	; 0x13c0 <mount_volume+0xba>
    1896:	04 97       	sbiw	r24, 0x04	; 4
    1898:	09 f0       	breq	.+2      	; 0x189c <mount_volume+0x596>
    189a:	d2 cd       	rjmp	.-1116   	; 0x1440 <mount_volume+0x13a>
    189c:	ed cf       	rjmp	.-38     	; 0x1878 <mount_volume+0x572>
    189e:	8f ef       	ldi	r24, 0xFF	; 255
    18a0:	9f ef       	ldi	r25, 0xFF	; 255
    18a2:	dc 01       	movw	r26, r24
    18a4:	f8 01       	movw	r30, r16
    18a6:	87 87       	std	Z+15, r24	; 0x0f
    18a8:	90 8b       	std	Z+16, r25	; 0x10
    18aa:	a1 8b       	std	Z+17, r26	; 0x11
    18ac:	b2 8b       	std	Z+18, r27	; 0x12
    18ae:	83 87       	std	Z+11, r24	; 0x0b
    18b0:	94 87       	std	Z+12, r25	; 0x0c
    18b2:	a5 87       	std	Z+13, r26	; 0x0d
    18b4:	b6 87       	std	Z+14, r27	; 0x0e
    18b6:	80 e8       	ldi	r24, 0x80	; 128
    18b8:	84 83       	std	Z+4, r24	; 0x04
    18ba:	a3 cf       	rjmp	.-186    	; 0x1802 <mount_volume+0x4fc>
    18bc:	ff ef       	ldi	r31, 0xFF	; 255
    18be:	cf 0e       	add	r12, r31
    18c0:	f1 e0       	ldi	r31, 0x01	; 1
    18c2:	df 1e       	adc	r13, r31
    18c4:	e1 1c       	adc	r14, r1
    18c6:	f1 1c       	adc	r15, r1
    18c8:	0b 2e       	mov	r0, r27
    18ca:	b9 e0       	ldi	r27, 0x09	; 9
    18cc:	f6 94       	lsr	r15
    18ce:	e7 94       	ror	r14
    18d0:	d7 94       	ror	r13
    18d2:	c7 94       	ror	r12
    18d4:	ba 95       	dec	r27
    18d6:	d1 f7       	brne	.-12     	; 0x18cc <mount_volume+0x5c6>
    18d8:	b0 2d       	mov	r27, r0
    18da:	29 89       	ldd	r18, Y+17	; 0x11
    18dc:	3a 89       	ldd	r19, Y+18	; 0x12
    18de:	4b 89       	ldd	r20, Y+19	; 0x13
    18e0:	5c 89       	ldd	r21, Y+20	; 0x14
    18e2:	2c 15       	cp	r18, r12
    18e4:	3d 05       	cpc	r19, r13
    18e6:	4e 05       	cpc	r20, r14
    18e8:	5f 05       	cpc	r21, r15
    18ea:	40 f2       	brcs	.-112    	; 0x187c <mount_volume+0x576>
    18ec:	d8 cf       	rjmp	.-80     	; 0x189e <mount_volume+0x598>
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	9f ef       	ldi	r25, 0xFF	; 255
    18f2:	dc 01       	movw	r26, r24
    18f4:	f8 01       	movw	r30, r16
    18f6:	87 87       	std	Z+15, r24	; 0x0f
    18f8:	90 8b       	std	Z+16, r25	; 0x10
    18fa:	a1 8b       	std	Z+17, r26	; 0x11
    18fc:	b2 8b       	std	Z+18, r27	; 0x12
    18fe:	83 87       	std	Z+11, r24	; 0x0b
    1900:	94 87       	std	Z+12, r25	; 0x0c
    1902:	a5 87       	std	Z+13, r26	; 0x0d
    1904:	b6 87       	std	Z+14, r27	; 0x0e
    1906:	80 e8       	ldi	r24, 0x80	; 128
    1908:	84 83       	std	Z+4, r24	; 0x04
    190a:	e0 5a       	subi	r30, 0xA0	; 160
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	80 81       	ld	r24, Z
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	98 2f       	mov	r25, r24
    1914:	88 27       	eor	r24, r24
    1916:	31 97       	sbiw	r30, 0x01	; 1
    1918:	20 81       	ld	r18, Z
    191a:	82 2b       	or	r24, r18
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	09 f0       	breq	.+2      	; 0x1922 <mount_volume+0x61c>
    1920:	70 cf       	rjmp	.-288    	; 0x1802 <mount_volume+0x4fc>
    1922:	2b cf       	rjmp	.-426    	; 0x177a <mount_volume+0x474>
    1924:	69 01       	movw	r12, r18
    1926:	7a 01       	movw	r14, r20
    1928:	f2 e0       	ldi	r31, 0x02	; 2
    192a:	cf 0e       	add	r12, r31
    192c:	d1 1c       	adc	r13, r1
    192e:	e1 1c       	adc	r14, r1
    1930:	f1 1c       	adc	r15, r1
    1932:	d8 01       	movw	r26, r16
    1934:	53 96       	adiw	r26, 0x13	; 19
    1936:	cd 92       	st	X+, r12
    1938:	dd 92       	st	X+, r13
    193a:	ed 92       	st	X+, r14
    193c:	fc 92       	st	X, r15
    193e:	56 97       	sbiw	r26, 0x16	; 22
    1940:	f8 01       	movw	r30, r16
    1942:	83 8e       	std	Z+27, r8	; 0x1b
    1944:	94 8e       	std	Z+28, r9	; 0x1c
    1946:	a5 8e       	std	Z+29, r10	; 0x1d
    1948:	b6 8e       	std	Z+30, r11	; 0x1e
    194a:	8f 89       	ldd	r24, Y+23	; 0x17
    194c:	98 8d       	ldd	r25, Y+24	; 0x18
    194e:	a9 8d       	ldd	r26, Y+25	; 0x19
    1950:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1952:	88 0d       	add	r24, r8
    1954:	99 1d       	adc	r25, r9
    1956:	aa 1d       	adc	r26, r10
    1958:	bb 1d       	adc	r27, r11
    195a:	87 8f       	std	Z+31, r24	; 0x1f
    195c:	90 a3       	std	Z+32, r25	; 0x20
    195e:	a1 a3       	std	Z+33, r26	; 0x21
    1960:	b2 a3       	std	Z+34, r27	; 0x22
    1962:	b5 01       	movw	r22, r10
    1964:	a4 01       	movw	r20, r8
    1966:	44 0d       	add	r20, r4
    1968:	55 1d       	adc	r21, r5
    196a:	66 1d       	adc	r22, r6
    196c:	77 1d       	adc	r23, r7
    196e:	47 a3       	std	Z+39, r20	; 0x27
    1970:	50 a7       	std	Z+40, r21	; 0x28
    1972:	61 a7       	std	Z+41, r22	; 0x29
    1974:	72 a7       	std	Z+42, r23	; 0x2a
    1976:	22 24       	eor	r2, r2
    1978:	23 94       	inc	r2
    197a:	31 2c       	mov	r3, r1
    197c:	cb ce       	rjmp	.-618    	; 0x1714 <mount_volume+0x40e>
    197e:	6e 96       	adiw	r28, 0x1e	; 30
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	ff 90       	pop	r15
    1994:	ef 90       	pop	r14
    1996:	df 90       	pop	r13
    1998:	cf 90       	pop	r12
    199a:	bf 90       	pop	r11
    199c:	af 90       	pop	r10
    199e:	9f 90       	pop	r9
    19a0:	8f 90       	pop	r8
    19a2:	7f 90       	pop	r7
    19a4:	6f 90       	pop	r6
    19a6:	5f 90       	pop	r5
    19a8:	4f 90       	pop	r4
    19aa:	3f 90       	pop	r3
    19ac:	2f 90       	pop	r2
    19ae:	08 95       	ret

000019b0 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	dc 01       	movw	r26, r24
    19b6:	fb 01       	movw	r30, r22
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    19b8:	93 8d       	ldd	r25, Z+27	; 0x1b
    19ba:	69 2f       	mov	r22, r25
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	76 2f       	mov	r23, r22
    19c0:	66 27       	eor	r22, r22
	const BYTE* dir		/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    19c2:	82 8d       	ldd	r24, Z+26	; 0x1a
    19c4:	68 2b       	or	r22, r24
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
    19ca:	2c 91       	ld	r18, X
    19cc:	23 30       	cpi	r18, 0x03	; 3
    19ce:	79 f4       	brne	.+30     	; 0x19ee <ld_clust+0x3e>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    19d0:	05 89       	ldd	r16, Z+21	; 0x15
    19d2:	10 e0       	ldi	r17, 0x00	; 0
    19d4:	10 2f       	mov	r17, r16
    19d6:	00 27       	eor	r16, r16
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    19d8:	24 89       	ldd	r18, Z+20	; 0x14
    19da:	02 2b       	or	r16, r18
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	98 01       	movw	r18, r16
    19e2:	11 27       	eor	r17, r17
    19e4:	00 27       	eor	r16, r16
    19e6:	60 2b       	or	r22, r16
    19e8:	71 2b       	or	r23, r17
    19ea:	82 2b       	or	r24, r18
    19ec:	93 2b       	or	r25, r19
	}

	return cl;
}
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	08 95       	ret

000019f4 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
    19f4:	2f 92       	push	r2
    19f6:	3f 92       	push	r3
    19f8:	4f 92       	push	r4
    19fa:	5f 92       	push	r5
    19fc:	6f 92       	push	r6
    19fe:	7f 92       	push	r7
    1a00:	8f 92       	push	r8
    1a02:	9f 92       	push	r9
    1a04:	af 92       	push	r10
    1a06:	bf 92       	push	r11
    1a08:	cf 92       	push	r12
    1a0a:	df 92       	push	r13
    1a0c:	ef 92       	push	r14
    1a0e:	ff 92       	push	r15
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	2a 97       	sbiw	r28, 0x0a	; 10
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
    1a28:	dc 01       	movw	r26, r24
    1a2a:	0d 90       	ld	r0, X+
    1a2c:	bc 91       	ld	r27, X
    1a2e:	a0 2d       	mov	r26, r0
    1a30:	ba 83       	std	Y+2, r27	; 0x02
    1a32:	a9 83       	std	Y+1, r26	; 0x01
    1a34:	e6 2f       	mov	r30, r22
    1a36:	f7 2f       	mov	r31, r23
    1a38:	9a 87       	std	Y+10, r25	; 0x0a
    1a3a:	89 87       	std	Y+9, r24	; 0x09
    1a3c:	1f 01       	movw	r2, r30
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
    1a3e:	81 91       	ld	r24, Z+
    1a40:	8f 32       	cpi	r24, 0x2F	; 47
    1a42:	e1 f3       	breq	.-8      	; 0x1a3c <follow_path+0x48>
    1a44:	8c 35       	cpi	r24, 0x5C	; 92
    1a46:	d1 f3       	breq	.-12     	; 0x1a3c <follow_path+0x48>
    1a48:	e9 85       	ldd	r30, Y+9	; 0x09
    1a4a:	fa 85       	ldd	r31, Y+10	; 0x0a
		dp->obj.sclust = 0;					/* Start from root directory */
    1a4c:	df 01       	movw	r26, r30
    1a4e:	16 82       	std	Z+6, r1	; 0x06
    1a50:	17 82       	std	Z+7, r1	; 0x07
    1a52:	10 86       	std	Z+8, r1	; 0x08
    1a54:	11 86       	std	Z+9, r1	; 0x09
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    1a56:	f1 01       	movw	r30, r2
    1a58:	80 81       	ld	r24, Z
    1a5a:	80 32       	cpi	r24, 0x20	; 32
    1a5c:	60 f4       	brcc	.+24     	; 0x1a76 <follow_path+0x82>
		dp->fn[NSFLAG] = NS_NONAME;
    1a5e:	80 e8       	ldi	r24, 0x80	; 128
    1a60:	97 96       	adiw	r26, 0x27	; 39
    1a62:	8c 93       	st	X, r24
    1a64:	97 97       	sbiw	r26, 0x27	; 39
		res = dir_sdi(dp, 0);
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	50 e0       	ldi	r21, 0x00	; 0
    1a6a:	ba 01       	movw	r22, r20
    1a6c:	cd 01       	movw	r24, r26
    1a6e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <dir_sdi>
    1a72:	88 2e       	mov	r8, r24
    1a74:	23 c1       	rjmp	.+582    	; 0x1cbc <follow_path+0x2c8>
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
    1a76:	69 84       	ldd	r6, Y+9	; 0x09
    1a78:	7a 84       	ldd	r7, Y+10	; 0x0a
    1a7a:	fc e1       	ldi	r31, 0x1C	; 28
    1a7c:	6f 0e       	add	r6, r31
    1a7e:	71 1c       	adc	r7, r1
    1a80:	e9 84       	ldd	r14, Y+9	; 0x09
    1a82:	fa 84       	ldd	r15, Y+10	; 0x0a
    1a84:	87 e2       	ldi	r24, 0x27	; 39
    1a86:	e8 0e       	add	r14, r24
    1a88:	f1 1c       	adc	r15, r1
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    1a8a:	10 e2       	ldi	r17, 0x20	; 32
	} while (--cnt);
    1a8c:	b1 2c       	mov	r11, r1
    1a8e:	68 94       	set
    1a90:	55 24       	eor	r5, r5
    1a92:	53 f8       	bld	r5, 3
    1a94:	41 2c       	mov	r4, r1
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
			i = 8; ni = 11;				/* Enter file extension field */
    1a96:	0f 2e       	mov	r0, r31
    1a98:	fb e0       	ldi	r31, 0x0B	; 11
    1a9a:	af 2e       	mov	r10, r31
    1a9c:	f0 2d       	mov	r31, r0
    1a9e:	91 2c       	mov	r9, r1
    1aa0:	5d 82       	std	Y+5, r5	; 0x05
    1aa2:	4e 82       	std	Y+6, r4	; 0x06
    1aa4:	af 82       	std	Y+7, r10	; 0x07
    1aa6:	98 86       	std	Y+8, r9	; 0x08
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    1aa8:	a9 81       	ldd	r26, Y+1	; 0x01
    1aaa:	ba 81       	ldd	r27, Y+2	; 0x02
    1aac:	9f 96       	adiw	r26, 0x2f	; 47
    1aae:	bc 83       	std	Y+4, r27	; 0x04
    1ab0:	ab 83       	std	Y+3, r26	; 0x03
    1ab2:	f3 01       	movw	r30, r6
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    1ab4:	11 93       	st	Z+, r17
	} while (--cnt);
    1ab6:	ee 15       	cp	r30, r14
    1ab8:	ff 05       	cpc	r31, r15
    1aba:	e1 f7       	brne	.-8      	; 0x1ab4 <follow_path+0xc0>
    1abc:	f1 01       	movw	r30, r2
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	7b 2d       	mov	r23, r11
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	c5 2c       	mov	r12, r5
    1ac8:	d4 2c       	mov	r13, r4
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
    1aca:	2f 5f       	subi	r18, 0xFF	; 255
    1acc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ace:	01 91       	ld	r16, Z+
		if (c <= ' ') break; 			/* Break if end of the path name */
    1ad0:	01 32       	cpi	r16, 0x21	; 33
    1ad2:	b0 f1       	brcs	.+108    	; 0x1b40 <follow_path+0x14c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
    1ad4:	0f 32       	cpi	r16, 0x2F	; 47
    1ad6:	11 f0       	breq	.+4      	; 0x1adc <follow_path+0xe8>
    1ad8:	0c 35       	cpi	r16, 0x5C	; 92
    1ada:	61 f4       	brne	.+24     	; 0x1af4 <follow_path+0x100>
    1adc:	f1 01       	movw	r30, r2
    1ade:	e2 0f       	add	r30, r18
    1ae0:	f3 1f       	adc	r31, r19
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <follow_path+0xf4>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
    1ae4:	2f 5f       	subi	r18, 0xFF	; 255
    1ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae8:	81 91       	ld	r24, Z+
    1aea:	8f 32       	cpi	r24, 0x2F	; 47
    1aec:	d9 f3       	breq	.-10     	; 0x1ae4 <follow_path+0xf0>
    1aee:	8c 35       	cpi	r24, 0x5C	; 92
    1af0:	c9 f3       	breq	.-14     	; 0x1ae4 <follow_path+0xf0>
    1af2:	26 c0       	rjmp	.+76     	; 0x1b40 <follow_path+0x14c>
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
    1af4:	0e 32       	cpi	r16, 0x2E	; 46
    1af6:	09 f4       	brne	.+2      	; 0x1afa <follow_path+0x106>
    1af8:	d8 c0       	rjmp	.+432    	; 0x1caa <follow_path+0x2b6>
    1afa:	6c 15       	cp	r22, r12
    1afc:	7d 05       	cpc	r23, r13
    1afe:	08 f0       	brcs	.+2      	; 0x1b02 <follow_path+0x10e>
    1b00:	9a c0       	rjmp	.+308    	; 0x1c36 <follow_path+0x242>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
    1b02:	00 23       	and	r16, r16
    1b04:	0c f0       	brlt	.+2      	; 0x1b08 <follow_path+0x114>
    1b06:	b4 c0       	rjmp	.+360    	; 0x1c70 <follow_path+0x27c>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
    1b08:	0f 77       	andi	r16, 0x7F	; 127
    1b0a:	a0 2f       	mov	r26, r16
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	a6 5e       	subi	r26, 0xE6	; 230
    1b10:	be 4f       	sbci	r27, 0xFE	; 254
    1b12:	0c 91       	ld	r16, X
    1b14:	ad c0       	rjmp	.+346    	; 0x1c70 <follow_path+0x27c>


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
    1b16:	8d 91       	ld	r24, X+
    1b18:	88 23       	and	r24, r24
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <follow_path+0x12a>
    1b1c:	b1 c0       	rjmp	.+354    	; 0x1c80 <follow_path+0x28c>
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	48 17       	cp	r20, r24
    1b22:	59 07       	cpc	r21, r25
    1b24:	c1 f7       	brne	.-16     	; 0x1b16 <follow_path+0x122>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    1b26:	0f 2e       	mov	r0, r31
    1b28:	f6 e0       	ldi	r31, 0x06	; 6
    1b2a:	8f 2e       	mov	r8, r31
    1b2c:	f0 2d       	mov	r31, r0
    1b2e:	c6 c0       	rjmp	.+396    	; 0x1cbc <follow_path+0x2c8>
			if (IsLower(c)) c -= 0x20;	/* To upper */
    1b30:	00 52       	subi	r16, 0x20	; 32
			sfn[i++] = c;
    1b32:	d3 01       	movw	r26, r6
    1b34:	a6 0f       	add	r26, r22
    1b36:	b7 1f       	adc	r27, r23
    1b38:	0c 93       	st	X, r16
    1b3a:	6f 5f       	subi	r22, 0xFF	; 255
    1b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3e:	c5 cf       	rjmp	.-118    	; 0x1aca <follow_path+0xd6>
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
    1b40:	22 0e       	add	r2, r18
    1b42:	33 1e       	adc	r3, r19
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    1b44:	67 2b       	or	r22, r23
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <follow_path+0x156>
    1b48:	7b c0       	rjmp	.+246    	; 0x1c40 <follow_path+0x24c>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    1b4a:	a9 85       	ldd	r26, Y+9	; 0x09
    1b4c:	ba 85       	ldd	r27, Y+10	; 0x0a
    1b4e:	5c 96       	adiw	r26, 0x1c	; 28
    1b50:	8c 91       	ld	r24, X
    1b52:	5c 97       	sbiw	r26, 0x1c	; 28
    1b54:	85 3e       	cpi	r24, 0xE5	; 229
    1b56:	19 f4       	brne	.+6      	; 0x1b5e <follow_path+0x16a>
    1b58:	e5 e0       	ldi	r30, 0x05	; 5
    1b5a:	5c 96       	adiw	r26, 0x1c	; 28
    1b5c:	ec 93       	st	X, r30
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    1b5e:	01 32       	cpi	r16, 0x21	; 33
    1b60:	10 f0       	brcs	.+4      	; 0x1b66 <follow_path+0x172>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	01 c0       	rjmp	.+2      	; 0x1b68 <follow_path+0x174>
    1b66:	84 e0       	ldi	r24, 0x04	; 4
    1b68:	a9 85       	ldd	r26, Y+9	; 0x09
    1b6a:	ba 85       	ldd	r27, Y+10	; 0x0a
    1b6c:	97 96       	adiw	r26, 0x27	; 39
    1b6e:	8c 93       	st	X, r24
    1b70:	97 97       	sbiw	r26, 0x27	; 39
static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    1b72:	cd 90       	ld	r12, X+
    1b74:	dc 90       	ld	r13, X
    1b76:	11 97       	sbiw	r26, 0x01	; 1
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	ba 01       	movw	r22, r20
    1b7e:	cd 01       	movw	r24, r26
    1b80:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <dir_sdi>
    1b84:	88 2e       	mov	r8, r24
	if (res != FR_OK) return res;
    1b86:	81 11       	cpse	r24, r1
    1b88:	81 c0       	rjmp	.+258    	; 0x1c8c <follow_path+0x298>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
    1b8a:	a9 85       	ldd	r26, Y+9	; 0x09
    1b8c:	ba 85       	ldd	r27, Y+10	; 0x0a
    1b8e:	56 96       	adiw	r26, 0x16	; 22
    1b90:	4d 91       	ld	r20, X+
    1b92:	5d 91       	ld	r21, X+
    1b94:	6d 91       	ld	r22, X+
    1b96:	7c 91       	ld	r23, X
    1b98:	59 97       	sbiw	r26, 0x19	; 25
    1b9a:	c6 01       	movw	r24, r12
    1b9c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
    1ba0:	88 2e       	mov	r8, r24
		if (res != FR_OK) break;
    1ba2:	81 11       	cpse	r24, r1
    1ba4:	74 c0       	rjmp	.+232    	; 0x1c8e <follow_path+0x29a>
		c = dp->dir[DIR_Name];
    1ba6:	a9 85       	ldd	r26, Y+9	; 0x09
    1ba8:	ba 85       	ldd	r27, Y+10	; 0x0a
    1baa:	5a 96       	adiw	r26, 0x1a	; 26
    1bac:	ed 91       	ld	r30, X+
    1bae:	fc 91       	ld	r31, X
    1bb0:	5b 97       	sbiw	r26, 0x1b	; 27
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1bb2:	80 81       	ld	r24, Z
    1bb4:	88 23       	and	r24, r24
    1bb6:	d9 f0       	breq	.+54     	; 0x1bee <follow_path+0x1fa>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    1bb8:	03 85       	ldd	r16, Z+11	; 0x0b
    1bba:	80 2f       	mov	r24, r16
    1bbc:	8f 73       	andi	r24, 0x3F	; 63
    1bbe:	14 96       	adiw	r26, 0x04	; 4
    1bc0:	8c 93       	st	X, r24
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    1bc2:	83 85       	ldd	r24, Z+11	; 0x0b
    1bc4:	83 fd       	sbrc	r24, 3
    1bc6:	09 c0       	rjmp	.+18     	; 0x1bda <follow_path+0x1e6>
    1bc8:	4a 2d       	mov	r20, r10
    1bca:	59 2d       	mov	r21, r9
    1bcc:	b3 01       	movw	r22, r6
    1bce:	cf 01       	movw	r24, r30
    1bd0:	0e 94 df 00 	call	0x1be	; 0x1be <mem_cmp>
    1bd4:	89 2b       	or	r24, r25
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <follow_path+0x1e6>
    1bd8:	62 c0       	rjmp	.+196    	; 0x1c9e <follow_path+0x2aa>
#endif
		res = dir_next(dp, 0);	/* Next entry */
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	7b 2d       	mov	r23, r11
    1bde:	89 85       	ldd	r24, Y+9	; 0x09
    1be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <dir_next>
    1be6:	88 2e       	mov	r8, r24
	} while (res == FR_OK);
    1be8:	88 23       	and	r24, r24
    1bea:	79 f2       	breq	.-98     	; 0x1b8a <follow_path+0x196>
    1bec:	50 c0       	rjmp	.+160    	; 0x1c8e <follow_path+0x29a>
    1bee:	89 85       	ldd	r24, Y+9	; 0x09
    1bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf2:	dc 01       	movw	r26, r24
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    1bf4:	97 96       	adiw	r26, 0x27	; 39
    1bf6:	8c 91       	ld	r24, X
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    1bf8:	82 fd       	sbrc	r24, 2
    1bfa:	27 c0       	rjmp	.+78     	; 0x1c4a <follow_path+0x256>
    1bfc:	0f 2e       	mov	r0, r31
    1bfe:	f5 e0       	ldi	r31, 0x05	; 5
    1c00:	8f 2e       	mov	r8, r31
    1c02:	f0 2d       	mov	r31, r0
    1c04:	5b c0       	rjmp	.+182    	; 0x1cbc <follow_path+0x2c8>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
    1c06:	04 ff       	sbrs	r16, 4
    1c08:	24 c0       	rjmp	.+72     	; 0x1c52 <follow_path+0x25e>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    1c0a:	e9 85       	ldd	r30, Y+9	; 0x09
    1c0c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c0e:	66 85       	ldd	r22, Z+14	; 0x0e
    1c10:	77 85       	ldd	r23, Z+15	; 0x0f
    1c12:	71 70       	andi	r23, 0x01	; 1
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	9c 81       	ldd	r25, Y+4	; 0x04
    1c18:	68 0f       	add	r22, r24
    1c1a:	79 1f       	adc	r23, r25
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <ld_clust>
    1c24:	a9 85       	ldd	r26, Y+9	; 0x09
    1c26:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c28:	16 96       	adiw	r26, 0x06	; 6
    1c2a:	6d 93       	st	X+, r22
    1c2c:	7d 93       	st	X+, r23
    1c2e:	8d 93       	st	X+, r24
    1c30:	9c 93       	st	X, r25
    1c32:	19 97       	sbiw	r26, 0x09	; 9
			}
		}
    1c34:	3e cf       	rjmp	.-388    	; 0x1ab2 <follow_path+0xbe>
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
    1c36:	0f 2e       	mov	r0, r31
    1c38:	f6 e0       	ldi	r31, 0x06	; 6
    1c3a:	8f 2e       	mov	r8, r31
    1c3c:	f0 2d       	mov	r31, r0
    1c3e:	3e c0       	rjmp	.+124    	; 0x1cbc <follow_path+0x2c8>
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    1c40:	0f 2e       	mov	r0, r31
    1c42:	f6 e0       	ldi	r31, 0x06	; 6
    1c44:	8f 2e       	mov	r8, r31
    1c46:	f0 2d       	mov	r31, r0
    1c48:	39 c0       	rjmp	.+114    	; 0x1cbc <follow_path+0x2c8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
    1c4a:	68 94       	set
    1c4c:	88 24       	eor	r8, r8
    1c4e:	82 f8       	bld	r8, 2
    1c50:	35 c0       	rjmp	.+106    	; 0x1cbc <follow_path+0x2c8>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    1c52:	0f 2e       	mov	r0, r31
    1c54:	f5 e0       	ldi	r31, 0x05	; 5
    1c56:	8f 2e       	mov	r8, r31
    1c58:	f0 2d       	mov	r31, r0
    1c5a:	30 c0       	rjmp	.+96     	; 0x1cbc <follow_path+0x2c8>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    1c5c:	0f 2e       	mov	r0, r31
    1c5e:	f6 e0       	ldi	r31, 0x06	; 6
    1c60:	8f 2e       	mov	r8, r31
    1c62:	f0 2d       	mov	r31, r0
    1c64:	2b c0       	rjmp	.+86     	; 0x1cbc <follow_path+0x2c8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    1c66:	0f 2e       	mov	r0, r31
    1c68:	f6 e0       	ldi	r31, 0x06	; 6
    1c6a:	8f 2e       	mov	r8, r31
    1c6c:	f0 2d       	mov	r31, r0
    1c6e:	26 c0       	rjmp	.+76     	; 0x1cbc <follow_path+0x2c8>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    1c70:	40 2f       	mov	r20, r16
    1c72:	50 e0       	ldi	r21, 0x00	; 0


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
    1c74:	42 32       	cpi	r20, 0x22	; 34
    1c76:	51 05       	cpc	r21, r1
    1c78:	89 f3       	breq	.-30     	; 0x1c5c <follow_path+0x268>
    1c7a:	ac e0       	ldi	r26, 0x0C	; 12
    1c7c:	b1 e0       	ldi	r27, 0x01	; 1
    1c7e:	4b cf       	rjmp	.-362    	; 0x1b16 <follow_path+0x122>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
    1c80:	8f e9       	ldi	r24, 0x9F	; 159
    1c82:	80 0f       	add	r24, r16
    1c84:	8a 31       	cpi	r24, 0x1A	; 26
    1c86:	08 f4       	brcc	.+2      	; 0x1c8a <follow_path+0x296>
    1c88:	53 cf       	rjmp	.-346    	; 0x1b30 <follow_path+0x13c>
    1c8a:	53 cf       	rjmp	.-346    	; 0x1b32 <follow_path+0x13e>
    1c8c:	00 c0       	rjmp	.+0      	; 0x1c8e <follow_path+0x29a>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    1c8e:	a9 85       	ldd	r26, Y+9	; 0x09
    1c90:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c92:	97 96       	adiw	r26, 0x27	; 39
    1c94:	8c 91       	ld	r24, X
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    1c96:	b4 e0       	ldi	r27, 0x04	; 4
    1c98:	8b 12       	cpse	r8, r27
    1c9a:	10 c0       	rjmp	.+32     	; 0x1cbc <follow_path+0x2c8>
    1c9c:	ad cf       	rjmp	.-166    	; 0x1bf8 <follow_path+0x204>
    1c9e:	e9 85       	ldd	r30, Y+9	; 0x09
    1ca0:	fa 85       	ldd	r31, Y+10	; 0x0a
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    1ca2:	87 a1       	ldd	r24, Z+39	; 0x27
    1ca4:	82 ff       	sbrs	r24, 2
    1ca6:	af cf       	rjmp	.-162    	; 0x1c06 <follow_path+0x212>
    1ca8:	09 c0       	rjmp	.+18     	; 0x1cbc <follow_path+0x2c8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    1caa:	8b e0       	ldi	r24, 0x0B	; 11
    1cac:	c8 16       	cp	r12, r24
    1cae:	d1 04       	cpc	r13, r1
    1cb0:	d1 f2       	breq	.-76     	; 0x1c66 <follow_path+0x272>
			i = 8; ni = 11;				/* Enter file extension field */
    1cb2:	6d 81       	ldd	r22, Y+5	; 0x05
    1cb4:	7e 81       	ldd	r23, Y+6	; 0x06
    1cb6:	cf 80       	ldd	r12, Y+7	; 0x07
    1cb8:	d8 84       	ldd	r13, Y+8	; 0x08
    1cba:	07 cf       	rjmp	.-498    	; 0x1aca <follow_path+0xd6>
			}
		}
	}

	return res;
}
    1cbc:	88 2d       	mov	r24, r8
    1cbe:	2a 96       	adiw	r28, 0x0a	; 10
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	ff 90       	pop	r15
    1cd4:	ef 90       	pop	r14
    1cd6:	df 90       	pop	r13
    1cd8:	cf 90       	pop	r12
    1cda:	bf 90       	pop	r11
    1cdc:	af 90       	pop	r10
    1cde:	9f 90       	pop	r9
    1ce0:	8f 90       	pop	r8
    1ce2:	7f 90       	pop	r7
    1ce4:	6f 90       	pop	r6
    1ce6:	5f 90       	pop	r5
    1ce8:	4f 90       	pop	r4
    1cea:	3f 90       	pop	r3
    1cec:	2f 90       	pop	r2
    1cee:	08 95       	ret

00001cf0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <f_mount+0x8>
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <f_mount+0xa>
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <f_mount+0xc>
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
    1d04:	7e 83       	std	Y+6, r23	; 0x06
    1d06:	6d 83       	std	Y+5, r22	; 0x05
    1d08:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    1d0a:	7a 83       	std	Y+2, r23	; 0x02
    1d0c:	69 83       	std	Y+1, r22	; 0x01


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
    1d0e:	ce 01       	movw	r24, r28
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	0e 94 15 01 	call	0x22a	; 0x22a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    1d16:	99 23       	and	r25, r25
    1d18:	24 f1       	brlt	.+72     	; 0x1d62 <f_mount+0x72>
	cfs = FatFs[vol];					/* Pointer to fs object */
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	ee 0f       	add	r30, r30
    1d1e:	ff 1f       	adc	r31, r31
    1d20:	e2 53       	subi	r30, 0x32	; 50
    1d22:	fe 4f       	sbci	r31, 0xFE	; 254
    1d24:	01 90       	ld	r0, Z+
    1d26:	f0 81       	ld	r31, Z
    1d28:	e0 2d       	mov	r30, r0

	if (cfs) {
    1d2a:	30 97       	sbiw	r30, 0x00	; 0
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <f_mount+0x40>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    1d2e:	10 82       	st	Z, r1
	}

	if (fs) {
    1d30:	eb 81       	ldd	r30, Y+3	; 0x03
    1d32:	fc 81       	ldd	r31, Y+4	; 0x04
    1d34:	30 97       	sbiw	r30, 0x00	; 0
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
    1d38:	10 82       	st	Z, r1
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	fc 01       	movw	r30, r24
    1d40:	e2 53       	subi	r30, 0x32	; 50
    1d42:	fe 4f       	sbci	r31, 0xFE	; 254
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	9c 81       	ldd	r25, Y+4	; 0x04
    1d48:	91 83       	std	Z+1, r25	; 0x01
    1d4a:	80 83       	st	Z, r24

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    1d4c:	11 23       	and	r17, r17
    1d4e:	59 f0       	breq	.+22     	; 0x1d66 <f_mount+0x76>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	be 01       	movw	r22, r28
    1d54:	6d 5f       	subi	r22, 0xFD	; 253
    1d56:	7f 4f       	sbci	r23, 0xFF	; 255
    1d58:	ce 01       	movw	r24, r28
    1d5a:	05 96       	adiw	r24, 0x05	; 5
    1d5c:	0e 94 83 09 	call	0x1306	; 0x1306 <mount_volume>
	LEAVE_FF(fs, res);
    1d60:	03 c0       	rjmp	.+6      	; 0x1d68 <f_mount+0x78>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    1d62:	8b e0       	ldi	r24, 0x0B	; 11
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <f_mount+0x78>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    1d66:	80 e0       	ldi	r24, 0x00	; 0

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    1d68:	26 96       	adiw	r28, 0x06	; 6
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	1f 91       	pop	r17
    1d7a:	08 95       	ret

00001d7c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1d7c:	2f 92       	push	r2
    1d7e:	3f 92       	push	r3
    1d80:	4f 92       	push	r4
    1d82:	5f 92       	push	r5
    1d84:	6f 92       	push	r6
    1d86:	7f 92       	push	r7
    1d88:	8f 92       	push	r8
    1d8a:	9f 92       	push	r9
    1d8c:	af 92       	push	r10
    1d8e:	bf 92       	push	r11
    1d90:	cf 92       	push	r12
    1d92:	df 92       	push	r13
    1d94:	ef 92       	push	r14
    1d96:	ff 92       	push	r15
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	ac 97       	sbiw	r28, 0x2c	; 44
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	7c a7       	std	Y+44, r23	; 0x2c
    1db2:	6b a7       	std	Y+43, r22	; 0x2b
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	09 f4       	brne	.+2      	; 0x1dba <f_open+0x3e>
    1db8:	1d c1       	rjmp	.+570    	; 0x1ff4 <f_open+0x278>
    1dba:	14 2f       	mov	r17, r20
    1dbc:	1c 01       	movw	r2, r24

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
    1dbe:	84 2f       	mov	r24, r20
    1dc0:	8f 73       	andi	r24, 0x3F	; 63
    1dc2:	d8 2e       	mov	r13, r24
	res = mount_volume(&path, &fs, mode);
    1dc4:	48 2f       	mov	r20, r24
    1dc6:	be 01       	movw	r22, r28
    1dc8:	67 5d       	subi	r22, 0xD7	; 215
    1dca:	7f 4f       	sbci	r23, 0xFF	; 255
    1dcc:	ce 01       	movw	r24, r28
    1dce:	8b 96       	adiw	r24, 0x2b	; 43
    1dd0:	0e 94 83 09 	call	0x1306	; 0x1306 <mount_volume>
	if (res == FR_OK) {
    1dd4:	81 11       	cpse	r24, r1
    1dd6:	0a c1       	rjmp	.+532    	; 0x1fec <f_open+0x270>
		dj.obj.fs = fs;
    1dd8:	89 a5       	ldd	r24, Y+41	; 0x29
    1dda:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ddc:	9a 83       	std	Y+2, r25	; 0x02
    1dde:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    1de0:	6b a5       	ldd	r22, Y+43	; 0x2b
    1de2:	7c a5       	ldd	r23, Y+44	; 0x2c
    1de4:	ce 01       	movw	r24, r28
    1de6:	01 96       	adiw	r24, 0x01	; 1
    1de8:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
    1dec:	81 11       	cpse	r24, r1
    1dee:	04 c1       	rjmp	.+520    	; 0x1ff8 <f_open+0x27c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    1df0:	88 a5       	ldd	r24, Y+40	; 0x28
    1df2:	88 23       	and	r24, r24
    1df4:	0c f0       	brlt	.+2      	; 0x1df8 <f_open+0x7c>
    1df6:	09 c1       	rjmp	.+530    	; 0x200a <f_open+0x28e>
    1df8:	03 c1       	rjmp	.+518    	; 0x2000 <f_open+0x284>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
			if (res != FR_OK) {					/* No file, create new */
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
    1dfa:	84 30       	cpi	r24, 0x04	; 4
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <f_open+0x84>
    1dfe:	2c c1       	rjmp	.+600    	; 0x2058 <f_open+0x2dc>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    1e00:	ce 01       	movw	r24, r28
    1e02:	01 96       	adiw	r24, 0x01	; 1
    1e04:	0e 94 d7 08 	call	0x11ae	; 0x11ae <dir_register>
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1e08:	9d 2d       	mov	r25, r13
    1e0a:	98 60       	ori	r25, 0x08	; 8
    1e0c:	d9 2e       	mov	r13, r25
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    1e0e:	88 23       	and	r24, r24
    1e10:	39 f0       	breq	.+14     	; 0x1e20 <f_open+0xa4>
    1e12:	ec c0       	rjmp	.+472    	; 0x1fec <f_open+0x270>
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	81 71       	andi	r24, 0x11	; 17
    1e18:	09 f0       	breq	.+2      	; 0x1e1c <f_open+0xa0>
    1e1a:	45 c1       	rjmp	.+650    	; 0x20a6 <f_open+0x32a>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    1e1c:	12 fd       	sbrc	r17, 2
    1e1e:	45 c1       	rjmp	.+650    	; 0x20aa <f_open+0x32e>
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    1e20:	d3 fe       	sbrs	r13, 3
    1e22:	58 c0       	rjmp	.+176    	; 0x1ed4 <f_open+0x158>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
    1e24:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1e26:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1e28:	a9 a4       	ldd	r10, Y+41	; 0x29
    1e2a:	ba a4       	ldd	r11, Y+42	; 0x2a
    1e2c:	b8 01       	movw	r22, r16
    1e2e:	c5 01       	movw	r24, r10
    1e30:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <ld_clust>
    1e34:	2b 01       	movw	r4, r22
    1e36:	3c 01       	movw	r6, r24
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1e38:	f8 01       	movw	r30, r16
    1e3a:	16 86       	std	Z+14, r1	; 0x0e
	*ptr++ = (BYTE)val; val >>= 8;
    1e3c:	17 86       	std	Z+15, r1	; 0x0f
	*ptr++ = (BYTE)val; val >>= 8;
    1e3e:	81 e2       	ldi	r24, 0x21	; 33
    1e40:	80 8b       	std	Z+16, r24	; 0x10
	*ptr++ = (BYTE)val;
    1e42:	8e e4       	ldi	r24, 0x4E	; 78
    1e44:	81 8b       	std	Z+17, r24	; 0x11
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    1e46:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1e48:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1e4a:	80 e2       	ldi	r24, 0x20	; 32
    1e4c:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    1e4e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1e50:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	a9 01       	movw	r20, r18
    1e58:	c5 01       	movw	r24, r10
    1e5a:	0e 94 06 04 	call	0x80c	; 0x80c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
    1e5e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1e60:	fc 8d       	ldd	r31, Y+28	; 0x1c
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1e62:	14 8e       	std	Z+28, r1	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    1e64:	15 8e       	std	Z+29, r1	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    1e66:	16 8e       	std	Z+30, r1	; 0x1e
	*ptr++ = (BYTE)val;
    1e68:	17 8e       	std	Z+31, r1	; 0x1f
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
					fs->wflag = 1;
    1e6a:	e9 a5       	ldd	r30, Y+41	; 0x29
    1e6c:	fa a5       	ldd	r31, Y+42	; 0x2a
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	83 83       	std	Z+3, r24	; 0x03
					if (cl != 0) {						/* Remove the cluster chain if exist */
    1e72:	41 14       	cp	r4, r1
    1e74:	51 04       	cpc	r5, r1
    1e76:	61 04       	cpc	r6, r1
    1e78:	71 04       	cpc	r7, r1
    1e7a:	49 f1       	breq	.+82     	; 0x1ece <f_open+0x152>
						sc = fs->winsect;
    1e7c:	83 a4       	ldd	r8, Z+43	; 0x2b
    1e7e:	94 a4       	ldd	r9, Z+44	; 0x2c
    1e80:	a5 a4       	ldd	r10, Z+45	; 0x2d
    1e82:	b6 a4       	ldd	r11, Z+46	; 0x2e
						res = remove_chain(&dj.obj, cl, 0);
    1e84:	00 e0       	ldi	r16, 0x00	; 0
    1e86:	10 e0       	ldi	r17, 0x00	; 0
    1e88:	98 01       	movw	r18, r16
    1e8a:	b3 01       	movw	r22, r6
    1e8c:	a2 01       	movw	r20, r4
    1e8e:	ce 01       	movw	r24, r28
    1e90:	01 96       	adiw	r24, 0x01	; 1
    1e92:	0e 94 43 07 	call	0xe86	; 0xe86 <remove_chain>
						if (res == FR_OK) {
    1e96:	81 11       	cpse	r24, r1
    1e98:	a9 c0       	rjmp	.+338    	; 0x1fec <f_open+0x270>
							res = move_window(fs, sc);
    1e9a:	b5 01       	movw	r22, r10
    1e9c:	a4 01       	movw	r20, r8
    1e9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1ea0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ea2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    1ea6:	e9 a5       	ldd	r30, Y+41	; 0x29
    1ea8:	fa a5       	ldd	r31, Y+42	; 0x2a
    1eaa:	91 e0       	ldi	r25, 0x01	; 1
    1eac:	49 1a       	sub	r4, r25
    1eae:	51 08       	sbc	r5, r1
    1eb0:	61 08       	sbc	r6, r1
    1eb2:	71 08       	sbc	r7, r1
    1eb4:	43 86       	std	Z+11, r4	; 0x0b
    1eb6:	54 86       	std	Z+12, r5	; 0x0c
    1eb8:	65 86       	std	Z+13, r6	; 0x0d
    1eba:	76 86       	std	Z+14, r7	; 0x0e
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
    1ebc:	88 23       	and	r24, r24
    1ebe:	39 f0       	breq	.+14     	; 0x1ece <f_open+0x152>
    1ec0:	95 c0       	rjmp	.+298    	; 0x1fec <f_open+0x270>
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
    1ec2:	11 ff       	sbrs	r17, 1
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <f_open+0x14e>
    1ec6:	80 fd       	sbrc	r24, 0
    1ec8:	f2 c0       	rjmp	.+484    	; 0x20ae <f_open+0x332>
					}
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    1eca:	13 ff       	sbrs	r17, 3
    1ecc:	03 c0       	rjmp	.+6      	; 0x1ed4 <f_open+0x158>
    1ece:	ed 2d       	mov	r30, r13
    1ed0:	e0 64       	ori	r30, 0x40	; 64
    1ed2:	de 2e       	mov	r13, r30
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    1ed4:	e9 a5       	ldd	r30, Y+41	; 0x29
    1ed6:	fa a5       	ldd	r31, Y+42	; 0x2a
    1ed8:	83 a5       	ldd	r24, Z+43	; 0x2b
    1eda:	94 a5       	ldd	r25, Z+44	; 0x2c
    1edc:	a5 a5       	ldd	r26, Z+45	; 0x2d
    1ede:	b6 a5       	ldd	r27, Z+46	; 0x2e
    1ee0:	f1 01       	movw	r30, r2
    1ee2:	84 8f       	std	Z+28, r24	; 0x1c
    1ee4:	95 8f       	std	Z+29, r25	; 0x1d
    1ee6:	a6 8f       	std	Z+30, r26	; 0x1e
    1ee8:	b7 8f       	std	Z+31, r27	; 0x1f
			fp->dir_ptr = dj.dir;
    1eea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eee:	91 a3       	std	Z+33, r25	; 0x21
    1ef0:	80 a3       	std	Z+32, r24	; 0x20
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
    1ef2:	ab 8c       	ldd	r10, Y+27	; 0x1b
    1ef4:	bc 8c       	ldd	r11, Y+28	; 0x1c
    1ef6:	09 a5       	ldd	r16, Y+41	; 0x29
    1ef8:	1a a5       	ldd	r17, Y+42	; 0x2a
    1efa:	b5 01       	movw	r22, r10
    1efc:	c8 01       	movw	r24, r16
    1efe:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <ld_clust>
    1f02:	2b 01       	movw	r4, r22
    1f04:	3c 01       	movw	r6, r24
    1f06:	f1 01       	movw	r30, r2
    1f08:	66 83       	std	Z+6, r22	; 0x06
    1f0a:	77 83       	std	Z+7, r23	; 0x07
    1f0c:	80 87       	std	Z+8, r24	; 0x08
    1f0e:	91 87       	std	Z+9, r25	; 0x09
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    1f10:	c5 01       	movw	r24, r10
    1f12:	4c 96       	adiw	r24, 0x1c	; 28
    1f14:	0e 94 b6 00 	call	0x16c	; 0x16c <ld_dword>
    1f18:	4b 01       	movw	r8, r22
    1f1a:	5c 01       	movw	r10, r24
    1f1c:	f1 01       	movw	r30, r2
    1f1e:	62 87       	std	Z+10, r22	; 0x0a
    1f20:	73 87       	std	Z+11, r23	; 0x0b
    1f22:	84 87       	std	Z+12, r24	; 0x0c
    1f24:	95 87       	std	Z+13, r25	; 0x0d
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
    1f26:	11 83       	std	Z+1, r17	; 0x01
    1f28:	00 83       	st	Z, r16
			fp->obj.id = fs->id;
    1f2a:	f8 01       	movw	r30, r16
    1f2c:	85 81       	ldd	r24, Z+5	; 0x05
    1f2e:	96 81       	ldd	r25, Z+6	; 0x06
    1f30:	f1 01       	movw	r30, r2
    1f32:	93 83       	std	Z+3, r25	; 0x03
    1f34:	82 83       	std	Z+2, r24	; 0x02
			fp->flag = mode;		/* Set file access mode */
    1f36:	d6 86       	std	Z+14, r13	; 0x0e
			fp->err = 0;			/* Clear error flag */
    1f38:	17 86       	std	Z+15, r1	; 0x0f
			fp->sect = 0;			/* Invalidate current data sector */
    1f3a:	10 8e       	std	Z+24, r1	; 0x18
    1f3c:	11 8e       	std	Z+25, r1	; 0x19
    1f3e:	12 8e       	std	Z+26, r1	; 0x1a
    1f40:	13 8e       	std	Z+27, r1	; 0x1b
			fp->fptr = 0;			/* Set file pointer top of the file */
    1f42:	10 8a       	std	Z+16, r1	; 0x10
    1f44:	11 8a       	std	Z+17, r1	; 0x11
    1f46:	12 8a       	std	Z+18, r1	; 0x12
    1f48:	13 8a       	std	Z+19, r1	; 0x13
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    1f4a:	d5 fe       	sbrs	r13, 5
    1f4c:	82 c0       	rjmp	.+260    	; 0x2052 <f_open+0x2d6>
    1f4e:	81 14       	cp	r8, r1
    1f50:	91 04       	cpc	r9, r1
    1f52:	a1 04       	cpc	r10, r1
    1f54:	b1 04       	cpc	r11, r1
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <f_open+0x1de>
    1f58:	7c c0       	rjmp	.+248    	; 0x2052 <f_open+0x2d6>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    1f5a:	80 8a       	std	Z+16, r8	; 0x10
    1f5c:	91 8a       	std	Z+17, r9	; 0x11
    1f5e:	a2 8a       	std	Z+18, r10	; 0x12
    1f60:	b3 8a       	std	Z+19, r11	; 0x13
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    1f62:	f8 01       	movw	r30, r16
    1f64:	81 85       	ldd	r24, Z+9	; 0x09
    1f66:	92 85       	ldd	r25, Z+10	; 0x0a
    1f68:	a0 e0       	ldi	r26, 0x00	; 0
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	6c 01       	movw	r12, r24
    1f6e:	7d 01       	movw	r14, r26
    1f70:	0b 2e       	mov	r0, r27
    1f72:	b9 e0       	ldi	r27, 0x09	; 9
    1f74:	cc 0c       	add	r12, r12
    1f76:	dd 1c       	adc	r13, r13
    1f78:	ee 1c       	adc	r14, r14
    1f7a:	ff 1c       	adc	r15, r15
    1f7c:	ba 95       	dec	r27
    1f7e:	d1 f7       	brne	.-12     	; 0x1f74 <f_open+0x1f8>
    1f80:	b0 2d       	mov	r27, r0
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    1f82:	c8 14       	cp	r12, r8
    1f84:	d9 04       	cpc	r13, r9
    1f86:	ea 04       	cpc	r14, r10
    1f88:	fb 04       	cpc	r15, r11
    1f8a:	08 f0       	brcs	.+2      	; 0x1f8e <f_open+0x212>
    1f8c:	50 c0       	rjmp	.+160    	; 0x202e <f_open+0x2b2>
					clst = get_fat(&fp->obj, clst);
    1f8e:	b3 01       	movw	r22, r6
    1f90:	a2 01       	movw	r20, r4
    1f92:	c1 01       	movw	r24, r2
    1f94:	0e 94 13 04 	call	0x826	; 0x826 <get_fat>
    1f98:	2b 01       	movw	r4, r22
    1f9a:	3c 01       	movw	r6, r24
					if (clst <= 1) res = FR_INT_ERR;
    1f9c:	62 30       	cpi	r22, 0x02	; 2
    1f9e:	71 05       	cpc	r23, r1
    1fa0:	81 05       	cpc	r24, r1
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	08 f0       	brcs	.+2      	; 0x1fa8 <f_open+0x22c>
    1fa6:	78 c0       	rjmp	.+240    	; 0x2098 <f_open+0x31c>
    1fa8:	66 c0       	rjmp	.+204    	; 0x2076 <f_open+0x2fa>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					sc = clst2sect(fs, clst);
    1faa:	b3 01       	movw	r22, r6
    1fac:	a2 01       	movw	r20, r4
    1fae:	89 a5       	ldd	r24, Y+41	; 0x29
    1fb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fb2:	0e 94 ed 00 	call	0x1da	; 0x1da <clst2sect>
					if (sc == 0) {
    1fb6:	61 15       	cp	r22, r1
    1fb8:	71 05       	cpc	r23, r1
    1fba:	81 05       	cpc	r24, r1
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <f_open+0x246>
    1fc0:	46 c0       	rjmp	.+140    	; 0x204e <f_open+0x2d2>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    1fc2:	07 2e       	mov	r0, r23
    1fc4:	79 e0       	ldi	r23, 0x09	; 9
    1fc6:	b6 94       	lsr	r11
    1fc8:	a7 94       	ror	r10
    1fca:	97 94       	ror	r9
    1fcc:	87 94       	ror	r8
    1fce:	7a 95       	dec	r23
    1fd0:	d1 f7       	brne	.-12     	; 0x1fc6 <f_open+0x24a>
    1fd2:	70 2d       	mov	r23, r0
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	88 0d       	add	r24, r8
    1fda:	99 1d       	adc	r25, r9
    1fdc:	aa 1d       	adc	r26, r10
    1fde:	bb 1d       	adc	r27, r11
    1fe0:	f1 01       	movw	r30, r2
    1fe2:	80 8f       	std	Z+24, r24	; 0x18
    1fe4:	91 8f       	std	Z+25, r25	; 0x19
    1fe6:	a2 8f       	std	Z+26, r26	; 0x1a
    1fe8:	b3 8f       	std	Z+27, r27	; 0x1b
    1fea:	33 c0       	rjmp	.+102    	; 0x2052 <f_open+0x2d6>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    1fec:	f1 01       	movw	r30, r2
    1fee:	11 82       	std	Z+1, r1	; 0x01
    1ff0:	10 82       	st	Z, r1
    1ff2:	61 c0       	rjmp	.+194    	; 0x20b6 <f_open+0x33a>
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    1ff4:	89 e0       	ldi	r24, 0x09	; 9
    1ff6:	5f c0       	rjmp	.+190    	; 0x20b6 <f_open+0x33a>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1ff8:	41 2f       	mov	r20, r17
    1ffa:	4c 71       	andi	r20, 0x1C	; 28
    1ffc:	59 f0       	breq	.+22     	; 0x2014 <f_open+0x298>
    1ffe:	fd ce       	rjmp	.-518    	; 0x1dfa <f_open+0x7e>
    2000:	41 2f       	mov	r20, r17
    2002:	4c 71       	andi	r20, 0x1C	; 28
    2004:	41 f5       	brne	.+80     	; 0x2056 <f_open+0x2da>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
				res = FR_INVALID_NAME;
    2006:	86 e0       	ldi	r24, 0x06	; 6
    2008:	05 c0       	rjmp	.+10     	; 0x2014 <f_open+0x298>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    200a:	81 2f       	mov	r24, r17
    200c:	8c 71       	andi	r24, 0x1C	; 28
    200e:	09 f0       	breq	.+2      	; 0x2012 <f_open+0x296>
    2010:	01 cf       	rjmp	.-510    	; 0x1e14 <f_open+0x98>
    2012:	26 c0       	rjmp	.+76     	; 0x2060 <f_open+0x2e4>
				}
			}
		}
#endif

		if (res == FR_OK) {
    2014:	81 11       	cpse	r24, r1
    2016:	ea cf       	rjmp	.-44     	; 0x1fec <f_open+0x270>
    2018:	6c cf       	rjmp	.-296    	; 0x1ef2 <f_open+0x176>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
    201a:	8f ef       	ldi	r24, 0xFF	; 255
    201c:	9f ef       	ldi	r25, 0xFF	; 255
    201e:	dc 01       	movw	r26, r24
    2020:	f1 01       	movw	r30, r2
    2022:	84 8b       	std	Z+20, r24	; 0x14
    2024:	95 8b       	std	Z+21, r25	; 0x15
    2026:	a6 8b       	std	Z+22, r26	; 0x16
    2028:	b7 8b       	std	Z+23, r27	; 0x17
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	df cf       	rjmp	.-66     	; 0x1fec <f_open+0x270>
				}
				fp->clust = clst;
    202e:	f1 01       	movw	r30, r2
    2030:	44 8a       	std	Z+20, r4	; 0x14
    2032:	55 8a       	std	Z+21, r5	; 0x15
    2034:	66 8a       	std	Z+22, r6	; 0x16
    2036:	77 8a       	std	Z+23, r7	; 0x17
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    2038:	d5 01       	movw	r26, r10
    203a:	c4 01       	movw	r24, r8
    203c:	91 70       	andi	r25, 0x01	; 1
    203e:	aa 27       	eor	r26, r26
    2040:	bb 27       	eor	r27, r27
    2042:	89 2b       	or	r24, r25
    2044:	8a 2b       	or	r24, r26
    2046:	8b 2b       	or	r24, r27
    2048:	09 f0       	breq	.+2      	; 0x204c <f_open+0x2d0>
    204a:	af cf       	rjmp	.-162    	; 0x1faa <f_open+0x22e>
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <f_open+0x2d6>
					sc = clst2sect(fs, clst);
					if (sc == 0) {
						res = FR_INT_ERR;
    204e:	82 e0       	ldi	r24, 0x02	; 2
    2050:	cd cf       	rjmp	.-102    	; 0x1fec <f_open+0x270>
		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	30 c0       	rjmp	.+96     	; 0x20b6 <f_open+0x33a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
				res = FR_INVALID_NAME;
    2056:	86 e0       	ldi	r24, 0x06	; 6
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    2058:	fd 2d       	mov	r31, r13
    205a:	f8 60       	ori	r31, 0x08	; 8
    205c:	df 2e       	mov	r13, r31
    205e:	da cf       	rjmp	.-76     	; 0x2014 <f_open+0x298>
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	84 fd       	sbrc	r24, 4
    2064:	26 c0       	rjmp	.+76     	; 0x20b2 <f_open+0x336>
    2066:	2d cf       	rjmp	.-422    	; 0x1ec2 <f_open+0x146>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
    2068:	f1 01       	movw	r30, r2
    206a:	44 8a       	std	Z+20, r4	; 0x14
    206c:	55 8a       	std	Z+21, r5	; 0x15
    206e:	66 8a       	std	Z+22, r6	; 0x16
    2070:	77 8a       	std	Z+23, r7	; 0x17
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
    2072:	82 e0       	ldi	r24, 0x02	; 2
    2074:	bb cf       	rjmp	.-138    	; 0x1fec <f_open+0x270>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    2076:	6f 3f       	cpi	r22, 0xFF	; 255
    2078:	7f 4f       	sbci	r23, 0xFF	; 255
    207a:	8f 4f       	sbci	r24, 0xFF	; 255
    207c:	9f 4f       	sbci	r25, 0xFF	; 255
    207e:	69 f2       	breq	.-102    	; 0x201a <f_open+0x29e>
    2080:	f3 cf       	rjmp	.-26     	; 0x2068 <f_open+0x2ec>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    2082:	8c 18       	sub	r8, r12
    2084:	9d 08       	sbc	r9, r13
    2086:	ae 08       	sbc	r10, r14
    2088:	bf 08       	sbc	r11, r15
    208a:	c8 14       	cp	r12, r8
    208c:	d9 04       	cpc	r13, r9
    208e:	ea 04       	cpc	r14, r10
    2090:	fb 04       	cpc	r15, r11
    2092:	08 f4       	brcc	.+2      	; 0x2096 <f_open+0x31a>
    2094:	7c cf       	rjmp	.-264    	; 0x1f8e <f_open+0x212>
    2096:	cb cf       	rjmp	.-106    	; 0x202e <f_open+0x2b2>
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    2098:	8f ef       	ldi	r24, 0xFF	; 255
    209a:	48 16       	cp	r4, r24
    209c:	58 06       	cpc	r5, r24
    209e:	68 06       	cpc	r6, r24
    20a0:	78 06       	cpc	r7, r24
    20a2:	79 f7       	brne	.-34     	; 0x2082 <f_open+0x306>
    20a4:	ba cf       	rjmp	.-140    	; 0x201a <f_open+0x29e>
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    20a6:	87 e0       	ldi	r24, 0x07	; 7
    20a8:	a1 cf       	rjmp	.-190    	; 0x1fec <f_open+0x270>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    20aa:	88 e0       	ldi	r24, 0x08	; 8
    20ac:	9f cf       	rjmp	.-194    	; 0x1fec <f_open+0x270>
			if (res == FR_OK) {					/* Is the object exsiting? */
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
						res = FR_DENIED;
    20ae:	87 e0       	ldi	r24, 0x07	; 7
    20b0:	9d cf       	rjmp	.-198    	; 0x1fec <f_open+0x270>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
					res = FR_NO_FILE;
    20b2:	84 e0       	ldi	r24, 0x04	; 4
    20b4:	9b cf       	rjmp	.-202    	; 0x1fec <f_open+0x270>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
}
    20b6:	ac 96       	adiw	r28, 0x2c	; 44
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	1f 91       	pop	r17
    20c8:	0f 91       	pop	r16
    20ca:	ff 90       	pop	r15
    20cc:	ef 90       	pop	r14
    20ce:	df 90       	pop	r13
    20d0:	cf 90       	pop	r12
    20d2:	bf 90       	pop	r11
    20d4:	af 90       	pop	r10
    20d6:	9f 90       	pop	r9
    20d8:	8f 90       	pop	r8
    20da:	7f 90       	pop	r7
    20dc:	6f 90       	pop	r6
    20de:	5f 90       	pop	r5
    20e0:	4f 90       	pop	r4
    20e2:	3f 90       	pop	r3
    20e4:	2f 90       	pop	r2
    20e6:	08 95       	ret

000020e8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
    20e8:	2f 92       	push	r2
    20ea:	3f 92       	push	r3
    20ec:	4f 92       	push	r4
    20ee:	5f 92       	push	r5
    20f0:	6f 92       	push	r6
    20f2:	7f 92       	push	r7
    20f4:	8f 92       	push	r8
    20f6:	9f 92       	push	r9
    20f8:	af 92       	push	r10
    20fa:	bf 92       	push	r11
    20fc:	cf 92       	push	r12
    20fe:	df 92       	push	r13
    2100:	ef 92       	push	r14
    2102:	ff 92       	push	r15
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	cf 93       	push	r28
    210a:	df 93       	push	r29
    210c:	00 d0       	rcall	.+0      	; 0x210e <f_read+0x26>
    210e:	00 d0       	rcall	.+0      	; 0x2110 <f_read+0x28>
    2110:	00 d0       	rcall	.+0      	; 0x2112 <f_read+0x2a>
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	7c 01       	movw	r14, r24
    2118:	3b 01       	movw	r6, r22
    211a:	5a 01       	movw	r10, r20
    211c:	49 01       	movw	r8, r18
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    211e:	f9 01       	movw	r30, r18
    2120:	11 82       	std	Z+1, r1	; 0x01
    2122:	10 82       	st	Z, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
    2124:	8d 83       	std	Y+5, r24	; 0x05
    2126:	fe 82       	std	Y+6, r15	; 0x06
    2128:	be 01       	movw	r22, r28
    212a:	6f 5f       	subi	r22, 0xFF	; 255
    212c:	7f 4f       	sbci	r23, 0xFF	; 255
    212e:	0e 94 4b 01 	call	0x296	; 0x296 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    2132:	81 11       	cpse	r24, r1
    2134:	23 c1       	rjmp	.+582    	; 0x237c <f_read+0x294>
    2136:	f7 01       	movw	r30, r14
    2138:	87 85       	ldd	r24, Z+15	; 0x0f
    213a:	81 11       	cpse	r24, r1
    213c:	1f c1       	rjmp	.+574    	; 0x237c <f_read+0x294>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    213e:	86 85       	ldd	r24, Z+14	; 0x0e
    2140:	80 ff       	sbrs	r24, 0
    2142:	19 c1       	rjmp	.+562    	; 0x2376 <f_read+0x28e>
	remain = fp->obj.objsize - fp->fptr;
    2144:	82 85       	ldd	r24, Z+10	; 0x0a
    2146:	93 85       	ldd	r25, Z+11	; 0x0b
    2148:	a4 85       	ldd	r26, Z+12	; 0x0c
    214a:	b5 85       	ldd	r27, Z+13	; 0x0d
    214c:	40 89       	ldd	r20, Z+16	; 0x10
    214e:	51 89       	ldd	r21, Z+17	; 0x11
    2150:	62 89       	ldd	r22, Z+18	; 0x12
    2152:	73 89       	ldd	r23, Z+19	; 0x13
    2154:	84 1b       	sub	r24, r20
    2156:	95 0b       	sbc	r25, r21
    2158:	a6 0b       	sbc	r26, r22
    215a:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    215c:	a5 01       	movw	r20, r10
    215e:	60 e0       	ldi	r22, 0x00	; 0
    2160:	70 e0       	ldi	r23, 0x00	; 0
    2162:	84 17       	cp	r24, r20
    2164:	95 07       	cpc	r25, r21
    2166:	a6 07       	cpc	r26, r22
    2168:	b7 07       	cpc	r27, r23
    216a:	08 f4       	brcc	.+2      	; 0x216e <f_read+0x86>
    216c:	5c 01       	movw	r10, r24

	for ( ;  btr;								/* Repeat until btr bytes read */
    216e:	a1 14       	cp	r10, r1
    2170:	b1 04       	cpc	r11, r1
    2172:	09 f4       	brne	.+2      	; 0x2176 <f_read+0x8e>
    2174:	02 c1       	rjmp	.+516    	; 0x237a <f_read+0x292>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
    2176:	f7 01       	movw	r30, r14
    2178:	80 89       	ldd	r24, Z+16	; 0x10
    217a:	91 89       	ldd	r25, Z+17	; 0x11
    217c:	a2 89       	ldd	r26, Z+18	; 0x12
    217e:	b3 89       	ldd	r27, Z+19	; 0x13
    2180:	ac 01       	movw	r20, r24
    2182:	bd 01       	movw	r22, r26
    2184:	51 70       	andi	r21, 0x01	; 1
    2186:	66 27       	eor	r22, r22
    2188:	77 27       	eor	r23, r23
    218a:	45 2b       	or	r20, r21
    218c:	46 2b       	or	r20, r22
    218e:	47 2b       	or	r20, r23
    2190:	09 f0       	breq	.+2      	; 0x2194 <f_read+0xac>
    2192:	a9 c0       	rjmp	.+338    	; 0x22e6 <f_read+0x1fe>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
    2194:	e9 81       	ldd	r30, Y+1	; 0x01
    2196:	fa 81       	ldd	r31, Y+2	; 0x02
    2198:	01 85       	ldd	r16, Z+9	; 0x09
    219a:	12 85       	ldd	r17, Z+10	; 0x0a
    219c:	01 50       	subi	r16, 0x01	; 1
    219e:	11 09       	sbc	r17, r1
    21a0:	ac 01       	movw	r20, r24
    21a2:	bd 01       	movw	r22, r26
    21a4:	03 2e       	mov	r0, r19
    21a6:	39 e0       	ldi	r19, 0x09	; 9
    21a8:	76 95       	lsr	r23
    21aa:	67 95       	ror	r22
    21ac:	57 95       	ror	r21
    21ae:	47 95       	ror	r20
    21b0:	3a 95       	dec	r19
    21b2:	d1 f7       	brne	.-12     	; 0x21a8 <f_read+0xc0>
    21b4:	30 2d       	mov	r19, r0
    21b6:	04 23       	and	r16, r20
    21b8:	15 23       	and	r17, r21
			if (csect == 0) {					/* On the cluster boundary? */
    21ba:	01 15       	cp	r16, r1
    21bc:	11 05       	cpc	r17, r1
    21be:	59 f5       	brne	.+86     	; 0x2216 <f_read+0x12e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    21c0:	89 2b       	or	r24, r25
    21c2:	8a 2b       	or	r24, r26
    21c4:	8b 2b       	or	r24, r27
    21c6:	31 f4       	brne	.+12     	; 0x21d4 <f_read+0xec>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    21c8:	f7 01       	movw	r30, r14
    21ca:	66 81       	ldd	r22, Z+6	; 0x06
    21cc:	77 81       	ldd	r23, Z+7	; 0x07
    21ce:	80 85       	ldd	r24, Z+8	; 0x08
    21d0:	91 85       	ldd	r25, Z+9	; 0x09
    21d2:	09 c0       	rjmp	.+18     	; 0x21e6 <f_read+0xfe>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
    21d4:	f7 01       	movw	r30, r14
    21d6:	44 89       	ldd	r20, Z+20	; 0x14
    21d8:	55 89       	ldd	r21, Z+21	; 0x15
    21da:	66 89       	ldd	r22, Z+22	; 0x16
    21dc:	77 89       	ldd	r23, Z+23	; 0x17
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	9e 81       	ldd	r25, Y+6	; 0x06
    21e2:	0e 94 13 04 	call	0x826	; 0x826 <get_fat>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    21e6:	62 30       	cpi	r22, 0x02	; 2
    21e8:	71 05       	cpc	r23, r1
    21ea:	81 05       	cpc	r24, r1
    21ec:	91 05       	cpc	r25, r1
    21ee:	20 f4       	brcc	.+8      	; 0x21f8 <f_read+0x110>
    21f0:	82 e0       	ldi	r24, 0x02	; 2
    21f2:	f7 01       	movw	r30, r14
    21f4:	87 87       	std	Z+15, r24	; 0x0f
    21f6:	c2 c0       	rjmp	.+388    	; 0x237c <f_read+0x294>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    21f8:	6f 3f       	cpi	r22, 0xFF	; 255
    21fa:	ff ef       	ldi	r31, 0xFF	; 255
    21fc:	7f 07       	cpc	r23, r31
    21fe:	8f 07       	cpc	r24, r31
    2200:	9f 07       	cpc	r25, r31
    2202:	21 f4       	brne	.+8      	; 0x220c <f_read+0x124>
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	f7 01       	movw	r30, r14
    2208:	87 87       	std	Z+15, r24	; 0x0f
    220a:	b8 c0       	rjmp	.+368    	; 0x237c <f_read+0x294>
				fp->clust = clst;				/* Update current cluster */
    220c:	f7 01       	movw	r30, r14
    220e:	64 8b       	std	Z+20, r22	; 0x14
    2210:	75 8b       	std	Z+21, r23	; 0x15
    2212:	86 8b       	std	Z+22, r24	; 0x16
    2214:	97 8b       	std	Z+23, r25	; 0x17
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	9a 81       	ldd	r25, Y+2	; 0x02
    221a:	9c 83       	std	Y+4, r25	; 0x04
    221c:	8b 83       	std	Y+3, r24	; 0x03
    221e:	f7 01       	movw	r30, r14
    2220:	44 89       	ldd	r20, Z+20	; 0x14
    2222:	55 89       	ldd	r21, Z+21	; 0x15
    2224:	66 89       	ldd	r22, Z+22	; 0x16
    2226:	77 89       	ldd	r23, Z+23	; 0x17
    2228:	0e 94 ed 00 	call	0x1da	; 0x1da <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    222c:	61 15       	cp	r22, r1
    222e:	71 05       	cpc	r23, r1
    2230:	81 05       	cpc	r24, r1
    2232:	91 05       	cpc	r25, r1
    2234:	21 f4       	brne	.+8      	; 0x223e <f_read+0x156>
    2236:	82 e0       	ldi	r24, 0x02	; 2
    2238:	f7 01       	movw	r30, r14
    223a:	87 87       	std	Z+15, r24	; 0x0f
    223c:	9f c0       	rjmp	.+318    	; 0x237c <f_read+0x294>
			sect += csect;
    223e:	1b 01       	movw	r2, r22
    2240:	2c 01       	movw	r4, r24
    2242:	20 0e       	add	r2, r16
    2244:	31 1e       	adc	r3, r17
    2246:	41 1c       	adc	r4, r1
    2248:	51 1c       	adc	r5, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
    224a:	65 01       	movw	r12, r10
    224c:	cd 2c       	mov	r12, r13
    224e:	dd 24       	eor	r13, r13
    2250:	c6 94       	lsr	r12
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
    2252:	c1 14       	cp	r12, r1
    2254:	d1 04       	cpc	r13, r1
    2256:	09 f4       	brne	.+2      	; 0x225a <f_read+0x172>
    2258:	41 c0       	rjmp	.+130    	; 0x22dc <f_read+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    225a:	eb 81       	ldd	r30, Y+3	; 0x03
    225c:	fc 81       	ldd	r31, Y+4	; 0x04
    225e:	81 85       	ldd	r24, Z+9	; 0x09
    2260:	92 85       	ldd	r25, Z+10	; 0x0a
    2262:	98 01       	movw	r18, r16
    2264:	2c 0d       	add	r18, r12
    2266:	3d 1d       	adc	r19, r13
    2268:	82 17       	cp	r24, r18
    226a:	93 07       	cpc	r25, r19
    226c:	18 f4       	brcc	.+6      	; 0x2274 <f_read+0x18c>
					cc = fs->csize - csect;
    226e:	6c 01       	movw	r12, r24
    2270:	c0 1a       	sub	r12, r16
    2272:	d1 0a       	sbc	r13, r17
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    2274:	86 01       	movw	r16, r12
    2276:	a2 01       	movw	r20, r4
    2278:	91 01       	movw	r18, r2
    227a:	b3 01       	movw	r22, r6
    227c:	eb 81       	ldd	r30, Y+3	; 0x03
    227e:	fc 81       	ldd	r31, Y+4	; 0x04
    2280:	81 81       	ldd	r24, Z+1	; 0x01
    2282:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <disk_read>
    2286:	88 23       	and	r24, r24
    2288:	21 f0       	breq	.+8      	; 0x2292 <f_read+0x1aa>
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	f7 01       	movw	r30, r14
    228e:	87 87       	std	Z+15, r24	; 0x0f
    2290:	75 c0       	rjmp	.+234    	; 0x237c <f_read+0x294>
#if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
    2292:	e9 81       	ldd	r30, Y+1	; 0x01
    2294:	fa 81       	ldd	r31, Y+2	; 0x02
    2296:	83 81       	ldd	r24, Z+3	; 0x03
    2298:	88 23       	and	r24, r24
    229a:	e1 f0       	breq	.+56     	; 0x22d4 <f_read+0x1ec>
    229c:	83 a5       	ldd	r24, Z+43	; 0x2b
    229e:	94 a5       	ldd	r25, Z+44	; 0x2c
    22a0:	a5 a5       	ldd	r26, Z+45	; 0x2d
    22a2:	b6 a5       	ldd	r27, Z+46	; 0x2e
    22a4:	82 19       	sub	r24, r2
    22a6:	93 09       	sbc	r25, r3
    22a8:	a4 09       	sbc	r26, r4
    22aa:	b5 09       	sbc	r27, r5
    22ac:	a6 01       	movw	r20, r12
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	84 17       	cp	r24, r20
    22b4:	95 07       	cpc	r25, r21
    22b6:	a6 07       	cpc	r26, r22
    22b8:	b7 07       	cpc	r27, r23
    22ba:	60 f4       	brcc	.+24     	; 0x22d4 <f_read+0x1ec>
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
    22bc:	bf 01       	movw	r22, r30
    22be:	61 5d       	subi	r22, 0xD1	; 209
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255
    22c2:	98 2f       	mov	r25, r24
    22c4:	88 27       	eor	r24, r24
    22c6:	99 0f       	add	r25, r25
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	52 e0       	ldi	r21, 0x02	; 2
    22cc:	86 0d       	add	r24, r6
    22ce:	97 1d       	adc	r25, r7
    22d0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mem_cpy>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
    22d4:	dc 2c       	mov	r13, r12
    22d6:	cc 24       	eor	r12, r12
    22d8:	dd 0c       	add	r13, r13
				continue;
    22da:	2f c0       	rjmp	.+94     	; 0x233a <f_read+0x252>
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
			}
#endif
			fp->sect = sect;
    22dc:	f7 01       	movw	r30, r14
    22de:	20 8e       	std	Z+24, r2	; 0x18
    22e0:	31 8e       	std	Z+25, r3	; 0x19
    22e2:	42 8e       	std	Z+26, r4	; 0x1a
    22e4:	53 8e       	std	Z+27, r5	; 0x1b
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    22e6:	f7 01       	movw	r30, r14
    22e8:	80 89       	ldd	r24, Z+16	; 0x10
    22ea:	91 89       	ldd	r25, Z+17	; 0x11
    22ec:	91 70       	andi	r25, 0x01	; 1
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	32 e0       	ldi	r19, 0x02	; 2
    22f2:	69 01       	movw	r12, r18
    22f4:	c8 1a       	sub	r12, r24
    22f6:	d9 0a       	sbc	r13, r25
    22f8:	ac 14       	cp	r10, r12
    22fa:	bd 04       	cpc	r11, r13
    22fc:	08 f4       	brcc	.+2      	; 0x2300 <f_read+0x218>
    22fe:	65 01       	movw	r12, r10
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    2300:	f7 01       	movw	r30, r14
    2302:	40 8d       	ldd	r20, Z+24	; 0x18
    2304:	51 8d       	ldd	r21, Z+25	; 0x19
    2306:	62 8d       	ldd	r22, Z+26	; 0x1a
    2308:	73 8d       	ldd	r23, Z+27	; 0x1b
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	9a 81       	ldd	r25, Y+2	; 0x02
    230e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
    2312:	88 23       	and	r24, r24
    2314:	21 f0       	breq	.+8      	; 0x231e <f_read+0x236>
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	f7 01       	movw	r30, r14
    231a:	87 87       	std	Z+15, r24	; 0x0f
    231c:	2f c0       	rjmp	.+94     	; 0x237c <f_read+0x294>
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
    231e:	69 81       	ldd	r22, Y+1	; 0x01
    2320:	7a 81       	ldd	r23, Y+2	; 0x02
    2322:	61 5d       	subi	r22, 0xD1	; 209
    2324:	7f 4f       	sbci	r23, 0xFF	; 255
    2326:	f7 01       	movw	r30, r14
    2328:	80 89       	ldd	r24, Z+16	; 0x10
    232a:	91 89       	ldd	r25, Z+17	; 0x11
    232c:	91 70       	andi	r25, 0x01	; 1
    232e:	68 0f       	add	r22, r24
    2330:	79 1f       	adc	r23, r25
    2332:	a6 01       	movw	r20, r12
    2334:	c3 01       	movw	r24, r6
    2336:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mem_cpy>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until btr bytes read */
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
    233a:	ac 18       	sub	r10, r12
    233c:	bd 08       	sbc	r11, r13
    233e:	f4 01       	movw	r30, r8
    2340:	80 81       	ld	r24, Z
    2342:	91 81       	ldd	r25, Z+1	; 0x01
    2344:	8c 0d       	add	r24, r12
    2346:	9d 1d       	adc	r25, r13
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	80 83       	st	Z, r24
    234c:	6c 0c       	add	r6, r12
    234e:	7d 1c       	adc	r7, r13
    2350:	f7 01       	movw	r30, r14
    2352:	80 89       	ldd	r24, Z+16	; 0x10
    2354:	91 89       	ldd	r25, Z+17	; 0x11
    2356:	a2 89       	ldd	r26, Z+18	; 0x12
    2358:	b3 89       	ldd	r27, Z+19	; 0x13
    235a:	8c 0d       	add	r24, r12
    235c:	9d 1d       	adc	r25, r13
    235e:	a1 1d       	adc	r26, r1
    2360:	b1 1d       	adc	r27, r1
    2362:	80 8b       	std	Z+16, r24	; 0x10
    2364:	91 8b       	std	Z+17, r25	; 0x11
    2366:	a2 8b       	std	Z+18, r26	; 0x12
    2368:	b3 8b       	std	Z+19, r27	; 0x13
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until btr bytes read */
    236a:	a1 14       	cp	r10, r1
    236c:	b1 04       	cpc	r11, r1
    236e:	09 f0       	breq	.+2      	; 0x2372 <f_read+0x28a>
    2370:	02 cf       	rjmp	.-508    	; 0x2176 <f_read+0x8e>
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	03 c0       	rjmp	.+6      	; 0x237c <f_read+0x294>


	*br = 0;	/* Clear read byte counter */
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    2376:	87 e0       	ldi	r24, 0x07	; 7
    2378:	01 c0       	rjmp	.+2      	; 0x237c <f_read+0x294>
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
    237a:	80 e0       	ldi	r24, 0x00	; 0
}
    237c:	26 96       	adiw	r28, 0x06	; 6
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	1f 91       	pop	r17
    238e:	0f 91       	pop	r16
    2390:	ff 90       	pop	r15
    2392:	ef 90       	pop	r14
    2394:	df 90       	pop	r13
    2396:	cf 90       	pop	r12
    2398:	bf 90       	pop	r11
    239a:	af 90       	pop	r10
    239c:	9f 90       	pop	r9
    239e:	8f 90       	pop	r8
    23a0:	7f 90       	pop	r7
    23a2:	6f 90       	pop	r6
    23a4:	5f 90       	pop	r5
    23a6:	4f 90       	pop	r4
    23a8:	3f 90       	pop	r3
    23aa:	2f 90       	pop	r2
    23ac:	08 95       	ret

000023ae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    23ae:	2f 92       	push	r2
    23b0:	3f 92       	push	r3
    23b2:	4f 92       	push	r4
    23b4:	5f 92       	push	r5
    23b6:	6f 92       	push	r6
    23b8:	7f 92       	push	r7
    23ba:	8f 92       	push	r8
    23bc:	9f 92       	push	r9
    23be:	af 92       	push	r10
    23c0:	bf 92       	push	r11
    23c2:	cf 92       	push	r12
    23c4:	df 92       	push	r13
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <f_write+0x26>
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <f_write+0x28>
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <f_write+0x2a>
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	7c 01       	movw	r14, r24
    23de:	3b 01       	movw	r6, r22
    23e0:	5a 01       	movw	r10, r20
    23e2:	49 01       	movw	r8, r18
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    23e4:	f9 01       	movw	r30, r18
    23e6:	11 82       	std	Z+1, r1	; 0x01
    23e8:	10 82       	st	Z, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
    23ea:	8d 83       	std	Y+5, r24	; 0x05
    23ec:	fe 82       	std	Y+6, r15	; 0x06
    23ee:	be 01       	movw	r22, r28
    23f0:	6f 5f       	subi	r22, 0xFF	; 255
    23f2:	7f 4f       	sbci	r23, 0xFF	; 255
    23f4:	0e 94 4b 01 	call	0x296	; 0x296 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    23f8:	81 11       	cpse	r24, r1
    23fa:	8d c1       	rjmp	.+794    	; 0x2716 <f_write+0x368>
    23fc:	f7 01       	movw	r30, r14
    23fe:	87 85       	ldd	r24, Z+15	; 0x0f
    2400:	81 11       	cpse	r24, r1
    2402:	89 c1       	rjmp	.+786    	; 0x2716 <f_write+0x368>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    2404:	86 85       	ldd	r24, Z+14	; 0x0e
    2406:	81 ff       	sbrs	r24, 1
    2408:	85 c1       	rjmp	.+778    	; 0x2714 <f_write+0x366>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    240a:	80 89       	ldd	r24, Z+16	; 0x10
    240c:	91 89       	ldd	r25, Z+17	; 0x11
    240e:	a2 89       	ldd	r26, Z+18	; 0x12
    2410:	b3 89       	ldd	r27, Z+19	; 0x13
    2412:	ac 01       	movw	r20, r24
    2414:	bd 01       	movw	r22, r26
    2416:	4a 0d       	add	r20, r10
    2418:	5b 1d       	adc	r21, r11
    241a:	61 1d       	adc	r22, r1
    241c:	71 1d       	adc	r23, r1
    241e:	48 17       	cp	r20, r24
    2420:	59 07       	cpc	r21, r25
    2422:	6a 07       	cpc	r22, r26
    2424:	7b 07       	cpc	r23, r27
    2426:	18 f4       	brcc	.+6      	; 0x242e <f_write+0x80>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    2428:	5c 01       	movw	r10, r24
    242a:	a0 94       	com	r10
    242c:	b0 94       	com	r11
	}

	for ( ;  btw;							/* Repeat until all data written */
    242e:	a1 14       	cp	r10, r1
    2430:	b1 04       	cpc	r11, r1
    2432:	09 f4       	brne	.+2      	; 0x2436 <f_write+0x88>
    2434:	69 c1       	rjmp	.+722    	; 0x2708 <f_write+0x35a>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    2436:	f7 01       	movw	r30, r14
    2438:	80 89       	ldd	r24, Z+16	; 0x10
    243a:	91 89       	ldd	r25, Z+17	; 0x11
    243c:	a2 89       	ldd	r26, Z+18	; 0x12
    243e:	b3 89       	ldd	r27, Z+19	; 0x13
    2440:	ac 01       	movw	r20, r24
    2442:	bd 01       	movw	r22, r26
    2444:	51 70       	andi	r21, 0x01	; 1
    2446:	66 27       	eor	r22, r22
    2448:	77 27       	eor	r23, r23
    244a:	45 2b       	or	r20, r21
    244c:	46 2b       	or	r20, r22
    244e:	47 2b       	or	r20, r23
    2450:	09 f0       	breq	.+2      	; 0x2454 <f_write+0xa6>
    2452:	00 c1       	rjmp	.+512    	; 0x2654 <f_write+0x2a6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    2454:	e9 81       	ldd	r30, Y+1	; 0x01
    2456:	fa 81       	ldd	r31, Y+2	; 0x02
    2458:	01 85       	ldd	r16, Z+9	; 0x09
    245a:	12 85       	ldd	r17, Z+10	; 0x0a
    245c:	01 50       	subi	r16, 0x01	; 1
    245e:	11 09       	sbc	r17, r1
    2460:	ac 01       	movw	r20, r24
    2462:	bd 01       	movw	r22, r26
    2464:	03 2e       	mov	r0, r19
    2466:	39 e0       	ldi	r19, 0x09	; 9
    2468:	76 95       	lsr	r23
    246a:	67 95       	ror	r22
    246c:	57 95       	ror	r21
    246e:	47 95       	ror	r20
    2470:	3a 95       	dec	r19
    2472:	d1 f7       	brne	.-12     	; 0x2468 <f_write+0xba>
    2474:	30 2d       	mov	r19, r0
    2476:	04 23       	and	r16, r20
    2478:	15 23       	and	r17, r21
			if (csect == 0) {				/* On the cluster boundary? */
    247a:	01 15       	cp	r16, r1
    247c:	11 05       	cpc	r17, r1
    247e:	09 f0       	breq	.+2      	; 0x2482 <f_write+0xd4>
    2480:	49 c0       	rjmp	.+146    	; 0x2514 <f_write+0x166>
				if (fp->fptr == 0) {		/* On the top of the file? */
    2482:	89 2b       	or	r24, r25
    2484:	8a 2b       	or	r24, r26
    2486:	8b 2b       	or	r24, r27
    2488:	91 f4       	brne	.+36     	; 0x24ae <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
    248a:	f7 01       	movw	r30, r14
    248c:	66 81       	ldd	r22, Z+6	; 0x06
    248e:	77 81       	ldd	r23, Z+7	; 0x07
    2490:	80 85       	ldd	r24, Z+8	; 0x08
    2492:	91 85       	ldd	r25, Z+9	; 0x09
					if (clst == 0) {		/* If no cluster is allocated, */
    2494:	61 15       	cp	r22, r1
    2496:	71 05       	cpc	r23, r1
    2498:	81 05       	cpc	r24, r1
    249a:	91 05       	cpc	r25, r1
    249c:	b9 f4       	brne	.+46     	; 0x24cc <f_write+0x11e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	ba 01       	movw	r22, r20
    24a4:	8d 81       	ldd	r24, Y+5	; 0x05
    24a6:	9e 81       	ldd	r25, Y+6	; 0x06
    24a8:	0e 94 dd 05 	call	0xbba	; 0xbba <create_chain>
    24ac:	09 c0       	rjmp	.+18     	; 0x24c0 <f_write+0x112>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    24ae:	f7 01       	movw	r30, r14
    24b0:	44 89       	ldd	r20, Z+20	; 0x14
    24b2:	55 89       	ldd	r21, Z+21	; 0x15
    24b4:	66 89       	ldd	r22, Z+22	; 0x16
    24b6:	77 89       	ldd	r23, Z+23	; 0x17
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	0e 94 dd 05 	call	0xbba	; 0xbba <create_chain>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    24c0:	61 15       	cp	r22, r1
    24c2:	71 05       	cpc	r23, r1
    24c4:	81 05       	cpc	r24, r1
    24c6:	91 05       	cpc	r25, r1
    24c8:	09 f4       	brne	.+2      	; 0x24cc <f_write+0x11e>
    24ca:	1e c1       	rjmp	.+572    	; 0x2708 <f_write+0x35a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    24cc:	61 30       	cpi	r22, 0x01	; 1
    24ce:	71 05       	cpc	r23, r1
    24d0:	81 05       	cpc	r24, r1
    24d2:	91 05       	cpc	r25, r1
    24d4:	21 f4       	brne	.+8      	; 0x24de <f_write+0x130>
    24d6:	82 e0       	ldi	r24, 0x02	; 2
    24d8:	f7 01       	movw	r30, r14
    24da:	87 87       	std	Z+15, r24	; 0x0f
    24dc:	1c c1       	rjmp	.+568    	; 0x2716 <f_write+0x368>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    24de:	6f 3f       	cpi	r22, 0xFF	; 255
    24e0:	ff ef       	ldi	r31, 0xFF	; 255
    24e2:	7f 07       	cpc	r23, r31
    24e4:	8f 07       	cpc	r24, r31
    24e6:	9f 07       	cpc	r25, r31
    24e8:	21 f4       	brne	.+8      	; 0x24f2 <f_write+0x144>
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	f7 01       	movw	r30, r14
    24ee:	87 87       	std	Z+15, r24	; 0x0f
    24f0:	12 c1       	rjmp	.+548    	; 0x2716 <f_write+0x368>
				fp->clust = clst;			/* Update current cluster */
    24f2:	f7 01       	movw	r30, r14
    24f4:	64 8b       	std	Z+20, r22	; 0x14
    24f6:	75 8b       	std	Z+21, r23	; 0x15
    24f8:	86 8b       	std	Z+22, r24	; 0x16
    24fa:	97 8b       	std	Z+23, r25	; 0x17
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    24fc:	26 81       	ldd	r18, Z+6	; 0x06
    24fe:	37 81       	ldd	r19, Z+7	; 0x07
    2500:	40 85       	ldd	r20, Z+8	; 0x08
    2502:	51 85       	ldd	r21, Z+9	; 0x09
    2504:	23 2b       	or	r18, r19
    2506:	24 2b       	or	r18, r20
    2508:	25 2b       	or	r18, r21
    250a:	21 f4       	brne	.+8      	; 0x2514 <f_write+0x166>
    250c:	66 83       	std	Z+6, r22	; 0x06
    250e:	77 83       	std	Z+7, r23	; 0x07
    2510:	80 87       	std	Z+8, r24	; 0x08
    2512:	91 87       	std	Z+9, r25	; 0x09
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
    2514:	29 81       	ldd	r18, Y+1	; 0x01
    2516:	3a 81       	ldd	r19, Y+2	; 0x02
    2518:	f9 01       	movw	r30, r18
    251a:	43 a5       	ldd	r20, Z+43	; 0x2b
    251c:	54 a5       	ldd	r21, Z+44	; 0x2c
    251e:	65 a5       	ldd	r22, Z+45	; 0x2d
    2520:	76 a5       	ldd	r23, Z+46	; 0x2e
    2522:	f7 01       	movw	r30, r14
    2524:	80 8d       	ldd	r24, Z+24	; 0x18
    2526:	91 8d       	ldd	r25, Z+25	; 0x19
    2528:	a2 8d       	ldd	r26, Z+26	; 0x1a
    252a:	b3 8d       	ldd	r27, Z+27	; 0x1b
    252c:	48 17       	cp	r20, r24
    252e:	59 07       	cpc	r21, r25
    2530:	6a 07       	cpc	r22, r26
    2532:	7b 07       	cpc	r23, r27
    2534:	49 f4       	brne	.+18     	; 0x2548 <f_write+0x19a>
    2536:	c9 01       	movw	r24, r18
    2538:	0e 94 78 01 	call	0x2f0	; 0x2f0 <sync_window>
    253c:	88 23       	and	r24, r24
    253e:	21 f0       	breq	.+8      	; 0x2548 <f_write+0x19a>
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	f7 01       	movw	r30, r14
    2544:	87 87       	std	Z+15, r24	; 0x0f
    2546:	e7 c0       	rjmp	.+462    	; 0x2716 <f_write+0x368>
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	9a 81       	ldd	r25, Y+2	; 0x02
    254c:	9c 83       	std	Y+4, r25	; 0x04
    254e:	8b 83       	std	Y+3, r24	; 0x03
    2550:	f7 01       	movw	r30, r14
    2552:	44 89       	ldd	r20, Z+20	; 0x14
    2554:	55 89       	ldd	r21, Z+21	; 0x15
    2556:	66 89       	ldd	r22, Z+22	; 0x16
    2558:	77 89       	ldd	r23, Z+23	; 0x17
    255a:	0e 94 ed 00 	call	0x1da	; 0x1da <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    255e:	61 15       	cp	r22, r1
    2560:	71 05       	cpc	r23, r1
    2562:	81 05       	cpc	r24, r1
    2564:	91 05       	cpc	r25, r1
    2566:	21 f4       	brne	.+8      	; 0x2570 <f_write+0x1c2>
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	f7 01       	movw	r30, r14
    256c:	87 87       	std	Z+15, r24	; 0x0f
    256e:	d3 c0       	rjmp	.+422    	; 0x2716 <f_write+0x368>
			sect += csect;
    2570:	1b 01       	movw	r2, r22
    2572:	2c 01       	movw	r4, r24
    2574:	20 0e       	add	r2, r16
    2576:	31 1e       	adc	r3, r17
    2578:	41 1c       	adc	r4, r1
    257a:	51 1c       	adc	r5, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    257c:	65 01       	movw	r12, r10
    257e:	cd 2c       	mov	r12, r13
    2580:	dd 24       	eor	r13, r13
    2582:	c6 94       	lsr	r12
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
    2584:	c1 14       	cp	r12, r1
    2586:	d1 04       	cpc	r13, r1
    2588:	09 f4       	brne	.+2      	; 0x258c <f_write+0x1de>
    258a:	41 c0       	rjmp	.+130    	; 0x260e <f_write+0x260>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    258c:	eb 81       	ldd	r30, Y+3	; 0x03
    258e:	fc 81       	ldd	r31, Y+4	; 0x04
    2590:	81 85       	ldd	r24, Z+9	; 0x09
    2592:	92 85       	ldd	r25, Z+10	; 0x0a
    2594:	98 01       	movw	r18, r16
    2596:	2c 0d       	add	r18, r12
    2598:	3d 1d       	adc	r19, r13
    259a:	82 17       	cp	r24, r18
    259c:	93 07       	cpc	r25, r19
    259e:	18 f4       	brcc	.+6      	; 0x25a6 <f_write+0x1f8>
					cc = fs->csize - csect;
    25a0:	6c 01       	movw	r12, r24
    25a2:	c0 1a       	sub	r12, r16
    25a4:	d1 0a       	sbc	r13, r17
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    25a6:	86 01       	movw	r16, r12
    25a8:	a2 01       	movw	r20, r4
    25aa:	91 01       	movw	r18, r2
    25ac:	b3 01       	movw	r22, r6
    25ae:	eb 81       	ldd	r30, Y+3	; 0x03
    25b0:	fc 81       	ldd	r31, Y+4	; 0x04
    25b2:	81 81       	ldd	r24, Z+1	; 0x01
    25b4:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <disk_write>
    25b8:	88 23       	and	r24, r24
    25ba:	21 f0       	breq	.+8      	; 0x25c4 <f_write+0x216>
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	f7 01       	movw	r30, r14
    25c0:	87 87       	std	Z+15, r24	; 0x0f
    25c2:	a9 c0       	rjmp	.+338    	; 0x2716 <f_write+0x368>
#if FF_FS_MINIMIZE <= 2
#if FF_FS_TINY
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    25c4:	e9 81       	ldd	r30, Y+1	; 0x01
    25c6:	fa 81       	ldd	r31, Y+2	; 0x02
    25c8:	43 a5       	ldd	r20, Z+43	; 0x2b
    25ca:	54 a5       	ldd	r21, Z+44	; 0x2c
    25cc:	65 a5       	ldd	r22, Z+45	; 0x2d
    25ce:	76 a5       	ldd	r23, Z+46	; 0x2e
    25d0:	42 19       	sub	r20, r2
    25d2:	53 09       	sbc	r21, r3
    25d4:	64 09       	sbc	r22, r4
    25d6:	75 09       	sbc	r23, r5
    25d8:	c6 01       	movw	r24, r12
    25da:	a0 e0       	ldi	r26, 0x00	; 0
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	48 17       	cp	r20, r24
    25e0:	59 07       	cpc	r21, r25
    25e2:	6a 07       	cpc	r22, r26
    25e4:	7b 07       	cpc	r23, r27
    25e6:	78 f4       	brcc	.+30     	; 0x2606 <f_write+0x258>
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
    25e8:	54 2f       	mov	r21, r20
    25ea:	44 27       	eor	r20, r20
    25ec:	55 0f       	add	r21, r21
    25ee:	b3 01       	movw	r22, r6
    25f0:	64 0f       	add	r22, r20
    25f2:	75 1f       	adc	r23, r21
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	52 e0       	ldi	r21, 0x02	; 2
    25f8:	cf 01       	movw	r24, r30
    25fa:	8f 96       	adiw	r24, 0x2f	; 47
    25fc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mem_cpy>
					fs->wflag = 0;
    2600:	e9 81       	ldd	r30, Y+1	; 0x01
    2602:	fa 81       	ldd	r31, Y+2	; 0x02
    2604:	13 82       	std	Z+3, r1	; 0x03
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    2606:	dc 2c       	mov	r13, r12
    2608:	cc 24       	eor	r12, r12
    260a:	dd 0c       	add	r13, r13
				continue;
    260c:	51 c0       	rjmp	.+162    	; 0x26b0 <f_write+0x302>
			}
#if FF_FS_TINY
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
    260e:	f7 01       	movw	r30, r14
    2610:	40 89       	ldd	r20, Z+16	; 0x10
    2612:	51 89       	ldd	r21, Z+17	; 0x11
    2614:	62 89       	ldd	r22, Z+18	; 0x12
    2616:	73 89       	ldd	r23, Z+19	; 0x13
    2618:	82 85       	ldd	r24, Z+10	; 0x0a
    261a:	93 85       	ldd	r25, Z+11	; 0x0b
    261c:	a4 85       	ldd	r26, Z+12	; 0x0c
    261e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2620:	48 17       	cp	r20, r24
    2622:	59 07       	cpc	r21, r25
    2624:	6a 07       	cpc	r22, r26
    2626:	7b 07       	cpc	r23, r27
    2628:	80 f0       	brcs	.+32     	; 0x264a <f_write+0x29c>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <sync_window>
    2632:	88 23       	and	r24, r24
    2634:	21 f0       	breq	.+8      	; 0x263e <f_write+0x290>
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	f7 01       	movw	r30, r14
    263a:	87 87       	std	Z+15, r24	; 0x0f
    263c:	6c c0       	rjmp	.+216    	; 0x2716 <f_write+0x368>
				fs->winsect = sect;
    263e:	e9 81       	ldd	r30, Y+1	; 0x01
    2640:	fa 81       	ldd	r31, Y+2	; 0x02
    2642:	23 a6       	std	Z+43, r2	; 0x2b
    2644:	34 a6       	std	Z+44, r3	; 0x2c
    2646:	45 a6       	std	Z+45, r4	; 0x2d
    2648:	56 a6       	std	Z+46, r5	; 0x2e
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
    264a:	f7 01       	movw	r30, r14
    264c:	20 8e       	std	Z+24, r2	; 0x18
    264e:	31 8e       	std	Z+25, r3	; 0x19
    2650:	42 8e       	std	Z+26, r4	; 0x1a
    2652:	53 8e       	std	Z+27, r5	; 0x1b
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    2654:	f7 01       	movw	r30, r14
    2656:	80 89       	ldd	r24, Z+16	; 0x10
    2658:	91 89       	ldd	r25, Z+17	; 0x11
    265a:	91 70       	andi	r25, 0x01	; 1
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	32 e0       	ldi	r19, 0x02	; 2
    2660:	69 01       	movw	r12, r18
    2662:	c8 1a       	sub	r12, r24
    2664:	d9 0a       	sbc	r13, r25
    2666:	ac 14       	cp	r10, r12
    2668:	bd 04       	cpc	r11, r13
    266a:	08 f4       	brcc	.+2      	; 0x266e <f_write+0x2c0>
    266c:	65 01       	movw	r12, r10
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    266e:	f7 01       	movw	r30, r14
    2670:	40 8d       	ldd	r20, Z+24	; 0x18
    2672:	51 8d       	ldd	r21, Z+25	; 0x19
    2674:	62 8d       	ldd	r22, Z+26	; 0x1a
    2676:	73 8d       	ldd	r23, Z+27	; 0x1b
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	9a 81       	ldd	r25, Y+2	; 0x02
    267c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
    2680:	88 23       	and	r24, r24
    2682:	21 f0       	breq	.+8      	; 0x268c <f_write+0x2de>
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	f7 01       	movw	r30, r14
    2688:	87 87       	std	Z+15, r24	; 0x0f
    268a:	45 c0       	rjmp	.+138    	; 0x2716 <f_write+0x368>
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    268c:	29 81       	ldd	r18, Y+1	; 0x01
    268e:	3a 81       	ldd	r19, Y+2	; 0x02
    2690:	21 5d       	subi	r18, 0xD1	; 209
    2692:	3f 4f       	sbci	r19, 0xFF	; 255
    2694:	f7 01       	movw	r30, r14
    2696:	80 89       	ldd	r24, Z+16	; 0x10
    2698:	91 89       	ldd	r25, Z+17	; 0x11
    269a:	91 70       	andi	r25, 0x01	; 1
    269c:	a6 01       	movw	r20, r12
    269e:	b3 01       	movw	r22, r6
    26a0:	82 0f       	add	r24, r18
    26a2:	93 1f       	adc	r25, r19
    26a4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mem_cpy>
		fs->wflag = 1;
    26a8:	e9 81       	ldd	r30, Y+1	; 0x01
    26aa:	fa 81       	ldd	r31, Y+2	; 0x02
    26ac:	21 e0       	ldi	r18, 0x01	; 1
    26ae:	23 83       	std	Z+3, r18	; 0x03
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
    26b0:	ac 18       	sub	r10, r12
    26b2:	bd 08       	sbc	r11, r13
    26b4:	f4 01       	movw	r30, r8
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	8c 0d       	add	r24, r12
    26bc:	9d 1d       	adc	r25, r13
    26be:	91 83       	std	Z+1, r25	; 0x01
    26c0:	80 83       	st	Z, r24
    26c2:	6c 0c       	add	r6, r12
    26c4:	7d 1c       	adc	r7, r13
    26c6:	f7 01       	movw	r30, r14
    26c8:	80 89       	ldd	r24, Z+16	; 0x10
    26ca:	91 89       	ldd	r25, Z+17	; 0x11
    26cc:	a2 89       	ldd	r26, Z+18	; 0x12
    26ce:	b3 89       	ldd	r27, Z+19	; 0x13
    26d0:	8c 0d       	add	r24, r12
    26d2:	9d 1d       	adc	r25, r13
    26d4:	a1 1d       	adc	r26, r1
    26d6:	b1 1d       	adc	r27, r1
    26d8:	80 8b       	std	Z+16, r24	; 0x10
    26da:	91 8b       	std	Z+17, r25	; 0x11
    26dc:	a2 8b       	std	Z+18, r26	; 0x12
    26de:	b3 8b       	std	Z+19, r27	; 0x13
    26e0:	42 85       	ldd	r20, Z+10	; 0x0a
    26e2:	53 85       	ldd	r21, Z+11	; 0x0b
    26e4:	64 85       	ldd	r22, Z+12	; 0x0c
    26e6:	75 85       	ldd	r23, Z+13	; 0x0d
    26e8:	48 17       	cp	r20, r24
    26ea:	59 07       	cpc	r21, r25
    26ec:	6a 07       	cpc	r22, r26
    26ee:	7b 07       	cpc	r23, r27
    26f0:	10 f4       	brcc	.+4      	; 0x26f6 <f_write+0x348>
    26f2:	ac 01       	movw	r20, r24
    26f4:	bd 01       	movw	r22, r26
    26f6:	f7 01       	movw	r30, r14
    26f8:	42 87       	std	Z+10, r20	; 0x0a
    26fa:	53 87       	std	Z+11, r21	; 0x0b
    26fc:	64 87       	std	Z+12, r22	; 0x0c
    26fe:	75 87       	std	Z+13, r23	; 0x0d
	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
    2700:	a1 14       	cp	r10, r1
    2702:	b1 04       	cpc	r11, r1
    2704:	09 f0       	breq	.+2      	; 0x2708 <f_write+0x35a>
    2706:	97 ce       	rjmp	.-722    	; 0x2436 <f_write+0x88>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
    2708:	f7 01       	movw	r30, r14
    270a:	86 85       	ldd	r24, Z+14	; 0x0e
    270c:	80 64       	ori	r24, 0x40	; 64
    270e:	86 87       	std	Z+14, r24	; 0x0e

	LEAVE_FF(fs, FR_OK);
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	01 c0       	rjmp	.+2      	; 0x2716 <f_write+0x368>


	*bw = 0;	/* Clear write byte counter */
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    2714:	87 e0       	ldi	r24, 0x07	; 7
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
    2716:	26 96       	adiw	r28, 0x06	; 6
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	1f 91       	pop	r17
    2728:	0f 91       	pop	r16
    272a:	ff 90       	pop	r15
    272c:	ef 90       	pop	r14
    272e:	df 90       	pop	r13
    2730:	cf 90       	pop	r12
    2732:	bf 90       	pop	r11
    2734:	af 90       	pop	r10
    2736:	9f 90       	pop	r9
    2738:	8f 90       	pop	r8
    273a:	7f 90       	pop	r7
    273c:	6f 90       	pop	r6
    273e:	5f 90       	pop	r5
    2740:	4f 90       	pop	r4
    2742:	3f 90       	pop	r3
    2744:	2f 90       	pop	r2
    2746:	08 95       	ret

00002748 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    2748:	ef 92       	push	r14
    274a:	ff 92       	push	r15
    274c:	0f 93       	push	r16
    274e:	1f 93       	push	r17
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	00 d0       	rcall	.+0      	; 0x2756 <f_sync+0xe>
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	8c 01       	movw	r16, r24
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    275c:	be 01       	movw	r22, r28
    275e:	6f 5f       	subi	r22, 0xFF	; 255
    2760:	7f 4f       	sbci	r23, 0xFF	; 255
    2762:	0e 94 4b 01 	call	0x296	; 0x296 <validate>
	if (res == FR_OK) {
    2766:	81 11       	cpse	r24, r1
    2768:	3c c0       	rjmp	.+120    	; 0x27e2 <f_sync+0x9a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    276a:	f8 01       	movw	r30, r16
    276c:	96 85       	ldd	r25, Z+14	; 0x0e
    276e:	96 ff       	sbrs	r25, 6
    2770:	38 c0       	rjmp	.+112    	; 0x27e2 <f_sync+0x9a>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
    2772:	44 8d       	ldd	r20, Z+28	; 0x1c
    2774:	55 8d       	ldd	r21, Z+29	; 0x1d
    2776:	66 8d       	ldd	r22, Z+30	; 0x1e
    2778:	77 8d       	ldd	r23, Z+31	; 0x1f
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	9a 81       	ldd	r25, Y+2	; 0x02
    277e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <move_window>
				if (res == FR_OK) {
    2782:	81 11       	cpse	r24, r1
    2784:	2e c0       	rjmp	.+92     	; 0x27e2 <f_sync+0x9a>
					dir = fp->dir_ptr;
    2786:	f8 01       	movw	r30, r16
    2788:	e0 a0       	ldd	r14, Z+32	; 0x20
    278a:	f1 a0       	ldd	r15, Z+33	; 0x21
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    278c:	f7 01       	movw	r30, r14
    278e:	83 85       	ldd	r24, Z+11	; 0x0b
    2790:	80 62       	ori	r24, 0x20	; 32
    2792:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
    2794:	f8 01       	movw	r30, r16
    2796:	26 81       	ldd	r18, Z+6	; 0x06
    2798:	37 81       	ldd	r19, Z+7	; 0x07
    279a:	40 85       	ldd	r20, Z+8	; 0x08
    279c:	51 85       	ldd	r21, Z+9	; 0x09
    279e:	b7 01       	movw	r22, r14
    27a0:	80 81       	ld	r24, Z
    27a2:	91 81       	ldd	r25, Z+1	; 0x01
    27a4:	0e 94 06 04 	call	0x80c	; 0x80c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    27a8:	f8 01       	movw	r30, r16
    27aa:	32 85       	ldd	r19, Z+10	; 0x0a
    27ac:	23 85       	ldd	r18, Z+11	; 0x0b
    27ae:	94 85       	ldd	r25, Z+12	; 0x0c
    27b0:	85 85       	ldd	r24, Z+13	; 0x0d
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    27b2:	f7 01       	movw	r30, r14
    27b4:	34 8f       	std	Z+28, r19	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    27b6:	25 8f       	std	Z+29, r18	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    27b8:	96 8f       	std	Z+30, r25	; 0x1e
	*ptr++ = (BYTE)val;
    27ba:	87 8f       	std	Z+31, r24	; 0x1f
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    27bc:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    27be:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    27c0:	81 e2       	ldi	r24, 0x21	; 33
    27c2:	80 8f       	std	Z+24, r24	; 0x18
	*ptr++ = (BYTE)val;
    27c4:	8e e4       	ldi	r24, 0x4E	; 78
    27c6:	81 8f       	std	Z+25, r24	; 0x19
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    27c8:	12 8a       	std	Z+18, r1	; 0x12
	*ptr++ = (BYTE)val;
    27ca:	13 8a       	std	Z+19, r1	; 0x13
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	21 e0       	ldi	r18, 0x01	; 1
    27d2:	fc 01       	movw	r30, r24
    27d4:	23 83       	std	Z+3, r18	; 0x03
					res = sync_fs(fs);					/* Restore it to the directory */
    27d6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
    27da:	f8 01       	movw	r30, r16
    27dc:	96 85       	ldd	r25, Z+14	; 0x0e
    27de:	9f 7b       	andi	r25, 0xBF	; 191
    27e0:	96 87       	std	Z+14, r25	; 0x0e
			}
		}
	}

	LEAVE_FF(fs, res);
}
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	1f 91       	pop	r17
    27ec:	0f 91       	pop	r16
    27ee:	ff 90       	pop	r15
    27f0:	ef 90       	pop	r14
    27f2:	08 95       	ret

000027f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <f_close+0xa>
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    2804:	0e 94 a4 13 	call	0x2748	; 0x2748 <f_sync>
	if (res == FR_OK)
    2808:	81 11       	cpse	r24, r1
    280a:	0b c0       	rjmp	.+22     	; 0x2822 <f_close+0x2e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
    280c:	be 01       	movw	r22, r28
    280e:	6f 5f       	subi	r22, 0xFF	; 255
    2810:	7f 4f       	sbci	r23, 0xFF	; 255
    2812:	c8 01       	movw	r24, r16
    2814:	0e 94 4b 01 	call	0x296	; 0x296 <validate>
		if (res == FR_OK) {
    2818:	81 11       	cpse	r24, r1
    281a:	03 c0       	rjmp	.+6      	; 0x2822 <f_close+0x2e>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
    281c:	f8 01       	movw	r30, r16
    281e:	11 82       	std	Z+1, r1	; 0x01
    2820:	10 82       	st	Z, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	1f 91       	pop	r17
    282c:	0f 91       	pop	r16
    282e:	08 95       	ret

00002830 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
    2830:	2f 92       	push	r2
    2832:	3f 92       	push	r3
    2834:	4f 92       	push	r4
    2836:	5f 92       	push	r5
    2838:	6f 92       	push	r6
    283a:	7f 92       	push	r7
    283c:	8f 92       	push	r8
    283e:	9f 92       	push	r9
    2840:	af 92       	push	r10
    2842:	bf 92       	push	r11
    2844:	cf 92       	push	r12
    2846:	df 92       	push	r13
    2848:	ef 92       	push	r14
    284a:	ff 92       	push	r15
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	00 d0       	rcall	.+0      	; 0x2856 <f_lseek+0x26>
    2856:	00 d0       	rcall	.+0      	; 0x2858 <f_lseek+0x28>
    2858:	00 d0       	rcall	.+0      	; 0x285a <f_lseek+0x2a>
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	8c 01       	movw	r16, r24
    2860:	6a 01       	movw	r12, r20
    2862:	7b 01       	movw	r14, r22
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, tlen, ulen, *tbl;
	LBA_t dsc;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
    2864:	78 2e       	mov	r7, r24
    2866:	61 2e       	mov	r6, r17
    2868:	be 01       	movw	r22, r28
    286a:	6f 5f       	subi	r22, 0xFF	; 255
    286c:	7f 4f       	sbci	r23, 0xFF	; 255
    286e:	0e 94 4b 01 	call	0x296	; 0x296 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
    2872:	81 11       	cpse	r24, r1
    2874:	76 c1       	rjmp	.+748    	; 0x2b62 <f_lseek+0x332>
    2876:	d8 01       	movw	r26, r16
    2878:	1f 96       	adiw	r26, 0x0f	; 15
    287a:	8c 91       	ld	r24, X
    287c:	1f 97       	sbiw	r26, 0x0f	; 15
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
    287e:	81 11       	cpse	r24, r1
    2880:	70 c1       	rjmp	.+736    	; 0x2b62 <f_lseek+0x332>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
    2882:	1a 96       	adiw	r26, 0x0a	; 10
    2884:	8d 91       	ld	r24, X+
    2886:	9d 91       	ld	r25, X+
    2888:	0d 90       	ld	r0, X+
    288a:	bc 91       	ld	r27, X
    288c:	a0 2d       	mov	r26, r0
    288e:	8c 15       	cp	r24, r12
    2890:	9d 05       	cpc	r25, r13
    2892:	ae 05       	cpc	r26, r14
    2894:	bf 05       	cpc	r27, r15
    2896:	30 f4       	brcc	.+12     	; 0x28a4 <f_lseek+0x74>
    2898:	f8 01       	movw	r30, r16
    289a:	26 85       	ldd	r18, Z+14	; 0x0e
    289c:	21 fd       	sbrc	r18, 1
    289e:	02 c0       	rjmp	.+4      	; 0x28a4 <f_lseek+0x74>
			ofs = fp->obj.objsize;
    28a0:	6c 01       	movw	r12, r24
    28a2:	7d 01       	movw	r14, r26
		}
		ifptr = fp->fptr;
    28a4:	f8 01       	movw	r30, r16
    28a6:	80 89       	ldd	r24, Z+16	; 0x10
    28a8:	91 89       	ldd	r25, Z+17	; 0x11
    28aa:	a2 89       	ldd	r26, Z+18	; 0x12
    28ac:	b3 89       	ldd	r27, Z+19	; 0x13
		fp->fptr = nsect = 0;
    28ae:	10 8a       	std	Z+16, r1	; 0x10
    28b0:	11 8a       	std	Z+17, r1	; 0x11
    28b2:	12 8a       	std	Z+18, r1	; 0x12
    28b4:	13 8a       	std	Z+19, r1	; 0x13
		if (ofs > 0) {
    28b6:	c1 14       	cp	r12, r1
    28b8:	d1 04       	cpc	r13, r1
    28ba:	e1 04       	cpc	r14, r1
    28bc:	f1 04       	cpc	r15, r1
    28be:	09 f4       	brne	.+2      	; 0x28c2 <f_lseek+0x92>
    28c0:	4b c1       	rjmp	.+662    	; 0x2b58 <f_lseek+0x328>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
    28c2:	e9 81       	ldd	r30, Y+1	; 0x01
    28c4:	fa 81       	ldd	r31, Y+2	; 0x02
    28c6:	81 84       	ldd	r8, Z+9	; 0x09
    28c8:	92 84       	ldd	r9, Z+10	; 0x0a
    28ca:	a1 2c       	mov	r10, r1
    28cc:	b1 2c       	mov	r11, r1
    28ce:	07 2e       	mov	r0, r23
    28d0:	79 e0       	ldi	r23, 0x09	; 9
    28d2:	88 0c       	add	r8, r8
    28d4:	99 1c       	adc	r9, r9
    28d6:	aa 1c       	adc	r10, r10
    28d8:	bb 1c       	adc	r11, r11
    28da:	7a 95       	dec	r23
    28dc:	d1 f7       	brne	.-12     	; 0x28d2 <f_lseek+0xa2>
    28de:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	a1 05       	cpc	r26, r1
    28e4:	b1 05       	cpc	r27, r1
    28e6:	e9 f1       	breq	.+122    	; 0x2962 <f_lseek+0x132>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    28e8:	1c 01       	movw	r2, r24
    28ea:	2d 01       	movw	r4, r26
    28ec:	f1 e0       	ldi	r31, 0x01	; 1
    28ee:	2f 1a       	sub	r2, r31
    28f0:	31 08       	sbc	r3, r1
    28f2:	41 08       	sbc	r4, r1
    28f4:	51 08       	sbc	r5, r1
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs > 0) {
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    28f6:	c7 01       	movw	r24, r14
    28f8:	b6 01       	movw	r22, r12
    28fa:	61 50       	subi	r22, 0x01	; 1
    28fc:	71 09       	sbc	r23, r1
    28fe:	81 09       	sbc	r24, r1
    2900:	91 09       	sbc	r25, r1
    2902:	a5 01       	movw	r20, r10
    2904:	94 01       	movw	r18, r8
    2906:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__udivmodsi4>
    290a:	2b 83       	std	Y+3, r18	; 0x03
    290c:	3c 83       	std	Y+4, r19	; 0x04
    290e:	4d 83       	std	Y+5, r20	; 0x05
    2910:	5e 83       	std	Y+6, r21	; 0x06
    2912:	c2 01       	movw	r24, r4
    2914:	b1 01       	movw	r22, r2
    2916:	a5 01       	movw	r20, r10
    2918:	94 01       	movw	r18, r8
    291a:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__udivmodsi4>
    291e:	8b 81       	ldd	r24, Y+3	; 0x03
    2920:	9c 81       	ldd	r25, Y+4	; 0x04
    2922:	ad 81       	ldd	r26, Y+5	; 0x05
    2924:	be 81       	ldd	r27, Y+6	; 0x06
    2926:	82 17       	cp	r24, r18
    2928:	93 07       	cpc	r25, r19
    292a:	a4 07       	cpc	r26, r20
    292c:	b5 07       	cpc	r27, r21
    292e:	c8 f0       	brcs	.+50     	; 0x2962 <f_lseek+0x132>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
    2930:	88 27       	eor	r24, r24
    2932:	99 27       	eor	r25, r25
    2934:	dc 01       	movw	r26, r24
    2936:	88 19       	sub	r24, r8
    2938:	99 09       	sbc	r25, r9
    293a:	aa 09       	sbc	r26, r10
    293c:	bb 09       	sbc	r27, r11
    293e:	82 21       	and	r24, r2
    2940:	93 21       	and	r25, r3
    2942:	a4 21       	and	r26, r4
    2944:	b5 21       	and	r27, r5
    2946:	f8 01       	movw	r30, r16
    2948:	80 8b       	std	Z+16, r24	; 0x10
    294a:	91 8b       	std	Z+17, r25	; 0x11
    294c:	a2 8b       	std	Z+18, r26	; 0x12
    294e:	b3 8b       	std	Z+19, r27	; 0x13
				ofs -= fp->fptr;
    2950:	c8 1a       	sub	r12, r24
    2952:	d9 0a       	sbc	r13, r25
    2954:	ea 0a       	sbc	r14, r26
    2956:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    2958:	44 89       	ldd	r20, Z+20	; 0x14
    295a:	55 89       	ldd	r21, Z+21	; 0x15
    295c:	66 89       	ldd	r22, Z+22	; 0x16
    295e:	77 89       	ldd	r23, Z+23	; 0x17
    2960:	34 c0       	rjmp	.+104    	; 0x29ca <f_lseek+0x19a>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
    2962:	d8 01       	movw	r26, r16
    2964:	16 96       	adiw	r26, 0x06	; 6
    2966:	4d 91       	ld	r20, X+
    2968:	5d 91       	ld	r21, X+
    296a:	6d 91       	ld	r22, X+
    296c:	7c 91       	ld	r23, X
    296e:	19 97       	sbiw	r26, 0x09	; 9
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2970:	41 15       	cp	r20, r1
    2972:	51 05       	cpc	r21, r1
    2974:	61 05       	cpc	r22, r1
    2976:	71 05       	cpc	r23, r1
    2978:	09 f5       	brne	.+66     	; 0x29bc <f_lseek+0x18c>
					clst = create_chain(&fp->obj, 0);
    297a:	40 e0       	ldi	r20, 0x00	; 0
    297c:	50 e0       	ldi	r21, 0x00	; 0
    297e:	ba 01       	movw	r22, r20
    2980:	c8 01       	movw	r24, r16
    2982:	0e 94 dd 05 	call	0xbba	; 0xbba <create_chain>
    2986:	ab 01       	movw	r20, r22
    2988:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fs, FR_INT_ERR);
    298a:	41 30       	cpi	r20, 0x01	; 1
    298c:	51 05       	cpc	r21, r1
    298e:	61 05       	cpc	r22, r1
    2990:	71 05       	cpc	r23, r1
    2992:	21 f4       	brne	.+8      	; 0x299c <f_lseek+0x16c>
    2994:	82 e0       	ldi	r24, 0x02	; 2
    2996:	f8 01       	movw	r30, r16
    2998:	87 87       	std	Z+15, r24	; 0x0f
    299a:	e3 c0       	rjmp	.+454    	; 0x2b62 <f_lseek+0x332>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    299c:	4f 3f       	cpi	r20, 0xFF	; 255
    299e:	ff ef       	ldi	r31, 0xFF	; 255
    29a0:	5f 07       	cpc	r21, r31
    29a2:	6f 07       	cpc	r22, r31
    29a4:	7f 07       	cpc	r23, r31
    29a6:	29 f4       	brne	.+10     	; 0x29b2 <f_lseek+0x182>
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	d8 01       	movw	r26, r16
    29ac:	1f 96       	adiw	r26, 0x0f	; 15
    29ae:	8c 93       	st	X, r24
    29b0:	d8 c0       	rjmp	.+432    	; 0x2b62 <f_lseek+0x332>
					fp->obj.sclust = clst;
    29b2:	f8 01       	movw	r30, r16
    29b4:	46 83       	std	Z+6, r20	; 0x06
    29b6:	57 83       	std	Z+7, r21	; 0x07
    29b8:	60 87       	std	Z+8, r22	; 0x08
    29ba:	71 87       	std	Z+9, r23	; 0x09
				}
#endif
				fp->clust = clst;
    29bc:	d8 01       	movw	r26, r16
    29be:	54 96       	adiw	r26, 0x14	; 20
    29c0:	4d 93       	st	X+, r20
    29c2:	5d 93       	st	X+, r21
    29c4:	6d 93       	st	X+, r22
    29c6:	7c 93       	st	X, r23
    29c8:	57 97       	sbiw	r26, 0x17	; 23
			}
			if (clst != 0) {
    29ca:	41 15       	cp	r20, r1
    29cc:	51 05       	cpc	r21, r1
    29ce:	61 05       	cpc	r22, r1
    29d0:	71 05       	cpc	r23, r1
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <f_lseek+0x1a6>
    29d4:	8a c0       	rjmp	.+276    	; 0x2aea <f_lseek+0x2ba>
				while (ofs > bcs) {						/* Cluster following loop */
    29d6:	8c 14       	cp	r8, r12
    29d8:	9d 04       	cpc	r9, r13
    29da:	ae 04       	cpc	r10, r14
    29dc:	bf 04       	cpc	r11, r15
    29de:	08 f0       	brcs	.+2      	; 0x29e2 <f_lseek+0x1b2>
    29e0:	52 c0       	rjmp	.+164    	; 0x2a86 <f_lseek+0x256>
					ofs -= bcs; fp->fptr += bcs;
    29e2:	c8 18       	sub	r12, r8
    29e4:	d9 08       	sbc	r13, r9
    29e6:	ea 08       	sbc	r14, r10
    29e8:	fb 08       	sbc	r15, r11
    29ea:	f8 01       	movw	r30, r16
    29ec:	80 89       	ldd	r24, Z+16	; 0x10
    29ee:	91 89       	ldd	r25, Z+17	; 0x11
    29f0:	a2 89       	ldd	r26, Z+18	; 0x12
    29f2:	b3 89       	ldd	r27, Z+19	; 0x13
    29f4:	88 0d       	add	r24, r8
    29f6:	99 1d       	adc	r25, r9
    29f8:	aa 1d       	adc	r26, r10
    29fa:	bb 1d       	adc	r27, r11
    29fc:	80 8b       	std	Z+16, r24	; 0x10
    29fe:	91 8b       	std	Z+17, r25	; 0x11
    2a00:	a2 8b       	std	Z+18, r26	; 0x12
    2a02:	b3 8b       	std	Z+19, r27	; 0x13
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2a04:	86 85       	ldd	r24, Z+14	; 0x0e
    2a06:	81 ff       	sbrs	r24, 1
    2a08:	0c c0       	rjmp	.+24     	; 0x2a22 <f_lseek+0x1f2>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
    2a0a:	87 2d       	mov	r24, r7
    2a0c:	96 2d       	mov	r25, r6
    2a0e:	0e 94 dd 05 	call	0xbba	; 0xbba <create_chain>
    2a12:	ab 01       	movw	r20, r22
    2a14:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* Clip file size in case of disk full */
    2a16:	41 15       	cp	r20, r1
    2a18:	51 05       	cpc	r21, r1
    2a1a:	61 05       	cpc	r22, r1
    2a1c:	71 05       	cpc	r23, r1
    2a1e:	39 f4       	brne	.+14     	; 0x2a2e <f_lseek+0x1fe>
    2a20:	68 c0       	rjmp	.+208    	; 0x2af2 <f_lseek+0x2c2>
							ofs = 0; break;
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
    2a22:	87 2d       	mov	r24, r7
    2a24:	96 2d       	mov	r25, r6
    2a26:	0e 94 13 04 	call	0x826	; 0x826 <get_fat>
    2a2a:	ab 01       	movw	r20, r22
    2a2c:	bc 01       	movw	r22, r24
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    2a2e:	4f 3f       	cpi	r20, 0xFF	; 255
    2a30:	ff ef       	ldi	r31, 0xFF	; 255
    2a32:	5f 07       	cpc	r21, r31
    2a34:	6f 07       	cpc	r22, r31
    2a36:	7f 07       	cpc	r23, r31
    2a38:	29 f4       	brne	.+10     	; 0x2a44 <f_lseek+0x214>
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	d8 01       	movw	r26, r16
    2a3e:	1f 96       	adiw	r26, 0x0f	; 15
    2a40:	8c 93       	st	X, r24
    2a42:	8f c0       	rjmp	.+286    	; 0x2b62 <f_lseek+0x332>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
    2a44:	42 30       	cpi	r20, 0x02	; 2
    2a46:	51 05       	cpc	r21, r1
    2a48:	61 05       	cpc	r22, r1
    2a4a:	71 05       	cpc	r23, r1
    2a4c:	58 f0       	brcs	.+22     	; 0x2a64 <f_lseek+0x234>
    2a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a50:	fa 81       	ldd	r31, Y+2	; 0x02
    2a52:	83 89       	ldd	r24, Z+19	; 0x13
    2a54:	94 89       	ldd	r25, Z+20	; 0x14
    2a56:	a5 89       	ldd	r26, Z+21	; 0x15
    2a58:	b6 89       	ldd	r27, Z+22	; 0x16
    2a5a:	48 17       	cp	r20, r24
    2a5c:	59 07       	cpc	r21, r25
    2a5e:	6a 07       	cpc	r22, r26
    2a60:	7b 07       	cpc	r23, r27
    2a62:	20 f0       	brcs	.+8      	; 0x2a6c <f_lseek+0x23c>
    2a64:	82 e0       	ldi	r24, 0x02	; 2
    2a66:	f8 01       	movw	r30, r16
    2a68:	87 87       	std	Z+15, r24	; 0x0f
    2a6a:	7b c0       	rjmp	.+246    	; 0x2b62 <f_lseek+0x332>
					fp->clust = clst;
    2a6c:	d8 01       	movw	r26, r16
    2a6e:	54 96       	adiw	r26, 0x14	; 20
    2a70:	4d 93       	st	X+, r20
    2a72:	5d 93       	st	X+, r21
    2a74:	6d 93       	st	X+, r22
    2a76:	7c 93       	st	X, r23
    2a78:	57 97       	sbiw	r26, 0x17	; 23
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2a7a:	8c 14       	cp	r8, r12
    2a7c:	9d 04       	cpc	r9, r13
    2a7e:	ae 04       	cpc	r10, r14
    2a80:	bf 04       	cpc	r11, r15
    2a82:	08 f4       	brcc	.+2      	; 0x2a86 <f_lseek+0x256>
    2a84:	ae cf       	rjmp	.-164    	; 0x29e2 <f_lseek+0x1b2>
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
					fp->clust = clst;
				}
				fp->fptr += ofs;
    2a86:	f8 01       	movw	r30, r16
    2a88:	80 89       	ldd	r24, Z+16	; 0x10
    2a8a:	91 89       	ldd	r25, Z+17	; 0x11
    2a8c:	a2 89       	ldd	r26, Z+18	; 0x12
    2a8e:	b3 89       	ldd	r27, Z+19	; 0x13
    2a90:	8c 0d       	add	r24, r12
    2a92:	9d 1d       	adc	r25, r13
    2a94:	ae 1d       	adc	r26, r14
    2a96:	bf 1d       	adc	r27, r15
    2a98:	80 8b       	std	Z+16, r24	; 0x10
    2a9a:	91 8b       	std	Z+17, r25	; 0x11
    2a9c:	a2 8b       	std	Z+18, r26	; 0x12
    2a9e:	b3 8b       	std	Z+19, r27	; 0x13
				if (ofs % SS(fs)) {
    2aa0:	d7 01       	movw	r26, r14
    2aa2:	c6 01       	movw	r24, r12
    2aa4:	91 70       	andi	r25, 0x01	; 1
    2aa6:	aa 27       	eor	r26, r26
    2aa8:	bb 27       	eor	r27, r27
    2aaa:	89 2b       	or	r24, r25
    2aac:	8a 2b       	or	r24, r26
    2aae:	8b 2b       	or	r24, r27
    2ab0:	21 f1       	breq	.+72     	; 0x2afa <f_lseek+0x2ca>
					nsect = clst2sect(fs, clst);	/* Current sector */
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab6:	0e 94 ed 00 	call	0x1da	; 0x1da <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
    2aba:	61 15       	cp	r22, r1
    2abc:	71 05       	cpc	r23, r1
    2abe:	81 05       	cpc	r24, r1
    2ac0:	91 05       	cpc	r25, r1
    2ac2:	29 f4       	brne	.+10     	; 0x2ace <f_lseek+0x29e>
    2ac4:	82 e0       	ldi	r24, 0x02	; 2
    2ac6:	d8 01       	movw	r26, r16
    2ac8:	1f 96       	adiw	r26, 0x0f	; 15
    2aca:	8c 93       	st	X, r24
    2acc:	4a c0       	rjmp	.+148    	; 0x2b62 <f_lseek+0x332>
					nsect += (DWORD)(ofs / SS(fs));
    2ace:	0b 2e       	mov	r0, r27
    2ad0:	b9 e0       	ldi	r27, 0x09	; 9
    2ad2:	f6 94       	lsr	r15
    2ad4:	e7 94       	ror	r14
    2ad6:	d7 94       	ror	r13
    2ad8:	c7 94       	ror	r12
    2ada:	ba 95       	dec	r27
    2adc:	d1 f7       	brne	.-12     	; 0x2ad2 <f_lseek+0x2a2>
    2ade:	b0 2d       	mov	r27, r0
    2ae0:	c6 0e       	add	r12, r22
    2ae2:	d7 1e       	adc	r13, r23
    2ae4:	e8 1e       	adc	r14, r24
    2ae6:	f9 1e       	adc	r15, r25
    2ae8:	0b c0       	rjmp	.+22     	; 0x2b00 <f_lseek+0x2d0>
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2aea:	c1 2c       	mov	r12, r1
    2aec:	d1 2c       	mov	r13, r1
    2aee:	76 01       	movw	r14, r12
    2af0:	07 c0       	rjmp	.+14     	; 0x2b00 <f_lseek+0x2d0>
    2af2:	c1 2c       	mov	r12, r1
    2af4:	d1 2c       	mov	r13, r1
    2af6:	76 01       	movw	r14, r12
    2af8:	03 c0       	rjmp	.+6      	; 0x2b00 <f_lseek+0x2d0>
    2afa:	c1 2c       	mov	r12, r1
    2afc:	d1 2c       	mov	r13, r1
    2afe:	76 01       	movw	r14, r12
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
					nsect += (DWORD)(ofs / SS(fs));
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
    2b00:	f8 01       	movw	r30, r16
    2b02:	80 89       	ldd	r24, Z+16	; 0x10
    2b04:	91 89       	ldd	r25, Z+17	; 0x11
    2b06:	a2 89       	ldd	r26, Z+18	; 0x12
    2b08:	b3 89       	ldd	r27, Z+19	; 0x13
    2b0a:	42 85       	ldd	r20, Z+10	; 0x0a
    2b0c:	53 85       	ldd	r21, Z+11	; 0x0b
    2b0e:	64 85       	ldd	r22, Z+12	; 0x0c
    2b10:	75 85       	ldd	r23, Z+13	; 0x0d
    2b12:	48 17       	cp	r20, r24
    2b14:	59 07       	cpc	r21, r25
    2b16:	6a 07       	cpc	r22, r26
    2b18:	7b 07       	cpc	r23, r27
    2b1a:	38 f4       	brcc	.+14     	; 0x2b2a <f_lseek+0x2fa>
			fp->obj.objsize = fp->fptr;
    2b1c:	82 87       	std	Z+10, r24	; 0x0a
    2b1e:	93 87       	std	Z+11, r25	; 0x0b
    2b20:	a4 87       	std	Z+12, r26	; 0x0c
    2b22:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA_MODIFIED;
    2b24:	26 85       	ldd	r18, Z+14	; 0x0e
    2b26:	20 64       	ori	r18, 0x40	; 64
    2b28:	26 87       	std	Z+14, r18	; 0x0e
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
    2b2a:	91 70       	andi	r25, 0x01	; 1
    2b2c:	aa 27       	eor	r26, r26
    2b2e:	bb 27       	eor	r27, r27
    2b30:	89 2b       	or	r24, r25
    2b32:	8a 2b       	or	r24, r26
    2b34:	8b 2b       	or	r24, r27
    2b36:	91 f0       	breq	.+36     	; 0x2b5c <f_lseek+0x32c>
    2b38:	f8 01       	movw	r30, r16
    2b3a:	80 8d       	ldd	r24, Z+24	; 0x18
    2b3c:	91 8d       	ldd	r25, Z+25	; 0x19
    2b3e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b40:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2b42:	c8 16       	cp	r12, r24
    2b44:	d9 06       	cpc	r13, r25
    2b46:	ea 06       	cpc	r14, r26
    2b48:	fb 06       	cpc	r15, r27
    2b4a:	51 f0       	breq	.+20     	; 0x2b60 <f_lseek+0x330>
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
#endif
			fp->sect = nsect;
    2b4c:	c0 8e       	std	Z+24, r12	; 0x18
    2b4e:	d1 8e       	std	Z+25, r13	; 0x19
    2b50:	e2 8e       	std	Z+26, r14	; 0x1a
    2b52:	f3 8e       	std	Z+27, r15	; 0x1b
		}
	}

	LEAVE_FF(fs, res);
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	05 c0       	rjmp	.+10     	; 0x2b62 <f_lseek+0x332>
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	03 c0       	rjmp	.+6      	; 0x2b62 <f_lseek+0x332>
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	01 c0       	rjmp	.+2      	; 0x2b62 <f_lseek+0x332>
    2b60:	80 e0       	ldi	r24, 0x00	; 0
}
    2b62:	26 96       	adiw	r28, 0x06	; 6
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	df 91       	pop	r29
    2b70:	cf 91       	pop	r28
    2b72:	1f 91       	pop	r17
    2b74:	0f 91       	pop	r16
    2b76:	ff 90       	pop	r15
    2b78:	ef 90       	pop	r14
    2b7a:	df 90       	pop	r13
    2b7c:	cf 90       	pop	r12
    2b7e:	bf 90       	pop	r11
    2b80:	af 90       	pop	r10
    2b82:	9f 90       	pop	r9
    2b84:	8f 90       	pop	r8
    2b86:	7f 90       	pop	r7
    2b88:	6f 90       	pop	r6
    2b8a:	5f 90       	pop	r5
    2b8c:	4f 90       	pop	r4
    2b8e:	3f 90       	pop	r3
    2b90:	2f 90       	pop	r2
    2b92:	08 95       	ret

00002b94 <LCD_SendCommandHigh>:
	while(r)
	{
		LCD_SendData(r);
		r = pgm_read_byte(Text++);
	}
}
    2b94:	5f 98       	cbi	0x0b, 7	; 11
    2b96:	84 ff       	sbrs	r24, 4
    2b98:	02 c0       	rjmp	.+4      	; 0x2b9e <LCD_SendCommandHigh+0xa>
    2b9a:	5d 9a       	sbi	0x0b, 5	; 11
    2b9c:	01 c0       	rjmp	.+2      	; 0x2ba0 <LCD_SendCommandHigh+0xc>
    2b9e:	5d 98       	cbi	0x0b, 5	; 11
    2ba0:	85 ff       	sbrs	r24, 5
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <LCD_SendCommandHigh+0x14>
    2ba4:	5c 9a       	sbi	0x0b, 4	; 11
    2ba6:	01 c0       	rjmp	.+2      	; 0x2baa <LCD_SendCommandHigh+0x16>
    2ba8:	5c 98       	cbi	0x0b, 4	; 11
    2baa:	86 ff       	sbrs	r24, 6
    2bac:	02 c0       	rjmp	.+4      	; 0x2bb2 <LCD_SendCommandHigh+0x1e>
    2bae:	5b 9a       	sbi	0x0b, 3	; 11
    2bb0:	01 c0       	rjmp	.+2      	; 0x2bb4 <LCD_SendCommandHigh+0x20>
    2bb2:	5b 98       	cbi	0x0b, 3	; 11
    2bb4:	88 23       	and	r24, r24
    2bb6:	14 f4       	brge	.+4      	; 0x2bbc <LCD_SendCommandHigh+0x28>
    2bb8:	5a 9a       	sbi	0x0b, 2	; 11
    2bba:	01 c0       	rjmp	.+2      	; 0x2bbe <LCD_SendCommandHigh+0x2a>
    2bbc:	5a 98       	cbi	0x0b, 2	; 11
    2bbe:	5e 9a       	sbi	0x0b, 6	; 11
    2bc0:	85 e0       	ldi	r24, 0x05	; 5
    2bc2:	8a 95       	dec	r24
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <LCD_SendCommandHigh+0x2e>
    2bc6:	00 00       	nop
    2bc8:	5e 98       	cbi	0x0b, 6	; 11
    2bca:	08 95       	ret

00002bcc <LCD_Send>:
    2bcc:	84 ff       	sbrs	r24, 4
    2bce:	02 c0       	rjmp	.+4      	; 0x2bd4 <LCD_Send+0x8>
    2bd0:	5d 9a       	sbi	0x0b, 5	; 11
    2bd2:	01 c0       	rjmp	.+2      	; 0x2bd6 <LCD_Send+0xa>
    2bd4:	5d 98       	cbi	0x0b, 5	; 11
    2bd6:	85 ff       	sbrs	r24, 5
    2bd8:	02 c0       	rjmp	.+4      	; 0x2bde <LCD_Send+0x12>
    2bda:	5c 9a       	sbi	0x0b, 4	; 11
    2bdc:	01 c0       	rjmp	.+2      	; 0x2be0 <LCD_Send+0x14>
    2bde:	5c 98       	cbi	0x0b, 4	; 11
    2be0:	86 ff       	sbrs	r24, 6
    2be2:	02 c0       	rjmp	.+4      	; 0x2be8 <LCD_Send+0x1c>
    2be4:	5b 9a       	sbi	0x0b, 3	; 11
    2be6:	01 c0       	rjmp	.+2      	; 0x2bea <LCD_Send+0x1e>
    2be8:	5b 98       	cbi	0x0b, 3	; 11
    2bea:	88 23       	and	r24, r24
    2bec:	14 f4       	brge	.+4      	; 0x2bf2 <LCD_Send+0x26>
    2bee:	5a 9a       	sbi	0x0b, 2	; 11
    2bf0:	01 c0       	rjmp	.+2      	; 0x2bf4 <LCD_Send+0x28>
    2bf2:	5a 98       	cbi	0x0b, 2	; 11
    2bf4:	5e 9a       	sbi	0x0b, 6	; 11
    2bf6:	95 e0       	ldi	r25, 0x05	; 5
    2bf8:	9a 95       	dec	r25
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <LCD_Send+0x2c>
    2bfc:	00 00       	nop
    2bfe:	5e 98       	cbi	0x0b, 6	; 11
    2c00:	80 ff       	sbrs	r24, 0
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <LCD_Send+0x3c>
    2c04:	5d 9a       	sbi	0x0b, 5	; 11
    2c06:	01 c0       	rjmp	.+2      	; 0x2c0a <LCD_Send+0x3e>
    2c08:	5d 98       	cbi	0x0b, 5	; 11
    2c0a:	81 ff       	sbrs	r24, 1
    2c0c:	02 c0       	rjmp	.+4      	; 0x2c12 <LCD_Send+0x46>
    2c0e:	5c 9a       	sbi	0x0b, 4	; 11
    2c10:	01 c0       	rjmp	.+2      	; 0x2c14 <LCD_Send+0x48>
    2c12:	5c 98       	cbi	0x0b, 4	; 11
    2c14:	82 ff       	sbrs	r24, 2
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <LCD_Send+0x50>
    2c18:	5b 9a       	sbi	0x0b, 3	; 11
    2c1a:	01 c0       	rjmp	.+2      	; 0x2c1e <LCD_Send+0x52>
    2c1c:	5b 98       	cbi	0x0b, 3	; 11
    2c1e:	83 ff       	sbrs	r24, 3
    2c20:	02 c0       	rjmp	.+4      	; 0x2c26 <LCD_Send+0x5a>
    2c22:	5a 9a       	sbi	0x0b, 2	; 11
    2c24:	01 c0       	rjmp	.+2      	; 0x2c28 <LCD_Send+0x5c>
    2c26:	5a 98       	cbi	0x0b, 2	; 11
    2c28:	5e 9a       	sbi	0x0b, 6	; 11
    2c2a:	85 e0       	ldi	r24, 0x05	; 5
    2c2c:	8a 95       	dec	r24
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <LCD_Send+0x60>
    2c30:	00 00       	nop
    2c32:	5e 98       	cbi	0x0b, 6	; 11
    2c34:	08 95       	ret

00002c36 <LCD_WaitBusy>:
    2c36:	55 98       	cbi	0x0a, 5	; 10
    2c38:	54 98       	cbi	0x0a, 4	; 10
    2c3a:	53 98       	cbi	0x0a, 3	; 10
    2c3c:	52 98       	cbi	0x0a, 2	; 10
    2c3e:	5f 98       	cbi	0x0b, 7	; 11
    2c40:	28 9a       	sbi	0x05, 0	; 5
    2c42:	5e 9a       	sbi	0x0b, 6	; 11
    2c44:	85 e0       	ldi	r24, 0x05	; 5
    2c46:	8a 95       	dec	r24
    2c48:	f1 f7       	brne	.-4      	; 0x2c46 <LCD_WaitBusy+0x10>
    2c4a:	00 00       	nop
    2c4c:	4a 9b       	sbis	0x09, 2	; 9
    2c4e:	08 c0       	rjmp	.+16     	; 0x2c60 <LCD_WaitBusy+0x2a>
    2c50:	5e 98       	cbi	0x0b, 6	; 11
    2c52:	5e 9a       	sbi	0x0b, 6	; 11
    2c54:	85 e0       	ldi	r24, 0x05	; 5
    2c56:	8a 95       	dec	r24
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <LCD_WaitBusy+0x20>
    2c5a:	00 00       	nop
    2c5c:	5e 98       	cbi	0x0b, 6	; 11
    2c5e:	f1 cf       	rjmp	.-30     	; 0x2c42 <LCD_WaitBusy+0xc>
    2c60:	5e 98       	cbi	0x0b, 6	; 11
    2c62:	5e 9a       	sbi	0x0b, 6	; 11
    2c64:	85 e0       	ldi	r24, 0x05	; 5
    2c66:	8a 95       	dec	r24
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <LCD_WaitBusy+0x30>
    2c6a:	00 00       	nop
    2c6c:	5e 98       	cbi	0x0b, 6	; 11
    2c6e:	55 9a       	sbi	0x0a, 5	; 10
    2c70:	54 9a       	sbi	0x0a, 4	; 10
    2c72:	53 9a       	sbi	0x0a, 3	; 10
    2c74:	52 9a       	sbi	0x0a, 2	; 10
    2c76:	28 98       	cbi	0x05, 0	; 5
    2c78:	08 95       	ret

00002c7a <LCD_SendCommand>:
    2c7a:	cf 93       	push	r28
    2c7c:	c8 2f       	mov	r28, r24
    2c7e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <LCD_WaitBusy>
    2c82:	5f 98       	cbi	0x0b, 7	; 11
    2c84:	8c 2f       	mov	r24, r28
    2c86:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_Send>
    2c8a:	cf 91       	pop	r28
    2c8c:	08 95       	ret

00002c8e <LCD_Setup>:
    2c8e:	55 9a       	sbi	0x0a, 5	; 10
    2c90:	54 9a       	sbi	0x0a, 4	; 10
    2c92:	53 9a       	sbi	0x0a, 3	; 10
    2c94:	52 9a       	sbi	0x0a, 2	; 10
    2c96:	57 9a       	sbi	0x0a, 7	; 10
    2c98:	20 9a       	sbi	0x04, 0	; 4
    2c9a:	56 9a       	sbi	0x0a, 6	; 10
    2c9c:	5d 98       	cbi	0x0b, 5	; 11
    2c9e:	5c 98       	cbi	0x0b, 4	; 11
    2ca0:	5b 98       	cbi	0x0b, 3	; 11
    2ca2:	5a 98       	cbi	0x0b, 2	; 11
    2ca4:	5f 98       	cbi	0x0b, 7	; 11
    2ca6:	28 98       	cbi	0x05, 0	; 5
    2ca8:	5e 98       	cbi	0x0b, 6	; 11
    2caa:	2f ef       	ldi	r18, 0xFF	; 255
    2cac:	89 ef       	ldi	r24, 0xF9	; 249
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	21 50       	subi	r18, 0x01	; 1
    2cb2:	80 40       	sbci	r24, 0x00	; 0
    2cb4:	90 40       	sbci	r25, 0x00	; 0
    2cb6:	e1 f7       	brne	.-8      	; 0x2cb0 <LCD_Setup+0x22>
    2cb8:	00 c0       	rjmp	.+0      	; 0x2cba <LCD_Setup+0x2c>
    2cba:	00 00       	nop
    2cbc:	80 e3       	ldi	r24, 0x30	; 48
    2cbe:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <LCD_SendCommandHigh>
    2cc2:	8f e3       	ldi	r24, 0x3F	; 63
    2cc4:	9c e9       	ldi	r25, 0x9C	; 156
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <LCD_Setup+0x38>
    2cca:	00 c0       	rjmp	.+0      	; 0x2ccc <LCD_Setup+0x3e>
    2ccc:	00 00       	nop
    2cce:	80 e3       	ldi	r24, 0x30	; 48
    2cd0:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <LCD_SendCommandHigh>
    2cd4:	8f e9       	ldi	r24, 0x9F	; 159
    2cd6:	9f e0       	ldi	r25, 0x0F	; 15
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <LCD_Setup+0x4a>
    2cdc:	00 c0       	rjmp	.+0      	; 0x2cde <LCD_Setup+0x50>
    2cde:	00 00       	nop
    2ce0:	80 e3       	ldi	r24, 0x30	; 48
    2ce2:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <LCD_SendCommandHigh>
    2ce6:	8f e9       	ldi	r24, 0x9F	; 159
    2ce8:	9f e0       	ldi	r25, 0x0F	; 15
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	f1 f7       	brne	.-4      	; 0x2cea <LCD_Setup+0x5c>
    2cee:	00 c0       	rjmp	.+0      	; 0x2cf0 <LCD_Setup+0x62>
    2cf0:	00 00       	nop
    2cf2:	80 e2       	ldi	r24, 0x20	; 32
    2cf4:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <LCD_SendCommandHigh>
    2cf8:	88 e2       	ldi	r24, 0x28	; 40
    2cfa:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_SendCommand>
    2cfe:	8c e0       	ldi	r24, 0x0C	; 12
    2d00:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_SendCommand>
    2d04:	86 e0       	ldi	r24, 0x06	; 6
    2d06:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_SendCommand>
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_SendCommand>
    2d10:	08 95       	ret

00002d12 <LCD_SendData>:
    2d12:	cf 93       	push	r28
    2d14:	c8 2f       	mov	r28, r24
    2d16:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <LCD_WaitBusy>
    2d1a:	5f 9a       	sbi	0x0b, 7	; 11
    2d1c:	8c 2f       	mov	r24, r28
    2d1e:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_Send>
    2d22:	cf 91       	pop	r28
    2d24:	08 95       	ret

00002d26 <LCD_Clear>:
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_SendCommand>
    2d2c:	08 95       	ret

00002d2e <LCD_GotoXY>:
    2d2e:	80 31       	cpi	r24, 0x10	; 16
    2d30:	58 f4       	brcc	.+22     	; 0x2d48 <LCD_GotoXY+0x1a>
    2d32:	62 30       	cpi	r22, 0x02	; 2
    2d34:	48 f4       	brcc	.+18     	; 0x2d48 <LCD_GotoXY+0x1a>
    2d36:	61 30       	cpi	r22, 0x01	; 1
    2d38:	11 f4       	brne	.+4      	; 0x2d3e <LCD_GotoXY+0x10>
    2d3a:	90 e4       	ldi	r25, 0x40	; 64
    2d3c:	01 c0       	rjmp	.+2      	; 0x2d40 <LCD_GotoXY+0x12>
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	80 68       	ori	r24, 0x80	; 128
    2d42:	89 2b       	or	r24, r25
    2d44:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_SendCommand>
    2d48:	08 95       	ret

00002d4a <LCD_PrintString>:
    2d4a:	cf 93       	push	r28
    2d4c:	df 93       	push	r29
    2d4e:	ec 01       	movw	r28, r24
    2d50:	88 81       	ld	r24, Y
    2d52:	88 23       	and	r24, r24
    2d54:	31 f0       	breq	.+12     	; 0x2d62 <LCD_PrintString+0x18>
    2d56:	21 96       	adiw	r28, 0x01	; 1
    2d58:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_SendData>
    2d5c:	89 91       	ld	r24, Y+
    2d5e:	81 11       	cpse	r24, r1
    2d60:	fb cf       	rjmp	.-10     	; 0x2d58 <LCD_PrintString+0xe>
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	08 95       	ret

00002d68 <LCD_PrintInteger>:

//Print integer.
void LCD_PrintInteger(int32_t Value)
{
    2d68:	1f 93       	push	r17
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	2c 97       	sbiw	r28, 0x0c	; 12
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
	if (Value == 0 )
    2d82:	00 97       	sbiw	r24, 0x00	; 0
    2d84:	a1 05       	cpc	r26, r1
    2d86:	b1 05       	cpc	r27, r1
    2d88:	21 f4       	brne	.+8      	; 0x2d92 <LCD_PrintInteger+0x2a>
}

//Print character.
void LCD_PrintChar(char Character)
{
	LCD_SendData(Character);
    2d8a:	80 e3       	ldi	r24, 0x30	; 48
    2d8c:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_SendData>
    2d90:	37 c1       	rjmp	.+622    	; 0x3000 <LCD_PrintInteger+0x298>
{
	if (Value == 0 )
	{
		LCD_PrintChar('0');
	}
	else if ((Value > INT32_MIN ) && (Value <= INT32_MAX))
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	a1 05       	cpc	r26, r1
    2d96:	20 e8       	ldi	r18, 0x80	; 128
    2d98:	b2 07       	cpc	r27, r18
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <LCD_PrintInteger+0x36>
    2d9c:	31 c1       	rjmp	.+610    	; 0x3000 <LCD_PrintInteger+0x298>
	{
		//int32_max + sign + null = 12 bytes
		char arr[12] = { '\0' };
    2d9e:	ae 01       	movw	r20, r28
    2da0:	4f 5f       	subi	r20, 0xFF	; 255
    2da2:	5f 4f       	sbci	r21, 0xFF	; 255
    2da4:	2c e0       	ldi	r18, 0x0C	; 12
    2da6:	fa 01       	movw	r30, r20
    2da8:	11 92       	st	Z+, r1
    2daa:	2a 95       	dec	r18
    2dac:	e9 f7       	brne	.-6      	; 0x2da8 <LCD_PrintInteger+0x40>
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
    2dae:	20 e3       	ldi	r18, 0x30	; 48
    2db0:	2b 87       	std	Y+11, r18	; 0x0b
    2db2:	2a 87       	std	Y+10, r18	; 0x0a
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
    2db4:	29 87       	std	Y+9, r18	; 0x09
    2db6:	28 87       	std	Y+8, r18	; 0x08
    2db8:	2f 83       	std	Y+7, r18	; 0x07
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
	BCD[3] = BCD[4] = BCD[5] =
    2dba:	2e 83       	std	Y+6, r18	; 0x06
    2dbc:	2d 83       	std	Y+5, r18	; 0x05
    2dbe:	2c 83       	std	Y+4, r18	; 0x04
//Converts integer value to BCD.
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
	
	BCD[0] = BCD[1] = BCD[2] =
    2dc0:	2b 83       	std	Y+3, r18	; 0x03
    2dc2:	2a 83       	std	Y+2, r18	; 0x02
    2dc4:	29 83       	std	Y+1, r18	; 0x01
	BCD[3] = BCD[4] = BCD[5] =
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
    2dc6:	bb 23       	and	r27, r27
    2dc8:	4c f4       	brge	.+18     	; 0x2ddc <LCD_PrintInteger+0x74>
	{
		isNegative = 1;
		Value = -Value;
    2dca:	b0 95       	com	r27
    2dcc:	a0 95       	com	r26
    2dce:	90 95       	com	r25
    2dd0:	81 95       	neg	r24
    2dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd4:	af 4f       	sbci	r26, 0xFF	; 255
    2dd6:	bf 4f       	sbci	r27, 0xFF	; 255
	BCD[6] = BCD[7] = BCD[8] =
	BCD[9] = BCD[10] = '0';
	
	if (Value < 0)
	{
		isNegative = 1;
    2dd8:	11 e0       	ldi	r17, 0x01	; 1
    2dda:	01 c0       	rjmp	.+2      	; 0x2dde <LCD_PrintInteger+0x76>
}

//Converts integer value to BCD.
static void Int2bcd(int32_t Value, char BCD[])
{
	uint8_t isNegative = 0;
    2ddc:	10 e0       	ldi	r17, 0x00	; 0
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    2dde:	81 30       	cpi	r24, 0x01	; 1
    2de0:	fa ec       	ldi	r31, 0xCA	; 202
    2de2:	9f 07       	cpc	r25, r31
    2de4:	fa e9       	ldi	r31, 0x9A	; 154
    2de6:	af 07       	cpc	r26, r31
    2de8:	fb e3       	ldi	r31, 0x3B	; 59
    2dea:	bf 07       	cpc	r27, r31
    2dec:	8c f0       	brlt	.+34     	; 0x2e10 <LCD_PrintInteger+0xa8>
    2dee:	21 e3       	ldi	r18, 0x31	; 49
    2df0:	01 c0       	rjmp	.+2      	; 0x2df4 <LCD_PrintInteger+0x8c>
    2df2:	23 2f       	mov	r18, r19
	{
		Value -= 1000000000;
    2df4:	9a 5c       	subi	r25, 0xCA	; 202
    2df6:	aa 49       	sbci	r26, 0x9A	; 154
    2df8:	bb 43       	sbci	r27, 0x3B	; 59
    2dfa:	31 e0       	ldi	r19, 0x01	; 1
    2dfc:	32 0f       	add	r19, r18
	{
		isNegative = 1;
		Value = -Value;
	}
	
	while (Value > 1000000000)
    2dfe:	81 30       	cpi	r24, 0x01	; 1
    2e00:	4a ec       	ldi	r20, 0xCA	; 202
    2e02:	94 07       	cpc	r25, r20
    2e04:	4a e9       	ldi	r20, 0x9A	; 154
    2e06:	a4 07       	cpc	r26, r20
    2e08:	4b e3       	ldi	r20, 0x3B	; 59
    2e0a:	b4 07       	cpc	r27, r20
    2e0c:	94 f7       	brge	.-28     	; 0x2df2 <LCD_PrintInteger+0x8a>
    2e0e:	2a 83       	std	Y+2, r18	; 0x02
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    2e10:	81 15       	cp	r24, r1
    2e12:	e1 ee       	ldi	r30, 0xE1	; 225
    2e14:	9e 07       	cpc	r25, r30
    2e16:	e5 ef       	ldi	r30, 0xF5	; 245
    2e18:	ae 07       	cpc	r26, r30
    2e1a:	e5 e0       	ldi	r30, 0x05	; 5
    2e1c:	be 07       	cpc	r27, r30
    2e1e:	8c f0       	brlt	.+34     	; 0x2e42 <LCD_PrintInteger+0xda>
    2e20:	21 e3       	ldi	r18, 0x31	; 49
    2e22:	01 c0       	rjmp	.+2      	; 0x2e26 <LCD_PrintInteger+0xbe>
    2e24:	23 2f       	mov	r18, r19
	{
		Value -= 100000000;
    2e26:	91 5e       	subi	r25, 0xE1	; 225
    2e28:	a5 4f       	sbci	r26, 0xF5	; 245
    2e2a:	b5 40       	sbci	r27, 0x05	; 5
    2e2c:	31 e0       	ldi	r19, 0x01	; 1
    2e2e:	32 0f       	add	r19, r18
	{
		Value -= 1000000000;
		BCD[1]++;
	}
	
	while (Value >= 100000000)
    2e30:	81 15       	cp	r24, r1
    2e32:	f1 ee       	ldi	r31, 0xE1	; 225
    2e34:	9f 07       	cpc	r25, r31
    2e36:	f5 ef       	ldi	r31, 0xF5	; 245
    2e38:	af 07       	cpc	r26, r31
    2e3a:	f5 e0       	ldi	r31, 0x05	; 5
    2e3c:	bf 07       	cpc	r27, r31
    2e3e:	94 f7       	brge	.-28     	; 0x2e24 <LCD_PrintInteger+0xbc>
    2e40:	2b 83       	std	Y+3, r18	; 0x03
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    2e42:	80 38       	cpi	r24, 0x80	; 128
    2e44:	26 e9       	ldi	r18, 0x96	; 150
    2e46:	92 07       	cpc	r25, r18
    2e48:	28 e9       	ldi	r18, 0x98	; 152
    2e4a:	a2 07       	cpc	r26, r18
    2e4c:	b1 05       	cpc	r27, r1
    2e4e:	8c f0       	brlt	.+34     	; 0x2e72 <LCD_PrintInteger+0x10a>
    2e50:	21 e3       	ldi	r18, 0x31	; 49
    2e52:	01 c0       	rjmp	.+2      	; 0x2e56 <LCD_PrintInteger+0xee>
    2e54:	23 2f       	mov	r18, r19
	{
		Value -= 10000000;
    2e56:	80 58       	subi	r24, 0x80	; 128
    2e58:	96 49       	sbci	r25, 0x96	; 150
    2e5a:	a8 49       	sbci	r26, 0x98	; 152
    2e5c:	b1 09       	sbc	r27, r1
    2e5e:	31 e0       	ldi	r19, 0x01	; 1
    2e60:	32 0f       	add	r19, r18
	{
		Value -= 100000000;
		BCD[2]++;
	}
		
	while (Value >= 10000000)
    2e62:	80 38       	cpi	r24, 0x80	; 128
    2e64:	46 e9       	ldi	r20, 0x96	; 150
    2e66:	94 07       	cpc	r25, r20
    2e68:	48 e9       	ldi	r20, 0x98	; 152
    2e6a:	a4 07       	cpc	r26, r20
    2e6c:	b1 05       	cpc	r27, r1
    2e6e:	94 f7       	brge	.-28     	; 0x2e54 <LCD_PrintInteger+0xec>
    2e70:	2c 83       	std	Y+4, r18	; 0x04
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    2e72:	80 34       	cpi	r24, 0x40	; 64
    2e74:	e2 e4       	ldi	r30, 0x42	; 66
    2e76:	9e 07       	cpc	r25, r30
    2e78:	ef e0       	ldi	r30, 0x0F	; 15
    2e7a:	ae 07       	cpc	r26, r30
    2e7c:	b1 05       	cpc	r27, r1
    2e7e:	8c f0       	brlt	.+34     	; 0x2ea2 <LCD_PrintInteger+0x13a>
    2e80:	21 e3       	ldi	r18, 0x31	; 49
    2e82:	01 c0       	rjmp	.+2      	; 0x2e86 <LCD_PrintInteger+0x11e>
    2e84:	23 2f       	mov	r18, r19
	{
		Value -= 1000000;
    2e86:	80 54       	subi	r24, 0x40	; 64
    2e88:	92 44       	sbci	r25, 0x42	; 66
    2e8a:	af 40       	sbci	r26, 0x0F	; 15
    2e8c:	b1 09       	sbc	r27, r1
    2e8e:	31 e0       	ldi	r19, 0x01	; 1
    2e90:	32 0f       	add	r19, r18
	{
		Value -= 10000000;
		BCD[3]++;
	}
	
	while (Value >= 1000000)
    2e92:	80 34       	cpi	r24, 0x40	; 64
    2e94:	f2 e4       	ldi	r31, 0x42	; 66
    2e96:	9f 07       	cpc	r25, r31
    2e98:	ff e0       	ldi	r31, 0x0F	; 15
    2e9a:	af 07       	cpc	r26, r31
    2e9c:	b1 05       	cpc	r27, r1
    2e9e:	94 f7       	brge	.-28     	; 0x2e84 <LCD_PrintInteger+0x11c>
    2ea0:	2d 83       	std	Y+5, r18	; 0x05
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    2ea2:	80 3a       	cpi	r24, 0xA0	; 160
    2ea4:	26 e8       	ldi	r18, 0x86	; 134
    2ea6:	92 07       	cpc	r25, r18
    2ea8:	21 e0       	ldi	r18, 0x01	; 1
    2eaa:	a2 07       	cpc	r26, r18
    2eac:	b1 05       	cpc	r27, r1
    2eae:	8c f0       	brlt	.+34     	; 0x2ed2 <LCD_PrintInteger+0x16a>
    2eb0:	21 e3       	ldi	r18, 0x31	; 49
    2eb2:	01 c0       	rjmp	.+2      	; 0x2eb6 <LCD_PrintInteger+0x14e>
    2eb4:	23 2f       	mov	r18, r19
	{
		Value -= 100000;
    2eb6:	80 5a       	subi	r24, 0xA0	; 160
    2eb8:	96 48       	sbci	r25, 0x86	; 134
    2eba:	a1 40       	sbci	r26, 0x01	; 1
    2ebc:	b1 09       	sbc	r27, r1
    2ebe:	31 e0       	ldi	r19, 0x01	; 1
    2ec0:	32 0f       	add	r19, r18
	{
		Value -= 1000000;
		BCD[4]++;
	}
	
	while (Value >= 100000)
    2ec2:	80 3a       	cpi	r24, 0xA0	; 160
    2ec4:	46 e8       	ldi	r20, 0x86	; 134
    2ec6:	94 07       	cpc	r25, r20
    2ec8:	41 e0       	ldi	r20, 0x01	; 1
    2eca:	a4 07       	cpc	r26, r20
    2ecc:	b1 05       	cpc	r27, r1
    2ece:	94 f7       	brge	.-28     	; 0x2eb4 <LCD_PrintInteger+0x14c>
    2ed0:	2e 83       	std	Y+6, r18	; 0x06
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    2ed2:	80 31       	cpi	r24, 0x10	; 16
    2ed4:	e7 e2       	ldi	r30, 0x27	; 39
    2ed6:	9e 07       	cpc	r25, r30
    2ed8:	a1 05       	cpc	r26, r1
    2eda:	b1 05       	cpc	r27, r1
    2edc:	84 f0       	brlt	.+32     	; 0x2efe <LCD_PrintInteger+0x196>
    2ede:	21 e3       	ldi	r18, 0x31	; 49
    2ee0:	01 c0       	rjmp	.+2      	; 0x2ee4 <LCD_PrintInteger+0x17c>
    2ee2:	23 2f       	mov	r18, r19
	{
		Value -= 10000;
    2ee4:	80 51       	subi	r24, 0x10	; 16
    2ee6:	97 42       	sbci	r25, 0x27	; 39
    2ee8:	a1 09       	sbc	r26, r1
    2eea:	b1 09       	sbc	r27, r1
    2eec:	31 e0       	ldi	r19, 0x01	; 1
    2eee:	32 0f       	add	r19, r18
	{
		Value -= 100000;
		BCD[5]++;
	}

	while (Value >= 10000)
    2ef0:	80 31       	cpi	r24, 0x10	; 16
    2ef2:	f7 e2       	ldi	r31, 0x27	; 39
    2ef4:	9f 07       	cpc	r25, r31
    2ef6:	a1 05       	cpc	r26, r1
    2ef8:	b1 05       	cpc	r27, r1
    2efa:	9c f7       	brge	.-26     	; 0x2ee2 <LCD_PrintInteger+0x17a>
    2efc:	2f 83       	std	Y+7, r18	; 0x07
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    2efe:	88 3e       	cpi	r24, 0xE8	; 232
    2f00:	23 e0       	ldi	r18, 0x03	; 3
    2f02:	92 07       	cpc	r25, r18
    2f04:	a1 05       	cpc	r26, r1
    2f06:	b1 05       	cpc	r27, r1
    2f08:	84 f0       	brlt	.+32     	; 0x2f2a <LCD_PrintInteger+0x1c2>
    2f0a:	21 e3       	ldi	r18, 0x31	; 49
    2f0c:	01 c0       	rjmp	.+2      	; 0x2f10 <LCD_PrintInteger+0x1a8>
    2f0e:	23 2f       	mov	r18, r19
	{
		Value -= 1000;
    2f10:	88 5e       	subi	r24, 0xE8	; 232
    2f12:	93 40       	sbci	r25, 0x03	; 3
    2f14:	a1 09       	sbc	r26, r1
    2f16:	b1 09       	sbc	r27, r1
    2f18:	31 e0       	ldi	r19, 0x01	; 1
    2f1a:	32 0f       	add	r19, r18
	{
		Value -= 10000;
		BCD[6]++;
	}

	while (Value >= 1000)
    2f1c:	88 3e       	cpi	r24, 0xE8	; 232
    2f1e:	43 e0       	ldi	r20, 0x03	; 3
    2f20:	94 07       	cpc	r25, r20
    2f22:	a1 05       	cpc	r26, r1
    2f24:	b1 05       	cpc	r27, r1
    2f26:	9c f7       	brge	.-26     	; 0x2f0e <LCD_PrintInteger+0x1a6>
    2f28:	28 87       	std	Y+8, r18	; 0x08
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    2f2a:	84 36       	cpi	r24, 0x64	; 100
    2f2c:	91 05       	cpc	r25, r1
    2f2e:	a1 05       	cpc	r26, r1
    2f30:	b1 05       	cpc	r27, r1
    2f32:	7c f0       	brlt	.+30     	; 0x2f52 <LCD_PrintInteger+0x1ea>
    2f34:	21 e3       	ldi	r18, 0x31	; 49
    2f36:	01 c0       	rjmp	.+2      	; 0x2f3a <LCD_PrintInteger+0x1d2>
    2f38:	23 2f       	mov	r18, r19
	{
		Value -= 100;
    2f3a:	84 56       	subi	r24, 0x64	; 100
    2f3c:	91 09       	sbc	r25, r1
    2f3e:	a1 09       	sbc	r26, r1
    2f40:	b1 09       	sbc	r27, r1
    2f42:	31 e0       	ldi	r19, 0x01	; 1
    2f44:	32 0f       	add	r19, r18
	{
		Value -= 1000;
		BCD[7]++;
	}
	
	while (Value >= 100)
    2f46:	84 36       	cpi	r24, 0x64	; 100
    2f48:	91 05       	cpc	r25, r1
    2f4a:	a1 05       	cpc	r26, r1
    2f4c:	b1 05       	cpc	r27, r1
    2f4e:	a4 f7       	brge	.-24     	; 0x2f38 <LCD_PrintInteger+0x1d0>
    2f50:	29 87       	std	Y+9, r18	; 0x09
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    2f52:	8a 30       	cpi	r24, 0x0A	; 10
    2f54:	91 05       	cpc	r25, r1
    2f56:	a1 05       	cpc	r26, r1
    2f58:	b1 05       	cpc	r27, r1
    2f5a:	74 f0       	brlt	.+28     	; 0x2f78 <LCD_PrintInteger+0x210>
    2f5c:	21 e3       	ldi	r18, 0x31	; 49
    2f5e:	01 c0       	rjmp	.+2      	; 0x2f62 <LCD_PrintInteger+0x1fa>
    2f60:	23 2f       	mov	r18, r19
	{
		Value -= 10;
    2f62:	0a 97       	sbiw	r24, 0x0a	; 10
    2f64:	a1 09       	sbc	r26, r1
    2f66:	b1 09       	sbc	r27, r1
    2f68:	31 e0       	ldi	r19, 0x01	; 1
    2f6a:	32 0f       	add	r19, r18
	{
		Value -= 100;
		BCD[8]++;
	}
	
	while (Value >= 10)
    2f6c:	8a 30       	cpi	r24, 0x0A	; 10
    2f6e:	91 05       	cpc	r25, r1
    2f70:	a1 05       	cpc	r26, r1
    2f72:	b1 05       	cpc	r27, r1
    2f74:	ac f7       	brge	.-22     	; 0x2f60 <LCD_PrintInteger+0x1f8>
    2f76:	2a 87       	std	Y+10, r18	; 0x0a
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    2f78:	18 16       	cp	r1, r24
    2f7a:	19 06       	cpc	r1, r25
    2f7c:	1a 06       	cpc	r1, r26
    2f7e:	1b 06       	cpc	r1, r27
    2f80:	0c f0       	brlt	.+2      	; 0x2f84 <LCD_PrintInteger+0x21c>
    2f82:	3c c0       	rjmp	.+120    	; 0x2ffc <LCD_PrintInteger+0x294>
    2f84:	ac 01       	movw	r20, r24
    2f86:	bd 01       	movw	r22, r26
	{
		Value -= 1;
    2f88:	41 50       	subi	r20, 0x01	; 1
    2f8a:	51 09       	sbc	r21, r1
    2f8c:	61 09       	sbc	r22, r1
    2f8e:	71 09       	sbc	r23, r1
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    2f90:	d9 f7       	brne	.-10     	; 0x2f88 <LCD_PrintInteger+0x220>
    2f92:	80 5d       	subi	r24, 0xD0	; 208
    2f94:	8b 87       	std	Y+11, r24	; 0x0b
    2f96:	32 c0       	rjmp	.+100    	; 0x2ffc <LCD_PrintInteger+0x294>
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
		i++;
    2f98:	98 2f       	mov	r25, r24
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	89 0f       	add	r24, r25
		BCD[10]++;
	}

	uint8_t i = 0;
	//Find first non zero digit
	while (BCD[i] == '0')
    2f9e:	e1 e0       	ldi	r30, 0x01	; 1
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	ec 0f       	add	r30, r28
    2fa4:	fd 1f       	adc	r31, r29
    2fa6:	e8 0f       	add	r30, r24
    2fa8:	f1 1d       	adc	r31, r1
    2faa:	20 81       	ld	r18, Z
    2fac:	20 33       	cpi	r18, 0x30	; 48
    2fae:	a1 f3       	breq	.-24     	; 0x2f98 <LCD_PrintInteger+0x230>
		i++;

	//Add sign 
	if (isNegative)
    2fb0:	11 23       	and	r17, r17
    2fb2:	31 f0       	breq	.+12     	; 0x2fc0 <LCD_PrintInteger+0x258>
	{
		i--;
		BCD[i] = '-';
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	e9 0f       	add	r30, r25
    2fb8:	f1 1d       	adc	r31, r1
    2fba:	8d e2       	ldi	r24, 0x2D	; 45
    2fbc:	81 83       	std	Z+1, r24	; 0x01
    2fbe:	89 2f       	mov	r24, r25
	}

	//Shift array
	uint8_t end = 10 - i;
    2fc0:	4a e0       	ldi	r20, 0x0A	; 10
    2fc2:	48 1b       	sub	r20, r24
	uint8_t offset = i;
	i = 0;
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
	while (i <= end)
	{
		BCD[i] = BCD[i + offset];
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	e1 e0       	ldi	r30, 0x01	; 1
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	ec 0f       	add	r30, r28
    2fce:	fd 1f       	adc	r31, r29
    2fd0:	e2 0f       	add	r30, r18
    2fd2:	f1 1d       	adc	r31, r1
    2fd4:	df 01       	movw	r26, r30
    2fd6:	a8 0f       	add	r26, r24
    2fd8:	b9 1f       	adc	r27, r25
    2fda:	3c 91       	ld	r19, X
    2fdc:	30 83       	st	Z, r19
		i++;
    2fde:	2f 5f       	subi	r18, 0xFF	; 255

	//Shift array
	uint8_t end = 10 - i;
	uint8_t offset = i;
	i = 0;
	while (i <= end)
    2fe0:	42 17       	cp	r20, r18
    2fe2:	90 f7       	brcc	.-28     	; 0x2fc8 <LCD_PrintInteger+0x260>
	{
		BCD[i] = BCD[i + offset];
		i++;
	}
	BCD[i] = '\0';
    2fe4:	e1 e0       	ldi	r30, 0x01	; 1
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	ec 0f       	add	r30, r28
    2fea:	fd 1f       	adc	r31, r29
    2fec:	e2 0f       	add	r30, r18
    2fee:	f1 1d       	adc	r31, r1
    2ff0:	10 82       	st	Z, r1
		
		//Convert integer to array (returns in reversed order)
		Int2bcd(Value, arr);
		
		//Print
		LCD_PrintString(arr);
    2ff2:	ce 01       	movw	r24, r28
    2ff4:	01 96       	adiw	r24, 0x01	; 1
    2ff6:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_PrintString>
	}
}
    2ffa:	02 c0       	rjmp	.+4      	; 0x3000 <LCD_PrintInteger+0x298>
	{
		Value -= 10;
		BCD[9]++;
	}

	while (Value >= 1)
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	cd cf       	rjmp	.-102    	; 0x2f9a <LCD_PrintInteger+0x232>
		Int2bcd(Value, arr);
		
		//Print
		LCD_PrintString(arr);
	}
}
    3000:	2c 96       	adiw	r28, 0x0c	; 12
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	df 91       	pop	r29
    300e:	cf 91       	pop	r28
    3010:	1f 91       	pop	r17
    3012:	08 95       	ret

00003014 <put_on_Cycle_buffer>:
uint8_t append_string_with_limits(char *string, char *string_to_append, char max_size){
	
	char *p = string + strlen(string);
	strcpy(p, string_to_append);
	return 1;
}
    3014:	f9 01       	movw	r30, r18
    3016:	a1 81       	ldd	r26, Z+1	; 0x01
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	11 96       	adiw	r26, 0x01	; 1
    301c:	aa 0f       	add	r26, r26
    301e:	bb 1f       	adc	r27, r27
    3020:	a2 0f       	add	r26, r18
    3022:	b3 1f       	adc	r27, r19
    3024:	11 96       	adiw	r26, 0x01	; 1
    3026:	9c 93       	st	X, r25
    3028:	8e 93       	st	-X, r24
    302a:	81 81       	ldd	r24, Z+1	; 0x01
    302c:	d9 01       	movw	r26, r18
    302e:	94 e0       	ldi	r25, 0x04	; 4
    3030:	89 9f       	mul	r24, r25
    3032:	a0 0d       	add	r26, r0
    3034:	b1 1d       	adc	r27, r1
    3036:	11 24       	eor	r1, r1
    3038:	9a 96       	adiw	r26, 0x2a	; 42
    303a:	4d 93       	st	X+, r20
    303c:	5d 93       	st	X+, r21
    303e:	6d 93       	st	X+, r22
    3040:	7c 93       	st	X, r23
    3042:	9d 97       	sbiw	r26, 0x2d	; 45
    3044:	81 81       	ldd	r24, Z+1	; 0x01
    3046:	8f 5f       	subi	r24, 0xFF	; 255
    3048:	81 83       	std	Z+1, r24	; 0x01
    304a:	81 81       	ldd	r24, Z+1	; 0x01
    304c:	84 31       	cpi	r24, 0x14	; 20
    304e:	08 f0       	brcs	.+2      	; 0x3052 <put_on_Cycle_buffer+0x3e>
    3050:	11 82       	std	Z+1, r1	; 0x01
    3052:	91 81       	ldd	r25, Z+1	; 0x01
    3054:	80 81       	ld	r24, Z
    3056:	98 13       	cpse	r25, r24
    3058:	07 c0       	rjmp	.+14     	; 0x3068 <put_on_Cycle_buffer+0x54>
    305a:	80 81       	ld	r24, Z
    305c:	8f 5f       	subi	r24, 0xFF	; 255
    305e:	80 83       	st	Z, r24
    3060:	80 81       	ld	r24, Z
    3062:	84 31       	cpi	r24, 0x14	; 20
    3064:	08 f0       	brcs	.+2      	; 0x3068 <put_on_Cycle_buffer+0x54>
    3066:	10 82       	st	Z, r1
    3068:	08 95       	ret

0000306a <get_from_Cycle_buffer>:
    306a:	cf 93       	push	r28
    306c:	df 93       	push	r29
    306e:	ec 01       	movw	r28, r24
    3070:	fa 01       	movw	r30, r20
    3072:	20 81       	ld	r18, Z
    3074:	91 81       	ldd	r25, Z+1	; 0x01
    3076:	29 17       	cp	r18, r25
    3078:	31 f1       	breq	.+76     	; 0x30c6 <get_from_Cycle_buffer+0x5c>
    307a:	a0 81       	ld	r26, Z
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	11 96       	adiw	r26, 0x01	; 1
    3080:	aa 0f       	add	r26, r26
    3082:	bb 1f       	adc	r27, r27
    3084:	a4 0f       	add	r26, r20
    3086:	b5 1f       	adc	r27, r21
    3088:	8d 91       	ld	r24, X+
    308a:	9c 91       	ld	r25, X
    308c:	99 83       	std	Y+1, r25	; 0x01
    308e:	88 83       	st	Y, r24
    3090:	80 81       	ld	r24, Z
    3092:	da 01       	movw	r26, r20
    3094:	94 e0       	ldi	r25, 0x04	; 4
    3096:	89 9f       	mul	r24, r25
    3098:	a0 0d       	add	r26, r0
    309a:	b1 1d       	adc	r27, r1
    309c:	11 24       	eor	r1, r1
    309e:	9a 96       	adiw	r26, 0x2a	; 42
    30a0:	8d 91       	ld	r24, X+
    30a2:	9d 91       	ld	r25, X+
    30a4:	0d 90       	ld	r0, X+
    30a6:	bc 91       	ld	r27, X
    30a8:	a0 2d       	mov	r26, r0
    30aa:	eb 01       	movw	r28, r22
    30ac:	88 83       	st	Y, r24
    30ae:	99 83       	std	Y+1, r25	; 0x01
    30b0:	aa 83       	std	Y+2, r26	; 0x02
    30b2:	bb 83       	std	Y+3, r27	; 0x03
    30b4:	80 81       	ld	r24, Z
    30b6:	8f 5f       	subi	r24, 0xFF	; 255
    30b8:	80 83       	st	Z, r24
    30ba:	80 81       	ld	r24, Z
    30bc:	84 31       	cpi	r24, 0x14	; 20
    30be:	28 f0       	brcs	.+10     	; 0x30ca <get_from_Cycle_buffer+0x60>
    30c0:	10 82       	st	Z, r1
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	03 c0       	rjmp	.+6      	; 0x30cc <get_from_Cycle_buffer+0x62>
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	01 c0       	rjmp	.+2      	; 0x30cc <get_from_Cycle_buffer+0x62>
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	df 91       	pop	r29
    30ce:	cf 91       	pop	r28
    30d0:	08 95       	ret

000030d2 <USART_Init>:
    30d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    30d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    30da:	e0 ec       	ldi	r30, 0xC0	; 192
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	82 60       	ori	r24, 0x02	; 2
    30e2:	80 83       	st	Z, r24
    30e4:	88 e1       	ldi	r24, 0x18	; 24
    30e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    30ea:	86 e0       	ldi	r24, 0x06	; 6
    30ec:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    30f0:	08 95       	ret

000030f2 <USART_Transmit>:
    30f2:	e0 ec       	ldi	r30, 0xC0	; 192
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	90 81       	ld	r25, Z
    30f8:	95 ff       	sbrs	r25, 5
    30fa:	fd cf       	rjmp	.-6      	; 0x30f6 <USART_Transmit+0x4>
    30fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    3100:	08 95       	ret

00003102 <uart_puts>:
    3102:	cf 93       	push	r28
    3104:	df 93       	push	r29
    3106:	ec 01       	movw	r28, r24
    3108:	88 81       	ld	r24, Y
    310a:	88 23       	and	r24, r24
    310c:	31 f0       	breq	.+12     	; 0x311a <uart_puts+0x18>
    310e:	21 96       	adiw	r28, 0x01	; 1
    3110:	0e 94 79 18 	call	0x30f2	; 0x30f2 <USART_Transmit>
    3114:	89 91       	ld	r24, Y+
    3116:	81 11       	cpse	r24, r1
    3118:	fb cf       	rjmp	.-10     	; 0x3110 <uart_puts+0xe>
    311a:	df 91       	pop	r29
    311c:	cf 91       	pop	r28
    311e:	08 95       	ret

00003120 <uart_puts_P>:
    3120:	cf 93       	push	r28
    3122:	df 93       	push	r29
    3124:	ec 01       	movw	r28, r24
    3126:	fc 01       	movw	r30, r24
    3128:	84 91       	lpm	r24, Z
    312a:	88 23       	and	r24, r24
    312c:	49 f0       	breq	.+18     	; 0x3140 <uart_puts_P+0x20>
    312e:	fe 01       	movw	r30, r28
    3130:	21 96       	adiw	r28, 0x01	; 1
    3132:	84 91       	lpm	r24, Z
    3134:	0e 94 79 18 	call	0x30f2	; 0x30f2 <USART_Transmit>
    3138:	fe 01       	movw	r30, r28
    313a:	84 91       	lpm	r24, Z
    313c:	81 11       	cpse	r24, r1
    313e:	f7 cf       	rjmp	.-18     	; 0x312e <uart_puts_P+0xe>
    3140:	df 91       	pop	r29
    3142:	cf 91       	pop	r28
    3144:	08 95       	ret

00003146 <uart_puts_rn_P>:
    3146:	0e 94 90 18 	call	0x3120	; 0x3120 <uart_puts_P>
    314a:	8a e2       	ldi	r24, 0x2A	; 42
    314c:	91 e0       	ldi	r25, 0x01	; 1
    314e:	0e 94 90 18 	call	0x3120	; 0x3120 <uart_puts_P>
    3152:	08 95       	ret

00003154 <uart_puts_with_length>:
    3154:	0f 93       	push	r16
    3156:	1f 93       	push	r17
    3158:	cf 93       	push	r28
    315a:	df 93       	push	r29
    315c:	fc 01       	movw	r30, r24
    315e:	eb 01       	movw	r28, r22
    3160:	80 81       	ld	r24, Z
    3162:	88 23       	and	r24, r24
    3164:	79 f0       	breq	.+30     	; 0x3184 <uart_puts_with_length+0x30>
    3166:	20 97       	sbiw	r28, 0x00	; 0
    3168:	69 f0       	breq	.+26     	; 0x3184 <uart_puts_with_length+0x30>
    316a:	8f 01       	movw	r16, r30
    316c:	0f 5f       	subi	r16, 0xFF	; 255
    316e:	1f 4f       	sbci	r17, 0xFF	; 255
    3170:	0e 94 79 18 	call	0x30f2	; 0x30f2 <USART_Transmit>
    3174:	21 97       	sbiw	r28, 0x01	; 1
    3176:	f8 01       	movw	r30, r16
    3178:	81 91       	ld	r24, Z+
    317a:	8f 01       	movw	r16, r30
    317c:	88 23       	and	r24, r24
    317e:	11 f0       	breq	.+4      	; 0x3184 <uart_puts_with_length+0x30>
    3180:	20 97       	sbiw	r28, 0x00	; 0
    3182:	b1 f7       	brne	.-20     	; 0x3170 <uart_puts_with_length+0x1c>
    3184:	df 91       	pop	r29
    3186:	cf 91       	pop	r28
    3188:	1f 91       	pop	r17
    318a:	0f 91       	pop	r16
    318c:	08 95       	ret

0000318e <uart_puts_rn>:
    318e:	0e 94 81 18 	call	0x3102	; 0x3102 <uart_puts>
    3192:	81 eb       	ldi	r24, 0xB1	; 177
    3194:	91 e0       	ldi	r25, 0x01	; 1
    3196:	0e 94 81 18 	call	0x3102	; 0x3102 <uart_puts>
    319a:	08 95       	ret

0000319c <Sent_error_message_P>:
    319c:	0f 93       	push	r16
    319e:	1f 93       	push	r17
    31a0:	cf 93       	push	r28
    31a2:	df 93       	push	r29
    31a4:	00 d0       	rcall	.+0      	; 0x31a6 <Sent_error_message_P+0xa>
    31a6:	00 d0       	rcall	.+0      	; 0x31a8 <Sent_error_message_P+0xc>
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    31ac:	8b 01       	movw	r16, r22
    31ae:	81 11       	cpse	r24, r1
    31b0:	08 c0       	rjmp	.+16     	; 0x31c2 <Sent_error_message_P+0x26>
    31b2:	cb 01       	movw	r24, r22
    31b4:	0e 94 90 18 	call	0x3120	; 0x3120 <uart_puts_P>
    31b8:	83 e1       	ldi	r24, 0x13	; 19
    31ba:	91 e0       	ldi	r25, 0x01	; 1
    31bc:	0e 94 a3 18 	call	0x3146	; 0x3146 <uart_puts_rn_P>
    31c0:	12 c0       	rjmp	.+36     	; 0x31e6 <Sent_error_message_P+0x4a>
    31c2:	4a e0       	ldi	r20, 0x0A	; 10
    31c4:	be 01       	movw	r22, r28
    31c6:	6f 5f       	subi	r22, 0xFF	; 255
    31c8:	7f 4f       	sbci	r23, 0xFF	; 255
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__itoa_ncheck>
    31d0:	c8 01       	movw	r24, r16
    31d2:	0e 94 90 18 	call	0x3120	; 0x3120 <uart_puts_P>
    31d6:	8d ef       	ldi	r24, 0xFD	; 253
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	0e 94 90 18 	call	0x3120	; 0x3120 <uart_puts_P>
    31de:	ce 01       	movw	r24, r28
    31e0:	01 96       	adiw	r24, 0x01	; 1
    31e2:	0e 94 c7 18 	call	0x318e	; 0x318e <uart_puts_rn>
    31e6:	0f 90       	pop	r0
    31e8:	0f 90       	pop	r0
    31ea:	0f 90       	pop	r0
    31ec:	0f 90       	pop	r0
    31ee:	df 91       	pop	r29
    31f0:	cf 91       	pop	r28
    31f2:	1f 91       	pop	r17
    31f4:	0f 91       	pop	r16
    31f6:	08 95       	ret

000031f8 <init_timer>:
    31f8:	82 e0       	ldi	r24, 0x02	; 2
    31fa:	84 bd       	out	0x24, r24	; 36
    31fc:	95 e0       	ldi	r25, 0x05	; 5
    31fe:	95 bd       	out	0x25, r25	; 37
    3200:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    3204:	8c e7       	ldi	r24, 0x7C	; 124
    3206:	87 bd       	out	0x27, r24	; 39
    3208:	78 94       	sei
    320a:	08 95       	ret

0000320c <adc_init>:
    320c:	85 ec       	ldi	r24, 0xC5	; 197
    320e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    3212:	87 e8       	ldi	r24, 0x87	; 135
    3214:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3218:	08 95       	ret

0000321a <start_conversion_asynchro>:
    321a:	ea e7       	ldi	r30, 0x7A	; 122
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	80 81       	ld	r24, Z
    3220:	88 60       	ori	r24, 0x08	; 8
    3222:	80 83       	st	Z, r24
    3224:	80 81       	ld	r24, Z
    3226:	80 64       	ori	r24, 0x40	; 64
    3228:	80 83       	st	Z, r24
    322a:	08 95       	ret

0000322c <__vector_21>:
    322c:	1f 92       	push	r1
    322e:	0f 92       	push	r0
    3230:	0f b6       	in	r0, 0x3f	; 63
    3232:	0f 92       	push	r0
    3234:	11 24       	eor	r1, r1
    3236:	2f 93       	push	r18
    3238:	3f 93       	push	r19
    323a:	4f 93       	push	r20
    323c:	5f 93       	push	r21
    323e:	6f 93       	push	r22
    3240:	7f 93       	push	r23
    3242:	8f 93       	push	r24
    3244:	9f 93       	push	r25
    3246:	af 93       	push	r26
    3248:	bf 93       	push	r27
    324a:	ef 93       	push	r30
    324c:	ff 93       	push	r31
    324e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    3252:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    3256:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <adc_result+0x1>
    325a:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <adc_result>
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <flag_adc_conversion_done>
    3264:	40 91 d2 01 	lds	r20, 0x01D2	; 0x8001d2 <licznik_32bit>
    3268:	50 91 d3 01 	lds	r21, 0x01D3	; 0x8001d3 <licznik_32bit+0x1>
    326c:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <licznik_32bit+0x2>
    3270:	70 91 d5 01 	lds	r23, 0x01D5	; 0x8001d5 <licznik_32bit+0x3>
    3274:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <adc_result>
    3278:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <adc_result+0x1>
    327c:	24 ef       	ldi	r18, 0xF4	; 244
    327e:	34 e0       	ldi	r19, 0x04	; 4
    3280:	0e 94 0a 18 	call	0x3014	; 0x3014 <put_on_Cycle_buffer>
    3284:	ff 91       	pop	r31
    3286:	ef 91       	pop	r30
    3288:	bf 91       	pop	r27
    328a:	af 91       	pop	r26
    328c:	9f 91       	pop	r25
    328e:	8f 91       	pop	r24
    3290:	7f 91       	pop	r23
    3292:	6f 91       	pop	r22
    3294:	5f 91       	pop	r21
    3296:	4f 91       	pop	r20
    3298:	3f 91       	pop	r19
    329a:	2f 91       	pop	r18
    329c:	0f 90       	pop	r0
    329e:	0f be       	out	0x3f, r0	; 63
    32a0:	0f 90       	pop	r0
    32a2:	1f 90       	pop	r1
    32a4:	18 95       	reti

000032a6 <__vector_14>:
    32a6:	1f 92       	push	r1
    32a8:	0f 92       	push	r0
    32aa:	0f b6       	in	r0, 0x3f	; 63
    32ac:	0f 92       	push	r0
    32ae:	11 24       	eor	r1, r1
    32b0:	2f 93       	push	r18
    32b2:	3f 93       	push	r19
    32b4:	4f 93       	push	r20
    32b6:	5f 93       	push	r21
    32b8:	6f 93       	push	r22
    32ba:	7f 93       	push	r23
    32bc:	8f 93       	push	r24
    32be:	9f 93       	push	r25
    32c0:	af 93       	push	r26
    32c2:	bf 93       	push	r27
    32c4:	ef 93       	push	r30
    32c6:	ff 93       	push	r31
    32c8:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <licznik>
    32cc:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <licznik+0x1>
    32d0:	01 96       	adiw	r24, 0x01	; 1
    32d2:	90 93 6f 05 	sts	0x056F, r25	; 0x80056f <licznik+0x1>
    32d6:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <licznik>
    32da:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <licznik_32bit>
    32de:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <licznik_32bit+0x1>
    32e2:	a0 91 d4 01 	lds	r26, 0x01D4	; 0x8001d4 <licznik_32bit+0x2>
    32e6:	b0 91 d5 01 	lds	r27, 0x01D5	; 0x8001d5 <licznik_32bit+0x3>
    32ea:	01 96       	adiw	r24, 0x01	; 1
    32ec:	a1 1d       	adc	r26, r1
    32ee:	b1 1d       	adc	r27, r1
    32f0:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <licznik_32bit>
    32f4:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <licznik_32bit+0x1>
    32f8:	a0 93 d4 01 	sts	0x01D4, r26	; 0x8001d4 <licznik_32bit+0x2>
    32fc:	b0 93 d5 01 	sts	0x01D5, r27	; 0x8001d5 <licznik_32bit+0x3>
    3300:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <licznik>
    3304:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <licznik+0x1>
    3308:	8d 37       	cpi	r24, 0x7D	; 125
    330a:	91 05       	cpc	r25, r1
    330c:	30 f0       	brcs	.+12     	; 0x331a <__vector_14+0x74>
    330e:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <licznik+0x1>
    3312:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <licznik>
    3316:	0e 94 0d 19 	call	0x321a	; 0x321a <start_conversion_asynchro>
    331a:	ff 91       	pop	r31
    331c:	ef 91       	pop	r30
    331e:	bf 91       	pop	r27
    3320:	af 91       	pop	r26
    3322:	9f 91       	pop	r25
    3324:	8f 91       	pop	r24
    3326:	7f 91       	pop	r23
    3328:	6f 91       	pop	r22
    332a:	5f 91       	pop	r21
    332c:	4f 91       	pop	r20
    332e:	3f 91       	pop	r19
    3330:	2f 91       	pop	r18
    3332:	0f 90       	pop	r0
    3334:	0f be       	out	0x3f, r0	; 63
    3336:	0f 90       	pop	r0
    3338:	1f 90       	pop	r1
    333a:	18 95       	reti

0000333c <append_string>:
    333c:	fc 01       	movw	r30, r24
    333e:	01 90       	ld	r0, Z+
    3340:	00 20       	and	r0, r0
    3342:	e9 f7       	brne	.-6      	; 0x333e <append_string+0x2>
    3344:	cf 01       	movw	r24, r30
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <strcpy>
    334c:	08 95       	ret

0000334e <main>:
				uint32_t licznik2;
				uint16_t adc2;
				//char string_to_sd3[64];
				uint8_t Error2;
int main (void) // clock 16 Mhz
{
    334e:	cf 93       	push	r28
    3350:	df 93       	push	r29
    3352:	cd b7       	in	r28, 0x3d	; 61
    3354:	de b7       	in	r29, 0x3e	; 62
    3356:	ce 5b       	subi	r28, 0xBE	; 190
    3358:	d1 09       	sbc	r29, r1
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
	//PORTC &= ~(1<<PORTC5);

	LCD_Setup();
    3364:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <LCD_Setup>
		
	//Print
	uint8_t line;
	for (line = 0; line < 2; line++)
	{
		LCD_GotoXY(0, line);
    3368:	60 e0       	ldi	r22, 0x00	; 0
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <LCD_GotoXY>
		LCD_PrintString("Line: ");
    3370:	8a e9       	ldi	r24, 0x9A	; 154
    3372:	91 e0       	ldi	r25, 0x01	; 1
    3374:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_PrintString>
		LCD_PrintInteger(timer);
    3378:	60 e0       	ldi	r22, 0x00	; 0
    337a:	70 e0       	ldi	r23, 0x00	; 0
    337c:	cb 01       	movw	r24, r22
    337e:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <LCD_PrintInteger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3382:	2f ef       	ldi	r18, 0xFF	; 255
    3384:	89 e6       	ldi	r24, 0x69	; 105
    3386:	98 e1       	ldi	r25, 0x18	; 24
    3388:	21 50       	subi	r18, 0x01	; 1
    338a:	80 40       	sbci	r24, 0x00	; 0
    338c:	90 40       	sbci	r25, 0x00	; 0
    338e:	e1 f7       	brne	.-8      	; 0x3388 <main+0x3a>
    3390:	00 c0       	rjmp	.+0      	; 0x3392 <main+0x44>
    3392:	00 00       	nop
		
	//Print
	uint8_t line;
	for (line = 0; line < 2; line++)
	{
		LCD_GotoXY(0, line);
    3394:	61 e0       	ldi	r22, 0x01	; 1
    3396:	80 e0       	ldi	r24, 0x00	; 0
    3398:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <LCD_GotoXY>
		LCD_PrintString("Line: ");
    339c:	8a e9       	ldi	r24, 0x9A	; 154
    339e:	91 e0       	ldi	r25, 0x01	; 1
    33a0:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_PrintString>
		LCD_PrintInteger(timer);
    33a4:	61 e0       	ldi	r22, 0x01	; 1
    33a6:	70 e0       	ldi	r23, 0x00	; 0
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <LCD_PrintInteger>
    33b0:	ef ef       	ldi	r30, 0xFF	; 255
    33b2:	f9 e6       	ldi	r31, 0x69	; 105
    33b4:	28 e1       	ldi	r18, 0x18	; 24
    33b6:	e1 50       	subi	r30, 0x01	; 1
    33b8:	f0 40       	sbci	r31, 0x00	; 0
    33ba:	20 40       	sbci	r18, 0x00	; 0
    33bc:	e1 f7       	brne	.-8      	; 0x33b6 <main+0x68>
    33be:	00 c0       	rjmp	.+0      	; 0x33c0 <main+0x72>
    33c0:	00 00       	nop
    33c2:	8f ef       	ldi	r24, 0xFF	; 255
    33c4:	99 e6       	ldi	r25, 0x69	; 105
    33c6:	e8 e1       	ldi	r30, 0x18	; 24
    33c8:	81 50       	subi	r24, 0x01	; 1
    33ca:	90 40       	sbci	r25, 0x00	; 0
    33cc:	e0 40       	sbci	r30, 0x00	; 0
    33ce:	e1 f7       	brne	.-8      	; 0x33c8 <main+0x7a>
    33d0:	00 c0       	rjmp	.+0      	; 0x33d2 <main+0x84>
    33d2:	00 00       	nop


	//CLKPR  = 1<<CLKPCE; //change clock to 8 Mhz
	//CLKPR  = 1<<CLKPS0;
	//USART_Init_Baud_Rate( 38400 ); // do not work at very high baud rate
	USART_Init(1); //Use this when you want to get very very high baud rate
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	0e 94 69 18 	call	0x30d2	; 0x30d2 <USART_Init>


	//uart_puts_rn("Arduino Booted");
	//uart_puts_P(PSTR("\r\n Arduino Booted \r\n"));
	uart_puts_rn_P(PSTR("\r\n Arduino Booted"));
    33dc:	8b ee       	ldi	r24, 0xEB	; 235
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	0e 94 a3 18 	call	0x3146	; 0x3146 <uart_puts_rn_P>
	adc_init();
    33e4:	0e 94 06 19 	call	0x320c	; 0x320c <adc_init>
// 	while(1){
// 		_delay_ms(500);
// 		start_conversion_synchro();
// 	}
	
init_timer();
    33e8:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <init_timer>
    33ec:	ff ef       	ldi	r31, 0xFF	; 255
    33ee:	23 e2       	ldi	r18, 0x23	; 35
    33f0:	84 ef       	ldi	r24, 0xF4	; 244
    33f2:	f1 50       	subi	r31, 0x01	; 1
    33f4:	20 40       	sbci	r18, 0x00	; 0
    33f6:	80 40       	sbci	r24, 0x00	; 0
    33f8:	e1 f7       	brne	.-8      	; 0x33f2 <main+0xa4>
    33fa:	00 c0       	rjmp	.+0      	; 0x33fc <main+0xae>
    33fc:	00 00       	nop
	//SET_LED_ON();
	_delay_ms(5000);
	//SET_LED_OFF();

	FRESULT fr;
	f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
    33fe:	40 e0       	ldi	r20, 0x00	; 0
    3400:	63 eb       	ldi	r22, 0xB3	; 179
    3402:	71 e0       	ldi	r23, 0x01	; 1
    3404:	87 ed       	ldi	r24, 0xD7	; 215
    3406:	91 e0       	ldi	r25, 0x01	; 1
    3408:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <f_mount>
// }
// 
// 
// 
 	//fr = f_open(&Fil, "WRITE2.TXT", FA_WRITE | FA_OPEN_APPEND | FA_READ);	/* Create a file */
	 fr = f_open(&Fil, "WRITE2.TXT", FA_WRITE | FA_CREATE_ALWAYS );
    340c:	4a e0       	ldi	r20, 0x0A	; 10
    340e:	61 ea       	ldi	r22, 0xA1	; 161
    3410:	71 e0       	ldi	r23, 0x01	; 1
    3412:	80 e7       	ldi	r24, 0x70	; 112
    3414:	95 e0       	ldi	r25, 0x05	; 5
    3416:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <f_open>
    341a:	18 2f       	mov	r17, r24
 	//Sent_error_message(fr, "File open WRITE2.TXT");
	Sent_error_message_P(fr, PSTR("File open WRITE2.TXT"));
    341c:	66 ed       	ldi	r22, 0xD6	; 214
    341e:	70 e0       	ldi	r23, 0x00	; 0
    3420:	0e 94 ce 18 	call	0x319c	; 0x319c <Sent_error_message_P>
 	if (fr == FR_OK) {
    3424:	11 11       	cpse	r17, r1
    3426:	3a c0       	rjmp	.+116    	; 0x349c <main+0x14e>
// 		//if (fr == FR_OK && Bytes_Written == 11) {		/* Lights green LED if data written well */
// 		//	uart_puts_rn("Write to file succesfully");
// 			//DDRB |= (1<<5); PORTB |= (1<<5);	/* Set PB4 high */
// 		//}
// 		
 		fr = f_rewind(&Fil);
    3428:	40 e0       	ldi	r20, 0x00	; 0
    342a:	50 e0       	ldi	r21, 0x00	; 0
    342c:	ba 01       	movw	r22, r20
    342e:	80 e7       	ldi	r24, 0x70	; 112
    3430:	95 e0       	ldi	r25, 0x05	; 5
    3432:	0e 94 18 14 	call	0x2830	; 0x2830 <f_lseek>
		//Sent_error_message(fr, "Rewind file");
		Sent_error_message_P(fr, PSTR("Rewind file"));
    3436:	6a ec       	ldi	r22, 0xCA	; 202
    3438:	70 e0       	ldi	r23, 0x00	; 0
    343a:	0e 94 ce 18 	call	0x319c	; 0x319c <Sent_error_message_P>
 		
		UINT Bytes_to_read = 128;
		UINT Bytes_readed = 0;
    343e:	c9 54       	subi	r28, 0x49	; 73
    3440:	df 4f       	sbci	r29, 0xFF	; 255
    3442:	19 82       	std	Y+1, r1	; 0x01
    3444:	18 82       	st	Y, r1
    3446:	c7 5b       	subi	r28, 0xB7	; 183
    3448:	d0 40       	sbci	r29, 0x00	; 0
		do 
		{
			
			BYTE Buff[150];

			fr = f_read ( &Fil, Buff, Bytes_to_read, &Bytes_readed);
    344a:	9e 01       	movw	r18, r28
    344c:	29 54       	subi	r18, 0x49	; 73
    344e:	3f 4f       	sbci	r19, 0xFF	; 255
    3450:	40 e8       	ldi	r20, 0x80	; 128
    3452:	50 e0       	ldi	r21, 0x00	; 0
    3454:	be 01       	movw	r22, r28
    3456:	6f 5f       	subi	r22, 0xFF	; 255
    3458:	7f 4f       	sbci	r23, 0xFF	; 255
    345a:	80 e7       	ldi	r24, 0x70	; 112
    345c:	95 e0       	ldi	r25, 0x05	; 5
    345e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <f_read>
			//Sent_error_message(fr, "Read file");
			//if(fr) Sent_error_message(fr, "Read file");
			if(fr) Sent_error_message_P(fr, PSTR("Read file"));
    3462:	88 23       	and	r24, r24
    3464:	09 f4       	brne	.+2      	; 0x3468 <main+0x11a>
    3466:	0c c1       	rjmp	.+536    	; 0x3680 <main+0x332>
    3468:	60 ec       	ldi	r22, 0xC0	; 192
    346a:	70 e0       	ldi	r23, 0x00	; 0
    346c:	0e 94 ce 18 	call	0x319c	; 0x319c <Sent_error_message_P>
    3470:	0d c0       	rjmp	.+26     	; 0x348c <main+0x13e>
				
				//uart_puts_rn("Bytes Readed: ");
				uart_puts_with_length((char*)(Buff), Bytes_readed);
				//uart_puts_rn("");
				if(Bytes_to_read != Bytes_readed){
					uart_puts_rn_P(PSTR("End of file"));
    3472:	84 eb       	ldi	r24, 0xB4	; 180
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	0e 94 a3 18 	call	0x3146	; 0x3146 <uart_puts_rn_P>
				}
			}
			
		} while (Bytes_to_read == Bytes_readed && fr == FR_OK);
    347a:	c9 54       	subi	r28, 0x49	; 73
    347c:	df 4f       	sbci	r29, 0xFF	; 255
    347e:	88 81       	ld	r24, Y
    3480:	99 81       	ldd	r25, Y+1	; 0x01
    3482:	c7 5b       	subi	r28, 0xB7	; 183
    3484:	d0 40       	sbci	r29, 0x00	; 0
    3486:	80 38       	cpi	r24, 0x80	; 128
    3488:	91 05       	cpc	r25, r1
    348a:	f9 f2       	breq	.-66     	; 0x344a <main+0xfc>
		
		
		fr = f_close(&Fil);	
    348c:	80 e7       	ldi	r24, 0x70	; 112
    348e:	95 e0       	ldi	r25, 0x05	; 5
    3490:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <f_close>
		//Sent_error_message(fr, "Close file");
		Sent_error_message_P(fr, PSTR("Close file"));
    3494:	69 ea       	ldi	r22, 0xA9	; 169
    3496:	70 e0       	ldi	r23, 0x00	; 0
    3498:	0e 94 ce 18 	call	0x319c	; 0x319c <Sent_error_message_P>
				append_string(string_to_sd, "\r\n");
				//uart_puts_rn(string_to_sd);
				uart_puts(string_to_sd);
				*/
				//uint8_t licznik_i = 0;
				uint16_t Buffer_string_size = 0;
    349c:	41 2c       	mov	r4, r1
					cli();
					
				while(!error && Buffer_string_size <= SD_BLOCK_BYTES){
					sei();

					error = get_from_Cycle_buffer(&adc, &licznik, &Cycle_Buffer_1);
    349e:	5e 01       	movw	r10, r28
    34a0:	97 eb       	ldi	r25, 0xB7	; 183
    34a2:	a9 0e       	add	r10, r25
    34a4:	b1 1c       	adc	r11, r1
    34a6:	6e 01       	movw	r12, r28
    34a8:	ed eb       	ldi	r30, 0xBD	; 189
    34aa:	ce 0e       	add	r12, r30
    34ac:	d1 1c       	adc	r13, r1
					if(!error){
						//put_on_Cycle_buffer(adc_result, licznik_32bit, Cycle_Buffer_1);
						//utoa( buffer_adc[licznik_i], adc_result_string, 10 );
						adc_result_string[0] = '\0';
    34ae:	1e 01       	movw	r2, r28
    34b0:	f7 e9       	ldi	r31, 0x97	; 151
    34b2:	2f 0e       	add	r2, r31
    34b4:	31 1c       	adc	r3, r1
					cli();
					
				while(!error && Buffer_string_size <= SD_BLOCK_BYTES){
					sei();

					error = get_from_Cycle_buffer(&adc, &licznik, &Cycle_Buffer_1);
    34b6:	7a 2c       	mov	r7, r10
    34b8:	8b 2c       	mov	r8, r11
    34ba:	9c 2c       	mov	r9, r12
    34bc:	ed 2c       	mov	r14, r13
					if(!error){
						//put_on_Cycle_buffer(adc_result, licznik_32bit, Cycle_Buffer_1);
						//utoa( buffer_adc[licznik_i], adc_result_string, 10 );
						adc_result_string[0] = '\0';
    34be:	52 2c       	mov	r5, r2
    34c0:	63 2c       	mov	r6, r3

// 	for (;;) {
// 
// 	}
	while(1){
		if(flag_adc_conversion_done){
    34c2:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <flag_adc_conversion_done>
    34c6:	88 23       	and	r24, r24
    34c8:	e1 f3       	breq	.-8      	; 0x34c2 <main+0x174>
			

			
			uart_puts("1 sec\r\n");
    34ca:	8c ea       	ldi	r24, 0xAC	; 172
    34cc:	91 e0       	ldi	r25, 0x01	; 1
    34ce:	0e 94 81 18 	call	0x3102	; 0x3102 <uart_puts>
			//uart_puts("flag_conv\r\n");
				flag_adc_conversion_done = 0;
    34d2:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <flag_adc_conversion_done>
				uint16_t adc;
				
				//while(licznik_i < buffer_counter && Buffer_string_size <= 200){
					//string_to_sd2[0]= '\0';
					//uart_puts("string_to_sd2\r\n");
					cli();
    34d6:	f8 94       	cli
				append_string(string_to_sd, "\r\n");
				//uart_puts_rn(string_to_sd);
				uart_puts(string_to_sd);
				*/
				//uint8_t licznik_i = 0;
				uint16_t Buffer_string_size = 0;
    34d8:	04 2d       	mov	r16, r4
    34da:	10 e0       	ldi	r17, 0x00	; 0
					//string_to_sd2[0]= '\0';
					//uart_puts("string_to_sd2\r\n");
					cli();
					
				while(!error && Buffer_string_size <= SD_BLOCK_BYTES){
					sei();
    34dc:	78 94       	sei

					error = get_from_Cycle_buffer(&adc, &licznik, &Cycle_Buffer_1);
    34de:	44 ef       	ldi	r20, 0xF4	; 244
    34e0:	54 e0       	ldi	r21, 0x04	; 4
    34e2:	67 2d       	mov	r22, r7
    34e4:	78 2d       	mov	r23, r8
    34e6:	89 2d       	mov	r24, r9
    34e8:	9e 2d       	mov	r25, r14
    34ea:	0e 94 35 18 	call	0x306a	; 0x306a <get_from_Cycle_buffer>
    34ee:	f8 2e       	mov	r15, r24
					if(!error){
    34f0:	81 11       	cpse	r24, r1
    34f2:	36 c0       	rjmp	.+108    	; 0x3560 <main+0x212>
						//put_on_Cycle_buffer(adc_result, licznik_32bit, Cycle_Buffer_1);
						//utoa( buffer_adc[licznik_i], adc_result_string, 10 );
						adc_result_string[0] = '\0';
    34f4:	f1 01       	movw	r30, r2
    34f6:	10 82       	st	Z, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    34f8:	4a e0       	ldi	r20, 0x0A	; 10
    34fa:	65 2d       	mov	r22, r5
    34fc:	76 2d       	mov	r23, r6
    34fe:	f6 01       	movw	r30, r12
    3500:	80 81       	ld	r24, Z
    3502:	91 81       	ldd	r25, Z+1	; 0x01
    3504:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__utoa_ncheck>
						utoa( adc, adc_result_string, 10 );
						//utoa( buffer_licznik_32bit[licznik_i], licznik_32bit_string, 10 );
						licznik_32bit_string[0] = '\0';
    3508:	19 82       	std	Y+1, r1	; 0x01
    350a:	4a e0       	ldi	r20, 0x0A	; 10
    350c:	be 01       	movw	r22, r28
    350e:	6f 5f       	subi	r22, 0xFF	; 255
    3510:	7f 4f       	sbci	r23, 0xFF	; 255
    3512:	f5 01       	movw	r30, r10
    3514:	80 81       	ld	r24, Z
    3516:	91 81       	ldd	r25, Z+1	; 0x01
    3518:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__utoa_ncheck>
						append_string(string_to_sd2, ";");
						append_string(string_to_sd2, licznik_32bit_string);
						append_string(string_to_sd2, "\r\n");
						uart_puts(string_to_sd2);*/
						//uart_puts("\r\n");
						append_string(Buffer_string, adc_result_string);
    351c:	65 2d       	mov	r22, r5
    351e:	76 2d       	mov	r23, r6
    3520:	86 e0       	ldi	r24, 0x06	; 6
    3522:	94 e0       	ldi	r25, 0x04	; 4
    3524:	0e 94 9e 19 	call	0x333c	; 0x333c <append_string>
						append_string(Buffer_string, ";");
    3528:	64 eb       	ldi	r22, 0xB4	; 180
    352a:	71 e0       	ldi	r23, 0x01	; 1
    352c:	86 e0       	ldi	r24, 0x06	; 6
    352e:	94 e0       	ldi	r25, 0x04	; 4
    3530:	0e 94 9e 19 	call	0x333c	; 0x333c <append_string>
						append_string(Buffer_string, licznik_32bit_string);
    3534:	be 01       	movw	r22, r28
    3536:	6f 5f       	subi	r22, 0xFF	; 255
    3538:	7f 4f       	sbci	r23, 0xFF	; 255
    353a:	86 e0       	ldi	r24, 0x06	; 6
    353c:	94 e0       	ldi	r25, 0x04	; 4
    353e:	0e 94 9e 19 	call	0x333c	; 0x333c <append_string>
						append_string(Buffer_string, "\r\n");
    3542:	61 eb       	ldi	r22, 0xB1	; 177
    3544:	71 e0       	ldi	r23, 0x01	; 1
    3546:	86 e0       	ldi	r24, 0x06	; 6
    3548:	94 e0       	ldi	r25, 0x04	; 4
    354a:	0e 94 9e 19 	call	0x333c	; 0x333c <append_string>
						//append_string(Buffer_string, string_to_sd2);
						Buffer_string_size = strlen(Buffer_string);
    354e:	e6 e0       	ldi	r30, 0x06	; 6
    3550:	f4 e0       	ldi	r31, 0x04	; 4
    3552:	01 90       	ld	r0, Z+
    3554:	00 20       	and	r0, r0
    3556:	e9 f7       	brne	.-6      	; 0x3552 <main+0x204>
    3558:	31 97       	sbiw	r30, 0x01	; 1
    355a:	8f 01       	movw	r16, r30
    355c:	06 50       	subi	r16, 0x06	; 6
    355e:	14 40       	sbci	r17, 0x04	; 4
						//licznik_i++;
						//error = get_from_Cycle_buffer(&adc, &licznik, &Cycle_Buffer_1);
					}
					LCD_Clear();
    3560:	0e 94 93 16 	call	0x2d26	; 0x2d26 <LCD_Clear>
					uint8_t line = 0;
					LCD_GotoXY(0, line);
    3564:	60 e0       	ldi	r22, 0x00	; 0
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <LCD_GotoXY>
					LCD_PrintString("ADC: ");
    356c:	86 eb       	ldi	r24, 0xB6	; 182
    356e:	91 e0       	ldi	r25, 0x01	; 1
    3570:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_PrintString>
					uint32_t adc_32_converted_to_mV;
					adc_32_converted_to_mV = ((uint32_t)adc * 1100) / 1024;
					LCD_PrintInteger(adc_32_converted_to_mV);
    3574:	f6 01       	movw	r30, r12
    3576:	20 81       	ld	r18, Z
    3578:	31 81       	ldd	r19, Z+1	; 0x01
    357a:	ac e4       	ldi	r26, 0x4C	; 76
    357c:	b4 e0       	ldi	r27, 0x04	; 4
    357e:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <__umulhisi3>
    3582:	05 2e       	mov	r0, r21
    3584:	5a e0       	ldi	r21, 0x0A	; 10
    3586:	96 95       	lsr	r25
    3588:	87 95       	ror	r24
    358a:	77 95       	ror	r23
    358c:	67 95       	ror	r22
    358e:	5a 95       	dec	r21
    3590:	d1 f7       	brne	.-12     	; 0x3586 <main+0x238>
    3592:	50 2d       	mov	r21, r0
    3594:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <LCD_PrintInteger>
					LCD_PrintString("mV");
    3598:	8c eb       	ldi	r24, 0xBC	; 188
    359a:	91 e0       	ldi	r25, 0x01	; 1
    359c:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_PrintString>
					line = 1;
					LCD_GotoXY(0, line);
    35a0:	61 e0       	ldi	r22, 0x01	; 1
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <LCD_GotoXY>
					LCD_PrintString("Count: ");
    35a8:	8f eb       	ldi	r24, 0xBF	; 191
    35aa:	91 e0       	ldi	r25, 0x01	; 1
    35ac:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_PrintString>
					uint32_t seconds;
					seconds = licznik / 125;
					LCD_PrintInteger(seconds);
    35b0:	f5 01       	movw	r30, r10
    35b2:	60 81       	ld	r22, Z
    35b4:	71 81       	ldd	r23, Z+1	; 0x01
    35b6:	82 81       	ldd	r24, Z+2	; 0x02
    35b8:	93 81       	ldd	r25, Z+3	; 0x03
    35ba:	2d e7       	ldi	r18, 0x7D	; 125
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	40 e0       	ldi	r20, 0x00	; 0
    35c0:	50 e0       	ldi	r21, 0x00	; 0
    35c2:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__udivmodsi4>
    35c6:	ca 01       	movw	r24, r20
    35c8:	b9 01       	movw	r22, r18
    35ca:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <LCD_PrintInteger>
					LCD_PrintString(" Sec");
    35ce:	87 ec       	ldi	r24, 0xC7	; 199
    35d0:	91 e0       	ldi	r25, 0x01	; 1
    35d2:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_PrintString>
	
					
					cli();
    35d6:	f8 94       	cli
				//while(licznik_i < buffer_counter && Buffer_string_size <= 200){
					//string_to_sd2[0]= '\0';
					//uart_puts("string_to_sd2\r\n");
					cli();
					
				while(!error && Buffer_string_size <= SD_BLOCK_BYTES){
    35d8:	f1 10       	cpse	r15, r1
    35da:	04 c0       	rjmp	.+8      	; 0x35e4 <main+0x296>
    35dc:	09 3c       	cpi	r16, 0xC9	; 201
    35de:	11 05       	cpc	r17, r1
    35e0:	08 f4       	brcc	.+2      	; 0x35e4 <main+0x296>
    35e2:	7c cf       	rjmp	.-264    	; 0x34dc <main+0x18e>
	
					
					cli();
				}
				
				buffer_counter = 0;
    35e4:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <buffer_counter>
				flag_adc_conversion_done = 0;
    35e8:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <flag_adc_conversion_done>
				sei();
    35ec:	78 94       	sei
				
				//append_string(Buffer_string, string_to_sd2);
				//uint16_t Buffer_string_size;
				//uart_puts(string_to_sd2);
				
				Buffer_string_size = strlen(Buffer_string);
    35ee:	e6 e0       	ldi	r30, 0x06	; 6
    35f0:	f4 e0       	ldi	r31, 0x04	; 4
    35f2:	01 90       	ld	r0, Z+
    35f4:	00 20       	and	r0, r0
    35f6:	e9 f7       	brne	.-6      	; 0x35f2 <main+0x2a4>
    35f8:	31 97       	sbiw	r30, 0x01	; 1
    35fa:	e6 50       	subi	r30, 0x06	; 6
    35fc:	f4 40       	sbci	r31, 0x04	; 4
				//Buffer_string_size = 201;

				if(Buffer_string_size > SD_BLOCK_BYTES){
    35fe:	e9 3c       	cpi	r30, 0xC9	; 201
    3600:	f1 05       	cpc	r31, r1
    3602:	08 f4       	brcc	.+2      	; 0x3606 <main+0x2b8>
    3604:	5e cf       	rjmp	.-324    	; 0x34c2 <main+0x174>
									//Clear_Cycle_buffer(&Cycle_Buffer_1);
									//uart_puts("Clear cycle buffer \r\n");
					//append_string(Buffer_string, "new write\r\n");
					//uart_puts("write Buffer_string \r\n");
					uart_puts(Buffer_string);
    3606:	86 e0       	ldi	r24, 0x06	; 6
    3608:	94 e0       	ldi	r25, 0x04	; 4
    360a:	0e 94 81 18 	call	0x3102	; 0x3102 <uart_puts>
					//uart_puts("write Buffer_string_end \r\n");
					Buffer_string_size = strlen(Buffer_string);
								
				fr = f_open(&Fil, "WRITE2.TXT", FA_WRITE | FA_OPEN_APPEND );	/* Create a file */
    360e:	42 e3       	ldi	r20, 0x32	; 50
    3610:	61 ea       	ldi	r22, 0xA1	; 161
    3612:	71 e0       	ldi	r23, 0x01	; 1
    3614:	80 e7       	ldi	r24, 0x70	; 112
    3616:	95 e0       	ldi	r25, 0x05	; 5
    3618:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <f_open>
    361c:	18 2f       	mov	r17, r24
				//Sent_error_message(fr, "File open WRITE2.TXT");
				Sent_error_message_P(fr, PSTR("File open WRITE2.TXT"));
    361e:	64 e9       	ldi	r22, 0x94	; 148
    3620:	70 e0       	ldi	r23, 0x00	; 0
    3622:	0e 94 ce 18 	call	0x319c	; 0x319c <Sent_error_message_P>
				if (fr == FR_OK) {
    3626:	11 11       	cpse	r17, r1
    3628:	1f c0       	rjmp	.+62     	; 0x3668 <main+0x31a>
					UINT Bytes_Written;
					//BYTE Bytes_to_write[512];
					//for(int i = 0; i < 512;i++)
					//Bytes_to_write[i] = i;
					//for(int i = 0; i < 100;i++){
						fr = f_write(&Fil, (BYTE*)(Buffer_string), strlen(Buffer_string), &Bytes_Written);	/* Write data to the file */
    362a:	e6 e0       	ldi	r30, 0x06	; 6
    362c:	f4 e0       	ldi	r31, 0x04	; 4
    362e:	01 90       	ld	r0, Z+
    3630:	00 20       	and	r0, r0
    3632:	e9 f7       	brne	.-6      	; 0x362e <main+0x2e0>
    3634:	31 97       	sbiw	r30, 0x01	; 1
    3636:	af 01       	movw	r20, r30
    3638:	46 50       	subi	r20, 0x06	; 6
    363a:	54 40       	sbci	r21, 0x04	; 4
    363c:	9e 01       	movw	r18, r28
    363e:	25 54       	subi	r18, 0x45	; 69
    3640:	3f 4f       	sbci	r19, 0xFF	; 255
    3642:	66 e0       	ldi	r22, 0x06	; 6
    3644:	74 e0       	ldi	r23, 0x04	; 4
    3646:	80 e7       	ldi	r24, 0x70	; 112
    3648:	95 e0       	ldi	r25, 0x05	; 5
    364a:	0e 94 d7 11 	call	0x23ae	; 0x23ae <f_write>
						//Sent_error_message(fr, "File write WRITE2.TXT");
						Sent_error_message_P(fr, PSTR("File write WRITE2.TXT"));
    364e:	6e e7       	ldi	r22, 0x7E	; 126
    3650:	70 e0       	ldi	r23, 0x00	; 0
    3652:	0e 94 ce 18 	call	0x319c	; 0x319c <Sent_error_message_P>
					//}
					fr = f_close(&Fil);
    3656:	80 e7       	ldi	r24, 0x70	; 112
    3658:	95 e0       	ldi	r25, 0x05	; 5
    365a:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <f_close>
    365e:	18 2f       	mov	r17, r24
					//Sent_error_message(fr, "Close file WRITE2.TXT");
					Sent_error_message_P(fr, PSTR("Close file WRITE2.TXT"));
    3660:	68 e6       	ldi	r22, 0x68	; 104
    3662:	70 e0       	ldi	r23, 0x00	; 0
    3664:	0e 94 ce 18 	call	0x319c	; 0x319c <Sent_error_message_P>
				
				}
				if (fr == FR_DISK_ERR){
    3668:	11 30       	cpi	r17, 0x01	; 1
    366a:	39 f4       	brne	.+14     	; 0x367a <main+0x32c>
					//fr = f_close(&Fil);
					//Sent_error_message(fr, "File open WRITE2.TXT");
					f_mount(&FatFs, "", 0);
    366c:	40 e0       	ldi	r20, 0x00	; 0
    366e:	63 eb       	ldi	r22, 0xB3	; 179
    3670:	71 e0       	ldi	r23, 0x01	; 1
    3672:	87 ed       	ldi	r24, 0xD7	; 215
    3674:	91 e0       	ldi	r25, 0x01	; 1
    3676:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <f_mount>
void delete_string(char *string){
	
	//char *p = string + strlen(string);
	//strcpy(p, string_to_append);
	
	*string = '\0';
    367a:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <Buffer_string>
    367e:	21 cf       	rjmp	.-446    	; 0x34c2 <main+0x174>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3680:	4a e0       	ldi	r20, 0x0A	; 10
    3682:	be 01       	movw	r22, r28
    3684:	69 56       	subi	r22, 0x69	; 105
    3686:	7f 4f       	sbci	r23, 0xFF	; 255
    3688:	c9 54       	subi	r28, 0x49	; 73
    368a:	df 4f       	sbci	r29, 0xFF	; 255
    368c:	88 81       	ld	r24, Y
    368e:	99 81       	ldd	r25, Y+1	; 0x01
    3690:	c7 5b       	subi	r28, 0xB7	; 183
    3692:	d0 40       	sbci	r29, 0x00	; 0
    3694:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__itoa_ncheck>
				char b[ 32 ];
				itoa( Bytes_readed, b, 10 );
				//uart_puts_rn(b);
				
				//uart_puts_rn("Bytes Readed: ");
				uart_puts_with_length((char*)(Buff), Bytes_readed);
    3698:	c9 54       	subi	r28, 0x49	; 73
    369a:	df 4f       	sbci	r29, 0xFF	; 255
    369c:	68 81       	ld	r22, Y
    369e:	79 81       	ldd	r23, Y+1	; 0x01
    36a0:	c7 5b       	subi	r28, 0xB7	; 183
    36a2:	d0 40       	sbci	r29, 0x00	; 0
    36a4:	ce 01       	movw	r24, r28
    36a6:	01 96       	adiw	r24, 0x01	; 1
    36a8:	0e 94 aa 18 	call	0x3154	; 0x3154 <uart_puts_with_length>
				//uart_puts_rn("");
				if(Bytes_to_read != Bytes_readed){
    36ac:	c9 54       	subi	r28, 0x49	; 73
    36ae:	df 4f       	sbci	r29, 0xFF	; 255
    36b0:	88 81       	ld	r24, Y
    36b2:	99 81       	ldd	r25, Y+1	; 0x01
    36b4:	c7 5b       	subi	r28, 0xB7	; 183
    36b6:	d0 40       	sbci	r29, 0x00	; 0
    36b8:	80 38       	cpi	r24, 0x80	; 128
    36ba:	91 05       	cpc	r25, r1
    36bc:	09 f0       	breq	.+2      	; 0x36c0 <main+0x372>
    36be:	d9 ce       	rjmp	.-590    	; 0x3472 <main+0x124>
    36c0:	dc ce       	rjmp	.-584    	; 0x347a <main+0x12c>

000036c2 <dly_us>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    36c2:	25 e0       	ldi	r18, 0x05	; 5
    36c4:	2a 95       	dec	r18
    36c6:	f1 f7       	brne	.-4      	; 0x36c4 <dly_us+0x2>
    36c8:	00 00       	nop
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif*/
_delay_us(1);
	} while (--n);
    36ca:	01 97       	sbiw	r24, 0x01	; 1
    36cc:	d1 f7       	brne	.-12     	; 0x36c2 <dly_us>
}
    36ce:	08 95       	ret

000036d0 <SPI_MasterInit>:
#define DD_SCK PB5
#define DD_MISO PB4
#define DD_CS PB2

void SPI_MasterInit(void){
	CS_INIT();
    36d0:	22 9a       	sbi	0x04, 2	; 4
	DDR_SPI &= ~(( 1<<DD_MISO ) );
    36d2:	24 98       	cbi	0x04, 4	; 4
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)| ( 1<<DD_CS ); /* Set MOSI and SCK output, all others input */
    36d4:	84 b1       	in	r24, 0x04	; 4
    36d6:	8c 62       	ori	r24, 0x2C	; 44
    36d8:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X);//|(1<<SPR1)|(1<<SPR0)|(1<<SPI2X); /* Enable SPI, Master, set clock rate fck/16 */
    36da:	81 e5       	ldi	r24, 0x51	; 81
    36dc:	8c bd       	out	0x2c, r24	; 44
    36de:	08 95       	ret

000036e0 <SPI_MasterTransmit>:
	
	}
	
BYTE SPI_MasterTransmit(BYTE cData){/* Start transmission */
	BYTE received_data;
	SPDR = cData;/* Wait for transmission complete */
    36e0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    36e2:	0d b4       	in	r0, 0x2d	; 45
    36e4:	07 fe       	sbrs	r0, 7
    36e6:	fd cf       	rjmp	.-6      	; 0x36e2 <SPI_MasterTransmit+0x2>
	received_data = SPDR;
    36e8:	8e b5       	in	r24, 0x2e	; 46
	return received_data;
	}
    36ea:	08 95       	ret

000036ec <rcvr_mmc>:
static
void rcvr_mmc (
	BYTE *buff,	/* Pointer to read buffer */
	UINT bc		/* Number of bytes to receive */
)
{
    36ec:	0f 93       	push	r16
    36ee:	1f 93       	push	r17
    36f0:	cf 93       	push	r28
    36f2:	df 93       	push	r29
    36f4:	eb 01       	movw	r28, r22
    36f6:	8c 01       	movw	r16, r24
// 		r <<= 1; if (DO) r++;	/* bit1 */
// 		CK_H(); CK_L();
// 		r <<= 1; if (DO) r++;	/* bit0 */
// 		CK_H(); CK_L();
// 		*buff++ = r;			/* Store a received byte */
		*buff++ = SPI_MasterTransmit(255);
    36f8:	8f ef       	ldi	r24, 0xFF	; 255
    36fa:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <SPI_MasterTransmit>
    36fe:	f8 01       	movw	r30, r16
    3700:	81 93       	st	Z+, r24
    3702:	8f 01       	movw	r16, r30
	} while (--bc);
    3704:	21 97       	sbiw	r28, 0x01	; 1
    3706:	c1 f7       	brne	.-16     	; 0x36f8 <rcvr_mmc+0xc>
}
    3708:	df 91       	pop	r29
    370a:	cf 91       	pop	r28
    370c:	1f 91       	pop	r17
    370e:	0f 91       	pop	r16
    3710:	08 95       	ret

00003712 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
    3712:	0f 93       	push	r16
    3714:	1f 93       	push	r17
    3716:	cf 93       	push	r28
    3718:	df 93       	push	r29
    371a:	1f 92       	push	r1
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    3720:	08 e8       	ldi	r16, 0x88	; 136
    3722:	13 e1       	ldi	r17, 0x13	; 19
		rcvr_mmc(&d, 1);
    3724:	61 e0       	ldi	r22, 0x01	; 1
    3726:	70 e0       	ldi	r23, 0x00	; 0
    3728:	ce 01       	movw	r24, r28
    372a:	01 96       	adiw	r24, 0x01	; 1
    372c:	0e 94 76 1b 	call	0x36ec	; 0x36ec <rcvr_mmc>
		if (d == 0xFF) break;
    3730:	89 81       	ldd	r24, Y+1	; 0x01
    3732:	8f 3f       	cpi	r24, 0xFF	; 255
    3734:	39 f0       	breq	.+14     	; 0x3744 <wait_ready+0x32>
		dly_us(100);
    3736:	84 e6       	ldi	r24, 0x64	; 100
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <dly_us>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    373e:	01 50       	subi	r16, 0x01	; 1
    3740:	11 09       	sbc	r17, r1
    3742:	81 f7       	brne	.-32     	; 0x3724 <wait_ready+0x12>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	01 2b       	or	r16, r17
    374a:	11 f4       	brne	.+4      	; 0x3750 <wait_ready+0x3e>
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	90 e0       	ldi	r25, 0x00	; 0
}
    3750:	0f 90       	pop	r0
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	1f 91       	pop	r17
    3758:	0f 91       	pop	r16
    375a:	08 95       	ret

0000375c <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    375c:	cf 93       	push	r28
    375e:	df 93       	push	r29
    3760:	1f 92       	push	r1
    3762:	cd b7       	in	r28, 0x3d	; 61
    3764:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();				/* Set CS# high */
    3766:	2a 9a       	sbi	0x05, 2	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    3768:	61 e0       	ldi	r22, 0x01	; 1
    376a:	70 e0       	ldi	r23, 0x00	; 0
    376c:	ce 01       	movw	r24, r28
    376e:	01 96       	adiw	r24, 0x01	; 1
    3770:	0e 94 76 1b 	call	0x36ec	; 0x36ec <rcvr_mmc>
}
    3774:	0f 90       	pop	r0
    3776:	df 91       	pop	r29
    3778:	cf 91       	pop	r28
    377a:	08 95       	ret

0000377c <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
    377c:	0f 93       	push	r16
    377e:	1f 93       	push	r17
    3780:	cf 93       	push	r28
    3782:	df 93       	push	r29
    3784:	1f 92       	push	r1
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();				/* Set CS# low */
    378a:	2a 98       	cbi	0x05, 2	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    378c:	61 e0       	ldi	r22, 0x01	; 1
    378e:	70 e0       	ldi	r23, 0x00	; 0
    3790:	ce 01       	movw	r24, r28
    3792:	01 96       	adiw	r24, 0x01	; 1
    3794:	0e 94 76 1b 	call	0x36ec	; 0x36ec <rcvr_mmc>
	if (wait_ready()) return 1;	/* Wait for card ready */
    3798:	0e 94 89 1b 	call	0x3712	; 0x3712 <wait_ready>
    379c:	8c 01       	movw	r16, r24
    379e:	89 2b       	or	r24, r25
    37a0:	19 f4       	brne	.+6      	; 0x37a8 <select+0x2c>
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
			//return 1;
	deselect();
    37a2:	0e 94 ae 1b 	call	0x375c	; 0x375c <deselect>
	return 0;			/* Failed */
    37a6:	02 c0       	rjmp	.+4      	; 0x37ac <select+0x30>
{
	BYTE d;

	CS_L();				/* Set CS# low */
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
	if (wait_ready()) return 1;	/* Wait for card ready */
    37a8:	01 e0       	ldi	r16, 0x01	; 1
    37aa:	10 e0       	ldi	r17, 0x00	; 0
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
			//return 1;
	deselect();
	return 0;			/* Failed */
}
    37ac:	c8 01       	movw	r24, r16
    37ae:	0f 90       	pop	r0
    37b0:	df 91       	pop	r29
    37b2:	cf 91       	pop	r28
    37b4:	1f 91       	pop	r17
    37b6:	0f 91       	pop	r16
    37b8:	08 95       	ret

000037ba <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
    37ba:	cf 92       	push	r12
    37bc:	df 92       	push	r13
    37be:	ef 92       	push	r14
    37c0:	ff 92       	push	r15
    37c2:	0f 93       	push	r16
    37c4:	1f 93       	push	r17
    37c6:	cf 93       	push	r28
    37c8:	df 93       	push	r29
    37ca:	00 d0       	rcall	.+0      	; 0x37cc <rcvr_datablock+0x12>
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	7c 01       	movw	r14, r24
    37d2:	6b 01       	movw	r12, r22
    37d4:	08 ee       	ldi	r16, 0xE8	; 232
    37d6:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
    37d8:	61 e0       	ldi	r22, 0x01	; 1
    37da:	70 e0       	ldi	r23, 0x00	; 0
    37dc:	ce 01       	movw	r24, r28
    37de:	01 96       	adiw	r24, 0x01	; 1
    37e0:	0e 94 76 1b 	call	0x36ec	; 0x36ec <rcvr_mmc>
		if (d[0] != 0xFF) break;
    37e4:	89 81       	ldd	r24, Y+1	; 0x01
    37e6:	8f 3f       	cpi	r24, 0xFF	; 255
    37e8:	39 f4       	brne	.+14     	; 0x37f8 <rcvr_datablock+0x3e>
		dly_us(100);
    37ea:	84 e6       	ldi	r24, 0x64	; 100
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <dly_us>
    37f2:	01 50       	subi	r16, 0x01	; 1
    37f4:	11 09       	sbc	r17, r1
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    37f6:	81 f7       	brne	.-32     	; 0x37d8 <rcvr_datablock+0x1e>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    37f8:	89 81       	ldd	r24, Y+1	; 0x01
    37fa:	8e 3f       	cpi	r24, 0xFE	; 254
    37fc:	69 f4       	brne	.+26     	; 0x3818 <rcvr_datablock+0x5e>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    37fe:	b6 01       	movw	r22, r12
    3800:	c7 01       	movw	r24, r14
    3802:	0e 94 76 1b 	call	0x36ec	; 0x36ec <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
    3806:	62 e0       	ldi	r22, 0x02	; 2
    3808:	70 e0       	ldi	r23, 0x00	; 0
    380a:	ce 01       	movw	r24, r28
    380c:	01 96       	adiw	r24, 0x01	; 1
    380e:	0e 94 76 1b 	call	0x36ec	; 0x36ec <rcvr_mmc>

	return 1;						/* Return with success */
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	02 c0       	rjmp	.+4      	; 0x381c <rcvr_datablock+0x62>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    3818:	80 e0       	ldi	r24, 0x00	; 0
    381a:	90 e0       	ldi	r25, 0x00	; 0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	df 91       	pop	r29
    3822:	cf 91       	pop	r28
    3824:	1f 91       	pop	r17
    3826:	0f 91       	pop	r16
    3828:	ff 90       	pop	r15
    382a:	ef 90       	pop	r14
    382c:	df 90       	pop	r13
    382e:	cf 90       	pop	r12
    3830:	08 95       	ret

00003832 <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
    3832:	0f 93       	push	r16
    3834:	1f 93       	push	r17
    3836:	cf 93       	push	r28
    3838:	df 93       	push	r29
    383a:	eb 01       	movw	r28, r22
    383c:	8c 01       	movw	r16, r24


	do {
		d = *buff++;	/* Get a byte to be sent */
		
		SPI_MasterTransmit(d);
    383e:	f8 01       	movw	r30, r16
    3840:	81 91       	ld	r24, Z+
    3842:	8f 01       	movw	r16, r30
    3844:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <SPI_MasterTransmit>
		//CK_H(); CK_L();
	//	if (d & 0x01) DI_H(); else { DI_L();	/* bit0 */
			//PORTB |= (1<<5);
		//}
		//CK_H(); CK_L();
	} while (--bc);
    3848:	21 97       	sbiw	r28, 0x01	; 1
    384a:	c9 f7       	brne	.-14     	; 0x383e <xmit_mmc+0xc>
}
    384c:	df 91       	pop	r29
    384e:	cf 91       	pop	r28
    3850:	1f 91       	pop	r17
    3852:	0f 91       	pop	r16
    3854:	08 95       	ret

00003856 <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    3856:	df 92       	push	r13
    3858:	ef 92       	push	r14
    385a:	ff 92       	push	r15
    385c:	0f 93       	push	r16
    385e:	1f 93       	push	r17
    3860:	cf 93       	push	r28
    3862:	df 93       	push	r29
    3864:	cd b7       	in	r28, 0x3d	; 61
    3866:	de b7       	in	r29, 0x3e	; 62
    3868:	27 97       	sbiw	r28, 0x07	; 7
    386a:	0f b6       	in	r0, 0x3f	; 63
    386c:	f8 94       	cli
    386e:	de bf       	out	0x3e, r29	; 62
    3870:	0f be       	out	0x3f, r0	; 63
    3872:	cd bf       	out	0x3d, r28	; 61
    3874:	18 2f       	mov	r17, r24
    3876:	04 2f       	mov	r16, r20
    3878:	f5 2e       	mov	r15, r21
    387a:	e6 2e       	mov	r14, r22
    387c:	d7 2e       	mov	r13, r23
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    387e:	88 23       	and	r24, r24
    3880:	54 f4       	brge	.+20     	; 0x3896 <send_cmd+0x40>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
    3882:	40 e0       	ldi	r20, 0x00	; 0
    3884:	50 e0       	ldi	r21, 0x00	; 0
    3886:	ba 01       	movw	r22, r20
    3888:	87 e3       	ldi	r24, 0x37	; 55
    388a:	0e 94 2b 1c 	call	0x3856	; 0x3856 <send_cmd>
		if (n > 1) return n;
    388e:	82 30       	cpi	r24, 0x02	; 2
    3890:	08 f0       	brcs	.+2      	; 0x3894 <send_cmd+0x3e>
    3892:	57 c0       	rjmp	.+174    	; 0x3942 <send_cmd+0xec>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    3894:	1f 77       	andi	r17, 0x7F	; 127
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    3896:	1c 30       	cpi	r17, 0x0C	; 12
    3898:	29 f1       	breq	.+74     	; 0x38e4 <send_cmd+0x8e>
		deselect();
    389a:	0e 94 ae 1b 	call	0x375c	; 0x375c <deselect>
		if (!select()) return 0xFF;
    389e:	0e 94 be 1b 	call	0x377c	; 0x377c <select>
    38a2:	89 2b       	or	r24, r25
    38a4:	e9 f0       	breq	.+58     	; 0x38e0 <send_cmd+0x8a>
	}
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    38a6:	81 2f       	mov	r24, r17
    38a8:	80 64       	ori	r24, 0x40	; 64
    38aa:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    38ac:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    38ae:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    38b0:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    38b2:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    38b4:	11 23       	and	r17, r17
    38b6:	e1 f1       	breq	.+120    	; 0x3930 <send_cmd+0xda>
    38b8:	38 c0       	rjmp	.+112    	; 0x392a <send_cmd+0xd4>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
	xmit_mmc(buf, 6);

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    38ba:	61 e0       	ldi	r22, 0x01	; 1
    38bc:	70 e0       	ldi	r23, 0x00	; 0
    38be:	ce 01       	movw	r24, r28
    38c0:	01 96       	adiw	r24, 0x01	; 1
    38c2:	0e 94 76 1b 	call	0x36ec	; 0x36ec <rcvr_mmc>
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    38c6:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
    38c8:	61 e0       	ldi	r22, 0x01	; 1
    38ca:	70 e0       	ldi	r23, 0x00	; 0
    38cc:	ce 01       	movw	r24, r28
    38ce:	01 96       	adiw	r24, 0x01	; 1
    38d0:	0e 94 76 1b 	call	0x36ec	; 0x36ec <rcvr_mmc>
	while ((d & 0x80) && --n);
    38d4:	89 81       	ldd	r24, Y+1	; 0x01
    38d6:	88 23       	and	r24, r24
    38d8:	a4 f5       	brge	.+104    	; 0x3942 <send_cmd+0xec>
    38da:	11 50       	subi	r17, 0x01	; 1
    38dc:	a9 f7       	brne	.-22     	; 0x38c8 <send_cmd+0x72>
    38de:	31 c0       	rjmp	.+98     	; 0x3942 <send_cmd+0xec>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    38e0:	8f ef       	ldi	r24, 0xFF	; 255
    38e2:	2f c0       	rjmp	.+94     	; 0x3942 <send_cmd+0xec>
	}
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    38e4:	8c e4       	ldi	r24, 0x4C	; 76
    38e6:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    38e8:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    38ea:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    38ec:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    38ee:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    38f4:	66 e0       	ldi	r22, 0x06	; 6
    38f6:	70 e0       	ldi	r23, 0x00	; 0
    38f8:	ce 01       	movw	r24, r28
    38fa:	02 96       	adiw	r24, 0x02	; 2
    38fc:	0e 94 19 1c 	call	0x3832	; 0x3832 <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    3900:	1c 30       	cpi	r17, 0x0C	; 12
    3902:	09 f7       	brne	.-62     	; 0x38c6 <send_cmd+0x70>
    3904:	da cf       	rjmp	.-76     	; 0x38ba <send_cmd+0x64>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    3906:	87 e8       	ldi	r24, 0x87	; 135
    3908:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    390a:	66 e0       	ldi	r22, 0x06	; 6
    390c:	70 e0       	ldi	r23, 0x00	; 0
    390e:	ce 01       	movw	r24, r28
    3910:	02 96       	adiw	r24, 0x02	; 2
    3912:	0e 94 19 1c 	call	0x3832	; 0x3832 <xmit_mmc>
    3916:	d7 cf       	rjmp	.-82     	; 0x38c6 <send_cmd+0x70>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    391c:	66 e0       	ldi	r22, 0x06	; 6
    391e:	70 e0       	ldi	r23, 0x00	; 0
    3920:	ce 01       	movw	r24, r28
    3922:	02 96       	adiw	r24, 0x02	; 2
    3924:	0e 94 19 1c 	call	0x3832	; 0x3832 <xmit_mmc>
    3928:	ce cf       	rjmp	.-100    	; 0x38c6 <send_cmd+0x70>
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    392a:	18 30       	cpi	r17, 0x08	; 8
    392c:	61 f3       	breq	.-40     	; 0x3906 <send_cmd+0xb0>
    392e:	f4 cf       	rjmp	.-24     	; 0x3918 <send_cmd+0xc2>
	buf[5] = n;
    3930:	85 e9       	ldi	r24, 0x95	; 149
    3932:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    3934:	66 e0       	ldi	r22, 0x06	; 6
    3936:	70 e0       	ldi	r23, 0x00	; 0
    3938:	ce 01       	movw	r24, r28
    393a:	02 96       	adiw	r24, 0x02	; 2
    393c:	0e 94 19 1c 	call	0x3832	; 0x3832 <xmit_mmc>
    3940:	c2 cf       	rjmp	.-124    	; 0x38c6 <send_cmd+0x70>
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
    3942:	27 96       	adiw	r28, 0x07	; 7
    3944:	0f b6       	in	r0, 0x3f	; 63
    3946:	f8 94       	cli
    3948:	de bf       	out	0x3e, r29	; 62
    394a:	0f be       	out	0x3f, r0	; 63
    394c:	cd bf       	out	0x3d, r28	; 61
    394e:	df 91       	pop	r29
    3950:	cf 91       	pop	r28
    3952:	1f 91       	pop	r17
    3954:	0f 91       	pop	r16
    3956:	ff 90       	pop	r15
    3958:	ef 90       	pop	r14
    395a:	df 90       	pop	r13
    395c:	08 95       	ret

0000395e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    395e:	ef 92       	push	r14
    3960:	ff 92       	push	r15
    3962:	1f 93       	push	r17
    3964:	cf 93       	push	r28
    3966:	df 93       	push	r29
    3968:	00 d0       	rcall	.+0      	; 0x396a <xmit_datablock+0xc>
    396a:	cd b7       	in	r28, 0x3d	; 61
    396c:	de b7       	in	r29, 0x3e	; 62
    396e:	7c 01       	movw	r14, r24
    3970:	16 2f       	mov	r17, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
    3972:	0e 94 89 1b 	call	0x3712	; 0x3712 <wait_ready>
    3976:	00 97       	sbiw	r24, 0x00	; 0
    3978:	31 f1       	breq	.+76     	; 0x39c6 <xmit_datablock+0x68>

	d[0] = token;
    397a:	19 83       	std	Y+1, r17	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
    397c:	61 e0       	ldi	r22, 0x01	; 1
    397e:	70 e0       	ldi	r23, 0x00	; 0
    3980:	ce 01       	movw	r24, r28
    3982:	01 96       	adiw	r24, 0x01	; 1
    3984:	0e 94 19 1c 	call	0x3832	; 0x3832 <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
    3988:	1d 3f       	cpi	r17, 0xFD	; 253
    398a:	d9 f0       	breq	.+54     	; 0x39c2 <xmit_datablock+0x64>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    398c:	60 e0       	ldi	r22, 0x00	; 0
    398e:	72 e0       	ldi	r23, 0x02	; 2
    3990:	c7 01       	movw	r24, r14
    3992:	0e 94 19 1c 	call	0x3832	; 0x3832 <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    3996:	62 e0       	ldi	r22, 0x02	; 2
    3998:	70 e0       	ldi	r23, 0x00	; 0
    399a:	ce 01       	movw	r24, r28
    399c:	01 96       	adiw	r24, 0x01	; 1
    399e:	0e 94 76 1b 	call	0x36ec	; 0x36ec <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
    39a2:	61 e0       	ldi	r22, 0x01	; 1
    39a4:	70 e0       	ldi	r23, 0x00	; 0
    39a6:	ce 01       	movw	r24, r28
    39a8:	01 96       	adiw	r24, 0x01	; 1
    39aa:	0e 94 76 1b 	call	0x36ec	; 0x36ec <rcvr_mmc>
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
    39ae:	89 81       	ldd	r24, Y+1	; 0x01
    39b0:	8f 71       	andi	r24, 0x1F	; 31
    39b2:	31 e0       	ldi	r19, 0x01	; 1
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	85 30       	cpi	r24, 0x05	; 5
    39b8:	09 f0       	breq	.+2      	; 0x39bc <xmit_datablock+0x5e>
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	83 2f       	mov	r24, r19
    39be:	92 2f       	mov	r25, r18
    39c0:	02 c0       	rjmp	.+4      	; 0x39c6 <xmit_datablock+0x68>
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	90 e0       	ldi	r25, 0x00	; 0
}
    39c6:	0f 90       	pop	r0
    39c8:	0f 90       	pop	r0
    39ca:	df 91       	pop	r29
    39cc:	cf 91       	pop	r28
    39ce:	1f 91       	pop	r17
    39d0:	ff 90       	pop	r15
    39d2:	ef 90       	pop	r14
    39d4:	08 95       	ret

000039d6 <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    39d6:	81 11       	cpse	r24, r1
    39d8:	03 c0       	rjmp	.+6      	; 0x39e0 <disk_status+0xa>

	return Stat;
    39da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    39de:	08 95       	ret

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    39e0:	81 e0       	ldi	r24, 0x01	; 1

	return Stat;
}
    39e2:	08 95       	ret

000039e4 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    39e4:	ef 92       	push	r14
    39e6:	ff 92       	push	r15
    39e8:	0f 93       	push	r16
    39ea:	1f 93       	push	r17
    39ec:	cf 93       	push	r28
    39ee:	df 93       	push	r29
    39f0:	00 d0       	rcall	.+0      	; 0x39f2 <disk_initialize+0xe>
    39f2:	00 d0       	rcall	.+0      	; 0x39f4 <disk_initialize+0x10>
    39f4:	cd b7       	in	r28, 0x3d	; 61
    39f6:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    39f8:	81 11       	cpse	r24, r1
    39fa:	ac c0       	rjmp	.+344    	; 0x3b54 <disk_initialize+0x170>

	dly_us(10000);			/* 10ms */
    39fc:	80 e1       	ldi	r24, 0x10	; 16
    39fe:	97 e2       	ldi	r25, 0x27	; 39
    3a00:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <dly_us>
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
    3a04:	22 9a       	sbi	0x04, 2	; 4
    3a06:	2a 9a       	sbi	0x05, 2	; 5
	//CK_INIT(); //CK_L();		/* Initialize port pin tied to SCLK */
	//DI_INIT();				/* Initialize port pin tied to DI */
	//DO_INIT();				/* Initialize port pin tied to DO */
	SPI_MasterInit();
    3a08:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <SPI_MasterInit>
    3a0c:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    3a0e:	61 e0       	ldi	r22, 0x01	; 1
    3a10:	70 e0       	ldi	r23, 0x00	; 0
    3a12:	ce 01       	movw	r24, r28
    3a14:	01 96       	adiw	r24, 0x01	; 1
    3a16:	0e 94 76 1b 	call	0x36ec	; 0x36ec <rcvr_mmc>
    3a1a:	11 50       	subi	r17, 0x01	; 1
    3a1c:	c1 f7       	brne	.-16     	; 0x3a0e <disk_initialize+0x2a>
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    3a1e:	40 e0       	ldi	r20, 0x00	; 0
    3a20:	50 e0       	ldi	r21, 0x00	; 0
    3a22:	ba 01       	movw	r22, r20
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	0e 94 2b 1c 	call	0x3856	; 0x3856 <send_cmd>
    3a2a:	81 30       	cpi	r24, 0x01	; 1
    3a2c:	09 f0       	breq	.+2      	; 0x3a30 <disk_initialize+0x4c>
    3a2e:	77 c0       	rjmp	.+238    	; 0x3b1e <disk_initialize+0x13a>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    3a30:	4a ea       	ldi	r20, 0xAA	; 170
    3a32:	51 e0       	ldi	r21, 0x01	; 1
    3a34:	60 e0       	ldi	r22, 0x00	; 0
    3a36:	70 e0       	ldi	r23, 0x00	; 0
    3a38:	88 e0       	ldi	r24, 0x08	; 8
    3a3a:	0e 94 2b 1c 	call	0x3856	; 0x3856 <send_cmd>
    3a3e:	81 30       	cpi	r24, 0x01	; 1
    3a40:	d1 f5       	brne	.+116    	; 0x3ab6 <disk_initialize+0xd2>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    3a42:	64 e0       	ldi	r22, 0x04	; 4
    3a44:	70 e0       	ldi	r23, 0x00	; 0
    3a46:	ce 01       	movw	r24, r28
    3a48:	01 96       	adiw	r24, 0x01	; 1
    3a4a:	0e 94 76 1b 	call	0x36ec	; 0x36ec <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    3a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a50:	81 30       	cpi	r24, 0x01	; 1
    3a52:	09 f0       	breq	.+2      	; 0x3a56 <disk_initialize+0x72>
    3a54:	66 c0       	rjmp	.+204    	; 0x3b22 <disk_initialize+0x13e>
    3a56:	8c 81       	ldd	r24, Y+4	; 0x04
    3a58:	8a 3a       	cpi	r24, 0xAA	; 170
    3a5a:	09 f0       	breq	.+2      	; 0x3a5e <disk_initialize+0x7a>
    3a5c:	64 c0       	rjmp	.+200    	; 0x3b26 <disk_initialize+0x142>
    3a5e:	08 ee       	ldi	r16, 0xE8	; 232
    3a60:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    3a62:	40 e0       	ldi	r20, 0x00	; 0
    3a64:	50 e0       	ldi	r21, 0x00	; 0
    3a66:	60 e0       	ldi	r22, 0x00	; 0
    3a68:	70 e4       	ldi	r23, 0x40	; 64
    3a6a:	89 ea       	ldi	r24, 0xA9	; 169
    3a6c:	0e 94 2b 1c 	call	0x3856	; 0x3856 <send_cmd>
    3a70:	88 23       	and	r24, r24
    3a72:	49 f0       	breq	.+18     	; 0x3a86 <disk_initialize+0xa2>
					dly_us(1000);
    3a74:	88 ee       	ldi	r24, 0xE8	; 232
    3a76:	93 e0       	ldi	r25, 0x03	; 3
    3a78:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <dly_us>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    3a7c:	01 50       	subi	r16, 0x01	; 1
    3a7e:	11 09       	sbc	r17, r1
    3a80:	81 f7       	brne	.-32     	; 0x3a62 <disk_initialize+0x7e>
	//DO_INIT();				/* Initialize port pin tied to DO */
	SPI_MasterInit();
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	ty = 0;
    3a82:	f1 2c       	mov	r15, r1
    3a84:	5c c0       	rjmp	.+184    	; 0x3b3e <disk_initialize+0x15a>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    3a86:	01 2b       	or	r16, r17
    3a88:	09 f4       	brne	.+2      	; 0x3a8c <disk_initialize+0xa8>
    3a8a:	4f c0       	rjmp	.+158    	; 0x3b2a <disk_initialize+0x146>
    3a8c:	40 e0       	ldi	r20, 0x00	; 0
    3a8e:	50 e0       	ldi	r21, 0x00	; 0
    3a90:	ba 01       	movw	r22, r20
    3a92:	8a e3       	ldi	r24, 0x3A	; 58
    3a94:	0e 94 2b 1c 	call	0x3856	; 0x3856 <send_cmd>
    3a98:	81 11       	cpse	r24, r1
    3a9a:	49 c0       	rjmp	.+146    	; 0x3b2e <disk_initialize+0x14a>
					rcvr_mmc(buf, 4);
    3a9c:	64 e0       	ldi	r22, 0x04	; 4
    3a9e:	70 e0       	ldi	r23, 0x00	; 0
    3aa0:	ce 01       	movw	r24, r28
    3aa2:	01 96       	adiw	r24, 0x01	; 1
    3aa4:	0e 94 76 1b 	call	0x36ec	; 0x36ec <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    3aa8:	89 81       	ldd	r24, Y+1	; 0x01
    3aaa:	86 fd       	sbrc	r24, 6
    3aac:	42 c0       	rjmp	.+132    	; 0x3b32 <disk_initialize+0x14e>
    3aae:	68 94       	set
    3ab0:	ff 24       	eor	r15, r15
    3ab2:	f2 f8       	bld	r15, 2
    3ab4:	44 c0       	rjmp	.+136    	; 0x3b3e <disk_initialize+0x15a>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    3ab6:	40 e0       	ldi	r20, 0x00	; 0
    3ab8:	50 e0       	ldi	r21, 0x00	; 0
    3aba:	ba 01       	movw	r22, r20
    3abc:	89 ea       	ldi	r24, 0xA9	; 169
    3abe:	0e 94 2b 1c 	call	0x3856	; 0x3856 <send_cmd>
    3ac2:	82 30       	cpi	r24, 0x02	; 2
    3ac4:	28 f0       	brcs	.+10     	; 0x3ad0 <disk_initialize+0xec>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    3ac6:	ee 24       	eor	r14, r14
    3ac8:	e3 94       	inc	r14
    3aca:	ff 24       	eor	r15, r15
    3acc:	f3 94       	inc	r15
    3ace:	07 c0       	rjmp	.+14     	; 0x3ade <disk_initialize+0xfa>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    3ad0:	0f 2e       	mov	r0, r31
    3ad2:	f9 ea       	ldi	r31, 0xA9	; 169
    3ad4:	ef 2e       	mov	r14, r31
    3ad6:	f0 2d       	mov	r31, r0
    3ad8:	68 94       	set
    3ada:	ff 24       	eor	r15, r15
    3adc:	f1 f8       	bld	r15, 1
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    3ade:	08 ee       	ldi	r16, 0xE8	; 232
    3ae0:	13 e0       	ldi	r17, 0x03	; 3
				if (send_cmd(cmd, 0) == 0) break;
    3ae2:	40 e0       	ldi	r20, 0x00	; 0
    3ae4:	50 e0       	ldi	r21, 0x00	; 0
    3ae6:	ba 01       	movw	r22, r20
    3ae8:	8e 2d       	mov	r24, r14
    3aea:	0e 94 2b 1c 	call	0x3856	; 0x3856 <send_cmd>
    3aee:	88 23       	and	r24, r24
    3af0:	49 f0       	breq	.+18     	; 0x3b04 <disk_initialize+0x120>
				dly_us(1000);
    3af2:	88 ee       	ldi	r24, 0xE8	; 232
    3af4:	93 e0       	ldi	r25, 0x03	; 3
    3af6:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <dly_us>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    3afa:	01 50       	subi	r16, 0x01	; 1
    3afc:	11 09       	sbc	r17, r1
    3afe:	89 f7       	brne	.-30     	; 0x3ae2 <disk_initialize+0xfe>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    3b00:	f1 2c       	mov	r15, r1
    3b02:	1d c0       	rjmp	.+58     	; 0x3b3e <disk_initialize+0x15a>
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    3b04:	01 2b       	or	r16, r17
    3b06:	d1 f0       	breq	.+52     	; 0x3b3c <disk_initialize+0x158>
    3b08:	40 e0       	ldi	r20, 0x00	; 0
    3b0a:	52 e0       	ldi	r21, 0x02	; 2
    3b0c:	60 e0       	ldi	r22, 0x00	; 0
    3b0e:	70 e0       	ldi	r23, 0x00	; 0
    3b10:	80 e1       	ldi	r24, 0x10	; 16
    3b12:	0e 94 2b 1c 	call	0x3856	; 0x3856 <send_cmd>
    3b16:	88 23       	and	r24, r24
    3b18:	91 f0       	breq	.+36     	; 0x3b3e <disk_initialize+0x15a>
				ty = 0;
    3b1a:	f1 2c       	mov	r15, r1
    3b1c:	10 c0       	rjmp	.+32     	; 0x3b3e <disk_initialize+0x15a>
	//DO_INIT();				/* Initialize port pin tied to DO */
	SPI_MasterInit();
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
			//DDRB |= (1<<5);
			//PORTB |= (1<<5);
	ty = 0;
    3b1e:	f1 2c       	mov	r15, r1
    3b20:	0e c0       	rjmp	.+28     	; 0x3b3e <disk_initialize+0x15a>
    3b22:	f1 2c       	mov	r15, r1
    3b24:	0c c0       	rjmp	.+24     	; 0x3b3e <disk_initialize+0x15a>
    3b26:	f1 2c       	mov	r15, r1
    3b28:	0a c0       	rjmp	.+20     	; 0x3b3e <disk_initialize+0x15a>
    3b2a:	f1 2c       	mov	r15, r1
    3b2c:	08 c0       	rjmp	.+16     	; 0x3b3e <disk_initialize+0x15a>
    3b2e:	f1 2c       	mov	r15, r1
    3b30:	06 c0       	rjmp	.+12     	; 0x3b3e <disk_initialize+0x15a>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
					rcvr_mmc(buf, 4);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    3b32:	0f 2e       	mov	r0, r31
    3b34:	fc e0       	ldi	r31, 0x0C	; 12
    3b36:	ff 2e       	mov	r15, r31
    3b38:	f0 2d       	mov	r31, r0
    3b3a:	01 c0       	rjmp	.+2      	; 0x3b3e <disk_initialize+0x15a>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    3b3c:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
    3b3e:	f0 92 d6 01 	sts	0x01D6, r15	; 0x8001d6 <CardType>
	s = ty ? 0 : STA_NOINIT;
    3b42:	11 e0       	ldi	r17, 0x01	; 1
    3b44:	f1 10       	cpse	r15, r1
    3b46:	10 e0       	ldi	r17, 0x00	; 0
	Stat = s;
    3b48:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <__DATA_REGION_ORIGIN__>

	deselect();
    3b4c:	0e 94 ae 1b 	call	0x375c	; 0x375c <deselect>

	return s;
    3b50:	81 2f       	mov	r24, r17
    3b52:	01 c0       	rjmp	.+2      	; 0x3b56 <disk_initialize+0x172>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    3b54:	83 e0       	ldi	r24, 0x03	; 3
	Stat = s;

	deselect();

	return s;
}
    3b56:	0f 90       	pop	r0
    3b58:	0f 90       	pop	r0
    3b5a:	0f 90       	pop	r0
    3b5c:	0f 90       	pop	r0
    3b5e:	df 91       	pop	r29
    3b60:	cf 91       	pop	r28
    3b62:	1f 91       	pop	r17
    3b64:	0f 91       	pop	r16
    3b66:	ff 90       	pop	r15
    3b68:	ef 90       	pop	r14
    3b6a:	08 95       	ret

00003b6c <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3b6c:	ff 92       	push	r15
    3b6e:	0f 93       	push	r16
    3b70:	1f 93       	push	r17
    3b72:	cf 93       	push	r28
    3b74:	df 93       	push	r29
    3b76:	eb 01       	movw	r28, r22

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    3b78:	81 11       	cpse	r24, r1
    3b7a:	3f c0       	rjmp	.+126    	; 0x3bfa <disk_read+0x8e>
{
	BYTE cmd;
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3b7c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3b80:	80 fd       	sbrc	r24, 0
    3b82:	3d c0       	rjmp	.+122    	; 0x3bfe <disk_read+0x92>
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    3b84:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <CardType>
    3b88:	83 fd       	sbrc	r24, 3
    3b8a:	09 c0       	rjmp	.+18     	; 0x3b9e <disk_read+0x32>
    3b8c:	01 2e       	mov	r0, r17
    3b8e:	19 e0       	ldi	r17, 0x09	; 9
    3b90:	22 0f       	add	r18, r18
    3b92:	33 1f       	adc	r19, r19
    3b94:	44 1f       	adc	r20, r20
    3b96:	55 1f       	adc	r21, r21
    3b98:	1a 95       	dec	r17
    3b9a:	d1 f7       	brne	.-12     	; 0x3b90 <disk_read+0x24>
    3b9c:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    3b9e:	02 30       	cpi	r16, 0x02	; 2
    3ba0:	11 05       	cpc	r17, r1
    3ba2:	28 f4       	brcc	.+10     	; 0x3bae <disk_read+0x42>
    3ba4:	0f 2e       	mov	r0, r31
    3ba6:	f1 e1       	ldi	r31, 0x11	; 17
    3ba8:	ff 2e       	mov	r15, r31
    3baa:	f0 2d       	mov	r31, r0
    3bac:	04 c0       	rjmp	.+8      	; 0x3bb6 <disk_read+0x4a>
    3bae:	0f 2e       	mov	r0, r31
    3bb0:	f2 e1       	ldi	r31, 0x12	; 18
    3bb2:	ff 2e       	mov	r15, r31
    3bb4:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sect) == 0) {
    3bb6:	ba 01       	movw	r22, r20
    3bb8:	a9 01       	movw	r20, r18
    3bba:	8f 2d       	mov	r24, r15
    3bbc:	0e 94 2b 1c 	call	0x3856	; 0x3856 <send_cmd>
    3bc0:	81 11       	cpse	r24, r1
    3bc2:	14 c0       	rjmp	.+40     	; 0x3bec <disk_read+0x80>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    3bc4:	60 e0       	ldi	r22, 0x00	; 0
    3bc6:	72 e0       	ldi	r23, 0x02	; 2
    3bc8:	ce 01       	movw	r24, r28
    3bca:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <rcvr_datablock>
    3bce:	89 2b       	or	r24, r25
    3bd0:	21 f0       	breq	.+8      	; 0x3bda <disk_read+0x6e>
			buff += 512;
    3bd2:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    3bd4:	01 50       	subi	r16, 0x01	; 1
    3bd6:	11 09       	sbc	r17, r1
    3bd8:	a9 f7       	brne	.-22     	; 0x3bc4 <disk_read+0x58>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    3bda:	82 e1       	ldi	r24, 0x12	; 18
    3bdc:	f8 12       	cpse	r15, r24
    3bde:	06 c0       	rjmp	.+12     	; 0x3bec <disk_read+0x80>
    3be0:	40 e0       	ldi	r20, 0x00	; 0
    3be2:	50 e0       	ldi	r21, 0x00	; 0
    3be4:	ba 01       	movw	r22, r20
    3be6:	8c e0       	ldi	r24, 0x0C	; 12
    3be8:	0e 94 2b 1c 	call	0x3856	; 0x3856 <send_cmd>
	}
	deselect();
    3bec:	0e 94 ae 1b 	call	0x375c	; 0x375c <deselect>

	return count ? RES_ERROR : RES_OK;
    3bf0:	81 e0       	ldi	r24, 0x01	; 1
    3bf2:	01 2b       	or	r16, r17
    3bf4:	29 f4       	brne	.+10     	; 0x3c00 <disk_read+0x94>
    3bf6:	80 e0       	ldi	r24, 0x00	; 0
    3bf8:	03 c0       	rjmp	.+6      	; 0x3c00 <disk_read+0x94>
{
	BYTE cmd;
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3bfa:	83 e0       	ldi	r24, 0x03	; 3
    3bfc:	01 c0       	rjmp	.+2      	; 0x3c00 <disk_read+0x94>
    3bfe:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    3c00:	df 91       	pop	r29
    3c02:	cf 91       	pop	r28
    3c04:	1f 91       	pop	r17
    3c06:	0f 91       	pop	r16
    3c08:	ff 90       	pop	r15
    3c0a:	08 95       	ret

00003c0c <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3c0c:	cf 92       	push	r12
    3c0e:	df 92       	push	r13
    3c10:	ef 92       	push	r14
    3c12:	ff 92       	push	r15
    3c14:	0f 93       	push	r16
    3c16:	1f 93       	push	r17
    3c18:	cf 93       	push	r28
    3c1a:	df 93       	push	r29
    3c1c:	eb 01       	movw	r28, r22
    3c1e:	69 01       	movw	r12, r18
    3c20:	7a 01       	movw	r14, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    3c22:	81 11       	cpse	r24, r1
    3c24:	50 c0       	rjmp	.+160    	; 0x3cc6 <disk_write+0xba>
)
{
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3c26:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3c2a:	80 fd       	sbrc	r24, 0
    3c2c:	4e c0       	rjmp	.+156    	; 0x3cca <disk_write+0xbe>
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    3c2e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <CardType>
    3c32:	83 fd       	sbrc	r24, 3
    3c34:	09 c0       	rjmp	.+18     	; 0x3c48 <disk_write+0x3c>
    3c36:	0b 2e       	mov	r0, r27
    3c38:	b9 e0       	ldi	r27, 0x09	; 9
    3c3a:	cc 0c       	add	r12, r12
    3c3c:	dd 1c       	adc	r13, r13
    3c3e:	ee 1c       	adc	r14, r14
    3c40:	ff 1c       	adc	r15, r15
    3c42:	ba 95       	dec	r27
    3c44:	d1 f7       	brne	.-12     	; 0x3c3a <disk_write+0x2e>
    3c46:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    3c48:	01 30       	cpi	r16, 0x01	; 1
    3c4a:	11 05       	cpc	r17, r1
    3c4c:	99 f4       	brne	.+38     	; 0x3c74 <disk_write+0x68>
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
    3c4e:	b7 01       	movw	r22, r14
    3c50:	a6 01       	movw	r20, r12
    3c52:	88 e1       	ldi	r24, 0x18	; 24
    3c54:	0e 94 2b 1c 	call	0x3856	; 0x3856 <send_cmd>
    3c58:	81 11       	cpse	r24, r1
    3c5a:	2e c0       	rjmp	.+92     	; 0x3cb8 <disk_write+0xac>
			&& xmit_datablock(buff, 0xFE))
    3c5c:	6e ef       	ldi	r22, 0xFE	; 254
    3c5e:	ce 01       	movw	r24, r28
    3c60:	0e 94 af 1c 	call	0x395e	; 0x395e <xmit_datablock>
    3c64:	31 e0       	ldi	r19, 0x01	; 1
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	89 2b       	or	r24, r25
    3c6a:	09 f0       	breq	.+2      	; 0x3c6e <disk_write+0x62>
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	03 2f       	mov	r16, r19
    3c70:	12 2f       	mov	r17, r18
    3c72:	22 c0       	rjmp	.+68     	; 0x3cb8 <disk_write+0xac>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    3c74:	86 70       	andi	r24, 0x06	; 6
    3c76:	31 f0       	breq	.+12     	; 0x3c84 <disk_write+0x78>
    3c78:	a8 01       	movw	r20, r16
    3c7a:	60 e0       	ldi	r22, 0x00	; 0
    3c7c:	70 e0       	ldi	r23, 0x00	; 0
    3c7e:	87 e9       	ldi	r24, 0x97	; 151
    3c80:	0e 94 2b 1c 	call	0x3856	; 0x3856 <send_cmd>
		if (send_cmd(CMD25, sect) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    3c84:	b7 01       	movw	r22, r14
    3c86:	a6 01       	movw	r20, r12
    3c88:	89 e1       	ldi	r24, 0x19	; 25
    3c8a:	0e 94 2b 1c 	call	0x3856	; 0x3856 <send_cmd>
    3c8e:	81 11       	cpse	r24, r1
    3c90:	13 c0       	rjmp	.+38     	; 0x3cb8 <disk_write+0xac>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    3c92:	6c ef       	ldi	r22, 0xFC	; 252
    3c94:	ce 01       	movw	r24, r28
    3c96:	0e 94 af 1c 	call	0x395e	; 0x395e <xmit_datablock>
    3c9a:	89 2b       	or	r24, r25
    3c9c:	21 f0       	breq	.+8      	; 0x3ca6 <disk_write+0x9a>
				buff += 512;
    3c9e:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    3ca0:	01 50       	subi	r16, 0x01	; 1
    3ca2:	11 09       	sbc	r17, r1
    3ca4:	b1 f7       	brne	.-20     	; 0x3c92 <disk_write+0x86>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    3ca6:	6d ef       	ldi	r22, 0xFD	; 253
    3ca8:	80 e0       	ldi	r24, 0x00	; 0
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	0e 94 af 1c 	call	0x395e	; 0x395e <xmit_datablock>
    3cb0:	89 2b       	or	r24, r25
    3cb2:	11 f4       	brne	.+4      	; 0x3cb8 <disk_write+0xac>
				count = 1;
    3cb4:	01 e0       	ldi	r16, 0x01	; 1
    3cb6:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    3cb8:	0e 94 ae 1b 	call	0x375c	; 0x375c <deselect>

	return count ? RES_ERROR : RES_OK;
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	01 2b       	or	r16, r17
    3cc0:	29 f4       	brne	.+10     	; 0x3ccc <disk_write+0xc0>
    3cc2:	80 e0       	ldi	r24, 0x00	; 0
    3cc4:	03 c0       	rjmp	.+6      	; 0x3ccc <disk_write+0xc0>
)
{
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3cc6:	83 e0       	ldi	r24, 0x03	; 3
    3cc8:	01 c0       	rjmp	.+2      	; 0x3ccc <disk_write+0xc0>
    3cca:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    3ccc:	df 91       	pop	r29
    3cce:	cf 91       	pop	r28
    3cd0:	1f 91       	pop	r17
    3cd2:	0f 91       	pop	r16
    3cd4:	ff 90       	pop	r15
    3cd6:	ef 90       	pop	r14
    3cd8:	df 90       	pop	r13
    3cda:	cf 90       	pop	r12
    3cdc:	08 95       	ret

00003cde <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    3cde:	0f 93       	push	r16
    3ce0:	1f 93       	push	r17
    3ce2:	cf 93       	push	r28
    3ce4:	df 93       	push	r29
    3ce6:	cd b7       	in	r28, 0x3d	; 61
    3ce8:	de b7       	in	r29, 0x3e	; 62
    3cea:	60 97       	sbiw	r28, 0x10	; 16
    3cec:	0f b6       	in	r0, 0x3f	; 63
    3cee:	f8 94       	cli
    3cf0:	de bf       	out	0x3e, r29	; 62
    3cf2:	0f be       	out	0x3f, r0	; 63
    3cf4:	cd bf       	out	0x3d, r28	; 61

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    3cf6:	81 11       	cpse	r24, r1
    3cf8:	9c c0       	rjmp	.+312    	; 0x3e32 <disk_ioctl+0x154>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    3cfa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3cfe:	80 fd       	sbrc	r24, 0
    3d00:	9a c0       	rjmp	.+308    	; 0x3e36 <disk_ioctl+0x158>
    3d02:	8a 01       	movw	r16, r20

	res = RES_ERROR;
	switch (ctrl) {
    3d04:	61 30       	cpi	r22, 0x01	; 1
    3d06:	69 f0       	breq	.+26     	; 0x3d22 <disk_ioctl+0x44>
    3d08:	20 f0       	brcs	.+8      	; 0x3d12 <disk_ioctl+0x34>
    3d0a:	63 30       	cpi	r22, 0x03	; 3
    3d0c:	09 f4       	brne	.+2      	; 0x3d10 <disk_ioctl+0x32>
    3d0e:	7d c0       	rjmp	.+250    	; 0x3e0a <disk_ioctl+0x12c>
    3d10:	87 c0       	rjmp	.+270    	; 0x3e20 <disk_ioctl+0x142>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
    3d12:	0e 94 be 1b 	call	0x377c	; 0x377c <select>
    3d16:	11 e0       	ldi	r17, 0x01	; 1
    3d18:	89 2b       	or	r24, r25
    3d1a:	09 f4       	brne	.+2      	; 0x3d1e <disk_ioctl+0x40>
    3d1c:	86 c0       	rjmp	.+268    	; 0x3e2a <disk_ioctl+0x14c>
    3d1e:	10 e0       	ldi	r17, 0x00	; 0
    3d20:	84 c0       	rjmp	.+264    	; 0x3e2a <disk_ioctl+0x14c>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    3d22:	40 e0       	ldi	r20, 0x00	; 0
    3d24:	50 e0       	ldi	r21, 0x00	; 0
    3d26:	ba 01       	movw	r22, r20
    3d28:	89 e0       	ldi	r24, 0x09	; 9
    3d2a:	0e 94 2b 1c 	call	0x3856	; 0x3856 <send_cmd>
    3d2e:	81 11       	cpse	r24, r1
    3d30:	79 c0       	rjmp	.+242    	; 0x3e24 <disk_ioctl+0x146>
    3d32:	60 e1       	ldi	r22, 0x10	; 16
    3d34:	70 e0       	ldi	r23, 0x00	; 0
    3d36:	ce 01       	movw	r24, r28
    3d38:	01 96       	adiw	r24, 0x01	; 1
    3d3a:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <rcvr_datablock>
    3d3e:	89 2b       	or	r24, r25
    3d40:	09 f4       	brne	.+2      	; 0x3d44 <disk_ioctl+0x66>
    3d42:	72 c0       	rjmp	.+228    	; 0x3e28 <disk_ioctl+0x14a>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	82 95       	swap	r24
    3d48:	86 95       	lsr	r24
    3d4a:	86 95       	lsr	r24
    3d4c:	83 70       	andi	r24, 0x03	; 3
    3d4e:	81 30       	cpi	r24, 0x01	; 1
    3d50:	31 f5       	brne	.+76     	; 0x3d9e <disk_ioctl+0xc0>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(LBA_t*)buff = cs << 10;
    3d52:	29 85       	ldd	r18, Y+9	; 0x09
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	32 2f       	mov	r19, r18
    3d58:	22 27       	eor	r18, r18
    3d5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d5c:	28 0f       	add	r18, r24
    3d5e:	31 1d       	adc	r19, r1
    3d60:	88 85       	ldd	r24, Y+8	; 0x08
    3d62:	8f 73       	andi	r24, 0x3F	; 63
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	a0 e0       	ldi	r26, 0x00	; 0
    3d68:	b0 e0       	ldi	r27, 0x00	; 0
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	99 27       	eor	r25, r25
    3d6e:	88 27       	eor	r24, r24
    3d70:	01 96       	adiw	r24, 0x01	; 1
    3d72:	a1 1d       	adc	r26, r1
    3d74:	b1 1d       	adc	r27, r1
    3d76:	82 0f       	add	r24, r18
    3d78:	93 1f       	adc	r25, r19
    3d7a:	a1 1d       	adc	r26, r1
    3d7c:	b1 1d       	adc	r27, r1
    3d7e:	07 2e       	mov	r0, r23
    3d80:	7a e0       	ldi	r23, 0x0A	; 10
    3d82:	88 0f       	add	r24, r24
    3d84:	99 1f       	adc	r25, r25
    3d86:	aa 1f       	adc	r26, r26
    3d88:	bb 1f       	adc	r27, r27
    3d8a:	7a 95       	dec	r23
    3d8c:	d1 f7       	brne	.-12     	; 0x3d82 <disk_ioctl+0xa4>
    3d8e:	70 2d       	mov	r23, r0
    3d90:	f8 01       	movw	r30, r16
    3d92:	80 83       	st	Z, r24
    3d94:	91 83       	std	Z+1, r25	; 0x01
    3d96:	a2 83       	std	Z+2, r26	; 0x02
    3d98:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(LBA_t*)buff = cs << (n - 9);
				}
				res = RES_OK;
    3d9a:	10 e0       	ldi	r17, 0x00	; 0
    3d9c:	46 c0       	rjmp	.+140    	; 0x3e2a <disk_ioctl+0x14c>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(LBA_t*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(LBA_t*)buff = cs << (n - 9);
    3d9e:	89 85       	ldd	r24, Y+9	; 0x09
    3da0:	82 95       	swap	r24
    3da2:	86 95       	lsr	r24
    3da4:	86 95       	lsr	r24
    3da6:	83 70       	andi	r24, 0x03	; 3
    3da8:	28 85       	ldd	r18, Y+8	; 0x08
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	f4 e0       	ldi	r31, 0x04	; 4
    3dae:	2f 9f       	mul	r18, r31
    3db0:	80 0d       	add	r24, r0
    3db2:	91 1d       	adc	r25, r1
    3db4:	11 24       	eor	r1, r1
    3db6:	9c 01       	movw	r18, r24
    3db8:	2f 5f       	subi	r18, 0xFF	; 255
    3dba:	3f 4f       	sbci	r19, 0xFF	; 255
    3dbc:	9f 81       	ldd	r25, Y+7	; 0x07
    3dbe:	93 70       	andi	r25, 0x03	; 3
    3dc0:	89 2f       	mov	r24, r25
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	98 2f       	mov	r25, r24
    3dc6:	88 27       	eor	r24, r24
    3dc8:	99 0f       	add	r25, r25
    3dca:	99 0f       	add	r25, r25
    3dcc:	82 0f       	add	r24, r18
    3dce:	93 1f       	adc	r25, r19
    3dd0:	a0 e0       	ldi	r26, 0x00	; 0
    3dd2:	b0 e0       	ldi	r27, 0x00	; 0
    3dd4:	2e 81       	ldd	r18, Y+6	; 0x06
    3dd6:	32 2f       	mov	r19, r18
    3dd8:	3f 70       	andi	r19, 0x0F	; 15
    3dda:	2b 85       	ldd	r18, Y+11	; 0x0b
    3ddc:	22 1f       	adc	r18, r18
    3dde:	22 27       	eor	r18, r18
    3de0:	22 1f       	adc	r18, r18
    3de2:	23 0f       	add	r18, r19
    3de4:	3a 85       	ldd	r19, Y+10	; 0x0a
    3de6:	33 70       	andi	r19, 0x03	; 3
    3de8:	33 0f       	add	r19, r19
    3dea:	23 0f       	add	r18, r19
    3dec:	27 50       	subi	r18, 0x07	; 7
    3dee:	04 c0       	rjmp	.+8      	; 0x3df8 <disk_ioctl+0x11a>
    3df0:	88 0f       	add	r24, r24
    3df2:	99 1f       	adc	r25, r25
    3df4:	aa 1f       	adc	r26, r26
    3df6:	bb 1f       	adc	r27, r27
    3df8:	2a 95       	dec	r18
    3dfa:	d2 f7       	brpl	.-12     	; 0x3df0 <disk_ioctl+0x112>
    3dfc:	f8 01       	movw	r30, r16
    3dfe:	80 83       	st	Z, r24
    3e00:	91 83       	std	Z+1, r25	; 0x01
    3e02:	a2 83       	std	Z+2, r26	; 0x02
    3e04:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    3e06:	10 e0       	ldi	r17, 0x00	; 0
    3e08:	10 c0       	rjmp	.+32     	; 0x3e2a <disk_ioctl+0x14c>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
    3e0a:	80 e8       	ldi	r24, 0x80	; 128
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	a0 e0       	ldi	r26, 0x00	; 0
    3e10:	b0 e0       	ldi	r27, 0x00	; 0
    3e12:	fa 01       	movw	r30, r20
    3e14:	80 83       	st	Z, r24
    3e16:	91 83       	std	Z+1, r25	; 0x01
    3e18:	a2 83       	std	Z+2, r26	; 0x02
    3e1a:	b3 83       	std	Z+3, r27	; 0x03
			res = RES_OK;
    3e1c:	10 e0       	ldi	r17, 0x00	; 0
			break;
    3e1e:	05 c0       	rjmp	.+10     	; 0x3e2a <disk_ioctl+0x14c>

		default:
			res = RES_PARERR;
    3e20:	14 e0       	ldi	r17, 0x04	; 4
    3e22:	03 c0       	rjmp	.+6      	; 0x3e2a <disk_ioctl+0x14c>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
    3e24:	11 e0       	ldi	r17, 0x01	; 1
    3e26:	01 c0       	rjmp	.+2      	; 0x3e2a <disk_ioctl+0x14c>
    3e28:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
	}

	deselect();
    3e2a:	0e 94 ae 1b 	call	0x375c	; 0x375c <deselect>

	return res;
    3e2e:	81 2f       	mov	r24, r17
    3e30:	03 c0       	rjmp	.+6      	; 0x3e38 <disk_ioctl+0x15a>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    3e32:	83 e0       	ldi	r24, 0x03	; 3
    3e34:	01 c0       	rjmp	.+2      	; 0x3e38 <disk_ioctl+0x15a>
    3e36:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    3e38:	60 96       	adiw	r28, 0x10	; 16
    3e3a:	0f b6       	in	r0, 0x3f	; 63
    3e3c:	f8 94       	cli
    3e3e:	de bf       	out	0x3e, r29	; 62
    3e40:	0f be       	out	0x3f, r0	; 63
    3e42:	cd bf       	out	0x3d, r28	; 61
    3e44:	df 91       	pop	r29
    3e46:	cf 91       	pop	r28
    3e48:	1f 91       	pop	r17
    3e4a:	0f 91       	pop	r16
    3e4c:	08 95       	ret

00003e4e <__udivmodsi4>:
    3e4e:	a1 e2       	ldi	r26, 0x21	; 33
    3e50:	1a 2e       	mov	r1, r26
    3e52:	aa 1b       	sub	r26, r26
    3e54:	bb 1b       	sub	r27, r27
    3e56:	fd 01       	movw	r30, r26
    3e58:	0d c0       	rjmp	.+26     	; 0x3e74 <__udivmodsi4_ep>

00003e5a <__udivmodsi4_loop>:
    3e5a:	aa 1f       	adc	r26, r26
    3e5c:	bb 1f       	adc	r27, r27
    3e5e:	ee 1f       	adc	r30, r30
    3e60:	ff 1f       	adc	r31, r31
    3e62:	a2 17       	cp	r26, r18
    3e64:	b3 07       	cpc	r27, r19
    3e66:	e4 07       	cpc	r30, r20
    3e68:	f5 07       	cpc	r31, r21
    3e6a:	20 f0       	brcs	.+8      	; 0x3e74 <__udivmodsi4_ep>
    3e6c:	a2 1b       	sub	r26, r18
    3e6e:	b3 0b       	sbc	r27, r19
    3e70:	e4 0b       	sbc	r30, r20
    3e72:	f5 0b       	sbc	r31, r21

00003e74 <__udivmodsi4_ep>:
    3e74:	66 1f       	adc	r22, r22
    3e76:	77 1f       	adc	r23, r23
    3e78:	88 1f       	adc	r24, r24
    3e7a:	99 1f       	adc	r25, r25
    3e7c:	1a 94       	dec	r1
    3e7e:	69 f7       	brne	.-38     	; 0x3e5a <__udivmodsi4_loop>
    3e80:	60 95       	com	r22
    3e82:	70 95       	com	r23
    3e84:	80 95       	com	r24
    3e86:	90 95       	com	r25
    3e88:	9b 01       	movw	r18, r22
    3e8a:	ac 01       	movw	r20, r24
    3e8c:	bd 01       	movw	r22, r26
    3e8e:	cf 01       	movw	r24, r30
    3e90:	08 95       	ret

00003e92 <__umulhisi3>:
    3e92:	a2 9f       	mul	r26, r18
    3e94:	b0 01       	movw	r22, r0
    3e96:	b3 9f       	mul	r27, r19
    3e98:	c0 01       	movw	r24, r0
    3e9a:	a3 9f       	mul	r26, r19
    3e9c:	70 0d       	add	r23, r0
    3e9e:	81 1d       	adc	r24, r1
    3ea0:	11 24       	eor	r1, r1
    3ea2:	91 1d       	adc	r25, r1
    3ea4:	b2 9f       	mul	r27, r18
    3ea6:	70 0d       	add	r23, r0
    3ea8:	81 1d       	adc	r24, r1
    3eaa:	11 24       	eor	r1, r1
    3eac:	91 1d       	adc	r25, r1
    3eae:	08 95       	ret

00003eb0 <__muluhisi3>:
    3eb0:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <__umulhisi3>
    3eb4:	a5 9f       	mul	r26, r21
    3eb6:	90 0d       	add	r25, r0
    3eb8:	b4 9f       	mul	r27, r20
    3eba:	90 0d       	add	r25, r0
    3ebc:	a4 9f       	mul	r26, r20
    3ebe:	80 0d       	add	r24, r0
    3ec0:	91 1d       	adc	r25, r1
    3ec2:	11 24       	eor	r1, r1
    3ec4:	08 95       	ret

00003ec6 <strcpy>:
    3ec6:	fb 01       	movw	r30, r22
    3ec8:	dc 01       	movw	r26, r24
    3eca:	01 90       	ld	r0, Z+
    3ecc:	0d 92       	st	X+, r0
    3ece:	00 20       	and	r0, r0
    3ed0:	e1 f7       	brne	.-8      	; 0x3eca <strcpy+0x4>
    3ed2:	08 95       	ret

00003ed4 <__itoa_ncheck>:
    3ed4:	bb 27       	eor	r27, r27
    3ed6:	4a 30       	cpi	r20, 0x0A	; 10
    3ed8:	31 f4       	brne	.+12     	; 0x3ee6 <__itoa_ncheck+0x12>
    3eda:	99 23       	and	r25, r25
    3edc:	22 f4       	brpl	.+8      	; 0x3ee6 <__itoa_ncheck+0x12>
    3ede:	bd e2       	ldi	r27, 0x2D	; 45
    3ee0:	90 95       	com	r25
    3ee2:	81 95       	neg	r24
    3ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee6:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <__utoa_common>

00003eea <__utoa_ncheck>:
    3eea:	bb 27       	eor	r27, r27

00003eec <__utoa_common>:
    3eec:	fb 01       	movw	r30, r22
    3eee:	55 27       	eor	r21, r21
    3ef0:	aa 27       	eor	r26, r26
    3ef2:	88 0f       	add	r24, r24
    3ef4:	99 1f       	adc	r25, r25
    3ef6:	aa 1f       	adc	r26, r26
    3ef8:	a4 17       	cp	r26, r20
    3efa:	10 f0       	brcs	.+4      	; 0x3f00 <__utoa_common+0x14>
    3efc:	a4 1b       	sub	r26, r20
    3efe:	83 95       	inc	r24
    3f00:	50 51       	subi	r21, 0x10	; 16
    3f02:	b9 f7       	brne	.-18     	; 0x3ef2 <__utoa_common+0x6>
    3f04:	a0 5d       	subi	r26, 0xD0	; 208
    3f06:	aa 33       	cpi	r26, 0x3A	; 58
    3f08:	08 f0       	brcs	.+2      	; 0x3f0c <__utoa_common+0x20>
    3f0a:	a9 5d       	subi	r26, 0xD9	; 217
    3f0c:	a1 93       	st	Z+, r26
    3f0e:	00 97       	sbiw	r24, 0x00	; 0
    3f10:	79 f7       	brne	.-34     	; 0x3ef0 <__utoa_common+0x4>
    3f12:	b1 11       	cpse	r27, r1
    3f14:	b1 93       	st	Z+, r27
    3f16:	11 92       	st	Z+, r1
    3f18:	cb 01       	movw	r24, r22
    3f1a:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <strrev>

00003f1e <strrev>:
    3f1e:	dc 01       	movw	r26, r24
    3f20:	fc 01       	movw	r30, r24
    3f22:	67 2f       	mov	r22, r23
    3f24:	71 91       	ld	r23, Z+
    3f26:	77 23       	and	r23, r23
    3f28:	e1 f7       	brne	.-8      	; 0x3f22 <strrev+0x4>
    3f2a:	32 97       	sbiw	r30, 0x02	; 2
    3f2c:	04 c0       	rjmp	.+8      	; 0x3f36 <strrev+0x18>
    3f2e:	7c 91       	ld	r23, X
    3f30:	6d 93       	st	X+, r22
    3f32:	70 83       	st	Z, r23
    3f34:	62 91       	ld	r22, -Z
    3f36:	ae 17       	cp	r26, r30
    3f38:	bf 07       	cpc	r27, r31
    3f3a:	c8 f3       	brcs	.-14     	; 0x3f2e <strrev+0x10>
    3f3c:	08 95       	ret

00003f3e <_exit>:
    3f3e:	f8 94       	cli

00003f40 <__stop_program>:
    3f40:	ff cf       	rjmp	.-2      	; 0x3f40 <__stop_program>
